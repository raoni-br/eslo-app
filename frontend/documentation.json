{
    "pipes": [
        {
            "name": "CheckEventsControlsPipe",
            "id": "pipe-CheckEventsControlsPipe-adf5565dd9f5abdede41464edf86b5af",
            "file": "src/app/classroom/components/invitation-form/check-events-controls.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "eventsControls",
                            "type": "AbstractControl[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventsControls",
                            "type": "AbstractControl[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "pure": false,
            "ngname": "checkEventsControls",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\n@Pipe({\n    name: 'checkEventsControls',\n    pure: false,\n})\nexport class CheckEventsControlsPipe implements PipeTransform {\n    transform(eventsControls: AbstractControl[], ...args: any[]): any {\n        const filteredEventsControls = eventsControls.filter(\n            ({ value: { changeStatus } }) => changeStatus !== 'DELETED',\n        );\n\n        const hasOnlyOneEvent = filteredEventsControls.length === 1;\n\n        return hasOnlyOneEvent;\n    }\n}\n"
        },
        {
            "name": "ConvertIntervalLabel",
            "id": "pipe-ConvertIntervalLabel-6750a1673b038498259c5c7a40e873c2",
            "file": "src/app/@shared/pipes/interval-to-label.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "PricePeriod",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "PricePeriod",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "intervalLabel",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { PricePeriod } from 'app/@core/models/product.model';\n\n@Pipe({\n    name: 'intervalLabel',\n})\nexport class ConvertIntervalLabel implements PipeTransform {\n    transform(value: PricePeriod, args?: any): string {\n        if (value.intervalCount === 1) {\n            if (value.interval === 'day') {\n                return 'daily';\n            }\n            return `${value.interval}ly`; // yearly, monthly, weekly\n        }\n\n        return `every ${value.intervalCount} ${value.interval}s`;\n    }\n}\n"
        },
        {
            "name": "ConvertTimePipe",
            "id": "pipe-ConvertTimePipe-494b0ac006f51fa40c7379ec0e7d7475",
            "file": "src/app/@shared/pipes/convert-time.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "convertTime",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'convertTime',\n})\nexport class ConvertTimePipe implements PipeTransform {\n    transform(value: any, args?: any): any {\n        const hour24h = +value.split(':').shift();\n        const hour12h = ((hour24h + 11) % 12) + 1;\n        const addZero = hour12h < 10 ? '0' : '';\n        return `${addZero}${hour12h}:00`;\n    }\n}\n"
        },
        {
            "name": "FilterEnrollmentGroupPipe",
            "id": "pipe-FilterEnrollmentGroupPipe-cff48c3487beeefabc3172c735765834",
            "file": "src/app/classroom/pipes/filter-enrollment-group.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "groups",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "groups",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "filterEnrollmentGroup",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'filterEnrollmentGroup',\n})\nexport class FilterEnrollmentGroupPipe implements PipeTransform {\n    transform(groups: any, ...args: any): any {\n        const [program, level] = args;\n\n        if (!program && !level) {\n            return groups;\n        }\n\n        let programCode: string;\n        let levelCompleteCode: string;\n        if (program) {\n            programCode = program.code;\n        }\n\n        if (level) {\n            levelCompleteCode = level.code;\n        }\n\n        const [levelModule, levelType, levelCode] = levelCompleteCode?.split('-') || [];\n\n        const filteredGroups = groups.filter((group) => {\n            const [module, type, level] = group.level.code.split('-');\n\n            const showGroup = levelCode ? module === programCode && level === levelCode : module === programCode;\n\n            return showGroup;\n        });\n\n        return filteredGroups;\n    }\n}\n"
        },
        {
            "name": "FilterLessonsPipe",
            "id": "pipe-FilterLessonsPipe-30072149356e81e16d0ae4e22b39736e",
            "file": "src/app/lms/pipes/filter-lessons.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "filterLessons",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'filterLessons',\n})\nexport class FilterLessonsPipe implements PipeTransform {\n    transform(value: any, ...args: any[]): any {\n        const lessons = value;\n        const [selectedFilters] = args;\n\n        if (!selectedFilters || selectedFilters.length === 0) {\n            return lessons;\n        }\n\n        const filteredLessons = lessons.filter((lesson) => selectedFilters.includes(lesson.category.toLowerCase()));\n\n        return filteredLessons;\n    }\n}\n"
        },
        {
            "name": "FormatEventTimePipe",
            "id": "pipe-FormatEventTimePipe-5300a1990a7be80a528c3710873aa953",
            "file": "src/app/calendar/pipes/format-event-time.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "formatEventTime",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'formatEventTime',\n})\nexport class FormatEventTimePipe implements PipeTransform {\n    transform(value: any, args?: any): any {\n        return new Date(value);\n    }\n}\n"
        },
        {
            "name": "FormatEventTitlePipe",
            "id": "pipe-FormatEventTitlePipe-526a8b7fe4db4df0f2d7065aad281d54",
            "file": "src/app/calendar/pipes/format-event-title.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "formatEventTitle",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'formatEventTitle',\n})\nexport class FormatEventTitlePipe implements PipeTransform {\n    transform(value: any, args?: any): any {\n        return value.split(/(\\([0-9]:)/).shift();\n    }\n}\n"
        },
        {
            "name": "FormatNextClassDatePipe",
            "id": "pipe-FormatNextClassDatePipe-4dcf752ca3199fd6756ed130cadf9f21",
            "file": "src/app/@shared/pipes/format-next-class-date.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "formatNextClassDate",
            "sourceCode": "import { DatePipe } from '@angular/common';\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'formatNextClassDate',\n})\nexport class FormatNextClassDatePipe implements PipeTransform {\n    constructor(private datePipe: DatePipe) {}\n\n    transform(value: any, args?: any): any {\n        const date = new Date(+value);\n\n        const dayName = this.datePipe.transform(date, 'EEE');\n        const dateString = this.datePipe.transform(date, 'dd/MM/yy');\n        const hour = this.datePipe.transform(date, 'hh:mm aa');\n\n        const span = ({ text, className, upperCase }: { text: string; className: string; upperCase?: boolean }) =>\n            `<span class=\"${className}\" ${upperCase ? 'style=\"text-transform: uppercase\"' : ''}>${text}</span>`;\n\n        return `\n          ${span({ text: dayName, className: 'mat-button-text mat-button-text--size-12', upperCase: true })}\n          ${span({ text: dateString, className: 'mat-overline' })}\n          ${span({ text: hour, className: 'mat-button-text mat-button-text--size-12' })}\n          `;\n    }\n}\n"
        },
        {
            "name": "InvoiceDatePipe",
            "id": "pipe-InvoiceDatePipe-ddaa8e89d298883a1c1254a3af355a7a",
            "file": "src/app/subscription/components/invoice-preview/invoice-date.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "invoiceDate",
            "sourceCode": "import { DatePipe } from '@angular/common';\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'invoiceDate',\n})\nexport class InvoiceDatePipe implements PipeTransform {\n    constructor(private datePipe: DatePipe) {}\n\n    transform(value: any, args?: any): any {\n        if (!value) {\n            return;\n        }\n\n        const dateSplit = value.split(':')[0] as string;\n        const date = dateSplit.substring(0, dateSplit.length - 2);\n        const formattedDate = this.datePipe.transform(date);\n\n        return formattedDate;\n    }\n}\n"
        },
        {
            "name": "InvoiceDaysPipe",
            "id": "pipe-InvoiceDaysPipe-1170d713098ecdb126a5e5d2729b7b80",
            "file": "src/app/subscription/components/invoice-preview/invoice-days.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "invoiceDays",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'invoiceDays',\n})\nexport class InvoiceDaysPipe implements PipeTransform {\n    transform(value: any, args?: any): any {\n        const now = new Date();\n        const days = new Date(now.getFullYear(), now.getMonth() + 1, 0).getDate();\n\n        return Math.round(value * days);\n    }\n}\n"
        },
        {
            "name": "IsLastClassLessonDonePipe",
            "id": "pipe-IsLastClassLessonDonePipe-baf47934bf3ac3262bf93b6e8e0c100b",
            "file": "src/app/@shared/pipes/is-last-class-lesson-done.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "isLastClassLessonDone",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { ClassRecord, ClassRecordType } from 'app/@core/models/class-record.model';\n\n@Pipe({\n    name: 'isLastClassLessonDone',\n})\nexport class IsLastClassLessonDonePipe implements PipeTransform {\n    transform(value: any, args?: any): any {\n        const lesson = value;\n        let tracker = lesson?.classRecords || lesson?.studyGroupLessonRecord;\n        if (!tracker || tracker.length === 0) {\n            return undefined;\n        }\n\n        let lastClass: ClassRecordType;\n        tracker.forEach((classLectured: ClassRecordType) => {\n            const currentStartedDate = new Date(parseInt(classLectured.startedAt, 10)).getDate();\n            if (!lastClass || parseInt(classLectured.startedAt, 10) > parseInt(lastClass.startedAt, 10)) {\n                lastClass = classLectured;\n            }\n        });\n\n        return lastClass?.status === 'LESSON_DONE';\n    }\n}\n"
        },
        {
            "name": "MinutesToHoursPipe",
            "id": "pipe-MinutesToHoursPipe-d66746640551371088e3f4740f9f0051",
            "file": "src/app/@shared/pipes/minutes-to-hours.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "minutesToHours",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'minutesToHours',\n})\nexport class MinutesToHoursPipe implements PipeTransform {\n    transform(value: any, args?: any): any {\n        const hours = Math.floor(value / 60);\n        const minutes = value % 60;\n\n        const hourLabel = hours > 1 ? 'hours' : 'hour';\n        const minuteLabel = minutes > 1 ? 'minutes' : 'minute';\n\n        return `${hours === 0 ? '' : `${hours} ${hourLabel}`} ${minutes === 0 ? '' : `${minutes} ${minuteLabel}`}`;\n    }\n}\n"
        },
        {
            "name": "ParseCompletedLessonsPipe",
            "id": "pipe-ParseCompletedLessonsPipe-899d472720c8d7373a72529485253129",
            "file": "src/app/@shared/pipes/parse-completed-lessons.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "classRecords",
                            "type": "ClassRecordType[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "classRecords",
                            "type": "ClassRecordType[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "parseCompletedLessons",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { ClassRecordType } from 'app/@core/models/class-record.model';\n\n@Pipe({\n    name: 'parseCompletedLessons',\n})\nexport class ParseCompletedLessonsPipe implements PipeTransform {\n    transform(classRecords: ClassRecordType[], args?: any): any {\n        if (!classRecords || classRecords.length === 0) {\n            return 0;\n        }\n\n        const lessonsDoneLength = classRecords.filter((classRecord) => classRecord.status === 'LESSON_DONE').length;\n\n        return lessonsDoneLength;\n    }\n}\n"
        },
        {
            "name": "ProgramLevelRangePipe",
            "id": "pipe-ProgramLevelRangePipe-ce2da563aa7666990966deb317ded91e",
            "file": "src/app/lms/pipes/program-level-range.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "modules",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modules",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "programLevelRange",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'programLevelRange',\n})\nexport class ProgramLevelRangePipe implements PipeTransform {\n    transform(modules: any, args?: any): any {\n        const levels = [].concat(...modules.map((module) => module.levels));\n        const firstLevel = levels[0].code.split('-').pop();\n        const lastLevel = levels[levels.length - 1].code.split('-').pop();\n\n        return `${firstLevel} - ${lastLevel}`;\n    }\n}\n"
        },
        {
            "name": "SafePipe",
            "id": "pipe-SafePipe-c5d006b037485d9e4cca20ee6babfb44",
            "file": "src/app/@shared/pipes/safe.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "safe",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml, SafeStyle, SafeScript, SafeUrl, SafeResourceUrl } from '@angular/platform-browser';\n\n@Pipe({\n    name: 'safe',\n})\nexport class SafePipe implements PipeTransform {\n    constructor(protected sanitizer: DomSanitizer) {}\n\n    public transform(value: any, type: string): SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl {\n        switch (type) {\n            case 'html':\n                return this.sanitizer.bypassSecurityTrustHtml(value);\n            case 'style':\n                return this.sanitizer.bypassSecurityTrustStyle(value);\n            case 'script':\n                return this.sanitizer.bypassSecurityTrustScript(value);\n            case 'url':\n                return this.sanitizer.bypassSecurityTrustUrl(value);\n            case 'resourceUrl':\n                return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n            default:\n                throw new Error(`Invalid safe type specified: ${type}`);\n        }\n    }\n}\n"
        },
        {
            "name": "UTCToDatePipe",
            "id": "pipe-UTCToDatePipe-8ea8236b4b13dda3d3afd77692f1f3a2",
            "file": "src/app/@shared/pipes/utc-to-date.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "utcToDate",
            "sourceCode": "import { DatePipe } from '@angular/common';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { MediaObserver } from '@angular/flex-layout';\n\n@Pipe({\n    name: 'utcToDate',\n})\nexport class UTCToDatePipe implements PipeTransform {\n    constructor(private mediaObserver: MediaObserver, private datePipe: DatePipe) {}\n\n    transform(value: any, args?: any): any {\n        if (!value) {\n            return '    ';\n        }\n\n        const date = new Date(+value);\n\n        const isMobile = this.mediaObserver.isActive('xs');\n\n        let dateLabel = this.datePipe.transform(date, 'dd/MM/yyyy hh:mm aa');\n        if (isMobile) {\n            dateLabel = dateLabel.split(/(?<=^\\S+)\\s/).join('<br/>');\n        }\n\n        return dateLabel;\n    }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "Activity",
            "id": "interface-Activity-680a7145150b05d7d1519e810eba2360",
            "file": "src/app/@core/models/lesson-material.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Media } from './media.model';\n\nexport interface MediaAssociation {\n    media?: Media;\n    order?: number;\n}\n\nexport interface Activity {\n    activitySlides?: MediaAssociation[];\n    order?: number;\n    title?: string;\n}\n\nexport interface LessonMaterial {\n    activities?: Activity[];\n    audio?: MediaAssociation[];\n    lectureScript?: MediaAssociation[];\n    studentBook?: MediaAssociation[];\n}\n",
            "properties": [
                {
                    "name": "activitySlides",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MediaAssociation[]",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Address",
            "id": "interface-Address-1b5907602e6acdd82ba6447d314e84b2",
            "file": "src/app/@core/models/address.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Address {\n    id?: string;\n    addressType?: string;\n    postalCode?: string;\n    street?: string;\n    streetNumber?: string;\n    streetComplement?: string;\n    district?: string;\n    city?: string;\n    state?: string;\n    countryISO?: string;\n    latitude?: number;\n    longitude?: number;\n    providerInfo?: any;\n}\n",
            "properties": [
                {
                    "name": "addressType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "countryISO",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "district",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "latitude",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "longitude",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "postalCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "providerInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "street",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "streetComplement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "streetNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Balance",
            "id": "interface-Balance-0a191ea3703bc2dbe2ef2b07078f4cf1",
            "file": "src/app/@core/models/invoice.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Invoice {\n    id: string;\n    processedAt: string;\n    dueDate: string;\n    invoicePeriodFrom: string;\n    invoicePeriodTo: string;\n    companyDetails: Details;\n    customerDetails: Details;\n    balanceSummary: BalanceSummary;\n    invoiceItems: InvoiceItem[];\n}\n\nexport interface BalanceSummary {\n    taxAmount: number;\n    totalAmount: number;\n    discountAmount: number;\n}\n\nexport interface Details {\n    id: string;\n    name: string;\n    address: string;\n    phone: string;\n    email: string;\n    webSite?: string;\n}\n\nexport interface InvoiceItem {\n    id: string;\n    invoiceLineNumber: number;\n    productId: string;\n    productName: string;\n    productDescription: string;\n    balance: Balance;\n}\n\nexport interface Balance {\n    quantity: number;\n    unitPrice: number;\n    taxAmount: number;\n    totalAmount: number;\n    discountAmount: number;\n}\n",
            "properties": [
                {
                    "name": "discountAmount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "taxAmount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "totalAmount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "unitPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "BalanceSummary",
            "id": "interface-BalanceSummary-0a191ea3703bc2dbe2ef2b07078f4cf1",
            "file": "src/app/@core/models/invoice.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Invoice {\n    id: string;\n    processedAt: string;\n    dueDate: string;\n    invoicePeriodFrom: string;\n    invoicePeriodTo: string;\n    companyDetails: Details;\n    customerDetails: Details;\n    balanceSummary: BalanceSummary;\n    invoiceItems: InvoiceItem[];\n}\n\nexport interface BalanceSummary {\n    taxAmount: number;\n    totalAmount: number;\n    discountAmount: number;\n}\n\nexport interface Details {\n    id: string;\n    name: string;\n    address: string;\n    phone: string;\n    email: string;\n    webSite?: string;\n}\n\nexport interface InvoiceItem {\n    id: string;\n    invoiceLineNumber: number;\n    productId: string;\n    productName: string;\n    productDescription: string;\n    balance: Balance;\n}\n\nexport interface Balance {\n    quantity: number;\n    unitPrice: number;\n    taxAmount: number;\n    totalAmount: number;\n    discountAmount: number;\n}\n",
            "properties": [
                {
                    "name": "discountAmount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "taxAmount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "totalAmount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ClassRecord",
            "id": "interface-ClassRecord-d95381fc1996794175d33172c7609136",
            "file": "src/app/@core/models/class-record.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Enrollment, SourceType, StudyGroup } from './enrollment.model';\nimport { Lesson } from './lesson.model';\n\ninterface ClassRecordInterface {\n    id?: string;\n    teacherNotes?: string;\n    status?: string;\n    startedAt?: string; // DateTime\n    completedAt?: string; // DateTime\n    lessonStartedAt?: string;\n    lessonEndedAt?: string;\n    lesson?: Lesson;\n    revertClassStatus?: boolean;\n}\n\nexport interface EnrollmentClassRecord extends ClassRecordInterface {\n    enrollmentId: string;\n    enrollment?: Enrollment;\n}\n\nexport interface StudyGroupClassRecord extends ClassRecordInterface {\n    studyGroupId: string;\n    studyGroup?: StudyGroup;\n    studyGroupClassAttendees?: any;\n}\n\nexport type ClassRecordType = EnrollmentClassRecord | StudyGroupClassRecord;\n\nexport interface ClassRecord {\n    sourceType: SourceType;\n    enrollmentClassRecord?: EnrollmentClassRecord;\n    studyGroupClassRecord?: StudyGroupClassRecord;\n}\n\nexport interface LessonRecordList extends Lesson {\n    classRecords?: ClassRecordType[];\n}\n\nexport interface ClassSession {\n    eventStart: string;\n    eventEnd: string;\n    lessonFinished: boolean;\n    attendees?: ClassSessionAttendee[];\n}\n\nexport interface ClassSessionAttendee {\n    studentId: string;\n    attended: boolean;\n}\n",
            "properties": [
                {
                    "name": "enrollmentClassRecord",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EnrollmentClassRecord",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "sourceType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SourceType",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "studyGroupClassRecord",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StudyGroupClassRecord",
                    "optional": true,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ClassRecordInterface",
            "id": "interface-ClassRecordInterface-d95381fc1996794175d33172c7609136",
            "file": "src/app/@core/models/class-record.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Enrollment, SourceType, StudyGroup } from './enrollment.model';\nimport { Lesson } from './lesson.model';\n\ninterface ClassRecordInterface {\n    id?: string;\n    teacherNotes?: string;\n    status?: string;\n    startedAt?: string; // DateTime\n    completedAt?: string; // DateTime\n    lessonStartedAt?: string;\n    lessonEndedAt?: string;\n    lesson?: Lesson;\n    revertClassStatus?: boolean;\n}\n\nexport interface EnrollmentClassRecord extends ClassRecordInterface {\n    enrollmentId: string;\n    enrollment?: Enrollment;\n}\n\nexport interface StudyGroupClassRecord extends ClassRecordInterface {\n    studyGroupId: string;\n    studyGroup?: StudyGroup;\n    studyGroupClassAttendees?: any;\n}\n\nexport type ClassRecordType = EnrollmentClassRecord | StudyGroupClassRecord;\n\nexport interface ClassRecord {\n    sourceType: SourceType;\n    enrollmentClassRecord?: EnrollmentClassRecord;\n    studyGroupClassRecord?: StudyGroupClassRecord;\n}\n\nexport interface LessonRecordList extends Lesson {\n    classRecords?: ClassRecordType[];\n}\n\nexport interface ClassSession {\n    eventStart: string;\n    eventEnd: string;\n    lessonFinished: boolean;\n    attendees?: ClassSessionAttendee[];\n}\n\nexport interface ClassSessionAttendee {\n    studentId: string;\n    attended: boolean;\n}\n",
            "properties": [
                {
                    "name": "completedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "lesson",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Lesson",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "lessonEndedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "lessonStartedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "revertClassStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "startedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "teacherNotes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ClassSession",
            "id": "interface-ClassSession-d95381fc1996794175d33172c7609136",
            "file": "src/app/@core/models/class-record.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Enrollment, SourceType, StudyGroup } from './enrollment.model';\nimport { Lesson } from './lesson.model';\n\ninterface ClassRecordInterface {\n    id?: string;\n    teacherNotes?: string;\n    status?: string;\n    startedAt?: string; // DateTime\n    completedAt?: string; // DateTime\n    lessonStartedAt?: string;\n    lessonEndedAt?: string;\n    lesson?: Lesson;\n    revertClassStatus?: boolean;\n}\n\nexport interface EnrollmentClassRecord extends ClassRecordInterface {\n    enrollmentId: string;\n    enrollment?: Enrollment;\n}\n\nexport interface StudyGroupClassRecord extends ClassRecordInterface {\n    studyGroupId: string;\n    studyGroup?: StudyGroup;\n    studyGroupClassAttendees?: any;\n}\n\nexport type ClassRecordType = EnrollmentClassRecord | StudyGroupClassRecord;\n\nexport interface ClassRecord {\n    sourceType: SourceType;\n    enrollmentClassRecord?: EnrollmentClassRecord;\n    studyGroupClassRecord?: StudyGroupClassRecord;\n}\n\nexport interface LessonRecordList extends Lesson {\n    classRecords?: ClassRecordType[];\n}\n\nexport interface ClassSession {\n    eventStart: string;\n    eventEnd: string;\n    lessonFinished: boolean;\n    attendees?: ClassSessionAttendee[];\n}\n\nexport interface ClassSessionAttendee {\n    studentId: string;\n    attended: boolean;\n}\n",
            "properties": [
                {
                    "name": "attendees",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClassSessionAttendee[]",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "eventEnd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "eventStart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "lessonFinished",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ClassSessionAttendee",
            "id": "interface-ClassSessionAttendee-d95381fc1996794175d33172c7609136",
            "file": "src/app/@core/models/class-record.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Enrollment, SourceType, StudyGroup } from './enrollment.model';\nimport { Lesson } from './lesson.model';\n\ninterface ClassRecordInterface {\n    id?: string;\n    teacherNotes?: string;\n    status?: string;\n    startedAt?: string; // DateTime\n    completedAt?: string; // DateTime\n    lessonStartedAt?: string;\n    lessonEndedAt?: string;\n    lesson?: Lesson;\n    revertClassStatus?: boolean;\n}\n\nexport interface EnrollmentClassRecord extends ClassRecordInterface {\n    enrollmentId: string;\n    enrollment?: Enrollment;\n}\n\nexport interface StudyGroupClassRecord extends ClassRecordInterface {\n    studyGroupId: string;\n    studyGroup?: StudyGroup;\n    studyGroupClassAttendees?: any;\n}\n\nexport type ClassRecordType = EnrollmentClassRecord | StudyGroupClassRecord;\n\nexport interface ClassRecord {\n    sourceType: SourceType;\n    enrollmentClassRecord?: EnrollmentClassRecord;\n    studyGroupClassRecord?: StudyGroupClassRecord;\n}\n\nexport interface LessonRecordList extends Lesson {\n    classRecords?: ClassRecordType[];\n}\n\nexport interface ClassSession {\n    eventStart: string;\n    eventEnd: string;\n    lessonFinished: boolean;\n    attendees?: ClassSessionAttendee[];\n}\n\nexport interface ClassSessionAttendee {\n    studentId: string;\n    attended: boolean;\n}\n",
            "properties": [
                {
                    "name": "attended",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "studentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "CreateEnrollmentInput",
            "id": "interface-CreateEnrollmentInput-2310ae7457624e73bd9c0817628293a3",
            "file": "src/app/@core/models/enrollment-invitation.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Enrollment } from './enrollment.model';\nimport { Event } from './event.model';\nimport { Invitation } from './invitation.model';\n\nexport interface CreateEnrollmentInput {\n    enrollmentInput: {\n        studyGroupId?: string;\n        oneOnOne?: {\n            levelId: string;\n            events: Event[];\n        };\n    };\n    invitedStudent: {\n        email: string;\n        firstName: string;\n        surname: string;\n    };\n}\n\nexport interface EnrollmentInvitationInput {\n    invitation: Invitation;\n    enrollment: Enrollment;\n}\n",
            "properties": [
                {
                    "name": "enrollmentInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "invitedStudent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "CreatePasswordStudentInfo",
            "id": "interface-CreatePasswordStudentInfo-ed329306bffe333cedee10487bd56f10",
            "file": "src/app/@core/models/invitation.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { UserProfile } from './user-profile.model';\n\nexport interface Invitation {\n    id?: string;\n    sourceType?: string;\n    sourceId?: string;\n    invitationToken?: string;\n    tokenIssuedDateTime?: string; // DateTime\n    tokenActionedDateTime?: string; // DateTime\n    inviterId?: string;\n    inviteeId?: string;\n    inviteeEmail?: string;\n    inviteeFirstName?: string;\n    inviteeSurname?: string;\n    status?: string;\n    invitee?: UserProfile;\n    inviter?: UserProfile;\n}\n\nexport interface CreatePasswordStudentInfo {\n    invitationToken: string;\n    email: string;\n    firstName: string;\n    surname: string;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "invitationToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "surname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "CreateStudyGroupInput",
            "id": "interface-CreateStudyGroupInput-b8b27060a66267208fd58de6dd0ce28c",
            "file": "src/app/classroom/pages/groups-page/groups-page.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Event } from 'app/@core/models/event.model';\nimport { ClassroomService } from 'app/@core/services/classroom.service';\nimport { ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { INavigationTabsConfig } from 'app/@shared/components/navigation-tabs/navigation-tabs.component';\nimport { Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport {\n    InvitationDialogComponent,\n    ITab,\n} from 'app/classroom/components/invitation-dialog/invitation-dialog.component';\nimport { MatDialog } from '@angular/material/dialog';\n\nexport interface CreateStudyGroupInput {\n    name: string;\n    levelId: string;\n    events: Event[];\n}\n@Component({\n    selector: 'app-groups-page',\n    templateUrl: './groups-page.component.html',\n    styleUrls: ['./groups-page.component.scss'],\n})\nexport class GroupsPageComponent implements OnInit {\n    navigationTabsConfig: INavigationTabsConfig = {\n        links: [\n            { path: '../students', label: 'students', icon: 'person' },\n            { path: '../groups', label: 'groups', icon: 'groups' } /* TODO: find the right icon 'groups' */,\n        ],\n    };\n    groups$: Observable<any[]>;\n\n    filterOptions = [\n        { label: ENROLLMENT_STATUS.ACTIVE, value: ENROLLMENT_STATUS.ACTIVE },\n        { label: ENROLLMENT_STATUS.DELETED, value: ENROLLMENT_STATUS.DELETED },\n    ];\n\n    studyGroupStatus = this.classroomService.classroomFiltersInput.studyGroupStatus;\n\n    constructor(\n        private matDialog: MatDialog,\n        private classroomService: ClassroomService,\n        private router: Router,\n        private route: ActivatedRoute,\n    ) {}\n\n    ngOnInit(): void {\n        this.getGroups();\n    }\n\n    onFilterSelectChange(status: string) {\n        this.classroomService.setClassroomFiltersInput({\n            studyGroupStatus: status,\n        });\n        this.classroomService.getGroupsQuery().refetch();\n    }\n\n    getGroups() {\n        this.groups$ = this.classroomService\n            .getGroupsQuery()\n            .valueChanges.pipe(map((result: any) => result.data.classroom.studyGroups));\n    }\n\n    onAddGroup() {\n        const dialogRef = this.matDialog.open(InvitationDialogComponent, {\n            panelClass: 'invitation-dialog--material',\n            autoFocus: false,\n            disableClose: true,\n            data: {\n                type: 'group',\n                tabs: [\n                    {\n                        title: 'info',\n                        active: false,\n                        completed: false,\n                        icon: 'account_circle',\n                    },\n                    {\n                        title: 'course',\n                        active: false,\n                        completed: false,\n                        icon: 'school',\n                    },\n                    {\n                        title: 'schedule',\n                        active: false,\n                        completed: false,\n                        icon: 'date_range',\n                    },\n                ] as ITab[],\n            },\n        });\n\n        dialogRef\n            .afterClosed()\n            .pipe(take(1))\n            .subscribe({\n                next: (response) => {\n                    if (!response) {\n                        return;\n                    }\n\n                    const { groupForm, courseForm, eventsForm } = response;\n\n                    let browserTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n                    if (!browserTimeZone) {\n                        // default to SP if not found\n                        browserTimeZone = 'America/Sao_Paulo';\n                    }\n\n                    const newGroup: CreateStudyGroupInput = {\n                        name: groupForm.name,\n                        levelId: courseForm.level.id,\n                        events: eventsForm.events.map((event: Event) => ({\n                            title: groupForm.name,\n                            description: courseForm.level.name,\n                            sourceType: 'STUDY_GROUP',\n                            availabilityType: 'BUSY',\n                            recurrence: event.recurrence,\n                            startDateTime: new Date(parseInt(event.startDateTime, 10)).toISOString(),\n                            startTimeZone: browserTimeZone,\n                            endDateTime: new Date(parseInt(event.endDateTime, 10)).toISOString(),\n                            endTimeZone: browserTimeZone,\n                        })),\n                    };\n\n                    this.classroomService.createStudyGroup(newGroup).subscribe((addedGroup: any) => {\n                        this.classroomService.getGroupsQuery().refetch();\n                    });\n                },\n            });\n    }\n\n    onGroupDetail(groupId: string) {\n        this.router.navigate([groupId, 'schedule'], { relativeTo: this.route });\n    }\n\n    onGroupEdit(groupId: string) {\n        this.classroomService\n            .getGroupById(groupId)\n            .pipe(take(1))\n            .subscribe({\n                next: (group) => {\n                    const dialogRef = this.matDialog.open(InvitationDialogComponent, {\n                        panelClass: 'invitation-dialog--material--editing',\n                        autoFocus: false,\n                        disableClose: true,\n                        data: {\n                            group,\n                            type: 'group',\n                            tabs: [\n                                {\n                                    title: 'info',\n                                    active: false,\n                                    completed: false,\n                                    icon: 'account_circle',\n                                },\n                                {\n                                    title: 'course',\n                                    active: false,\n                                    completed: false,\n                                    icon: 'school',\n                                },\n                                {\n                                    title: 'schedule',\n                                    active: false,\n                                    completed: false,\n                                    icon: 'date_range',\n                                },\n                            ] as ITab[],\n                        },\n                    });\n\n                    dialogRef\n                        .afterClosed()\n                        .pipe(take(1))\n                        .subscribe({\n                            next: (group: StudyGroup) => {\n                                if (!group) {\n                                    return;\n                                }\n                                this.classroomService.classroomRefetch();\n                            },\n                        });\n                },\n            });\n    }\n}\n",
            "properties": [
                {
                    "name": "events",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Event[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "levelId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Details",
            "id": "interface-Details-0a191ea3703bc2dbe2ef2b07078f4cf1",
            "file": "src/app/@core/models/invoice.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Invoice {\n    id: string;\n    processedAt: string;\n    dueDate: string;\n    invoicePeriodFrom: string;\n    invoicePeriodTo: string;\n    companyDetails: Details;\n    customerDetails: Details;\n    balanceSummary: BalanceSummary;\n    invoiceItems: InvoiceItem[];\n}\n\nexport interface BalanceSummary {\n    taxAmount: number;\n    totalAmount: number;\n    discountAmount: number;\n}\n\nexport interface Details {\n    id: string;\n    name: string;\n    address: string;\n    phone: string;\n    email: string;\n    webSite?: string;\n}\n\nexport interface InvoiceItem {\n    id: string;\n    invoiceLineNumber: number;\n    productId: string;\n    productName: string;\n    productDescription: string;\n    balance: Balance;\n}\n\nexport interface Balance {\n    quantity: number;\n    unitPrice: number;\n    taxAmount: number;\n    totalAmount: number;\n    discountAmount: number;\n}\n",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "webSite",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Enrollment",
            "id": "interface-Enrollment-47fa1c701c3a333434316971dcea6bf3",
            "file": "src/app/@core/models/enrollment.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EventOccurrence } from './event-occurrence.model';\nimport { Event } from './event.model';\nimport { Invitation } from './invitation.model';\nimport { LessonRecordList, ClassRecordType } from './class-record.model';\nimport { Lesson } from './lesson.model';\nimport { Level } from './level.model';\nimport { UserProfile } from './user-profile.model';\n\nexport type SourceType = 'ENROLLMENT' | 'STUDY_GROUP';\n\nexport enum ENROLLMENT_STATUS {\n    ACTIVE = 'ACTIVE',\n    PENDING = 'PENDING',\n    CONFIRMED = 'CONFIRMED',\n    CANCELLED = 'CANCELLED',\n    DELETED = 'DELETED',\n}\n\nexport interface StudyGroup {\n    enrollments?: Enrollment[];\n    events?: Event[];\n    id?: string;\n    level?: Level;\n    name?: string;\n    studyGroupClassRecords?: ClassRecordType[];\n    lessons?: Lesson[];\n    studyGroupTeachers?: Event[];\n    nextLesson?: ClassRecordType | any;\n    lastLesson?: ClassRecordType;\n}\n\nexport interface Enrollment {\n    sourceType?: SourceType;\n    revertLessonStatus?: boolean;\n    id?: string;\n    levelId?: string;\n    teacherId?: string;\n    studentId?: string;\n    studyGroupId?: string;\n    studyGroup?: StudyGroup;\n    registrationDate?: string; // DateTime\n    activationDate?: string; // DateTime?\n    status?: ENROLLMENT_STATUS;\n    externalKey?: string;\n    level?: Level;\n    teacher?: UserProfile;\n    student?: UserProfile;\n    invitation?: Invitation;\n    lastLesson?: ClassRecordType;\n    classInProgress?: ClassRecordType;\n    events?: Event[];\n    eventsOrganised?: Event[];\n    nextLesson?: Lesson;\n    nextEventOccurrence?: EventOccurrence;\n    lessons?: Lesson[];\n    classRecords?: ClassRecordType[];\n    lessonTrackerList?: LessonRecordList[]; // front end only field\n    selected?: boolean; // front end only field\n}\n",
            "properties": [
                {
                    "name": "activationDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "classInProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClassRecordType",
                    "optional": true,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "classRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClassRecordType[]",
                    "optional": true,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "events",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Event[]",
                    "optional": true,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "eventsOrganised",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Event[]",
                    "optional": true,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "externalKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "invitation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Invitation",
                    "optional": true,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "lastLesson",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClassRecordType",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "lessons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Lesson[]",
                    "optional": true,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "lessonTrackerList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LessonRecordList[]",
                    "optional": true,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "level",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Level",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "levelId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "nextEventOccurrence",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventOccurrence",
                    "optional": true,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "nextLesson",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Lesson",
                    "optional": true,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "registrationDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "revertLessonStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "sourceType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SourceType",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ENROLLMENT_STATUS",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "student",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserProfile",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "studentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "studyGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StudyGroup",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "studyGroupId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "teacher",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserProfile",
                    "optional": true,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "teacherId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 37
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "EnrollmentClassRecord",
            "id": "interface-EnrollmentClassRecord-d95381fc1996794175d33172c7609136",
            "file": "src/app/@core/models/class-record.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Enrollment, SourceType, StudyGroup } from './enrollment.model';\nimport { Lesson } from './lesson.model';\n\ninterface ClassRecordInterface {\n    id?: string;\n    teacherNotes?: string;\n    status?: string;\n    startedAt?: string; // DateTime\n    completedAt?: string; // DateTime\n    lessonStartedAt?: string;\n    lessonEndedAt?: string;\n    lesson?: Lesson;\n    revertClassStatus?: boolean;\n}\n\nexport interface EnrollmentClassRecord extends ClassRecordInterface {\n    enrollmentId: string;\n    enrollment?: Enrollment;\n}\n\nexport interface StudyGroupClassRecord extends ClassRecordInterface {\n    studyGroupId: string;\n    studyGroup?: StudyGroup;\n    studyGroupClassAttendees?: any;\n}\n\nexport type ClassRecordType = EnrollmentClassRecord | StudyGroupClassRecord;\n\nexport interface ClassRecord {\n    sourceType: SourceType;\n    enrollmentClassRecord?: EnrollmentClassRecord;\n    studyGroupClassRecord?: StudyGroupClassRecord;\n}\n\nexport interface LessonRecordList extends Lesson {\n    classRecords?: ClassRecordType[];\n}\n\nexport interface ClassSession {\n    eventStart: string;\n    eventEnd: string;\n    lessonFinished: boolean;\n    attendees?: ClassSessionAttendee[];\n}\n\nexport interface ClassSessionAttendee {\n    studentId: string;\n    attended: boolean;\n}\n",
            "properties": [
                {
                    "name": "enrollment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Enrollment",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "enrollmentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "ClassRecordInterface"
        },
        {
            "name": "EnrollmentInvitationInput",
            "id": "interface-EnrollmentInvitationInput-2310ae7457624e73bd9c0817628293a3",
            "file": "src/app/@core/models/enrollment-invitation.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Enrollment } from './enrollment.model';\nimport { Event } from './event.model';\nimport { Invitation } from './invitation.model';\n\nexport interface CreateEnrollmentInput {\n    enrollmentInput: {\n        studyGroupId?: string;\n        oneOnOne?: {\n            levelId: string;\n            events: Event[];\n        };\n    };\n    invitedStudent: {\n        email: string;\n        firstName: string;\n        surname: string;\n    };\n}\n\nexport interface EnrollmentInvitationInput {\n    invitation: Invitation;\n    enrollment: Enrollment;\n}\n",
            "properties": [
                {
                    "name": "enrollment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Enrollment",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "invitation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Invitation",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Event",
            "id": "interface-Event-cb0c4aa50f932d9e3795973a57908703",
            "file": "src/app/@core/models/event.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Event {\n    id?: string;\n    title?: string;\n    description?: string;\n    availabilityType?: string;\n    sourceType?: string;\n    sourceId?: string;\n    startDateTime?: string; // DateTime\n    startTimeZone?: string;\n    endDateTime?: string; // DateTime\n    endTimeZone?: string;\n    recurrence?: string;\n    status?: string;\n    sendNotifications?: boolean;\n    iCalUID?: string;\n    organiserId?: string;\n    ownerId?: string;\n    visibility?: string;\n    conferenceData?: any;\n    startedAt?: string; // DateTime\n    completedAt?: string; // DateTime\n    changeStatus?: 'NEW' | 'EDITED' | 'DELETED'; // Frontend-only field for backend to use to add, update or delete the event\n    selectedWeekday?: string; // Frontend-only field to identify the selected day\n    formArrayIndex?: number; // Frontend-only field to identify the index of event in the form to perform operations (update and delete)\n    currentDays?: number[]; // Frontend-only field to identify the current selected days (update and delete)\n    hasConflict?: boolean; // Frontend-only field to identify if has conflict\n}\n",
            "properties": [
                {
                    "name": "availabilityType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "changeStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"NEW\" | \"EDITED\" | \"DELETED\"",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "completedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "conferenceData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "currentDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "endDateTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "endTimeZone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "formArrayIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "hasConflict",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "iCalUID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "organiserId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "ownerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "recurrence",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "selectedWeekday",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "sendNotifications",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "sourceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "sourceType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "startDateTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "startedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "startTimeZone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "visibility",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "EventOccurrence",
            "id": "interface-EventOccurrence-bdd6e353bbd277a4923b8e2722f31510",
            "file": "src/app/@core/models/event-occurrence.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Enrollment, SourceType, StudyGroup } from './enrollment.model';\nimport { Event } from './event.model';\n\nexport interface EventOccurrence extends Event {\n    recurringEventId?: string;\n    originalStartDateTime?: string;\n    originalStartTimeZone?: string;\n    enrollment?: Enrollment;\n    studyGroup?: StudyGroup;\n}\n\nexport interface IEventOccurrenceInput {\n    status: string;\n    id: string;\n    recurringEventId: string;\n    originalStartDateTime: string;\n    originalStartTimeZone: string;\n    sourceType: SourceType;\n    sourceId: string;\n    availabilityType: string;\n    title: string;\n    description: string;\n    startDateTime: string;\n    startTimeZone: string;\n    endDateTime: string;\n    endTimeZone: string;\n    sendNotifications: boolean;\n    visibility: string;\n}\n",
            "properties": [
                {
                    "name": "enrollment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Enrollment",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "originalStartDateTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "originalStartTimeZone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "recurringEventId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "studyGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StudyGroup",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "Event"
        },
        {
            "name": "IActivateEnrollmentMutation",
            "id": "interface-IActivateEnrollmentMutation-393bbeee17eb6281c8a64cc8ff3beb12",
            "file": "src/app/@core/services/classroom.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\nimport {\n    ClassRecord,\n    ClassRecordType,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from '../models/class-record.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, SourceType, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\n\nimport { CreateStudyGroupInput } from 'app/classroom/pages/groups-page/groups-page.component';\nimport { ENROLLMENT_DETAIL } from 'app/@core/graphql/enrollment.graphql';\nimport { CLASSROOM_SUMMARY } from '../graphql/classroom.graphql';\nimport { CLASS_RECORD_SUMMARY } from '../graphql/class-record.graphql';\nimport { STUDY_GROUP_DETAILS, STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { LESSON_SUMMARY } from '../graphql/lesson.graphql';\nimport { Lesson } from '../models/lesson.model';\n\ninterface IStartClassMutation {\n    startClass: ClassRecord;\n}\n\nexport interface IStartClassInput {\n    lessonId: string;\n    levelId: string;\n    sourceId: string;\n    sourceType: SourceType;\n    teacherNotes?: string;\n}\n\ninterface ICreateEnrollmentMutation {\n    createEnrollment: Enrollment;\n}\n\ninterface IEnrollment {\n    enrollment: Enrollment;\n}\n\ninterface IGetEnrollments {\n    enrollments: Enrollment[];\n}\n\ninterface IFindGroupById {\n    findGroupById: StudyGroup;\n}\n\ninterface ICancelEnrollmentMutation {\n    cancelEnrollment: Enrollment;\n}\n\ninterface IChangeScheduleInput {\n    enrollmentId: string;\n    events: Event[];\n}\n\ninterface IChangeEnrollmentScheduleMutation {\n    changeEnrollmentSchedule: Enrollment;\n}\n\ninterface ICreateStudyGroupMutation {\n    createStudyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupMutation {\n    studyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupInput {\n    studyGroupId: string;\n    name: string;\n    events?: Event[];\n}\n\ninterface IRemoveGroupInput {\n    studyGroupId: string;\n}\n\ninterface IRemoveGroupMutation {\n    group: StudyGroup;\n}\n\ninterface StudyGroupAttendeInput {\n    studentId: string;\n    attended: boolean;\n}\ninterface IActivateEnrollmentMutation {\n    updatedEnrollment: Enrollment;\n}\n\nexport interface IFinishClassInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n    teacherNotes?: string;\n    status: string;\n    lessonStartedAt: string;\n    lessonEndedAt: string;\n    attendees?: StudyGroupAttendeInput[];\n}\n\ninterface IFinishClassMutation {\n    finishClass: ClassRecordType;\n}\n\ninterface ITransferEnrollmentMutation {\n    removeStudentFromGroup: Enrollment;\n}\nexport interface IRevertFinishedClassStatusInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n}\n\ninterface IRevertFinishedClassStatusMutation {\n    revertFinishedClassStatus: ClassRecordType;\n}\nexport interface IRevertLessonStatusInput {\n    sourceId: string;\n    sourceType: SourceType;\n    lessonId: string;\n}\n\ninterface IRevertLessonStatusMutation {\n    revertLessonStatus: Lesson;\n}\n\nexport interface Student {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    opened?: boolean; // front-end only field\n}\n\ninterface IClassroomQuery {\n    classroom: IClassroom;\n}\n\nexport interface IClassroom {\n    id?: string;\n    classInProgress?: ClassRecordType;\n    enrollments?: Enrollment[];\n    studyGroups?: StudyGroup[];\n    students?: Student[];\n    studentEnrollments?: Enrollment[];\n}\n\nexport interface IClassroomFiltersInput {\n    enrollmentStatus?: string;\n    studyGroupStatus?: string;\n}\n\ninterface IAddStudentToGroupMutation {\n    addStudentToGroup: Enrollment;\n}\ninterface IAddStudentToGroupInput {\n    id: string;\n    studyGroupId: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClassroomService {\n    private classInProgressSource = new BehaviorSubject<ClassRecord>(undefined);\n\n    public classInProgress$ = this.classInProgressSource.asObservable();\n\n    getGroupByIdQuery$: QueryRef<IFindGroupById>;\n    getEnrollmentQuery$: QueryRef<IEnrollment>;\n    classroomQuery$: QueryRef<IClassroomQuery>;\n\n    classroomFiltersInput: IClassroomFiltersInput = {\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    };\n\n    constructor(private apollo: Apollo) {}\n\n    getClassroom$(): Observable<IClassroom> {\n        this.classroomQuery$ = this.apollo.watchQuery({\n            query: gql`\n                query Classroom($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        ...classroomSummary\n                    }\n                }\n                ${CLASSROOM_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n\n        return this.classroomQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IClassroomQuery>) => {\n                const classInProgress = result.data.classroom.classInProgress;\n                if (!classInProgress) {\n                    this.classInProgressSource.next(null);\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        this.classInProgressSource.next({\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        });\n                    } else {\n                        this.classInProgressSource.next({\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        });\n                    }\n                }\n\n                return result.data.classroom;\n            }),\n            share(),\n        );\n    }\n\n    classroomRefetch(): void {\n        this.getClassroom$();\n        this.classroomQuery$.refetch();\n    }\n\n    setClassroomFiltersInput(filters: IClassroomFiltersInput = {}) {\n        this.classroomFiltersInput = { ...this.classroomFiltersInput, ...filters };\n    }\n\n    createEnrollmentInvitation(createEnrollmentInput: CreateEnrollmentInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICreateEnrollmentMutation>({\n                mutation: gql`\n                    mutation CreateEnrollment($enrollmentInput: EnrollmentInput, $invitedStudent: StudentInput) {\n                        createEnrollment(enrollmentInput: $enrollmentInput, invitedStudent: $invitedStudent) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    enrollmentInput: createEnrollmentInput.enrollmentInput,\n                    invitedStudent: createEnrollmentInput.invitedStudent,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateEnrollmentMutation>) => {\n                    return result.data.createEnrollment;\n                }),\n            );\n    }\n\n    getEnrollment(enrollmentId: string): Observable<Enrollment> {\n        this.getEnrollmentQuery$ = this.apollo.watchQuery({\n            query: gql`\n            {\n                enrollment(id: \"${enrollmentId}\") {\n                    ...enrollmentDetail\n                }\n            }\n            ${ENROLLMENT_DETAIL}\n            `,\n        });\n\n        return this.getEnrollmentQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IEnrollment>) => result.data.enrollment),\n        );\n    }\n\n    refetchEnrollment(): void {\n        if (this.getEnrollmentQuery$) {\n            this.getEnrollmentQuery$.refetch();\n        }\n    }\n\n    cancelEnrollment(id: string): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICancelEnrollmentMutation>({\n                mutation: gql`\n                    mutation CancelEnrollmentMutation {\n                        cancelEnrollment(id: \"${id}\") {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICancelEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.cancelEnrollment;\n                }),\n            );\n    }\n\n    changeEnrollmentSchedule(changeScheduleInput: IChangeScheduleInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<IChangeEnrollmentScheduleMutation>({\n                mutation: gql`\n                    mutation ChangeEnrollmentScheduleMutation($changeScheduleInput: ChangeScheduleInput) {\n                        changeEnrollmentSchedule(changeScheduleInput: $changeScheduleInput) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    changeScheduleInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeEnrollmentScheduleMutation>) => {\n                    return result.data.changeEnrollmentSchedule;\n                }),\n            );\n    }\n\n    transferEnrollment(id: string, events: Event[]) {\n        return this.apollo\n            .mutate<ITransferEnrollmentMutation>({\n                mutation: gql`\n                    mutation removeStudentFromGroup($id: id, $events: EventsInput) {\n                        removeStudentFromGroup(id: $id, events: $events) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    id,\n                    events,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ITransferEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.removeStudentFromGroup;\n                }),\n            );\n    }\n\n    startClass(startClassInput: IStartClassInput): Observable<ClassRecord> {\n        return this.apollo\n            .mutate<IStartClassMutation>({\n                mutation: gql`\n                    mutation StartClassMutation($startClassInput: StartClassInput) {\n                        startClass(startClassInput: $startClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { startClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IStartClassMutation>) => {\n                    const classInProgress = result.data.startClass;\n                    this.classInProgressSource.next(classInProgress);\n\n                    this.classroomRefetch();\n                    return classInProgress;\n                }),\n            );\n    }\n\n    finishClass(finishClassInput: IFinishClassInput): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IFinishClassMutation>({\n                mutation: gql`\n                    mutation FinishClassMutation($finishClassInput: FinishClassInput) {\n                        finishClass(finishClassInput: $finishClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { finishClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IFinishClassMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.finishClass;\n                }),\n            );\n    }\n\n    getGroupsQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query ClassroomQuery($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        id\n                        studyGroups {\n                            ...studyGroupSummary\n                        }\n                    }\n                }\n                ${STUDY_GROUP_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n    }\n\n    getGroupById(id: string): Observable<StudyGroup> {\n        this.getGroupByIdQuery$ = this.apollo.watchQuery<any>({\n            query: gql`\n                query findGroupById($id: String) {\n                    findGroupById(id: $id) {\n                        ...studyGroupDetails\n                    }\n                }\n                ${STUDY_GROUP_DETAILS}\n            `,\n            variables: {\n                id,\n            },\n        });\n\n        return this.getGroupByIdQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IFindGroupById>) => result.data.findGroupById),\n        );\n    }\n\n    refetchCurrentGroupById(groupId?: string): void {\n        if (groupId) {\n            this.getGroupById(groupId);\n        }\n\n        if (this.getGroupByIdQuery$) {\n            this.getGroupByIdQuery$.refetch();\n        }\n    }\n\n    createStudyGroup(createGroupInput: CreateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<ICreateStudyGroupMutation>({\n                mutation: gql`\n                    mutation CreateGroupMutation($createGroupInput: CreateStudyGroupInput) {\n                        createStudyGroup(createGroupInput: $createGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    createGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.createStudyGroup;\n                }),\n            );\n    }\n\n    updateStudyGroup(studyGroupInput: IUpdateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IUpdateStudyGroupMutation>({\n                mutation: gql`\n                    mutation UpdateStudyGroupMutation($studyGroupInput: UpdateStudyGroupInput) {\n                        updateStudyGroup(studyGroupInput: $studyGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    studyGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.studyGroup;\n                }),\n            );\n    }\n\n    removeStudyGroup(removeGroupInput: IRemoveGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IRemoveGroupMutation>({\n                mutation: gql`\n                    mutation RemoveStudyGroupMutation($removeGroupInput: RemoveStudyGroupInput) {\n                        removeStudyGroup(removeGroupInput: $removeGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    removeGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRemoveGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.group;\n                }),\n            );\n    }\n\n    addStudentToGroup(enrollmentInput: IAddStudentToGroupInput) {\n        return this.apollo\n            .mutate<IAddStudentToGroupMutation>({\n                mutation: gql`\n                    mutation AddStudentToGroupMutation($enrollmentInput: AddStudentToGroupInput) {\n                        addStudentToGroup(enrollmentInput: $enrollmentInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    enrollmentInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IAddStudentToGroupMutation>) => {\n                    this.classroomRefetch();\n                    this.refetchCurrentGroupById();\n                    return result.data.addStudentToGroup;\n                }),\n            );\n    }\n\n    revertFinishedClassStatus(\n        revertFinishedClassStatusInput: IRevertFinishedClassStatusInput,\n    ): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IRevertFinishedClassStatusMutation>({\n                mutation: gql`\n                    mutation revertFinishedClassStatusMutation(\n                        $revertFinishedClassStatusInput: RevertFinishedClassStatusInput\n                    ) {\n                        revertFinishedClassStatus(revertFinishedClassStatusInput: $revertFinishedClassStatusInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { revertFinishedClassStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertFinishedClassStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertFinishedClassStatus;\n                }),\n            );\n    }\n\n    revertLessonStatus(revertLessonStatusInput: IRevertLessonStatusInput): Observable<Lesson> {\n        return this.apollo\n            .mutate<IRevertLessonStatusMutation>({\n                mutation: gql`\n                    mutation revertLessonStatusMutation($revertLessonStatusInput: RevertLessonStatusInput) {\n                        revertLessonStatus(revertLessonStatusInput: $revertLessonStatusInput) {\n                            ...lessonSummary\n                        }\n                    }\n                    ${LESSON_SUMMARY}\n                `,\n                variables: { revertLessonStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertLessonStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertLessonStatus;\n                }),\n            );\n    }\n\n    activateEnrollment(enrollmentId: string): Observable<any> {\n        return this.apollo\n            .mutate<IActivateEnrollmentMutation>({\n                mutation: gql`\n                    mutation ActivateEnrollmentMutation($enrollmentId: ID) {\n                        activateEnrollment(enrollmentId: $enrollmentId) {\n                            id\n                        }\n                    }\n                `,\n                variables: { enrollmentId },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IActivateEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.updatedEnrollment;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "updatedEnrollment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Enrollment",
                    "optional": false,
                    "description": "",
                    "line": 94
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IAddStudentToGroupInput",
            "id": "interface-IAddStudentToGroupInput-393bbeee17eb6281c8a64cc8ff3beb12",
            "file": "src/app/@core/services/classroom.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\nimport {\n    ClassRecord,\n    ClassRecordType,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from '../models/class-record.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, SourceType, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\n\nimport { CreateStudyGroupInput } from 'app/classroom/pages/groups-page/groups-page.component';\nimport { ENROLLMENT_DETAIL } from 'app/@core/graphql/enrollment.graphql';\nimport { CLASSROOM_SUMMARY } from '../graphql/classroom.graphql';\nimport { CLASS_RECORD_SUMMARY } from '../graphql/class-record.graphql';\nimport { STUDY_GROUP_DETAILS, STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { LESSON_SUMMARY } from '../graphql/lesson.graphql';\nimport { Lesson } from '../models/lesson.model';\n\ninterface IStartClassMutation {\n    startClass: ClassRecord;\n}\n\nexport interface IStartClassInput {\n    lessonId: string;\n    levelId: string;\n    sourceId: string;\n    sourceType: SourceType;\n    teacherNotes?: string;\n}\n\ninterface ICreateEnrollmentMutation {\n    createEnrollment: Enrollment;\n}\n\ninterface IEnrollment {\n    enrollment: Enrollment;\n}\n\ninterface IGetEnrollments {\n    enrollments: Enrollment[];\n}\n\ninterface IFindGroupById {\n    findGroupById: StudyGroup;\n}\n\ninterface ICancelEnrollmentMutation {\n    cancelEnrollment: Enrollment;\n}\n\ninterface IChangeScheduleInput {\n    enrollmentId: string;\n    events: Event[];\n}\n\ninterface IChangeEnrollmentScheduleMutation {\n    changeEnrollmentSchedule: Enrollment;\n}\n\ninterface ICreateStudyGroupMutation {\n    createStudyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupMutation {\n    studyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupInput {\n    studyGroupId: string;\n    name: string;\n    events?: Event[];\n}\n\ninterface IRemoveGroupInput {\n    studyGroupId: string;\n}\n\ninterface IRemoveGroupMutation {\n    group: StudyGroup;\n}\n\ninterface StudyGroupAttendeInput {\n    studentId: string;\n    attended: boolean;\n}\ninterface IActivateEnrollmentMutation {\n    updatedEnrollment: Enrollment;\n}\n\nexport interface IFinishClassInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n    teacherNotes?: string;\n    status: string;\n    lessonStartedAt: string;\n    lessonEndedAt: string;\n    attendees?: StudyGroupAttendeInput[];\n}\n\ninterface IFinishClassMutation {\n    finishClass: ClassRecordType;\n}\n\ninterface ITransferEnrollmentMutation {\n    removeStudentFromGroup: Enrollment;\n}\nexport interface IRevertFinishedClassStatusInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n}\n\ninterface IRevertFinishedClassStatusMutation {\n    revertFinishedClassStatus: ClassRecordType;\n}\nexport interface IRevertLessonStatusInput {\n    sourceId: string;\n    sourceType: SourceType;\n    lessonId: string;\n}\n\ninterface IRevertLessonStatusMutation {\n    revertLessonStatus: Lesson;\n}\n\nexport interface Student {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    opened?: boolean; // front-end only field\n}\n\ninterface IClassroomQuery {\n    classroom: IClassroom;\n}\n\nexport interface IClassroom {\n    id?: string;\n    classInProgress?: ClassRecordType;\n    enrollments?: Enrollment[];\n    studyGroups?: StudyGroup[];\n    students?: Student[];\n    studentEnrollments?: Enrollment[];\n}\n\nexport interface IClassroomFiltersInput {\n    enrollmentStatus?: string;\n    studyGroupStatus?: string;\n}\n\ninterface IAddStudentToGroupMutation {\n    addStudentToGroup: Enrollment;\n}\ninterface IAddStudentToGroupInput {\n    id: string;\n    studyGroupId: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClassroomService {\n    private classInProgressSource = new BehaviorSubject<ClassRecord>(undefined);\n\n    public classInProgress$ = this.classInProgressSource.asObservable();\n\n    getGroupByIdQuery$: QueryRef<IFindGroupById>;\n    getEnrollmentQuery$: QueryRef<IEnrollment>;\n    classroomQuery$: QueryRef<IClassroomQuery>;\n\n    classroomFiltersInput: IClassroomFiltersInput = {\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    };\n\n    constructor(private apollo: Apollo) {}\n\n    getClassroom$(): Observable<IClassroom> {\n        this.classroomQuery$ = this.apollo.watchQuery({\n            query: gql`\n                query Classroom($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        ...classroomSummary\n                    }\n                }\n                ${CLASSROOM_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n\n        return this.classroomQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IClassroomQuery>) => {\n                const classInProgress = result.data.classroom.classInProgress;\n                if (!classInProgress) {\n                    this.classInProgressSource.next(null);\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        this.classInProgressSource.next({\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        });\n                    } else {\n                        this.classInProgressSource.next({\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        });\n                    }\n                }\n\n                return result.data.classroom;\n            }),\n            share(),\n        );\n    }\n\n    classroomRefetch(): void {\n        this.getClassroom$();\n        this.classroomQuery$.refetch();\n    }\n\n    setClassroomFiltersInput(filters: IClassroomFiltersInput = {}) {\n        this.classroomFiltersInput = { ...this.classroomFiltersInput, ...filters };\n    }\n\n    createEnrollmentInvitation(createEnrollmentInput: CreateEnrollmentInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICreateEnrollmentMutation>({\n                mutation: gql`\n                    mutation CreateEnrollment($enrollmentInput: EnrollmentInput, $invitedStudent: StudentInput) {\n                        createEnrollment(enrollmentInput: $enrollmentInput, invitedStudent: $invitedStudent) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    enrollmentInput: createEnrollmentInput.enrollmentInput,\n                    invitedStudent: createEnrollmentInput.invitedStudent,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateEnrollmentMutation>) => {\n                    return result.data.createEnrollment;\n                }),\n            );\n    }\n\n    getEnrollment(enrollmentId: string): Observable<Enrollment> {\n        this.getEnrollmentQuery$ = this.apollo.watchQuery({\n            query: gql`\n            {\n                enrollment(id: \"${enrollmentId}\") {\n                    ...enrollmentDetail\n                }\n            }\n            ${ENROLLMENT_DETAIL}\n            `,\n        });\n\n        return this.getEnrollmentQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IEnrollment>) => result.data.enrollment),\n        );\n    }\n\n    refetchEnrollment(): void {\n        if (this.getEnrollmentQuery$) {\n            this.getEnrollmentQuery$.refetch();\n        }\n    }\n\n    cancelEnrollment(id: string): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICancelEnrollmentMutation>({\n                mutation: gql`\n                    mutation CancelEnrollmentMutation {\n                        cancelEnrollment(id: \"${id}\") {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICancelEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.cancelEnrollment;\n                }),\n            );\n    }\n\n    changeEnrollmentSchedule(changeScheduleInput: IChangeScheduleInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<IChangeEnrollmentScheduleMutation>({\n                mutation: gql`\n                    mutation ChangeEnrollmentScheduleMutation($changeScheduleInput: ChangeScheduleInput) {\n                        changeEnrollmentSchedule(changeScheduleInput: $changeScheduleInput) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    changeScheduleInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeEnrollmentScheduleMutation>) => {\n                    return result.data.changeEnrollmentSchedule;\n                }),\n            );\n    }\n\n    transferEnrollment(id: string, events: Event[]) {\n        return this.apollo\n            .mutate<ITransferEnrollmentMutation>({\n                mutation: gql`\n                    mutation removeStudentFromGroup($id: id, $events: EventsInput) {\n                        removeStudentFromGroup(id: $id, events: $events) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    id,\n                    events,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ITransferEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.removeStudentFromGroup;\n                }),\n            );\n    }\n\n    startClass(startClassInput: IStartClassInput): Observable<ClassRecord> {\n        return this.apollo\n            .mutate<IStartClassMutation>({\n                mutation: gql`\n                    mutation StartClassMutation($startClassInput: StartClassInput) {\n                        startClass(startClassInput: $startClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { startClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IStartClassMutation>) => {\n                    const classInProgress = result.data.startClass;\n                    this.classInProgressSource.next(classInProgress);\n\n                    this.classroomRefetch();\n                    return classInProgress;\n                }),\n            );\n    }\n\n    finishClass(finishClassInput: IFinishClassInput): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IFinishClassMutation>({\n                mutation: gql`\n                    mutation FinishClassMutation($finishClassInput: FinishClassInput) {\n                        finishClass(finishClassInput: $finishClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { finishClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IFinishClassMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.finishClass;\n                }),\n            );\n    }\n\n    getGroupsQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query ClassroomQuery($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        id\n                        studyGroups {\n                            ...studyGroupSummary\n                        }\n                    }\n                }\n                ${STUDY_GROUP_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n    }\n\n    getGroupById(id: string): Observable<StudyGroup> {\n        this.getGroupByIdQuery$ = this.apollo.watchQuery<any>({\n            query: gql`\n                query findGroupById($id: String) {\n                    findGroupById(id: $id) {\n                        ...studyGroupDetails\n                    }\n                }\n                ${STUDY_GROUP_DETAILS}\n            `,\n            variables: {\n                id,\n            },\n        });\n\n        return this.getGroupByIdQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IFindGroupById>) => result.data.findGroupById),\n        );\n    }\n\n    refetchCurrentGroupById(groupId?: string): void {\n        if (groupId) {\n            this.getGroupById(groupId);\n        }\n\n        if (this.getGroupByIdQuery$) {\n            this.getGroupByIdQuery$.refetch();\n        }\n    }\n\n    createStudyGroup(createGroupInput: CreateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<ICreateStudyGroupMutation>({\n                mutation: gql`\n                    mutation CreateGroupMutation($createGroupInput: CreateStudyGroupInput) {\n                        createStudyGroup(createGroupInput: $createGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    createGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.createStudyGroup;\n                }),\n            );\n    }\n\n    updateStudyGroup(studyGroupInput: IUpdateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IUpdateStudyGroupMutation>({\n                mutation: gql`\n                    mutation UpdateStudyGroupMutation($studyGroupInput: UpdateStudyGroupInput) {\n                        updateStudyGroup(studyGroupInput: $studyGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    studyGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.studyGroup;\n                }),\n            );\n    }\n\n    removeStudyGroup(removeGroupInput: IRemoveGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IRemoveGroupMutation>({\n                mutation: gql`\n                    mutation RemoveStudyGroupMutation($removeGroupInput: RemoveStudyGroupInput) {\n                        removeStudyGroup(removeGroupInput: $removeGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    removeGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRemoveGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.group;\n                }),\n            );\n    }\n\n    addStudentToGroup(enrollmentInput: IAddStudentToGroupInput) {\n        return this.apollo\n            .mutate<IAddStudentToGroupMutation>({\n                mutation: gql`\n                    mutation AddStudentToGroupMutation($enrollmentInput: AddStudentToGroupInput) {\n                        addStudentToGroup(enrollmentInput: $enrollmentInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    enrollmentInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IAddStudentToGroupMutation>) => {\n                    this.classroomRefetch();\n                    this.refetchCurrentGroupById();\n                    return result.data.addStudentToGroup;\n                }),\n            );\n    }\n\n    revertFinishedClassStatus(\n        revertFinishedClassStatusInput: IRevertFinishedClassStatusInput,\n    ): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IRevertFinishedClassStatusMutation>({\n                mutation: gql`\n                    mutation revertFinishedClassStatusMutation(\n                        $revertFinishedClassStatusInput: RevertFinishedClassStatusInput\n                    ) {\n                        revertFinishedClassStatus(revertFinishedClassStatusInput: $revertFinishedClassStatusInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { revertFinishedClassStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertFinishedClassStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertFinishedClassStatus;\n                }),\n            );\n    }\n\n    revertLessonStatus(revertLessonStatusInput: IRevertLessonStatusInput): Observable<Lesson> {\n        return this.apollo\n            .mutate<IRevertLessonStatusMutation>({\n                mutation: gql`\n                    mutation revertLessonStatusMutation($revertLessonStatusInput: RevertLessonStatusInput) {\n                        revertLessonStatus(revertLessonStatusInput: $revertLessonStatusInput) {\n                            ...lessonSummary\n                        }\n                    }\n                    ${LESSON_SUMMARY}\n                `,\n                variables: { revertLessonStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertLessonStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertLessonStatus;\n                }),\n            );\n    }\n\n    activateEnrollment(enrollmentId: string): Observable<any> {\n        return this.apollo\n            .mutate<IActivateEnrollmentMutation>({\n                mutation: gql`\n                    mutation ActivateEnrollmentMutation($enrollmentId: ID) {\n                        activateEnrollment(enrollmentId: $enrollmentId) {\n                            id\n                        }\n                    }\n                `,\n                variables: { enrollmentId },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IActivateEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.updatedEnrollment;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 165
                },
                {
                    "name": "studyGroupId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 166
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IAddStudentToGroupMutation",
            "id": "interface-IAddStudentToGroupMutation-393bbeee17eb6281c8a64cc8ff3beb12",
            "file": "src/app/@core/services/classroom.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\nimport {\n    ClassRecord,\n    ClassRecordType,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from '../models/class-record.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, SourceType, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\n\nimport { CreateStudyGroupInput } from 'app/classroom/pages/groups-page/groups-page.component';\nimport { ENROLLMENT_DETAIL } from 'app/@core/graphql/enrollment.graphql';\nimport { CLASSROOM_SUMMARY } from '../graphql/classroom.graphql';\nimport { CLASS_RECORD_SUMMARY } from '../graphql/class-record.graphql';\nimport { STUDY_GROUP_DETAILS, STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { LESSON_SUMMARY } from '../graphql/lesson.graphql';\nimport { Lesson } from '../models/lesson.model';\n\ninterface IStartClassMutation {\n    startClass: ClassRecord;\n}\n\nexport interface IStartClassInput {\n    lessonId: string;\n    levelId: string;\n    sourceId: string;\n    sourceType: SourceType;\n    teacherNotes?: string;\n}\n\ninterface ICreateEnrollmentMutation {\n    createEnrollment: Enrollment;\n}\n\ninterface IEnrollment {\n    enrollment: Enrollment;\n}\n\ninterface IGetEnrollments {\n    enrollments: Enrollment[];\n}\n\ninterface IFindGroupById {\n    findGroupById: StudyGroup;\n}\n\ninterface ICancelEnrollmentMutation {\n    cancelEnrollment: Enrollment;\n}\n\ninterface IChangeScheduleInput {\n    enrollmentId: string;\n    events: Event[];\n}\n\ninterface IChangeEnrollmentScheduleMutation {\n    changeEnrollmentSchedule: Enrollment;\n}\n\ninterface ICreateStudyGroupMutation {\n    createStudyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupMutation {\n    studyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupInput {\n    studyGroupId: string;\n    name: string;\n    events?: Event[];\n}\n\ninterface IRemoveGroupInput {\n    studyGroupId: string;\n}\n\ninterface IRemoveGroupMutation {\n    group: StudyGroup;\n}\n\ninterface StudyGroupAttendeInput {\n    studentId: string;\n    attended: boolean;\n}\ninterface IActivateEnrollmentMutation {\n    updatedEnrollment: Enrollment;\n}\n\nexport interface IFinishClassInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n    teacherNotes?: string;\n    status: string;\n    lessonStartedAt: string;\n    lessonEndedAt: string;\n    attendees?: StudyGroupAttendeInput[];\n}\n\ninterface IFinishClassMutation {\n    finishClass: ClassRecordType;\n}\n\ninterface ITransferEnrollmentMutation {\n    removeStudentFromGroup: Enrollment;\n}\nexport interface IRevertFinishedClassStatusInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n}\n\ninterface IRevertFinishedClassStatusMutation {\n    revertFinishedClassStatus: ClassRecordType;\n}\nexport interface IRevertLessonStatusInput {\n    sourceId: string;\n    sourceType: SourceType;\n    lessonId: string;\n}\n\ninterface IRevertLessonStatusMutation {\n    revertLessonStatus: Lesson;\n}\n\nexport interface Student {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    opened?: boolean; // front-end only field\n}\n\ninterface IClassroomQuery {\n    classroom: IClassroom;\n}\n\nexport interface IClassroom {\n    id?: string;\n    classInProgress?: ClassRecordType;\n    enrollments?: Enrollment[];\n    studyGroups?: StudyGroup[];\n    students?: Student[];\n    studentEnrollments?: Enrollment[];\n}\n\nexport interface IClassroomFiltersInput {\n    enrollmentStatus?: string;\n    studyGroupStatus?: string;\n}\n\ninterface IAddStudentToGroupMutation {\n    addStudentToGroup: Enrollment;\n}\ninterface IAddStudentToGroupInput {\n    id: string;\n    studyGroupId: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClassroomService {\n    private classInProgressSource = new BehaviorSubject<ClassRecord>(undefined);\n\n    public classInProgress$ = this.classInProgressSource.asObservable();\n\n    getGroupByIdQuery$: QueryRef<IFindGroupById>;\n    getEnrollmentQuery$: QueryRef<IEnrollment>;\n    classroomQuery$: QueryRef<IClassroomQuery>;\n\n    classroomFiltersInput: IClassroomFiltersInput = {\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    };\n\n    constructor(private apollo: Apollo) {}\n\n    getClassroom$(): Observable<IClassroom> {\n        this.classroomQuery$ = this.apollo.watchQuery({\n            query: gql`\n                query Classroom($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        ...classroomSummary\n                    }\n                }\n                ${CLASSROOM_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n\n        return this.classroomQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IClassroomQuery>) => {\n                const classInProgress = result.data.classroom.classInProgress;\n                if (!classInProgress) {\n                    this.classInProgressSource.next(null);\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        this.classInProgressSource.next({\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        });\n                    } else {\n                        this.classInProgressSource.next({\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        });\n                    }\n                }\n\n                return result.data.classroom;\n            }),\n            share(),\n        );\n    }\n\n    classroomRefetch(): void {\n        this.getClassroom$();\n        this.classroomQuery$.refetch();\n    }\n\n    setClassroomFiltersInput(filters: IClassroomFiltersInput = {}) {\n        this.classroomFiltersInput = { ...this.classroomFiltersInput, ...filters };\n    }\n\n    createEnrollmentInvitation(createEnrollmentInput: CreateEnrollmentInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICreateEnrollmentMutation>({\n                mutation: gql`\n                    mutation CreateEnrollment($enrollmentInput: EnrollmentInput, $invitedStudent: StudentInput) {\n                        createEnrollment(enrollmentInput: $enrollmentInput, invitedStudent: $invitedStudent) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    enrollmentInput: createEnrollmentInput.enrollmentInput,\n                    invitedStudent: createEnrollmentInput.invitedStudent,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateEnrollmentMutation>) => {\n                    return result.data.createEnrollment;\n                }),\n            );\n    }\n\n    getEnrollment(enrollmentId: string): Observable<Enrollment> {\n        this.getEnrollmentQuery$ = this.apollo.watchQuery({\n            query: gql`\n            {\n                enrollment(id: \"${enrollmentId}\") {\n                    ...enrollmentDetail\n                }\n            }\n            ${ENROLLMENT_DETAIL}\n            `,\n        });\n\n        return this.getEnrollmentQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IEnrollment>) => result.data.enrollment),\n        );\n    }\n\n    refetchEnrollment(): void {\n        if (this.getEnrollmentQuery$) {\n            this.getEnrollmentQuery$.refetch();\n        }\n    }\n\n    cancelEnrollment(id: string): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICancelEnrollmentMutation>({\n                mutation: gql`\n                    mutation CancelEnrollmentMutation {\n                        cancelEnrollment(id: \"${id}\") {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICancelEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.cancelEnrollment;\n                }),\n            );\n    }\n\n    changeEnrollmentSchedule(changeScheduleInput: IChangeScheduleInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<IChangeEnrollmentScheduleMutation>({\n                mutation: gql`\n                    mutation ChangeEnrollmentScheduleMutation($changeScheduleInput: ChangeScheduleInput) {\n                        changeEnrollmentSchedule(changeScheduleInput: $changeScheduleInput) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    changeScheduleInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeEnrollmentScheduleMutation>) => {\n                    return result.data.changeEnrollmentSchedule;\n                }),\n            );\n    }\n\n    transferEnrollment(id: string, events: Event[]) {\n        return this.apollo\n            .mutate<ITransferEnrollmentMutation>({\n                mutation: gql`\n                    mutation removeStudentFromGroup($id: id, $events: EventsInput) {\n                        removeStudentFromGroup(id: $id, events: $events) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    id,\n                    events,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ITransferEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.removeStudentFromGroup;\n                }),\n            );\n    }\n\n    startClass(startClassInput: IStartClassInput): Observable<ClassRecord> {\n        return this.apollo\n            .mutate<IStartClassMutation>({\n                mutation: gql`\n                    mutation StartClassMutation($startClassInput: StartClassInput) {\n                        startClass(startClassInput: $startClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { startClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IStartClassMutation>) => {\n                    const classInProgress = result.data.startClass;\n                    this.classInProgressSource.next(classInProgress);\n\n                    this.classroomRefetch();\n                    return classInProgress;\n                }),\n            );\n    }\n\n    finishClass(finishClassInput: IFinishClassInput): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IFinishClassMutation>({\n                mutation: gql`\n                    mutation FinishClassMutation($finishClassInput: FinishClassInput) {\n                        finishClass(finishClassInput: $finishClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { finishClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IFinishClassMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.finishClass;\n                }),\n            );\n    }\n\n    getGroupsQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query ClassroomQuery($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        id\n                        studyGroups {\n                            ...studyGroupSummary\n                        }\n                    }\n                }\n                ${STUDY_GROUP_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n    }\n\n    getGroupById(id: string): Observable<StudyGroup> {\n        this.getGroupByIdQuery$ = this.apollo.watchQuery<any>({\n            query: gql`\n                query findGroupById($id: String) {\n                    findGroupById(id: $id) {\n                        ...studyGroupDetails\n                    }\n                }\n                ${STUDY_GROUP_DETAILS}\n            `,\n            variables: {\n                id,\n            },\n        });\n\n        return this.getGroupByIdQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IFindGroupById>) => result.data.findGroupById),\n        );\n    }\n\n    refetchCurrentGroupById(groupId?: string): void {\n        if (groupId) {\n            this.getGroupById(groupId);\n        }\n\n        if (this.getGroupByIdQuery$) {\n            this.getGroupByIdQuery$.refetch();\n        }\n    }\n\n    createStudyGroup(createGroupInput: CreateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<ICreateStudyGroupMutation>({\n                mutation: gql`\n                    mutation CreateGroupMutation($createGroupInput: CreateStudyGroupInput) {\n                        createStudyGroup(createGroupInput: $createGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    createGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.createStudyGroup;\n                }),\n            );\n    }\n\n    updateStudyGroup(studyGroupInput: IUpdateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IUpdateStudyGroupMutation>({\n                mutation: gql`\n                    mutation UpdateStudyGroupMutation($studyGroupInput: UpdateStudyGroupInput) {\n                        updateStudyGroup(studyGroupInput: $studyGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    studyGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.studyGroup;\n                }),\n            );\n    }\n\n    removeStudyGroup(removeGroupInput: IRemoveGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IRemoveGroupMutation>({\n                mutation: gql`\n                    mutation RemoveStudyGroupMutation($removeGroupInput: RemoveStudyGroupInput) {\n                        removeStudyGroup(removeGroupInput: $removeGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    removeGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRemoveGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.group;\n                }),\n            );\n    }\n\n    addStudentToGroup(enrollmentInput: IAddStudentToGroupInput) {\n        return this.apollo\n            .mutate<IAddStudentToGroupMutation>({\n                mutation: gql`\n                    mutation AddStudentToGroupMutation($enrollmentInput: AddStudentToGroupInput) {\n                        addStudentToGroup(enrollmentInput: $enrollmentInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    enrollmentInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IAddStudentToGroupMutation>) => {\n                    this.classroomRefetch();\n                    this.refetchCurrentGroupById();\n                    return result.data.addStudentToGroup;\n                }),\n            );\n    }\n\n    revertFinishedClassStatus(\n        revertFinishedClassStatusInput: IRevertFinishedClassStatusInput,\n    ): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IRevertFinishedClassStatusMutation>({\n                mutation: gql`\n                    mutation revertFinishedClassStatusMutation(\n                        $revertFinishedClassStatusInput: RevertFinishedClassStatusInput\n                    ) {\n                        revertFinishedClassStatus(revertFinishedClassStatusInput: $revertFinishedClassStatusInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { revertFinishedClassStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertFinishedClassStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertFinishedClassStatus;\n                }),\n            );\n    }\n\n    revertLessonStatus(revertLessonStatusInput: IRevertLessonStatusInput): Observable<Lesson> {\n        return this.apollo\n            .mutate<IRevertLessonStatusMutation>({\n                mutation: gql`\n                    mutation revertLessonStatusMutation($revertLessonStatusInput: RevertLessonStatusInput) {\n                        revertLessonStatus(revertLessonStatusInput: $revertLessonStatusInput) {\n                            ...lessonSummary\n                        }\n                    }\n                    ${LESSON_SUMMARY}\n                `,\n                variables: { revertLessonStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertLessonStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertLessonStatus;\n                }),\n            );\n    }\n\n    activateEnrollment(enrollmentId: string): Observable<any> {\n        return this.apollo\n            .mutate<IActivateEnrollmentMutation>({\n                mutation: gql`\n                    mutation ActivateEnrollmentMutation($enrollmentId: ID) {\n                        activateEnrollment(enrollmentId: $enrollmentId) {\n                            id\n                        }\n                    }\n                `,\n                variables: { enrollmentId },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IActivateEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.updatedEnrollment;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "addStudentToGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Enrollment",
                    "optional": false,
                    "description": "",
                    "line": 162
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ICancelEnrollmentMutation",
            "id": "interface-ICancelEnrollmentMutation-393bbeee17eb6281c8a64cc8ff3beb12",
            "file": "src/app/@core/services/classroom.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\nimport {\n    ClassRecord,\n    ClassRecordType,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from '../models/class-record.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, SourceType, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\n\nimport { CreateStudyGroupInput } from 'app/classroom/pages/groups-page/groups-page.component';\nimport { ENROLLMENT_DETAIL } from 'app/@core/graphql/enrollment.graphql';\nimport { CLASSROOM_SUMMARY } from '../graphql/classroom.graphql';\nimport { CLASS_RECORD_SUMMARY } from '../graphql/class-record.graphql';\nimport { STUDY_GROUP_DETAILS, STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { LESSON_SUMMARY } from '../graphql/lesson.graphql';\nimport { Lesson } from '../models/lesson.model';\n\ninterface IStartClassMutation {\n    startClass: ClassRecord;\n}\n\nexport interface IStartClassInput {\n    lessonId: string;\n    levelId: string;\n    sourceId: string;\n    sourceType: SourceType;\n    teacherNotes?: string;\n}\n\ninterface ICreateEnrollmentMutation {\n    createEnrollment: Enrollment;\n}\n\ninterface IEnrollment {\n    enrollment: Enrollment;\n}\n\ninterface IGetEnrollments {\n    enrollments: Enrollment[];\n}\n\ninterface IFindGroupById {\n    findGroupById: StudyGroup;\n}\n\ninterface ICancelEnrollmentMutation {\n    cancelEnrollment: Enrollment;\n}\n\ninterface IChangeScheduleInput {\n    enrollmentId: string;\n    events: Event[];\n}\n\ninterface IChangeEnrollmentScheduleMutation {\n    changeEnrollmentSchedule: Enrollment;\n}\n\ninterface ICreateStudyGroupMutation {\n    createStudyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupMutation {\n    studyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupInput {\n    studyGroupId: string;\n    name: string;\n    events?: Event[];\n}\n\ninterface IRemoveGroupInput {\n    studyGroupId: string;\n}\n\ninterface IRemoveGroupMutation {\n    group: StudyGroup;\n}\n\ninterface StudyGroupAttendeInput {\n    studentId: string;\n    attended: boolean;\n}\ninterface IActivateEnrollmentMutation {\n    updatedEnrollment: Enrollment;\n}\n\nexport interface IFinishClassInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n    teacherNotes?: string;\n    status: string;\n    lessonStartedAt: string;\n    lessonEndedAt: string;\n    attendees?: StudyGroupAttendeInput[];\n}\n\ninterface IFinishClassMutation {\n    finishClass: ClassRecordType;\n}\n\ninterface ITransferEnrollmentMutation {\n    removeStudentFromGroup: Enrollment;\n}\nexport interface IRevertFinishedClassStatusInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n}\n\ninterface IRevertFinishedClassStatusMutation {\n    revertFinishedClassStatus: ClassRecordType;\n}\nexport interface IRevertLessonStatusInput {\n    sourceId: string;\n    sourceType: SourceType;\n    lessonId: string;\n}\n\ninterface IRevertLessonStatusMutation {\n    revertLessonStatus: Lesson;\n}\n\nexport interface Student {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    opened?: boolean; // front-end only field\n}\n\ninterface IClassroomQuery {\n    classroom: IClassroom;\n}\n\nexport interface IClassroom {\n    id?: string;\n    classInProgress?: ClassRecordType;\n    enrollments?: Enrollment[];\n    studyGroups?: StudyGroup[];\n    students?: Student[];\n    studentEnrollments?: Enrollment[];\n}\n\nexport interface IClassroomFiltersInput {\n    enrollmentStatus?: string;\n    studyGroupStatus?: string;\n}\n\ninterface IAddStudentToGroupMutation {\n    addStudentToGroup: Enrollment;\n}\ninterface IAddStudentToGroupInput {\n    id: string;\n    studyGroupId: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClassroomService {\n    private classInProgressSource = new BehaviorSubject<ClassRecord>(undefined);\n\n    public classInProgress$ = this.classInProgressSource.asObservable();\n\n    getGroupByIdQuery$: QueryRef<IFindGroupById>;\n    getEnrollmentQuery$: QueryRef<IEnrollment>;\n    classroomQuery$: QueryRef<IClassroomQuery>;\n\n    classroomFiltersInput: IClassroomFiltersInput = {\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    };\n\n    constructor(private apollo: Apollo) {}\n\n    getClassroom$(): Observable<IClassroom> {\n        this.classroomQuery$ = this.apollo.watchQuery({\n            query: gql`\n                query Classroom($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        ...classroomSummary\n                    }\n                }\n                ${CLASSROOM_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n\n        return this.classroomQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IClassroomQuery>) => {\n                const classInProgress = result.data.classroom.classInProgress;\n                if (!classInProgress) {\n                    this.classInProgressSource.next(null);\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        this.classInProgressSource.next({\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        });\n                    } else {\n                        this.classInProgressSource.next({\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        });\n                    }\n                }\n\n                return result.data.classroom;\n            }),\n            share(),\n        );\n    }\n\n    classroomRefetch(): void {\n        this.getClassroom$();\n        this.classroomQuery$.refetch();\n    }\n\n    setClassroomFiltersInput(filters: IClassroomFiltersInput = {}) {\n        this.classroomFiltersInput = { ...this.classroomFiltersInput, ...filters };\n    }\n\n    createEnrollmentInvitation(createEnrollmentInput: CreateEnrollmentInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICreateEnrollmentMutation>({\n                mutation: gql`\n                    mutation CreateEnrollment($enrollmentInput: EnrollmentInput, $invitedStudent: StudentInput) {\n                        createEnrollment(enrollmentInput: $enrollmentInput, invitedStudent: $invitedStudent) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    enrollmentInput: createEnrollmentInput.enrollmentInput,\n                    invitedStudent: createEnrollmentInput.invitedStudent,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateEnrollmentMutation>) => {\n                    return result.data.createEnrollment;\n                }),\n            );\n    }\n\n    getEnrollment(enrollmentId: string): Observable<Enrollment> {\n        this.getEnrollmentQuery$ = this.apollo.watchQuery({\n            query: gql`\n            {\n                enrollment(id: \"${enrollmentId}\") {\n                    ...enrollmentDetail\n                }\n            }\n            ${ENROLLMENT_DETAIL}\n            `,\n        });\n\n        return this.getEnrollmentQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IEnrollment>) => result.data.enrollment),\n        );\n    }\n\n    refetchEnrollment(): void {\n        if (this.getEnrollmentQuery$) {\n            this.getEnrollmentQuery$.refetch();\n        }\n    }\n\n    cancelEnrollment(id: string): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICancelEnrollmentMutation>({\n                mutation: gql`\n                    mutation CancelEnrollmentMutation {\n                        cancelEnrollment(id: \"${id}\") {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICancelEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.cancelEnrollment;\n                }),\n            );\n    }\n\n    changeEnrollmentSchedule(changeScheduleInput: IChangeScheduleInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<IChangeEnrollmentScheduleMutation>({\n                mutation: gql`\n                    mutation ChangeEnrollmentScheduleMutation($changeScheduleInput: ChangeScheduleInput) {\n                        changeEnrollmentSchedule(changeScheduleInput: $changeScheduleInput) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    changeScheduleInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeEnrollmentScheduleMutation>) => {\n                    return result.data.changeEnrollmentSchedule;\n                }),\n            );\n    }\n\n    transferEnrollment(id: string, events: Event[]) {\n        return this.apollo\n            .mutate<ITransferEnrollmentMutation>({\n                mutation: gql`\n                    mutation removeStudentFromGroup($id: id, $events: EventsInput) {\n                        removeStudentFromGroup(id: $id, events: $events) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    id,\n                    events,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ITransferEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.removeStudentFromGroup;\n                }),\n            );\n    }\n\n    startClass(startClassInput: IStartClassInput): Observable<ClassRecord> {\n        return this.apollo\n            .mutate<IStartClassMutation>({\n                mutation: gql`\n                    mutation StartClassMutation($startClassInput: StartClassInput) {\n                        startClass(startClassInput: $startClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { startClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IStartClassMutation>) => {\n                    const classInProgress = result.data.startClass;\n                    this.classInProgressSource.next(classInProgress);\n\n                    this.classroomRefetch();\n                    return classInProgress;\n                }),\n            );\n    }\n\n    finishClass(finishClassInput: IFinishClassInput): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IFinishClassMutation>({\n                mutation: gql`\n                    mutation FinishClassMutation($finishClassInput: FinishClassInput) {\n                        finishClass(finishClassInput: $finishClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { finishClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IFinishClassMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.finishClass;\n                }),\n            );\n    }\n\n    getGroupsQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query ClassroomQuery($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        id\n                        studyGroups {\n                            ...studyGroupSummary\n                        }\n                    }\n                }\n                ${STUDY_GROUP_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n    }\n\n    getGroupById(id: string): Observable<StudyGroup> {\n        this.getGroupByIdQuery$ = this.apollo.watchQuery<any>({\n            query: gql`\n                query findGroupById($id: String) {\n                    findGroupById(id: $id) {\n                        ...studyGroupDetails\n                    }\n                }\n                ${STUDY_GROUP_DETAILS}\n            `,\n            variables: {\n                id,\n            },\n        });\n\n        return this.getGroupByIdQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IFindGroupById>) => result.data.findGroupById),\n        );\n    }\n\n    refetchCurrentGroupById(groupId?: string): void {\n        if (groupId) {\n            this.getGroupById(groupId);\n        }\n\n        if (this.getGroupByIdQuery$) {\n            this.getGroupByIdQuery$.refetch();\n        }\n    }\n\n    createStudyGroup(createGroupInput: CreateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<ICreateStudyGroupMutation>({\n                mutation: gql`\n                    mutation CreateGroupMutation($createGroupInput: CreateStudyGroupInput) {\n                        createStudyGroup(createGroupInput: $createGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    createGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.createStudyGroup;\n                }),\n            );\n    }\n\n    updateStudyGroup(studyGroupInput: IUpdateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IUpdateStudyGroupMutation>({\n                mutation: gql`\n                    mutation UpdateStudyGroupMutation($studyGroupInput: UpdateStudyGroupInput) {\n                        updateStudyGroup(studyGroupInput: $studyGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    studyGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.studyGroup;\n                }),\n            );\n    }\n\n    removeStudyGroup(removeGroupInput: IRemoveGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IRemoveGroupMutation>({\n                mutation: gql`\n                    mutation RemoveStudyGroupMutation($removeGroupInput: RemoveStudyGroupInput) {\n                        removeStudyGroup(removeGroupInput: $removeGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    removeGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRemoveGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.group;\n                }),\n            );\n    }\n\n    addStudentToGroup(enrollmentInput: IAddStudentToGroupInput) {\n        return this.apollo\n            .mutate<IAddStudentToGroupMutation>({\n                mutation: gql`\n                    mutation AddStudentToGroupMutation($enrollmentInput: AddStudentToGroupInput) {\n                        addStudentToGroup(enrollmentInput: $enrollmentInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    enrollmentInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IAddStudentToGroupMutation>) => {\n                    this.classroomRefetch();\n                    this.refetchCurrentGroupById();\n                    return result.data.addStudentToGroup;\n                }),\n            );\n    }\n\n    revertFinishedClassStatus(\n        revertFinishedClassStatusInput: IRevertFinishedClassStatusInput,\n    ): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IRevertFinishedClassStatusMutation>({\n                mutation: gql`\n                    mutation revertFinishedClassStatusMutation(\n                        $revertFinishedClassStatusInput: RevertFinishedClassStatusInput\n                    ) {\n                        revertFinishedClassStatus(revertFinishedClassStatusInput: $revertFinishedClassStatusInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { revertFinishedClassStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertFinishedClassStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertFinishedClassStatus;\n                }),\n            );\n    }\n\n    revertLessonStatus(revertLessonStatusInput: IRevertLessonStatusInput): Observable<Lesson> {\n        return this.apollo\n            .mutate<IRevertLessonStatusMutation>({\n                mutation: gql`\n                    mutation revertLessonStatusMutation($revertLessonStatusInput: RevertLessonStatusInput) {\n                        revertLessonStatus(revertLessonStatusInput: $revertLessonStatusInput) {\n                            ...lessonSummary\n                        }\n                    }\n                    ${LESSON_SUMMARY}\n                `,\n                variables: { revertLessonStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertLessonStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertLessonStatus;\n                }),\n            );\n    }\n\n    activateEnrollment(enrollmentId: string): Observable<any> {\n        return this.apollo\n            .mutate<IActivateEnrollmentMutation>({\n                mutation: gql`\n                    mutation ActivateEnrollmentMutation($enrollmentId: ID) {\n                        activateEnrollment(enrollmentId: $enrollmentId) {\n                            id\n                        }\n                    }\n                `,\n                variables: { enrollmentId },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IActivateEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.updatedEnrollment;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "cancelEnrollment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Enrollment",
                    "optional": false,
                    "description": "",
                    "line": 55
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IChangeEnrollmentScheduleMutation",
            "id": "interface-IChangeEnrollmentScheduleMutation-393bbeee17eb6281c8a64cc8ff3beb12",
            "file": "src/app/@core/services/classroom.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\nimport {\n    ClassRecord,\n    ClassRecordType,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from '../models/class-record.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, SourceType, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\n\nimport { CreateStudyGroupInput } from 'app/classroom/pages/groups-page/groups-page.component';\nimport { ENROLLMENT_DETAIL } from 'app/@core/graphql/enrollment.graphql';\nimport { CLASSROOM_SUMMARY } from '../graphql/classroom.graphql';\nimport { CLASS_RECORD_SUMMARY } from '../graphql/class-record.graphql';\nimport { STUDY_GROUP_DETAILS, STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { LESSON_SUMMARY } from '../graphql/lesson.graphql';\nimport { Lesson } from '../models/lesson.model';\n\ninterface IStartClassMutation {\n    startClass: ClassRecord;\n}\n\nexport interface IStartClassInput {\n    lessonId: string;\n    levelId: string;\n    sourceId: string;\n    sourceType: SourceType;\n    teacherNotes?: string;\n}\n\ninterface ICreateEnrollmentMutation {\n    createEnrollment: Enrollment;\n}\n\ninterface IEnrollment {\n    enrollment: Enrollment;\n}\n\ninterface IGetEnrollments {\n    enrollments: Enrollment[];\n}\n\ninterface IFindGroupById {\n    findGroupById: StudyGroup;\n}\n\ninterface ICancelEnrollmentMutation {\n    cancelEnrollment: Enrollment;\n}\n\ninterface IChangeScheduleInput {\n    enrollmentId: string;\n    events: Event[];\n}\n\ninterface IChangeEnrollmentScheduleMutation {\n    changeEnrollmentSchedule: Enrollment;\n}\n\ninterface ICreateStudyGroupMutation {\n    createStudyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupMutation {\n    studyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupInput {\n    studyGroupId: string;\n    name: string;\n    events?: Event[];\n}\n\ninterface IRemoveGroupInput {\n    studyGroupId: string;\n}\n\ninterface IRemoveGroupMutation {\n    group: StudyGroup;\n}\n\ninterface StudyGroupAttendeInput {\n    studentId: string;\n    attended: boolean;\n}\ninterface IActivateEnrollmentMutation {\n    updatedEnrollment: Enrollment;\n}\n\nexport interface IFinishClassInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n    teacherNotes?: string;\n    status: string;\n    lessonStartedAt: string;\n    lessonEndedAt: string;\n    attendees?: StudyGroupAttendeInput[];\n}\n\ninterface IFinishClassMutation {\n    finishClass: ClassRecordType;\n}\n\ninterface ITransferEnrollmentMutation {\n    removeStudentFromGroup: Enrollment;\n}\nexport interface IRevertFinishedClassStatusInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n}\n\ninterface IRevertFinishedClassStatusMutation {\n    revertFinishedClassStatus: ClassRecordType;\n}\nexport interface IRevertLessonStatusInput {\n    sourceId: string;\n    sourceType: SourceType;\n    lessonId: string;\n}\n\ninterface IRevertLessonStatusMutation {\n    revertLessonStatus: Lesson;\n}\n\nexport interface Student {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    opened?: boolean; // front-end only field\n}\n\ninterface IClassroomQuery {\n    classroom: IClassroom;\n}\n\nexport interface IClassroom {\n    id?: string;\n    classInProgress?: ClassRecordType;\n    enrollments?: Enrollment[];\n    studyGroups?: StudyGroup[];\n    students?: Student[];\n    studentEnrollments?: Enrollment[];\n}\n\nexport interface IClassroomFiltersInput {\n    enrollmentStatus?: string;\n    studyGroupStatus?: string;\n}\n\ninterface IAddStudentToGroupMutation {\n    addStudentToGroup: Enrollment;\n}\ninterface IAddStudentToGroupInput {\n    id: string;\n    studyGroupId: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClassroomService {\n    private classInProgressSource = new BehaviorSubject<ClassRecord>(undefined);\n\n    public classInProgress$ = this.classInProgressSource.asObservable();\n\n    getGroupByIdQuery$: QueryRef<IFindGroupById>;\n    getEnrollmentQuery$: QueryRef<IEnrollment>;\n    classroomQuery$: QueryRef<IClassroomQuery>;\n\n    classroomFiltersInput: IClassroomFiltersInput = {\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    };\n\n    constructor(private apollo: Apollo) {}\n\n    getClassroom$(): Observable<IClassroom> {\n        this.classroomQuery$ = this.apollo.watchQuery({\n            query: gql`\n                query Classroom($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        ...classroomSummary\n                    }\n                }\n                ${CLASSROOM_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n\n        return this.classroomQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IClassroomQuery>) => {\n                const classInProgress = result.data.classroom.classInProgress;\n                if (!classInProgress) {\n                    this.classInProgressSource.next(null);\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        this.classInProgressSource.next({\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        });\n                    } else {\n                        this.classInProgressSource.next({\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        });\n                    }\n                }\n\n                return result.data.classroom;\n            }),\n            share(),\n        );\n    }\n\n    classroomRefetch(): void {\n        this.getClassroom$();\n        this.classroomQuery$.refetch();\n    }\n\n    setClassroomFiltersInput(filters: IClassroomFiltersInput = {}) {\n        this.classroomFiltersInput = { ...this.classroomFiltersInput, ...filters };\n    }\n\n    createEnrollmentInvitation(createEnrollmentInput: CreateEnrollmentInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICreateEnrollmentMutation>({\n                mutation: gql`\n                    mutation CreateEnrollment($enrollmentInput: EnrollmentInput, $invitedStudent: StudentInput) {\n                        createEnrollment(enrollmentInput: $enrollmentInput, invitedStudent: $invitedStudent) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    enrollmentInput: createEnrollmentInput.enrollmentInput,\n                    invitedStudent: createEnrollmentInput.invitedStudent,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateEnrollmentMutation>) => {\n                    return result.data.createEnrollment;\n                }),\n            );\n    }\n\n    getEnrollment(enrollmentId: string): Observable<Enrollment> {\n        this.getEnrollmentQuery$ = this.apollo.watchQuery({\n            query: gql`\n            {\n                enrollment(id: \"${enrollmentId}\") {\n                    ...enrollmentDetail\n                }\n            }\n            ${ENROLLMENT_DETAIL}\n            `,\n        });\n\n        return this.getEnrollmentQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IEnrollment>) => result.data.enrollment),\n        );\n    }\n\n    refetchEnrollment(): void {\n        if (this.getEnrollmentQuery$) {\n            this.getEnrollmentQuery$.refetch();\n        }\n    }\n\n    cancelEnrollment(id: string): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICancelEnrollmentMutation>({\n                mutation: gql`\n                    mutation CancelEnrollmentMutation {\n                        cancelEnrollment(id: \"${id}\") {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICancelEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.cancelEnrollment;\n                }),\n            );\n    }\n\n    changeEnrollmentSchedule(changeScheduleInput: IChangeScheduleInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<IChangeEnrollmentScheduleMutation>({\n                mutation: gql`\n                    mutation ChangeEnrollmentScheduleMutation($changeScheduleInput: ChangeScheduleInput) {\n                        changeEnrollmentSchedule(changeScheduleInput: $changeScheduleInput) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    changeScheduleInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeEnrollmentScheduleMutation>) => {\n                    return result.data.changeEnrollmentSchedule;\n                }),\n            );\n    }\n\n    transferEnrollment(id: string, events: Event[]) {\n        return this.apollo\n            .mutate<ITransferEnrollmentMutation>({\n                mutation: gql`\n                    mutation removeStudentFromGroup($id: id, $events: EventsInput) {\n                        removeStudentFromGroup(id: $id, events: $events) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    id,\n                    events,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ITransferEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.removeStudentFromGroup;\n                }),\n            );\n    }\n\n    startClass(startClassInput: IStartClassInput): Observable<ClassRecord> {\n        return this.apollo\n            .mutate<IStartClassMutation>({\n                mutation: gql`\n                    mutation StartClassMutation($startClassInput: StartClassInput) {\n                        startClass(startClassInput: $startClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { startClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IStartClassMutation>) => {\n                    const classInProgress = result.data.startClass;\n                    this.classInProgressSource.next(classInProgress);\n\n                    this.classroomRefetch();\n                    return classInProgress;\n                }),\n            );\n    }\n\n    finishClass(finishClassInput: IFinishClassInput): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IFinishClassMutation>({\n                mutation: gql`\n                    mutation FinishClassMutation($finishClassInput: FinishClassInput) {\n                        finishClass(finishClassInput: $finishClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { finishClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IFinishClassMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.finishClass;\n                }),\n            );\n    }\n\n    getGroupsQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query ClassroomQuery($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        id\n                        studyGroups {\n                            ...studyGroupSummary\n                        }\n                    }\n                }\n                ${STUDY_GROUP_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n    }\n\n    getGroupById(id: string): Observable<StudyGroup> {\n        this.getGroupByIdQuery$ = this.apollo.watchQuery<any>({\n            query: gql`\n                query findGroupById($id: String) {\n                    findGroupById(id: $id) {\n                        ...studyGroupDetails\n                    }\n                }\n                ${STUDY_GROUP_DETAILS}\n            `,\n            variables: {\n                id,\n            },\n        });\n\n        return this.getGroupByIdQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IFindGroupById>) => result.data.findGroupById),\n        );\n    }\n\n    refetchCurrentGroupById(groupId?: string): void {\n        if (groupId) {\n            this.getGroupById(groupId);\n        }\n\n        if (this.getGroupByIdQuery$) {\n            this.getGroupByIdQuery$.refetch();\n        }\n    }\n\n    createStudyGroup(createGroupInput: CreateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<ICreateStudyGroupMutation>({\n                mutation: gql`\n                    mutation CreateGroupMutation($createGroupInput: CreateStudyGroupInput) {\n                        createStudyGroup(createGroupInput: $createGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    createGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.createStudyGroup;\n                }),\n            );\n    }\n\n    updateStudyGroup(studyGroupInput: IUpdateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IUpdateStudyGroupMutation>({\n                mutation: gql`\n                    mutation UpdateStudyGroupMutation($studyGroupInput: UpdateStudyGroupInput) {\n                        updateStudyGroup(studyGroupInput: $studyGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    studyGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.studyGroup;\n                }),\n            );\n    }\n\n    removeStudyGroup(removeGroupInput: IRemoveGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IRemoveGroupMutation>({\n                mutation: gql`\n                    mutation RemoveStudyGroupMutation($removeGroupInput: RemoveStudyGroupInput) {\n                        removeStudyGroup(removeGroupInput: $removeGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    removeGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRemoveGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.group;\n                }),\n            );\n    }\n\n    addStudentToGroup(enrollmentInput: IAddStudentToGroupInput) {\n        return this.apollo\n            .mutate<IAddStudentToGroupMutation>({\n                mutation: gql`\n                    mutation AddStudentToGroupMutation($enrollmentInput: AddStudentToGroupInput) {\n                        addStudentToGroup(enrollmentInput: $enrollmentInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    enrollmentInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IAddStudentToGroupMutation>) => {\n                    this.classroomRefetch();\n                    this.refetchCurrentGroupById();\n                    return result.data.addStudentToGroup;\n                }),\n            );\n    }\n\n    revertFinishedClassStatus(\n        revertFinishedClassStatusInput: IRevertFinishedClassStatusInput,\n    ): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IRevertFinishedClassStatusMutation>({\n                mutation: gql`\n                    mutation revertFinishedClassStatusMutation(\n                        $revertFinishedClassStatusInput: RevertFinishedClassStatusInput\n                    ) {\n                        revertFinishedClassStatus(revertFinishedClassStatusInput: $revertFinishedClassStatusInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { revertFinishedClassStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertFinishedClassStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertFinishedClassStatus;\n                }),\n            );\n    }\n\n    revertLessonStatus(revertLessonStatusInput: IRevertLessonStatusInput): Observable<Lesson> {\n        return this.apollo\n            .mutate<IRevertLessonStatusMutation>({\n                mutation: gql`\n                    mutation revertLessonStatusMutation($revertLessonStatusInput: RevertLessonStatusInput) {\n                        revertLessonStatus(revertLessonStatusInput: $revertLessonStatusInput) {\n                            ...lessonSummary\n                        }\n                    }\n                    ${LESSON_SUMMARY}\n                `,\n                variables: { revertLessonStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertLessonStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertLessonStatus;\n                }),\n            );\n    }\n\n    activateEnrollment(enrollmentId: string): Observable<any> {\n        return this.apollo\n            .mutate<IActivateEnrollmentMutation>({\n                mutation: gql`\n                    mutation ActivateEnrollmentMutation($enrollmentId: ID) {\n                        activateEnrollment(enrollmentId: $enrollmentId) {\n                            id\n                        }\n                    }\n                `,\n                variables: { enrollmentId },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IActivateEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.updatedEnrollment;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "changeEnrollmentSchedule",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Enrollment",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IChangePassword",
            "id": "interface-IChangePassword-56d579829aba74f364a721cb116cbe5e",
            "file": "src/app/@core/services/user.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Apollo, gql } from 'apollo-angular';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { environment } from 'environments/environment';\nimport { UserAuthDetails, UserProfile } from 'app/@core/models/user-profile.model';\nimport { UserSessionService } from 'app/@core/services/user-session.service';\nimport { USER_PROFILE } from '../graphql/user-profile.graphql';\nimport { CreatePasswordStudentInfo } from '../models/invitation.model';\nimport { LiveChatService } from './live-chat.service';\n\ninterface ILoginResult {\n    token: string;\n}\n\ninterface IUserResult {\n    myProfile: UserProfile;\n}\n\ninterface IUpdateMyProfileResult {\n    updateMyProfile: UserProfile;\n}\n\ninterface IChangePassword {\n    user: UserProfile;\n}\n\ninterface INewUser {\n    email: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n    cpf: string;\n    postalCode: string;\n    street: string;\n    streetNumber: string;\n    streetComplement: string;\n    district: string;\n    city: string;\n    state: string;\n    addressType?: string;\n    countryISO?: string;\n    category?: string;\n    earlyAccessCode?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n    private loggedUserSubject: BehaviorSubject<UserAuthDetails>;\n    public loggedUser: Observable<UserAuthDetails>;\n\n    private studentInfoSubject = new BehaviorSubject<CreatePasswordStudentInfo | null>(null);\n    studentInfo$ = this.studentInfoSubject.asObservable();\n\n    constructor(\n        private http: HttpClient,\n        private apollo: Apollo,\n        private _userSessionService: UserSessionService,\n        private liveChatService: LiveChatService,\n    ) {\n        this.loggedUserSubject = new BehaviorSubject<UserAuthDetails>(null);\n        this.loggedUser = this.loggedUserSubject.asObservable();\n\n        this.setUserFromAuthToken().subscribe();\n    }\n\n    setUserFromAuthToken(): Observable<UserAuthDetails> {\n        const jwt = this._userSessionService.getAuthToken();\n        if (!jwt) {\n            return of(undefined);\n        }\n\n        this.liveChatService.getLiveChatToken();\n        const jwtPayload = JSON.parse(atob(jwt.split('.')[1])) as UserAuthDetails;\n        if (!jwtPayload.roles) {\n            jwtPayload.roles = [];\n        }\n\n        this.loggedUserSubject.next(jwtPayload);\n\n        return of(jwtPayload);\n    }\n\n    getUserProfile(): Observable<UserProfile> {\n        if (!this._userSessionService.getAuthToken()) {\n            return;\n        }\n\n        return this.apollo\n            .query({\n                query: gql`\n                    {\n                        myProfile {\n                            ...userProfile\n                        }\n                    }\n                    ${USER_PROFILE}\n                `,\n            })\n            .pipe(map((result: ApolloQueryResult<IUserResult>) => result.data.myProfile));\n    }\n\n    updateMyProfile(userProfile: UserProfile): Observable<UserProfile> {\n        return this.apollo\n            .mutate<IUpdateMyProfileResult>({\n                variables: {\n                    userProfile,\n                },\n                mutation: gql`\n                    mutation updateMyProfile($userProfile: UserInput) {\n                        updateMyProfile(userProfile: $userProfile) {\n                            ...userProfile\n                        }\n                    }\n                    ${USER_PROFILE}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateMyProfileResult>) => {\n                    const updatedUser = result.data.updateMyProfile;\n                    return updatedUser;\n                }),\n            );\n    }\n\n    changePassword(changePasswordInput: {\n        userEmail: string;\n        oldPassword: string;\n        newPassword: string;\n    }): Observable<any> {\n        return this.apollo\n            .mutate<IChangePassword>({\n                variables: {\n                    changePasswordInput,\n                },\n                mutation: gql`\n                    mutation changeMyPassword($changePasswordInput: ChangePasswordInput) {\n                        changeMyPassword(changePasswordInput: $changePasswordInput) {\n                            id\n                        }\n                    }\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangePassword>) => {\n                    const updatedUser = result.data.user;\n                    return updatedUser;\n                }),\n            );\n    }\n\n    register(newUser: INewUser): Observable<{ token: string }> {\n        return this.http.post<{ token: string }>(`${environment.apiUrl}/auth/register`, newUser);\n    }\n\n    login(email: string, password: string): Observable<{ token: string }> {\n        return this.http.post<any>(\n            `${environment.apiUrl}/auth/login`,\n            { email, password },\n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                responseType: 'json',\n            },\n        );\n    }\n\n    login2(email: string, password: string): Observable<UserProfile> {\n        return this.http.post<any>(`${environment.apiUrl}/auth/login`, { email, password });\n    }\n\n    loginSuccess(result: ILoginResult) {\n        this._userSessionService.setAuthToken(result.token);\n        return this.setUserFromAuthToken();\n    }\n\n    logout(): void {\n        this.loggedUserSubject.next(null);\n        this._userSessionService.removeAuthToken();\n    }\n\n    forgotPassword(email: string): Observable<any> {\n        return this.http.post<any>(\n            `${environment.apiUrl}/auth/forgot-password`,\n            { email },\n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                responseType: 'json',\n            },\n        );\n    }\n\n    resetPassword(resetPasswordToken: string, newPassword: string): Observable<any> {\n        return this.http.post<any>(\n            `${environment.apiUrl}/auth/reset-password`,\n            { resetPasswordToken, newPassword },\n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                responseType: 'json',\n            },\n        );\n    }\n\n    validateEmail(email: string): Observable<any> {\n        return this.http.post<any>(\n            `${environment.apiUrl}/auth/email-validation`,\n            { primaryEmail: email },\n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                responseType: 'json',\n            },\n        );\n    }\n\n    setStudentInfoForCreatePassword(studentInfo: CreatePasswordStudentInfo) {\n        this.studentInfoSubject.next(studentInfo);\n    }\n\n    getStudentInfo() {\n        return this.studentInfoSubject.getValue();\n    }\n\n    hasRole(role: string) {\n        const { roles } = this.loggedUserSubject.getValue();\n        return roles.includes(role);\n    }\n}\n",
            "properties": [
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserProfile",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IChangeScheduleInput",
            "id": "interface-IChangeScheduleInput-393bbeee17eb6281c8a64cc8ff3beb12",
            "file": "src/app/@core/services/classroom.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\nimport {\n    ClassRecord,\n    ClassRecordType,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from '../models/class-record.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, SourceType, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\n\nimport { CreateStudyGroupInput } from 'app/classroom/pages/groups-page/groups-page.component';\nimport { ENROLLMENT_DETAIL } from 'app/@core/graphql/enrollment.graphql';\nimport { CLASSROOM_SUMMARY } from '../graphql/classroom.graphql';\nimport { CLASS_RECORD_SUMMARY } from '../graphql/class-record.graphql';\nimport { STUDY_GROUP_DETAILS, STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { LESSON_SUMMARY } from '../graphql/lesson.graphql';\nimport { Lesson } from '../models/lesson.model';\n\ninterface IStartClassMutation {\n    startClass: ClassRecord;\n}\n\nexport interface IStartClassInput {\n    lessonId: string;\n    levelId: string;\n    sourceId: string;\n    sourceType: SourceType;\n    teacherNotes?: string;\n}\n\ninterface ICreateEnrollmentMutation {\n    createEnrollment: Enrollment;\n}\n\ninterface IEnrollment {\n    enrollment: Enrollment;\n}\n\ninterface IGetEnrollments {\n    enrollments: Enrollment[];\n}\n\ninterface IFindGroupById {\n    findGroupById: StudyGroup;\n}\n\ninterface ICancelEnrollmentMutation {\n    cancelEnrollment: Enrollment;\n}\n\ninterface IChangeScheduleInput {\n    enrollmentId: string;\n    events: Event[];\n}\n\ninterface IChangeEnrollmentScheduleMutation {\n    changeEnrollmentSchedule: Enrollment;\n}\n\ninterface ICreateStudyGroupMutation {\n    createStudyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupMutation {\n    studyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupInput {\n    studyGroupId: string;\n    name: string;\n    events?: Event[];\n}\n\ninterface IRemoveGroupInput {\n    studyGroupId: string;\n}\n\ninterface IRemoveGroupMutation {\n    group: StudyGroup;\n}\n\ninterface StudyGroupAttendeInput {\n    studentId: string;\n    attended: boolean;\n}\ninterface IActivateEnrollmentMutation {\n    updatedEnrollment: Enrollment;\n}\n\nexport interface IFinishClassInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n    teacherNotes?: string;\n    status: string;\n    lessonStartedAt: string;\n    lessonEndedAt: string;\n    attendees?: StudyGroupAttendeInput[];\n}\n\ninterface IFinishClassMutation {\n    finishClass: ClassRecordType;\n}\n\ninterface ITransferEnrollmentMutation {\n    removeStudentFromGroup: Enrollment;\n}\nexport interface IRevertFinishedClassStatusInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n}\n\ninterface IRevertFinishedClassStatusMutation {\n    revertFinishedClassStatus: ClassRecordType;\n}\nexport interface IRevertLessonStatusInput {\n    sourceId: string;\n    sourceType: SourceType;\n    lessonId: string;\n}\n\ninterface IRevertLessonStatusMutation {\n    revertLessonStatus: Lesson;\n}\n\nexport interface Student {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    opened?: boolean; // front-end only field\n}\n\ninterface IClassroomQuery {\n    classroom: IClassroom;\n}\n\nexport interface IClassroom {\n    id?: string;\n    classInProgress?: ClassRecordType;\n    enrollments?: Enrollment[];\n    studyGroups?: StudyGroup[];\n    students?: Student[];\n    studentEnrollments?: Enrollment[];\n}\n\nexport interface IClassroomFiltersInput {\n    enrollmentStatus?: string;\n    studyGroupStatus?: string;\n}\n\ninterface IAddStudentToGroupMutation {\n    addStudentToGroup: Enrollment;\n}\ninterface IAddStudentToGroupInput {\n    id: string;\n    studyGroupId: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClassroomService {\n    private classInProgressSource = new BehaviorSubject<ClassRecord>(undefined);\n\n    public classInProgress$ = this.classInProgressSource.asObservable();\n\n    getGroupByIdQuery$: QueryRef<IFindGroupById>;\n    getEnrollmentQuery$: QueryRef<IEnrollment>;\n    classroomQuery$: QueryRef<IClassroomQuery>;\n\n    classroomFiltersInput: IClassroomFiltersInput = {\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    };\n\n    constructor(private apollo: Apollo) {}\n\n    getClassroom$(): Observable<IClassroom> {\n        this.classroomQuery$ = this.apollo.watchQuery({\n            query: gql`\n                query Classroom($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        ...classroomSummary\n                    }\n                }\n                ${CLASSROOM_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n\n        return this.classroomQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IClassroomQuery>) => {\n                const classInProgress = result.data.classroom.classInProgress;\n                if (!classInProgress) {\n                    this.classInProgressSource.next(null);\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        this.classInProgressSource.next({\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        });\n                    } else {\n                        this.classInProgressSource.next({\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        });\n                    }\n                }\n\n                return result.data.classroom;\n            }),\n            share(),\n        );\n    }\n\n    classroomRefetch(): void {\n        this.getClassroom$();\n        this.classroomQuery$.refetch();\n    }\n\n    setClassroomFiltersInput(filters: IClassroomFiltersInput = {}) {\n        this.classroomFiltersInput = { ...this.classroomFiltersInput, ...filters };\n    }\n\n    createEnrollmentInvitation(createEnrollmentInput: CreateEnrollmentInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICreateEnrollmentMutation>({\n                mutation: gql`\n                    mutation CreateEnrollment($enrollmentInput: EnrollmentInput, $invitedStudent: StudentInput) {\n                        createEnrollment(enrollmentInput: $enrollmentInput, invitedStudent: $invitedStudent) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    enrollmentInput: createEnrollmentInput.enrollmentInput,\n                    invitedStudent: createEnrollmentInput.invitedStudent,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateEnrollmentMutation>) => {\n                    return result.data.createEnrollment;\n                }),\n            );\n    }\n\n    getEnrollment(enrollmentId: string): Observable<Enrollment> {\n        this.getEnrollmentQuery$ = this.apollo.watchQuery({\n            query: gql`\n            {\n                enrollment(id: \"${enrollmentId}\") {\n                    ...enrollmentDetail\n                }\n            }\n            ${ENROLLMENT_DETAIL}\n            `,\n        });\n\n        return this.getEnrollmentQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IEnrollment>) => result.data.enrollment),\n        );\n    }\n\n    refetchEnrollment(): void {\n        if (this.getEnrollmentQuery$) {\n            this.getEnrollmentQuery$.refetch();\n        }\n    }\n\n    cancelEnrollment(id: string): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICancelEnrollmentMutation>({\n                mutation: gql`\n                    mutation CancelEnrollmentMutation {\n                        cancelEnrollment(id: \"${id}\") {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICancelEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.cancelEnrollment;\n                }),\n            );\n    }\n\n    changeEnrollmentSchedule(changeScheduleInput: IChangeScheduleInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<IChangeEnrollmentScheduleMutation>({\n                mutation: gql`\n                    mutation ChangeEnrollmentScheduleMutation($changeScheduleInput: ChangeScheduleInput) {\n                        changeEnrollmentSchedule(changeScheduleInput: $changeScheduleInput) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    changeScheduleInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeEnrollmentScheduleMutation>) => {\n                    return result.data.changeEnrollmentSchedule;\n                }),\n            );\n    }\n\n    transferEnrollment(id: string, events: Event[]) {\n        return this.apollo\n            .mutate<ITransferEnrollmentMutation>({\n                mutation: gql`\n                    mutation removeStudentFromGroup($id: id, $events: EventsInput) {\n                        removeStudentFromGroup(id: $id, events: $events) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    id,\n                    events,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ITransferEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.removeStudentFromGroup;\n                }),\n            );\n    }\n\n    startClass(startClassInput: IStartClassInput): Observable<ClassRecord> {\n        return this.apollo\n            .mutate<IStartClassMutation>({\n                mutation: gql`\n                    mutation StartClassMutation($startClassInput: StartClassInput) {\n                        startClass(startClassInput: $startClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { startClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IStartClassMutation>) => {\n                    const classInProgress = result.data.startClass;\n                    this.classInProgressSource.next(classInProgress);\n\n                    this.classroomRefetch();\n                    return classInProgress;\n                }),\n            );\n    }\n\n    finishClass(finishClassInput: IFinishClassInput): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IFinishClassMutation>({\n                mutation: gql`\n                    mutation FinishClassMutation($finishClassInput: FinishClassInput) {\n                        finishClass(finishClassInput: $finishClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { finishClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IFinishClassMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.finishClass;\n                }),\n            );\n    }\n\n    getGroupsQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query ClassroomQuery($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        id\n                        studyGroups {\n                            ...studyGroupSummary\n                        }\n                    }\n                }\n                ${STUDY_GROUP_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n    }\n\n    getGroupById(id: string): Observable<StudyGroup> {\n        this.getGroupByIdQuery$ = this.apollo.watchQuery<any>({\n            query: gql`\n                query findGroupById($id: String) {\n                    findGroupById(id: $id) {\n                        ...studyGroupDetails\n                    }\n                }\n                ${STUDY_GROUP_DETAILS}\n            `,\n            variables: {\n                id,\n            },\n        });\n\n        return this.getGroupByIdQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IFindGroupById>) => result.data.findGroupById),\n        );\n    }\n\n    refetchCurrentGroupById(groupId?: string): void {\n        if (groupId) {\n            this.getGroupById(groupId);\n        }\n\n        if (this.getGroupByIdQuery$) {\n            this.getGroupByIdQuery$.refetch();\n        }\n    }\n\n    createStudyGroup(createGroupInput: CreateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<ICreateStudyGroupMutation>({\n                mutation: gql`\n                    mutation CreateGroupMutation($createGroupInput: CreateStudyGroupInput) {\n                        createStudyGroup(createGroupInput: $createGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    createGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.createStudyGroup;\n                }),\n            );\n    }\n\n    updateStudyGroup(studyGroupInput: IUpdateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IUpdateStudyGroupMutation>({\n                mutation: gql`\n                    mutation UpdateStudyGroupMutation($studyGroupInput: UpdateStudyGroupInput) {\n                        updateStudyGroup(studyGroupInput: $studyGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    studyGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.studyGroup;\n                }),\n            );\n    }\n\n    removeStudyGroup(removeGroupInput: IRemoveGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IRemoveGroupMutation>({\n                mutation: gql`\n                    mutation RemoveStudyGroupMutation($removeGroupInput: RemoveStudyGroupInput) {\n                        removeStudyGroup(removeGroupInput: $removeGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    removeGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRemoveGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.group;\n                }),\n            );\n    }\n\n    addStudentToGroup(enrollmentInput: IAddStudentToGroupInput) {\n        return this.apollo\n            .mutate<IAddStudentToGroupMutation>({\n                mutation: gql`\n                    mutation AddStudentToGroupMutation($enrollmentInput: AddStudentToGroupInput) {\n                        addStudentToGroup(enrollmentInput: $enrollmentInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    enrollmentInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IAddStudentToGroupMutation>) => {\n                    this.classroomRefetch();\n                    this.refetchCurrentGroupById();\n                    return result.data.addStudentToGroup;\n                }),\n            );\n    }\n\n    revertFinishedClassStatus(\n        revertFinishedClassStatusInput: IRevertFinishedClassStatusInput,\n    ): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IRevertFinishedClassStatusMutation>({\n                mutation: gql`\n                    mutation revertFinishedClassStatusMutation(\n                        $revertFinishedClassStatusInput: RevertFinishedClassStatusInput\n                    ) {\n                        revertFinishedClassStatus(revertFinishedClassStatusInput: $revertFinishedClassStatusInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { revertFinishedClassStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertFinishedClassStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertFinishedClassStatus;\n                }),\n            );\n    }\n\n    revertLessonStatus(revertLessonStatusInput: IRevertLessonStatusInput): Observable<Lesson> {\n        return this.apollo\n            .mutate<IRevertLessonStatusMutation>({\n                mutation: gql`\n                    mutation revertLessonStatusMutation($revertLessonStatusInput: RevertLessonStatusInput) {\n                        revertLessonStatus(revertLessonStatusInput: $revertLessonStatusInput) {\n                            ...lessonSummary\n                        }\n                    }\n                    ${LESSON_SUMMARY}\n                `,\n                variables: { revertLessonStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertLessonStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertLessonStatus;\n                }),\n            );\n    }\n\n    activateEnrollment(enrollmentId: string): Observable<any> {\n        return this.apollo\n            .mutate<IActivateEnrollmentMutation>({\n                mutation: gql`\n                    mutation ActivateEnrollmentMutation($enrollmentId: ID) {\n                        activateEnrollment(enrollmentId: $enrollmentId) {\n                            id\n                        }\n                    }\n                `,\n                variables: { enrollmentId },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IActivateEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.updatedEnrollment;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "enrollmentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "events",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Event[]",
                    "optional": false,
                    "description": "",
                    "line": 60
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IChangeSpecificEventBySourceMutation",
            "id": "interface-IChangeSpecificEventBySourceMutation-e7e5de89093583f20e2396ea110e10b5",
            "file": "src/app/@core/services/calendar.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Apollo, gql } from 'apollo-angular';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Event } from 'app/@core/models/event.model';\nimport { EventOccurrence, IEventOccurrenceInput } from 'app/@core/models/event-occurrence.model';\nimport { EVENT_OCCURRENCE_SUMMARY, EVENT_SUMMARY } from '../graphql/events.graphql';\n\nexport interface IMyCalendar {\n    myCalendar: EventOccurrence[];\n}\n\ninterface IMyEvents {\n    myProfile: IEventsOrganised;\n}\n\ninterface IEventsOrganised {\n    eventsOrganised: Event[];\n}\n\ninterface IChangeSpecificEventBySourceMutation {\n    changeSpecificEvent: EventOccurrence;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CalendarService {\n    getMyEventsQuery$: any;\n\n    constructor(private apollo: Apollo) {}\n\n    getMyEvents(): Observable<Event[]> {\n        this.getMyEventsQuery$ = this.apollo.watchQuery({\n            query: gql`\n                {\n                    myProfile {\n                        id\n                        eventsOrganised {\n                            ...eventSummary\n                        }\n                    }\n                }\n                ${EVENT_SUMMARY}\n            `,\n        });\n\n        return this.getMyEventsQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IMyEvents>) => result.data.myProfile.eventsOrganised),\n        );\n    }\n\n    getMyEventsRefetch() {\n        if (this.getMyEventsQuery$) {\n            this.getMyEventsQuery$.refetch();\n        }\n    }\n\n    getMyCalendar(fromDate: Date, toDate: Date) /* : Observable<EventOccurrence[]> */ {\n        return this.apollo.watchQuery({\n            query: gql`\n          {\n            myCalendar(fromDate: \"${fromDate.toISOString()}\", toDate: \"${toDate.toISOString()}\") {\n                ...eventOccurrenceSummary\n              }\n          }\n          ${EVENT_OCCURRENCE_SUMMARY}`,\n        });\n    }\n\n    changeSpecificEvent(changeSpecificEventInput: IEventOccurrenceInput) {\n        return this.apollo\n            .mutate<IChangeSpecificEventBySourceMutation>({\n                mutation: gql`\n                    mutation changeSpecificEventBySourceMutation($changeSpecificEventInput: EventOccurrenceInput) {\n                        changeSpecificEvent(changeSpecificEventInput: $changeSpecificEventInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    changeSpecificEventInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeSpecificEventBySourceMutation>) => {\n                    return result.data.changeSpecificEvent;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "changeSpecificEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventOccurrence",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ICheckoutItem",
            "id": "interface-ICheckoutItem-e3f0e9e20e141f8709c0cbc8138630c1",
            "file": "src/app/@core/services/subscription.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql } from 'apollo-angular';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Invoice } from '../models/invoice.model';\nimport { Product, IProductFilters } from '../models/product.model';\nimport { PRODUCT_DETAILS } from '../graphql/product.graphql';\nimport { SUBSCRIPTION_SUMMARY } from '../graphql/subscription.graphql';\nimport { INVOICE_DETAILS } from '../graphql/invoice.graphql';\nimport { Subscription } from '../models/subscription.model';\n\ninterface IGetInvoicePreview {\n    invoicePreview: Invoice | null;\n}\n\ninterface IGetProducts {\n    products: Product[];\n}\n\ninterface ICreateSubscriptionCheckoutMutation {\n    createSubscriptionCheckout: Subscription;\n}\n\ninterface ICheckoutItem {\n    priceId: string;\n    quantity: number;\n}\n\nexport interface ICreateSubscriptionCheckoutInput {\n    checkoutItems: ICheckoutItem[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SubscriptionService {\n    constructor(private apollo: Apollo) {}\n\n    getInvoicePreview(): Observable<Invoice | null> {\n        return this.apollo\n            .query<IGetInvoicePreview>({\n                query: gql`\n                    {\n                        invoicePreview {\n                            ...invoiceDetails\n                        }\n                    }\n                    ${INVOICE_DETAILS}\n                `,\n            })\n            .pipe(map((result: ApolloQueryResult<IGetInvoicePreview>) => result.data.invoicePreview));\n    }\n\n    getProducts(productFilters?: IProductFilters) {\n        return this.apollo\n            .query<IGetProducts>({\n                query: gql`\n                    query ProductsQuery($productFilters: ProductFilters) {\n                        products(productFilters: $productFilters) {\n                            ...productDetails\n                        }\n                    }\n                    ${PRODUCT_DETAILS}\n                `,\n                variables: {\n                    productFilters,\n                },\n            })\n            .pipe(map((result: ApolloQueryResult<IGetProducts>) => result.data.products));\n    }\n\n    createSubscriptionCheckout(subscriptionCheckoutInput: ICreateSubscriptionCheckoutInput) {\n        return this.apollo\n            .mutate<ICreateSubscriptionCheckoutMutation>({\n                mutation: gql`\n                    mutation createSubscriptionCheckoutMutation(\n                        $subscriptionCheckoutInput: CreateSubscriptionCheckoutInput\n                    ) {\n                        createSubscriptionCheckout(subscriptionCheckoutInput: $subscriptionCheckoutInput) {\n                            ...subscriptionSummary\n                        }\n                    }\n                    ${SUBSCRIPTION_SUMMARY}\n                `,\n                variables: {\n                    subscriptionCheckoutInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateSubscriptionCheckoutMutation>) => {\n                    return result.data.createSubscriptionCheckout;\n                }),\n            );\n    }\n\n    getSubscriptionById(id: string) {\n        return this.apollo.watchQuery<any>({\n            query: gql`\n                query SubscriptionQuery($id: ID) {\n                    subscription(id: $id) {\n                        ...subscriptionSummary\n                    }\n                }\n                ${SUBSCRIPTION_SUMMARY}\n            `,\n            pollInterval: 5000,\n            variables: {\n                id,\n            },\n        });\n    }\n\n    getSubscriptionByCheckoutId(checkoutId: string) {\n        return this.apollo.watchQuery<any>({\n            query: gql`\n                query SubscriptionQueryByStripeCheckoutId($checkoutId: ID) {\n                    subscriptionByStripeCheckoutId(checkoutId: $checkoutId) {\n                        ...subscriptionSummary\n                    }\n                }\n                ${SUBSCRIPTION_SUMMARY}\n            `,\n            pollInterval: 5000,\n            variables: {\n                checkoutId,\n            },\n        });\n    }\n}\n",
            "properties": [
                {
                    "name": "priceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IClassroom",
            "id": "interface-IClassroom-393bbeee17eb6281c8a64cc8ff3beb12",
            "file": "src/app/@core/services/classroom.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\nimport {\n    ClassRecord,\n    ClassRecordType,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from '../models/class-record.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, SourceType, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\n\nimport { CreateStudyGroupInput } from 'app/classroom/pages/groups-page/groups-page.component';\nimport { ENROLLMENT_DETAIL } from 'app/@core/graphql/enrollment.graphql';\nimport { CLASSROOM_SUMMARY } from '../graphql/classroom.graphql';\nimport { CLASS_RECORD_SUMMARY } from '../graphql/class-record.graphql';\nimport { STUDY_GROUP_DETAILS, STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { LESSON_SUMMARY } from '../graphql/lesson.graphql';\nimport { Lesson } from '../models/lesson.model';\n\ninterface IStartClassMutation {\n    startClass: ClassRecord;\n}\n\nexport interface IStartClassInput {\n    lessonId: string;\n    levelId: string;\n    sourceId: string;\n    sourceType: SourceType;\n    teacherNotes?: string;\n}\n\ninterface ICreateEnrollmentMutation {\n    createEnrollment: Enrollment;\n}\n\ninterface IEnrollment {\n    enrollment: Enrollment;\n}\n\ninterface IGetEnrollments {\n    enrollments: Enrollment[];\n}\n\ninterface IFindGroupById {\n    findGroupById: StudyGroup;\n}\n\ninterface ICancelEnrollmentMutation {\n    cancelEnrollment: Enrollment;\n}\n\ninterface IChangeScheduleInput {\n    enrollmentId: string;\n    events: Event[];\n}\n\ninterface IChangeEnrollmentScheduleMutation {\n    changeEnrollmentSchedule: Enrollment;\n}\n\ninterface ICreateStudyGroupMutation {\n    createStudyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupMutation {\n    studyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupInput {\n    studyGroupId: string;\n    name: string;\n    events?: Event[];\n}\n\ninterface IRemoveGroupInput {\n    studyGroupId: string;\n}\n\ninterface IRemoveGroupMutation {\n    group: StudyGroup;\n}\n\ninterface StudyGroupAttendeInput {\n    studentId: string;\n    attended: boolean;\n}\ninterface IActivateEnrollmentMutation {\n    updatedEnrollment: Enrollment;\n}\n\nexport interface IFinishClassInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n    teacherNotes?: string;\n    status: string;\n    lessonStartedAt: string;\n    lessonEndedAt: string;\n    attendees?: StudyGroupAttendeInput[];\n}\n\ninterface IFinishClassMutation {\n    finishClass: ClassRecordType;\n}\n\ninterface ITransferEnrollmentMutation {\n    removeStudentFromGroup: Enrollment;\n}\nexport interface IRevertFinishedClassStatusInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n}\n\ninterface IRevertFinishedClassStatusMutation {\n    revertFinishedClassStatus: ClassRecordType;\n}\nexport interface IRevertLessonStatusInput {\n    sourceId: string;\n    sourceType: SourceType;\n    lessonId: string;\n}\n\ninterface IRevertLessonStatusMutation {\n    revertLessonStatus: Lesson;\n}\n\nexport interface Student {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    opened?: boolean; // front-end only field\n}\n\ninterface IClassroomQuery {\n    classroom: IClassroom;\n}\n\nexport interface IClassroom {\n    id?: string;\n    classInProgress?: ClassRecordType;\n    enrollments?: Enrollment[];\n    studyGroups?: StudyGroup[];\n    students?: Student[];\n    studentEnrollments?: Enrollment[];\n}\n\nexport interface IClassroomFiltersInput {\n    enrollmentStatus?: string;\n    studyGroupStatus?: string;\n}\n\ninterface IAddStudentToGroupMutation {\n    addStudentToGroup: Enrollment;\n}\ninterface IAddStudentToGroupInput {\n    id: string;\n    studyGroupId: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClassroomService {\n    private classInProgressSource = new BehaviorSubject<ClassRecord>(undefined);\n\n    public classInProgress$ = this.classInProgressSource.asObservable();\n\n    getGroupByIdQuery$: QueryRef<IFindGroupById>;\n    getEnrollmentQuery$: QueryRef<IEnrollment>;\n    classroomQuery$: QueryRef<IClassroomQuery>;\n\n    classroomFiltersInput: IClassroomFiltersInput = {\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    };\n\n    constructor(private apollo: Apollo) {}\n\n    getClassroom$(): Observable<IClassroom> {\n        this.classroomQuery$ = this.apollo.watchQuery({\n            query: gql`\n                query Classroom($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        ...classroomSummary\n                    }\n                }\n                ${CLASSROOM_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n\n        return this.classroomQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IClassroomQuery>) => {\n                const classInProgress = result.data.classroom.classInProgress;\n                if (!classInProgress) {\n                    this.classInProgressSource.next(null);\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        this.classInProgressSource.next({\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        });\n                    } else {\n                        this.classInProgressSource.next({\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        });\n                    }\n                }\n\n                return result.data.classroom;\n            }),\n            share(),\n        );\n    }\n\n    classroomRefetch(): void {\n        this.getClassroom$();\n        this.classroomQuery$.refetch();\n    }\n\n    setClassroomFiltersInput(filters: IClassroomFiltersInput = {}) {\n        this.classroomFiltersInput = { ...this.classroomFiltersInput, ...filters };\n    }\n\n    createEnrollmentInvitation(createEnrollmentInput: CreateEnrollmentInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICreateEnrollmentMutation>({\n                mutation: gql`\n                    mutation CreateEnrollment($enrollmentInput: EnrollmentInput, $invitedStudent: StudentInput) {\n                        createEnrollment(enrollmentInput: $enrollmentInput, invitedStudent: $invitedStudent) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    enrollmentInput: createEnrollmentInput.enrollmentInput,\n                    invitedStudent: createEnrollmentInput.invitedStudent,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateEnrollmentMutation>) => {\n                    return result.data.createEnrollment;\n                }),\n            );\n    }\n\n    getEnrollment(enrollmentId: string): Observable<Enrollment> {\n        this.getEnrollmentQuery$ = this.apollo.watchQuery({\n            query: gql`\n            {\n                enrollment(id: \"${enrollmentId}\") {\n                    ...enrollmentDetail\n                }\n            }\n            ${ENROLLMENT_DETAIL}\n            `,\n        });\n\n        return this.getEnrollmentQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IEnrollment>) => result.data.enrollment),\n        );\n    }\n\n    refetchEnrollment(): void {\n        if (this.getEnrollmentQuery$) {\n            this.getEnrollmentQuery$.refetch();\n        }\n    }\n\n    cancelEnrollment(id: string): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICancelEnrollmentMutation>({\n                mutation: gql`\n                    mutation CancelEnrollmentMutation {\n                        cancelEnrollment(id: \"${id}\") {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICancelEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.cancelEnrollment;\n                }),\n            );\n    }\n\n    changeEnrollmentSchedule(changeScheduleInput: IChangeScheduleInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<IChangeEnrollmentScheduleMutation>({\n                mutation: gql`\n                    mutation ChangeEnrollmentScheduleMutation($changeScheduleInput: ChangeScheduleInput) {\n                        changeEnrollmentSchedule(changeScheduleInput: $changeScheduleInput) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    changeScheduleInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeEnrollmentScheduleMutation>) => {\n                    return result.data.changeEnrollmentSchedule;\n                }),\n            );\n    }\n\n    transferEnrollment(id: string, events: Event[]) {\n        return this.apollo\n            .mutate<ITransferEnrollmentMutation>({\n                mutation: gql`\n                    mutation removeStudentFromGroup($id: id, $events: EventsInput) {\n                        removeStudentFromGroup(id: $id, events: $events) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    id,\n                    events,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ITransferEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.removeStudentFromGroup;\n                }),\n            );\n    }\n\n    startClass(startClassInput: IStartClassInput): Observable<ClassRecord> {\n        return this.apollo\n            .mutate<IStartClassMutation>({\n                mutation: gql`\n                    mutation StartClassMutation($startClassInput: StartClassInput) {\n                        startClass(startClassInput: $startClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { startClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IStartClassMutation>) => {\n                    const classInProgress = result.data.startClass;\n                    this.classInProgressSource.next(classInProgress);\n\n                    this.classroomRefetch();\n                    return classInProgress;\n                }),\n            );\n    }\n\n    finishClass(finishClassInput: IFinishClassInput): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IFinishClassMutation>({\n                mutation: gql`\n                    mutation FinishClassMutation($finishClassInput: FinishClassInput) {\n                        finishClass(finishClassInput: $finishClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { finishClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IFinishClassMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.finishClass;\n                }),\n            );\n    }\n\n    getGroupsQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query ClassroomQuery($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        id\n                        studyGroups {\n                            ...studyGroupSummary\n                        }\n                    }\n                }\n                ${STUDY_GROUP_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n    }\n\n    getGroupById(id: string): Observable<StudyGroup> {\n        this.getGroupByIdQuery$ = this.apollo.watchQuery<any>({\n            query: gql`\n                query findGroupById($id: String) {\n                    findGroupById(id: $id) {\n                        ...studyGroupDetails\n                    }\n                }\n                ${STUDY_GROUP_DETAILS}\n            `,\n            variables: {\n                id,\n            },\n        });\n\n        return this.getGroupByIdQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IFindGroupById>) => result.data.findGroupById),\n        );\n    }\n\n    refetchCurrentGroupById(groupId?: string): void {\n        if (groupId) {\n            this.getGroupById(groupId);\n        }\n\n        if (this.getGroupByIdQuery$) {\n            this.getGroupByIdQuery$.refetch();\n        }\n    }\n\n    createStudyGroup(createGroupInput: CreateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<ICreateStudyGroupMutation>({\n                mutation: gql`\n                    mutation CreateGroupMutation($createGroupInput: CreateStudyGroupInput) {\n                        createStudyGroup(createGroupInput: $createGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    createGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.createStudyGroup;\n                }),\n            );\n    }\n\n    updateStudyGroup(studyGroupInput: IUpdateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IUpdateStudyGroupMutation>({\n                mutation: gql`\n                    mutation UpdateStudyGroupMutation($studyGroupInput: UpdateStudyGroupInput) {\n                        updateStudyGroup(studyGroupInput: $studyGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    studyGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.studyGroup;\n                }),\n            );\n    }\n\n    removeStudyGroup(removeGroupInput: IRemoveGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IRemoveGroupMutation>({\n                mutation: gql`\n                    mutation RemoveStudyGroupMutation($removeGroupInput: RemoveStudyGroupInput) {\n                        removeStudyGroup(removeGroupInput: $removeGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    removeGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRemoveGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.group;\n                }),\n            );\n    }\n\n    addStudentToGroup(enrollmentInput: IAddStudentToGroupInput) {\n        return this.apollo\n            .mutate<IAddStudentToGroupMutation>({\n                mutation: gql`\n                    mutation AddStudentToGroupMutation($enrollmentInput: AddStudentToGroupInput) {\n                        addStudentToGroup(enrollmentInput: $enrollmentInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    enrollmentInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IAddStudentToGroupMutation>) => {\n                    this.classroomRefetch();\n                    this.refetchCurrentGroupById();\n                    return result.data.addStudentToGroup;\n                }),\n            );\n    }\n\n    revertFinishedClassStatus(\n        revertFinishedClassStatusInput: IRevertFinishedClassStatusInput,\n    ): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IRevertFinishedClassStatusMutation>({\n                mutation: gql`\n                    mutation revertFinishedClassStatusMutation(\n                        $revertFinishedClassStatusInput: RevertFinishedClassStatusInput\n                    ) {\n                        revertFinishedClassStatus(revertFinishedClassStatusInput: $revertFinishedClassStatusInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { revertFinishedClassStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertFinishedClassStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertFinishedClassStatus;\n                }),\n            );\n    }\n\n    revertLessonStatus(revertLessonStatusInput: IRevertLessonStatusInput): Observable<Lesson> {\n        return this.apollo\n            .mutate<IRevertLessonStatusMutation>({\n                mutation: gql`\n                    mutation revertLessonStatusMutation($revertLessonStatusInput: RevertLessonStatusInput) {\n                        revertLessonStatus(revertLessonStatusInput: $revertLessonStatusInput) {\n                            ...lessonSummary\n                        }\n                    }\n                    ${LESSON_SUMMARY}\n                `,\n                variables: { revertLessonStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertLessonStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertLessonStatus;\n                }),\n            );\n    }\n\n    activateEnrollment(enrollmentId: string): Observable<any> {\n        return this.apollo\n            .mutate<IActivateEnrollmentMutation>({\n                mutation: gql`\n                    mutation ActivateEnrollmentMutation($enrollmentId: ID) {\n                        activateEnrollment(enrollmentId: $enrollmentId) {\n                            id\n                        }\n                    }\n                `,\n                variables: { enrollmentId },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IActivateEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.updatedEnrollment;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "classInProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClassRecordType",
                    "optional": true,
                    "description": "",
                    "line": 149
                },
                {
                    "name": "enrollments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Enrollment[]",
                    "optional": true,
                    "description": "",
                    "line": 150
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 148
                },
                {
                    "name": "studentEnrollments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Enrollment[]",
                    "optional": true,
                    "description": "",
                    "line": 153
                },
                {
                    "name": "students",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Student[]",
                    "optional": true,
                    "description": "",
                    "line": 152
                },
                {
                    "name": "studyGroups",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StudyGroup[]",
                    "optional": true,
                    "description": "",
                    "line": 151
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IClassroomFiltersInput",
            "id": "interface-IClassroomFiltersInput-393bbeee17eb6281c8a64cc8ff3beb12",
            "file": "src/app/@core/services/classroom.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\nimport {\n    ClassRecord,\n    ClassRecordType,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from '../models/class-record.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, SourceType, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\n\nimport { CreateStudyGroupInput } from 'app/classroom/pages/groups-page/groups-page.component';\nimport { ENROLLMENT_DETAIL } from 'app/@core/graphql/enrollment.graphql';\nimport { CLASSROOM_SUMMARY } from '../graphql/classroom.graphql';\nimport { CLASS_RECORD_SUMMARY } from '../graphql/class-record.graphql';\nimport { STUDY_GROUP_DETAILS, STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { LESSON_SUMMARY } from '../graphql/lesson.graphql';\nimport { Lesson } from '../models/lesson.model';\n\ninterface IStartClassMutation {\n    startClass: ClassRecord;\n}\n\nexport interface IStartClassInput {\n    lessonId: string;\n    levelId: string;\n    sourceId: string;\n    sourceType: SourceType;\n    teacherNotes?: string;\n}\n\ninterface ICreateEnrollmentMutation {\n    createEnrollment: Enrollment;\n}\n\ninterface IEnrollment {\n    enrollment: Enrollment;\n}\n\ninterface IGetEnrollments {\n    enrollments: Enrollment[];\n}\n\ninterface IFindGroupById {\n    findGroupById: StudyGroup;\n}\n\ninterface ICancelEnrollmentMutation {\n    cancelEnrollment: Enrollment;\n}\n\ninterface IChangeScheduleInput {\n    enrollmentId: string;\n    events: Event[];\n}\n\ninterface IChangeEnrollmentScheduleMutation {\n    changeEnrollmentSchedule: Enrollment;\n}\n\ninterface ICreateStudyGroupMutation {\n    createStudyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupMutation {\n    studyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupInput {\n    studyGroupId: string;\n    name: string;\n    events?: Event[];\n}\n\ninterface IRemoveGroupInput {\n    studyGroupId: string;\n}\n\ninterface IRemoveGroupMutation {\n    group: StudyGroup;\n}\n\ninterface StudyGroupAttendeInput {\n    studentId: string;\n    attended: boolean;\n}\ninterface IActivateEnrollmentMutation {\n    updatedEnrollment: Enrollment;\n}\n\nexport interface IFinishClassInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n    teacherNotes?: string;\n    status: string;\n    lessonStartedAt: string;\n    lessonEndedAt: string;\n    attendees?: StudyGroupAttendeInput[];\n}\n\ninterface IFinishClassMutation {\n    finishClass: ClassRecordType;\n}\n\ninterface ITransferEnrollmentMutation {\n    removeStudentFromGroup: Enrollment;\n}\nexport interface IRevertFinishedClassStatusInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n}\n\ninterface IRevertFinishedClassStatusMutation {\n    revertFinishedClassStatus: ClassRecordType;\n}\nexport interface IRevertLessonStatusInput {\n    sourceId: string;\n    sourceType: SourceType;\n    lessonId: string;\n}\n\ninterface IRevertLessonStatusMutation {\n    revertLessonStatus: Lesson;\n}\n\nexport interface Student {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    opened?: boolean; // front-end only field\n}\n\ninterface IClassroomQuery {\n    classroom: IClassroom;\n}\n\nexport interface IClassroom {\n    id?: string;\n    classInProgress?: ClassRecordType;\n    enrollments?: Enrollment[];\n    studyGroups?: StudyGroup[];\n    students?: Student[];\n    studentEnrollments?: Enrollment[];\n}\n\nexport interface IClassroomFiltersInput {\n    enrollmentStatus?: string;\n    studyGroupStatus?: string;\n}\n\ninterface IAddStudentToGroupMutation {\n    addStudentToGroup: Enrollment;\n}\ninterface IAddStudentToGroupInput {\n    id: string;\n    studyGroupId: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClassroomService {\n    private classInProgressSource = new BehaviorSubject<ClassRecord>(undefined);\n\n    public classInProgress$ = this.classInProgressSource.asObservable();\n\n    getGroupByIdQuery$: QueryRef<IFindGroupById>;\n    getEnrollmentQuery$: QueryRef<IEnrollment>;\n    classroomQuery$: QueryRef<IClassroomQuery>;\n\n    classroomFiltersInput: IClassroomFiltersInput = {\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    };\n\n    constructor(private apollo: Apollo) {}\n\n    getClassroom$(): Observable<IClassroom> {\n        this.classroomQuery$ = this.apollo.watchQuery({\n            query: gql`\n                query Classroom($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        ...classroomSummary\n                    }\n                }\n                ${CLASSROOM_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n\n        return this.classroomQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IClassroomQuery>) => {\n                const classInProgress = result.data.classroom.classInProgress;\n                if (!classInProgress) {\n                    this.classInProgressSource.next(null);\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        this.classInProgressSource.next({\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        });\n                    } else {\n                        this.classInProgressSource.next({\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        });\n                    }\n                }\n\n                return result.data.classroom;\n            }),\n            share(),\n        );\n    }\n\n    classroomRefetch(): void {\n        this.getClassroom$();\n        this.classroomQuery$.refetch();\n    }\n\n    setClassroomFiltersInput(filters: IClassroomFiltersInput = {}) {\n        this.classroomFiltersInput = { ...this.classroomFiltersInput, ...filters };\n    }\n\n    createEnrollmentInvitation(createEnrollmentInput: CreateEnrollmentInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICreateEnrollmentMutation>({\n                mutation: gql`\n                    mutation CreateEnrollment($enrollmentInput: EnrollmentInput, $invitedStudent: StudentInput) {\n                        createEnrollment(enrollmentInput: $enrollmentInput, invitedStudent: $invitedStudent) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    enrollmentInput: createEnrollmentInput.enrollmentInput,\n                    invitedStudent: createEnrollmentInput.invitedStudent,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateEnrollmentMutation>) => {\n                    return result.data.createEnrollment;\n                }),\n            );\n    }\n\n    getEnrollment(enrollmentId: string): Observable<Enrollment> {\n        this.getEnrollmentQuery$ = this.apollo.watchQuery({\n            query: gql`\n            {\n                enrollment(id: \"${enrollmentId}\") {\n                    ...enrollmentDetail\n                }\n            }\n            ${ENROLLMENT_DETAIL}\n            `,\n        });\n\n        return this.getEnrollmentQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IEnrollment>) => result.data.enrollment),\n        );\n    }\n\n    refetchEnrollment(): void {\n        if (this.getEnrollmentQuery$) {\n            this.getEnrollmentQuery$.refetch();\n        }\n    }\n\n    cancelEnrollment(id: string): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICancelEnrollmentMutation>({\n                mutation: gql`\n                    mutation CancelEnrollmentMutation {\n                        cancelEnrollment(id: \"${id}\") {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICancelEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.cancelEnrollment;\n                }),\n            );\n    }\n\n    changeEnrollmentSchedule(changeScheduleInput: IChangeScheduleInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<IChangeEnrollmentScheduleMutation>({\n                mutation: gql`\n                    mutation ChangeEnrollmentScheduleMutation($changeScheduleInput: ChangeScheduleInput) {\n                        changeEnrollmentSchedule(changeScheduleInput: $changeScheduleInput) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    changeScheduleInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeEnrollmentScheduleMutation>) => {\n                    return result.data.changeEnrollmentSchedule;\n                }),\n            );\n    }\n\n    transferEnrollment(id: string, events: Event[]) {\n        return this.apollo\n            .mutate<ITransferEnrollmentMutation>({\n                mutation: gql`\n                    mutation removeStudentFromGroup($id: id, $events: EventsInput) {\n                        removeStudentFromGroup(id: $id, events: $events) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    id,\n                    events,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ITransferEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.removeStudentFromGroup;\n                }),\n            );\n    }\n\n    startClass(startClassInput: IStartClassInput): Observable<ClassRecord> {\n        return this.apollo\n            .mutate<IStartClassMutation>({\n                mutation: gql`\n                    mutation StartClassMutation($startClassInput: StartClassInput) {\n                        startClass(startClassInput: $startClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { startClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IStartClassMutation>) => {\n                    const classInProgress = result.data.startClass;\n                    this.classInProgressSource.next(classInProgress);\n\n                    this.classroomRefetch();\n                    return classInProgress;\n                }),\n            );\n    }\n\n    finishClass(finishClassInput: IFinishClassInput): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IFinishClassMutation>({\n                mutation: gql`\n                    mutation FinishClassMutation($finishClassInput: FinishClassInput) {\n                        finishClass(finishClassInput: $finishClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { finishClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IFinishClassMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.finishClass;\n                }),\n            );\n    }\n\n    getGroupsQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query ClassroomQuery($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        id\n                        studyGroups {\n                            ...studyGroupSummary\n                        }\n                    }\n                }\n                ${STUDY_GROUP_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n    }\n\n    getGroupById(id: string): Observable<StudyGroup> {\n        this.getGroupByIdQuery$ = this.apollo.watchQuery<any>({\n            query: gql`\n                query findGroupById($id: String) {\n                    findGroupById(id: $id) {\n                        ...studyGroupDetails\n                    }\n                }\n                ${STUDY_GROUP_DETAILS}\n            `,\n            variables: {\n                id,\n            },\n        });\n\n        return this.getGroupByIdQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IFindGroupById>) => result.data.findGroupById),\n        );\n    }\n\n    refetchCurrentGroupById(groupId?: string): void {\n        if (groupId) {\n            this.getGroupById(groupId);\n        }\n\n        if (this.getGroupByIdQuery$) {\n            this.getGroupByIdQuery$.refetch();\n        }\n    }\n\n    createStudyGroup(createGroupInput: CreateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<ICreateStudyGroupMutation>({\n                mutation: gql`\n                    mutation CreateGroupMutation($createGroupInput: CreateStudyGroupInput) {\n                        createStudyGroup(createGroupInput: $createGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    createGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.createStudyGroup;\n                }),\n            );\n    }\n\n    updateStudyGroup(studyGroupInput: IUpdateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IUpdateStudyGroupMutation>({\n                mutation: gql`\n                    mutation UpdateStudyGroupMutation($studyGroupInput: UpdateStudyGroupInput) {\n                        updateStudyGroup(studyGroupInput: $studyGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    studyGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.studyGroup;\n                }),\n            );\n    }\n\n    removeStudyGroup(removeGroupInput: IRemoveGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IRemoveGroupMutation>({\n                mutation: gql`\n                    mutation RemoveStudyGroupMutation($removeGroupInput: RemoveStudyGroupInput) {\n                        removeStudyGroup(removeGroupInput: $removeGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    removeGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRemoveGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.group;\n                }),\n            );\n    }\n\n    addStudentToGroup(enrollmentInput: IAddStudentToGroupInput) {\n        return this.apollo\n            .mutate<IAddStudentToGroupMutation>({\n                mutation: gql`\n                    mutation AddStudentToGroupMutation($enrollmentInput: AddStudentToGroupInput) {\n                        addStudentToGroup(enrollmentInput: $enrollmentInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    enrollmentInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IAddStudentToGroupMutation>) => {\n                    this.classroomRefetch();\n                    this.refetchCurrentGroupById();\n                    return result.data.addStudentToGroup;\n                }),\n            );\n    }\n\n    revertFinishedClassStatus(\n        revertFinishedClassStatusInput: IRevertFinishedClassStatusInput,\n    ): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IRevertFinishedClassStatusMutation>({\n                mutation: gql`\n                    mutation revertFinishedClassStatusMutation(\n                        $revertFinishedClassStatusInput: RevertFinishedClassStatusInput\n                    ) {\n                        revertFinishedClassStatus(revertFinishedClassStatusInput: $revertFinishedClassStatusInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { revertFinishedClassStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertFinishedClassStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertFinishedClassStatus;\n                }),\n            );\n    }\n\n    revertLessonStatus(revertLessonStatusInput: IRevertLessonStatusInput): Observable<Lesson> {\n        return this.apollo\n            .mutate<IRevertLessonStatusMutation>({\n                mutation: gql`\n                    mutation revertLessonStatusMutation($revertLessonStatusInput: RevertLessonStatusInput) {\n                        revertLessonStatus(revertLessonStatusInput: $revertLessonStatusInput) {\n                            ...lessonSummary\n                        }\n                    }\n                    ${LESSON_SUMMARY}\n                `,\n                variables: { revertLessonStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertLessonStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertLessonStatus;\n                }),\n            );\n    }\n\n    activateEnrollment(enrollmentId: string): Observable<any> {\n        return this.apollo\n            .mutate<IActivateEnrollmentMutation>({\n                mutation: gql`\n                    mutation ActivateEnrollmentMutation($enrollmentId: ID) {\n                        activateEnrollment(enrollmentId: $enrollmentId) {\n                            id\n                        }\n                    }\n                `,\n                variables: { enrollmentId },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IActivateEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.updatedEnrollment;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "enrollmentStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 157
                },
                {
                    "name": "studyGroupStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 158
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IClassroomQuery",
            "id": "interface-IClassroomQuery-393bbeee17eb6281c8a64cc8ff3beb12",
            "file": "src/app/@core/services/classroom.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\nimport {\n    ClassRecord,\n    ClassRecordType,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from '../models/class-record.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, SourceType, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\n\nimport { CreateStudyGroupInput } from 'app/classroom/pages/groups-page/groups-page.component';\nimport { ENROLLMENT_DETAIL } from 'app/@core/graphql/enrollment.graphql';\nimport { CLASSROOM_SUMMARY } from '../graphql/classroom.graphql';\nimport { CLASS_RECORD_SUMMARY } from '../graphql/class-record.graphql';\nimport { STUDY_GROUP_DETAILS, STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { LESSON_SUMMARY } from '../graphql/lesson.graphql';\nimport { Lesson } from '../models/lesson.model';\n\ninterface IStartClassMutation {\n    startClass: ClassRecord;\n}\n\nexport interface IStartClassInput {\n    lessonId: string;\n    levelId: string;\n    sourceId: string;\n    sourceType: SourceType;\n    teacherNotes?: string;\n}\n\ninterface ICreateEnrollmentMutation {\n    createEnrollment: Enrollment;\n}\n\ninterface IEnrollment {\n    enrollment: Enrollment;\n}\n\ninterface IGetEnrollments {\n    enrollments: Enrollment[];\n}\n\ninterface IFindGroupById {\n    findGroupById: StudyGroup;\n}\n\ninterface ICancelEnrollmentMutation {\n    cancelEnrollment: Enrollment;\n}\n\ninterface IChangeScheduleInput {\n    enrollmentId: string;\n    events: Event[];\n}\n\ninterface IChangeEnrollmentScheduleMutation {\n    changeEnrollmentSchedule: Enrollment;\n}\n\ninterface ICreateStudyGroupMutation {\n    createStudyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupMutation {\n    studyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupInput {\n    studyGroupId: string;\n    name: string;\n    events?: Event[];\n}\n\ninterface IRemoveGroupInput {\n    studyGroupId: string;\n}\n\ninterface IRemoveGroupMutation {\n    group: StudyGroup;\n}\n\ninterface StudyGroupAttendeInput {\n    studentId: string;\n    attended: boolean;\n}\ninterface IActivateEnrollmentMutation {\n    updatedEnrollment: Enrollment;\n}\n\nexport interface IFinishClassInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n    teacherNotes?: string;\n    status: string;\n    lessonStartedAt: string;\n    lessonEndedAt: string;\n    attendees?: StudyGroupAttendeInput[];\n}\n\ninterface IFinishClassMutation {\n    finishClass: ClassRecordType;\n}\n\ninterface ITransferEnrollmentMutation {\n    removeStudentFromGroup: Enrollment;\n}\nexport interface IRevertFinishedClassStatusInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n}\n\ninterface IRevertFinishedClassStatusMutation {\n    revertFinishedClassStatus: ClassRecordType;\n}\nexport interface IRevertLessonStatusInput {\n    sourceId: string;\n    sourceType: SourceType;\n    lessonId: string;\n}\n\ninterface IRevertLessonStatusMutation {\n    revertLessonStatus: Lesson;\n}\n\nexport interface Student {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    opened?: boolean; // front-end only field\n}\n\ninterface IClassroomQuery {\n    classroom: IClassroom;\n}\n\nexport interface IClassroom {\n    id?: string;\n    classInProgress?: ClassRecordType;\n    enrollments?: Enrollment[];\n    studyGroups?: StudyGroup[];\n    students?: Student[];\n    studentEnrollments?: Enrollment[];\n}\n\nexport interface IClassroomFiltersInput {\n    enrollmentStatus?: string;\n    studyGroupStatus?: string;\n}\n\ninterface IAddStudentToGroupMutation {\n    addStudentToGroup: Enrollment;\n}\ninterface IAddStudentToGroupInput {\n    id: string;\n    studyGroupId: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClassroomService {\n    private classInProgressSource = new BehaviorSubject<ClassRecord>(undefined);\n\n    public classInProgress$ = this.classInProgressSource.asObservable();\n\n    getGroupByIdQuery$: QueryRef<IFindGroupById>;\n    getEnrollmentQuery$: QueryRef<IEnrollment>;\n    classroomQuery$: QueryRef<IClassroomQuery>;\n\n    classroomFiltersInput: IClassroomFiltersInput = {\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    };\n\n    constructor(private apollo: Apollo) {}\n\n    getClassroom$(): Observable<IClassroom> {\n        this.classroomQuery$ = this.apollo.watchQuery({\n            query: gql`\n                query Classroom($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        ...classroomSummary\n                    }\n                }\n                ${CLASSROOM_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n\n        return this.classroomQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IClassroomQuery>) => {\n                const classInProgress = result.data.classroom.classInProgress;\n                if (!classInProgress) {\n                    this.classInProgressSource.next(null);\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        this.classInProgressSource.next({\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        });\n                    } else {\n                        this.classInProgressSource.next({\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        });\n                    }\n                }\n\n                return result.data.classroom;\n            }),\n            share(),\n        );\n    }\n\n    classroomRefetch(): void {\n        this.getClassroom$();\n        this.classroomQuery$.refetch();\n    }\n\n    setClassroomFiltersInput(filters: IClassroomFiltersInput = {}) {\n        this.classroomFiltersInput = { ...this.classroomFiltersInput, ...filters };\n    }\n\n    createEnrollmentInvitation(createEnrollmentInput: CreateEnrollmentInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICreateEnrollmentMutation>({\n                mutation: gql`\n                    mutation CreateEnrollment($enrollmentInput: EnrollmentInput, $invitedStudent: StudentInput) {\n                        createEnrollment(enrollmentInput: $enrollmentInput, invitedStudent: $invitedStudent) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    enrollmentInput: createEnrollmentInput.enrollmentInput,\n                    invitedStudent: createEnrollmentInput.invitedStudent,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateEnrollmentMutation>) => {\n                    return result.data.createEnrollment;\n                }),\n            );\n    }\n\n    getEnrollment(enrollmentId: string): Observable<Enrollment> {\n        this.getEnrollmentQuery$ = this.apollo.watchQuery({\n            query: gql`\n            {\n                enrollment(id: \"${enrollmentId}\") {\n                    ...enrollmentDetail\n                }\n            }\n            ${ENROLLMENT_DETAIL}\n            `,\n        });\n\n        return this.getEnrollmentQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IEnrollment>) => result.data.enrollment),\n        );\n    }\n\n    refetchEnrollment(): void {\n        if (this.getEnrollmentQuery$) {\n            this.getEnrollmentQuery$.refetch();\n        }\n    }\n\n    cancelEnrollment(id: string): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICancelEnrollmentMutation>({\n                mutation: gql`\n                    mutation CancelEnrollmentMutation {\n                        cancelEnrollment(id: \"${id}\") {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICancelEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.cancelEnrollment;\n                }),\n            );\n    }\n\n    changeEnrollmentSchedule(changeScheduleInput: IChangeScheduleInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<IChangeEnrollmentScheduleMutation>({\n                mutation: gql`\n                    mutation ChangeEnrollmentScheduleMutation($changeScheduleInput: ChangeScheduleInput) {\n                        changeEnrollmentSchedule(changeScheduleInput: $changeScheduleInput) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    changeScheduleInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeEnrollmentScheduleMutation>) => {\n                    return result.data.changeEnrollmentSchedule;\n                }),\n            );\n    }\n\n    transferEnrollment(id: string, events: Event[]) {\n        return this.apollo\n            .mutate<ITransferEnrollmentMutation>({\n                mutation: gql`\n                    mutation removeStudentFromGroup($id: id, $events: EventsInput) {\n                        removeStudentFromGroup(id: $id, events: $events) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    id,\n                    events,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ITransferEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.removeStudentFromGroup;\n                }),\n            );\n    }\n\n    startClass(startClassInput: IStartClassInput): Observable<ClassRecord> {\n        return this.apollo\n            .mutate<IStartClassMutation>({\n                mutation: gql`\n                    mutation StartClassMutation($startClassInput: StartClassInput) {\n                        startClass(startClassInput: $startClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { startClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IStartClassMutation>) => {\n                    const classInProgress = result.data.startClass;\n                    this.classInProgressSource.next(classInProgress);\n\n                    this.classroomRefetch();\n                    return classInProgress;\n                }),\n            );\n    }\n\n    finishClass(finishClassInput: IFinishClassInput): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IFinishClassMutation>({\n                mutation: gql`\n                    mutation FinishClassMutation($finishClassInput: FinishClassInput) {\n                        finishClass(finishClassInput: $finishClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { finishClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IFinishClassMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.finishClass;\n                }),\n            );\n    }\n\n    getGroupsQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query ClassroomQuery($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        id\n                        studyGroups {\n                            ...studyGroupSummary\n                        }\n                    }\n                }\n                ${STUDY_GROUP_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n    }\n\n    getGroupById(id: string): Observable<StudyGroup> {\n        this.getGroupByIdQuery$ = this.apollo.watchQuery<any>({\n            query: gql`\n                query findGroupById($id: String) {\n                    findGroupById(id: $id) {\n                        ...studyGroupDetails\n                    }\n                }\n                ${STUDY_GROUP_DETAILS}\n            `,\n            variables: {\n                id,\n            },\n        });\n\n        return this.getGroupByIdQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IFindGroupById>) => result.data.findGroupById),\n        );\n    }\n\n    refetchCurrentGroupById(groupId?: string): void {\n        if (groupId) {\n            this.getGroupById(groupId);\n        }\n\n        if (this.getGroupByIdQuery$) {\n            this.getGroupByIdQuery$.refetch();\n        }\n    }\n\n    createStudyGroup(createGroupInput: CreateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<ICreateStudyGroupMutation>({\n                mutation: gql`\n                    mutation CreateGroupMutation($createGroupInput: CreateStudyGroupInput) {\n                        createStudyGroup(createGroupInput: $createGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    createGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.createStudyGroup;\n                }),\n            );\n    }\n\n    updateStudyGroup(studyGroupInput: IUpdateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IUpdateStudyGroupMutation>({\n                mutation: gql`\n                    mutation UpdateStudyGroupMutation($studyGroupInput: UpdateStudyGroupInput) {\n                        updateStudyGroup(studyGroupInput: $studyGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    studyGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.studyGroup;\n                }),\n            );\n    }\n\n    removeStudyGroup(removeGroupInput: IRemoveGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IRemoveGroupMutation>({\n                mutation: gql`\n                    mutation RemoveStudyGroupMutation($removeGroupInput: RemoveStudyGroupInput) {\n                        removeStudyGroup(removeGroupInput: $removeGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    removeGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRemoveGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.group;\n                }),\n            );\n    }\n\n    addStudentToGroup(enrollmentInput: IAddStudentToGroupInput) {\n        return this.apollo\n            .mutate<IAddStudentToGroupMutation>({\n                mutation: gql`\n                    mutation AddStudentToGroupMutation($enrollmentInput: AddStudentToGroupInput) {\n                        addStudentToGroup(enrollmentInput: $enrollmentInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    enrollmentInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IAddStudentToGroupMutation>) => {\n                    this.classroomRefetch();\n                    this.refetchCurrentGroupById();\n                    return result.data.addStudentToGroup;\n                }),\n            );\n    }\n\n    revertFinishedClassStatus(\n        revertFinishedClassStatusInput: IRevertFinishedClassStatusInput,\n    ): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IRevertFinishedClassStatusMutation>({\n                mutation: gql`\n                    mutation revertFinishedClassStatusMutation(\n                        $revertFinishedClassStatusInput: RevertFinishedClassStatusInput\n                    ) {\n                        revertFinishedClassStatus(revertFinishedClassStatusInput: $revertFinishedClassStatusInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { revertFinishedClassStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertFinishedClassStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertFinishedClassStatus;\n                }),\n            );\n    }\n\n    revertLessonStatus(revertLessonStatusInput: IRevertLessonStatusInput): Observable<Lesson> {\n        return this.apollo\n            .mutate<IRevertLessonStatusMutation>({\n                mutation: gql`\n                    mutation revertLessonStatusMutation($revertLessonStatusInput: RevertLessonStatusInput) {\n                        revertLessonStatus(revertLessonStatusInput: $revertLessonStatusInput) {\n                            ...lessonSummary\n                        }\n                    }\n                    ${LESSON_SUMMARY}\n                `,\n                variables: { revertLessonStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertLessonStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertLessonStatus;\n                }),\n            );\n    }\n\n    activateEnrollment(enrollmentId: string): Observable<any> {\n        return this.apollo\n            .mutate<IActivateEnrollmentMutation>({\n                mutation: gql`\n                    mutation ActivateEnrollmentMutation($enrollmentId: ID) {\n                        activateEnrollment(enrollmentId: $enrollmentId) {\n                            id\n                        }\n                    }\n                `,\n                variables: { enrollmentId },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IActivateEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.updatedEnrollment;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "classroom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IClassroom",
                    "optional": false,
                    "description": "",
                    "line": 144
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ICreateEnrollmentMutation",
            "id": "interface-ICreateEnrollmentMutation-393bbeee17eb6281c8a64cc8ff3beb12",
            "file": "src/app/@core/services/classroom.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\nimport {\n    ClassRecord,\n    ClassRecordType,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from '../models/class-record.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, SourceType, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\n\nimport { CreateStudyGroupInput } from 'app/classroom/pages/groups-page/groups-page.component';\nimport { ENROLLMENT_DETAIL } from 'app/@core/graphql/enrollment.graphql';\nimport { CLASSROOM_SUMMARY } from '../graphql/classroom.graphql';\nimport { CLASS_RECORD_SUMMARY } from '../graphql/class-record.graphql';\nimport { STUDY_GROUP_DETAILS, STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { LESSON_SUMMARY } from '../graphql/lesson.graphql';\nimport { Lesson } from '../models/lesson.model';\n\ninterface IStartClassMutation {\n    startClass: ClassRecord;\n}\n\nexport interface IStartClassInput {\n    lessonId: string;\n    levelId: string;\n    sourceId: string;\n    sourceType: SourceType;\n    teacherNotes?: string;\n}\n\ninterface ICreateEnrollmentMutation {\n    createEnrollment: Enrollment;\n}\n\ninterface IEnrollment {\n    enrollment: Enrollment;\n}\n\ninterface IGetEnrollments {\n    enrollments: Enrollment[];\n}\n\ninterface IFindGroupById {\n    findGroupById: StudyGroup;\n}\n\ninterface ICancelEnrollmentMutation {\n    cancelEnrollment: Enrollment;\n}\n\ninterface IChangeScheduleInput {\n    enrollmentId: string;\n    events: Event[];\n}\n\ninterface IChangeEnrollmentScheduleMutation {\n    changeEnrollmentSchedule: Enrollment;\n}\n\ninterface ICreateStudyGroupMutation {\n    createStudyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupMutation {\n    studyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupInput {\n    studyGroupId: string;\n    name: string;\n    events?: Event[];\n}\n\ninterface IRemoveGroupInput {\n    studyGroupId: string;\n}\n\ninterface IRemoveGroupMutation {\n    group: StudyGroup;\n}\n\ninterface StudyGroupAttendeInput {\n    studentId: string;\n    attended: boolean;\n}\ninterface IActivateEnrollmentMutation {\n    updatedEnrollment: Enrollment;\n}\n\nexport interface IFinishClassInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n    teacherNotes?: string;\n    status: string;\n    lessonStartedAt: string;\n    lessonEndedAt: string;\n    attendees?: StudyGroupAttendeInput[];\n}\n\ninterface IFinishClassMutation {\n    finishClass: ClassRecordType;\n}\n\ninterface ITransferEnrollmentMutation {\n    removeStudentFromGroup: Enrollment;\n}\nexport interface IRevertFinishedClassStatusInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n}\n\ninterface IRevertFinishedClassStatusMutation {\n    revertFinishedClassStatus: ClassRecordType;\n}\nexport interface IRevertLessonStatusInput {\n    sourceId: string;\n    sourceType: SourceType;\n    lessonId: string;\n}\n\ninterface IRevertLessonStatusMutation {\n    revertLessonStatus: Lesson;\n}\n\nexport interface Student {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    opened?: boolean; // front-end only field\n}\n\ninterface IClassroomQuery {\n    classroom: IClassroom;\n}\n\nexport interface IClassroom {\n    id?: string;\n    classInProgress?: ClassRecordType;\n    enrollments?: Enrollment[];\n    studyGroups?: StudyGroup[];\n    students?: Student[];\n    studentEnrollments?: Enrollment[];\n}\n\nexport interface IClassroomFiltersInput {\n    enrollmentStatus?: string;\n    studyGroupStatus?: string;\n}\n\ninterface IAddStudentToGroupMutation {\n    addStudentToGroup: Enrollment;\n}\ninterface IAddStudentToGroupInput {\n    id: string;\n    studyGroupId: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClassroomService {\n    private classInProgressSource = new BehaviorSubject<ClassRecord>(undefined);\n\n    public classInProgress$ = this.classInProgressSource.asObservable();\n\n    getGroupByIdQuery$: QueryRef<IFindGroupById>;\n    getEnrollmentQuery$: QueryRef<IEnrollment>;\n    classroomQuery$: QueryRef<IClassroomQuery>;\n\n    classroomFiltersInput: IClassroomFiltersInput = {\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    };\n\n    constructor(private apollo: Apollo) {}\n\n    getClassroom$(): Observable<IClassroom> {\n        this.classroomQuery$ = this.apollo.watchQuery({\n            query: gql`\n                query Classroom($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        ...classroomSummary\n                    }\n                }\n                ${CLASSROOM_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n\n        return this.classroomQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IClassroomQuery>) => {\n                const classInProgress = result.data.classroom.classInProgress;\n                if (!classInProgress) {\n                    this.classInProgressSource.next(null);\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        this.classInProgressSource.next({\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        });\n                    } else {\n                        this.classInProgressSource.next({\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        });\n                    }\n                }\n\n                return result.data.classroom;\n            }),\n            share(),\n        );\n    }\n\n    classroomRefetch(): void {\n        this.getClassroom$();\n        this.classroomQuery$.refetch();\n    }\n\n    setClassroomFiltersInput(filters: IClassroomFiltersInput = {}) {\n        this.classroomFiltersInput = { ...this.classroomFiltersInput, ...filters };\n    }\n\n    createEnrollmentInvitation(createEnrollmentInput: CreateEnrollmentInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICreateEnrollmentMutation>({\n                mutation: gql`\n                    mutation CreateEnrollment($enrollmentInput: EnrollmentInput, $invitedStudent: StudentInput) {\n                        createEnrollment(enrollmentInput: $enrollmentInput, invitedStudent: $invitedStudent) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    enrollmentInput: createEnrollmentInput.enrollmentInput,\n                    invitedStudent: createEnrollmentInput.invitedStudent,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateEnrollmentMutation>) => {\n                    return result.data.createEnrollment;\n                }),\n            );\n    }\n\n    getEnrollment(enrollmentId: string): Observable<Enrollment> {\n        this.getEnrollmentQuery$ = this.apollo.watchQuery({\n            query: gql`\n            {\n                enrollment(id: \"${enrollmentId}\") {\n                    ...enrollmentDetail\n                }\n            }\n            ${ENROLLMENT_DETAIL}\n            `,\n        });\n\n        return this.getEnrollmentQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IEnrollment>) => result.data.enrollment),\n        );\n    }\n\n    refetchEnrollment(): void {\n        if (this.getEnrollmentQuery$) {\n            this.getEnrollmentQuery$.refetch();\n        }\n    }\n\n    cancelEnrollment(id: string): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICancelEnrollmentMutation>({\n                mutation: gql`\n                    mutation CancelEnrollmentMutation {\n                        cancelEnrollment(id: \"${id}\") {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICancelEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.cancelEnrollment;\n                }),\n            );\n    }\n\n    changeEnrollmentSchedule(changeScheduleInput: IChangeScheduleInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<IChangeEnrollmentScheduleMutation>({\n                mutation: gql`\n                    mutation ChangeEnrollmentScheduleMutation($changeScheduleInput: ChangeScheduleInput) {\n                        changeEnrollmentSchedule(changeScheduleInput: $changeScheduleInput) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    changeScheduleInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeEnrollmentScheduleMutation>) => {\n                    return result.data.changeEnrollmentSchedule;\n                }),\n            );\n    }\n\n    transferEnrollment(id: string, events: Event[]) {\n        return this.apollo\n            .mutate<ITransferEnrollmentMutation>({\n                mutation: gql`\n                    mutation removeStudentFromGroup($id: id, $events: EventsInput) {\n                        removeStudentFromGroup(id: $id, events: $events) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    id,\n                    events,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ITransferEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.removeStudentFromGroup;\n                }),\n            );\n    }\n\n    startClass(startClassInput: IStartClassInput): Observable<ClassRecord> {\n        return this.apollo\n            .mutate<IStartClassMutation>({\n                mutation: gql`\n                    mutation StartClassMutation($startClassInput: StartClassInput) {\n                        startClass(startClassInput: $startClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { startClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IStartClassMutation>) => {\n                    const classInProgress = result.data.startClass;\n                    this.classInProgressSource.next(classInProgress);\n\n                    this.classroomRefetch();\n                    return classInProgress;\n                }),\n            );\n    }\n\n    finishClass(finishClassInput: IFinishClassInput): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IFinishClassMutation>({\n                mutation: gql`\n                    mutation FinishClassMutation($finishClassInput: FinishClassInput) {\n                        finishClass(finishClassInput: $finishClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { finishClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IFinishClassMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.finishClass;\n                }),\n            );\n    }\n\n    getGroupsQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query ClassroomQuery($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        id\n                        studyGroups {\n                            ...studyGroupSummary\n                        }\n                    }\n                }\n                ${STUDY_GROUP_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n    }\n\n    getGroupById(id: string): Observable<StudyGroup> {\n        this.getGroupByIdQuery$ = this.apollo.watchQuery<any>({\n            query: gql`\n                query findGroupById($id: String) {\n                    findGroupById(id: $id) {\n                        ...studyGroupDetails\n                    }\n                }\n                ${STUDY_GROUP_DETAILS}\n            `,\n            variables: {\n                id,\n            },\n        });\n\n        return this.getGroupByIdQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IFindGroupById>) => result.data.findGroupById),\n        );\n    }\n\n    refetchCurrentGroupById(groupId?: string): void {\n        if (groupId) {\n            this.getGroupById(groupId);\n        }\n\n        if (this.getGroupByIdQuery$) {\n            this.getGroupByIdQuery$.refetch();\n        }\n    }\n\n    createStudyGroup(createGroupInput: CreateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<ICreateStudyGroupMutation>({\n                mutation: gql`\n                    mutation CreateGroupMutation($createGroupInput: CreateStudyGroupInput) {\n                        createStudyGroup(createGroupInput: $createGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    createGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.createStudyGroup;\n                }),\n            );\n    }\n\n    updateStudyGroup(studyGroupInput: IUpdateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IUpdateStudyGroupMutation>({\n                mutation: gql`\n                    mutation UpdateStudyGroupMutation($studyGroupInput: UpdateStudyGroupInput) {\n                        updateStudyGroup(studyGroupInput: $studyGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    studyGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.studyGroup;\n                }),\n            );\n    }\n\n    removeStudyGroup(removeGroupInput: IRemoveGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IRemoveGroupMutation>({\n                mutation: gql`\n                    mutation RemoveStudyGroupMutation($removeGroupInput: RemoveStudyGroupInput) {\n                        removeStudyGroup(removeGroupInput: $removeGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    removeGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRemoveGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.group;\n                }),\n            );\n    }\n\n    addStudentToGroup(enrollmentInput: IAddStudentToGroupInput) {\n        return this.apollo\n            .mutate<IAddStudentToGroupMutation>({\n                mutation: gql`\n                    mutation AddStudentToGroupMutation($enrollmentInput: AddStudentToGroupInput) {\n                        addStudentToGroup(enrollmentInput: $enrollmentInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    enrollmentInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IAddStudentToGroupMutation>) => {\n                    this.classroomRefetch();\n                    this.refetchCurrentGroupById();\n                    return result.data.addStudentToGroup;\n                }),\n            );\n    }\n\n    revertFinishedClassStatus(\n        revertFinishedClassStatusInput: IRevertFinishedClassStatusInput,\n    ): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IRevertFinishedClassStatusMutation>({\n                mutation: gql`\n                    mutation revertFinishedClassStatusMutation(\n                        $revertFinishedClassStatusInput: RevertFinishedClassStatusInput\n                    ) {\n                        revertFinishedClassStatus(revertFinishedClassStatusInput: $revertFinishedClassStatusInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { revertFinishedClassStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertFinishedClassStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertFinishedClassStatus;\n                }),\n            );\n    }\n\n    revertLessonStatus(revertLessonStatusInput: IRevertLessonStatusInput): Observable<Lesson> {\n        return this.apollo\n            .mutate<IRevertLessonStatusMutation>({\n                mutation: gql`\n                    mutation revertLessonStatusMutation($revertLessonStatusInput: RevertLessonStatusInput) {\n                        revertLessonStatus(revertLessonStatusInput: $revertLessonStatusInput) {\n                            ...lessonSummary\n                        }\n                    }\n                    ${LESSON_SUMMARY}\n                `,\n                variables: { revertLessonStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertLessonStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertLessonStatus;\n                }),\n            );\n    }\n\n    activateEnrollment(enrollmentId: string): Observable<any> {\n        return this.apollo\n            .mutate<IActivateEnrollmentMutation>({\n                mutation: gql`\n                    mutation ActivateEnrollmentMutation($enrollmentId: ID) {\n                        activateEnrollment(enrollmentId: $enrollmentId) {\n                            id\n                        }\n                    }\n                `,\n                variables: { enrollmentId },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IActivateEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.updatedEnrollment;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "createEnrollment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Enrollment",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ICreateStudyGroupMutation",
            "id": "interface-ICreateStudyGroupMutation-393bbeee17eb6281c8a64cc8ff3beb12",
            "file": "src/app/@core/services/classroom.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\nimport {\n    ClassRecord,\n    ClassRecordType,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from '../models/class-record.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, SourceType, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\n\nimport { CreateStudyGroupInput } from 'app/classroom/pages/groups-page/groups-page.component';\nimport { ENROLLMENT_DETAIL } from 'app/@core/graphql/enrollment.graphql';\nimport { CLASSROOM_SUMMARY } from '../graphql/classroom.graphql';\nimport { CLASS_RECORD_SUMMARY } from '../graphql/class-record.graphql';\nimport { STUDY_GROUP_DETAILS, STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { LESSON_SUMMARY } from '../graphql/lesson.graphql';\nimport { Lesson } from '../models/lesson.model';\n\ninterface IStartClassMutation {\n    startClass: ClassRecord;\n}\n\nexport interface IStartClassInput {\n    lessonId: string;\n    levelId: string;\n    sourceId: string;\n    sourceType: SourceType;\n    teacherNotes?: string;\n}\n\ninterface ICreateEnrollmentMutation {\n    createEnrollment: Enrollment;\n}\n\ninterface IEnrollment {\n    enrollment: Enrollment;\n}\n\ninterface IGetEnrollments {\n    enrollments: Enrollment[];\n}\n\ninterface IFindGroupById {\n    findGroupById: StudyGroup;\n}\n\ninterface ICancelEnrollmentMutation {\n    cancelEnrollment: Enrollment;\n}\n\ninterface IChangeScheduleInput {\n    enrollmentId: string;\n    events: Event[];\n}\n\ninterface IChangeEnrollmentScheduleMutation {\n    changeEnrollmentSchedule: Enrollment;\n}\n\ninterface ICreateStudyGroupMutation {\n    createStudyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupMutation {\n    studyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupInput {\n    studyGroupId: string;\n    name: string;\n    events?: Event[];\n}\n\ninterface IRemoveGroupInput {\n    studyGroupId: string;\n}\n\ninterface IRemoveGroupMutation {\n    group: StudyGroup;\n}\n\ninterface StudyGroupAttendeInput {\n    studentId: string;\n    attended: boolean;\n}\ninterface IActivateEnrollmentMutation {\n    updatedEnrollment: Enrollment;\n}\n\nexport interface IFinishClassInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n    teacherNotes?: string;\n    status: string;\n    lessonStartedAt: string;\n    lessonEndedAt: string;\n    attendees?: StudyGroupAttendeInput[];\n}\n\ninterface IFinishClassMutation {\n    finishClass: ClassRecordType;\n}\n\ninterface ITransferEnrollmentMutation {\n    removeStudentFromGroup: Enrollment;\n}\nexport interface IRevertFinishedClassStatusInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n}\n\ninterface IRevertFinishedClassStatusMutation {\n    revertFinishedClassStatus: ClassRecordType;\n}\nexport interface IRevertLessonStatusInput {\n    sourceId: string;\n    sourceType: SourceType;\n    lessonId: string;\n}\n\ninterface IRevertLessonStatusMutation {\n    revertLessonStatus: Lesson;\n}\n\nexport interface Student {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    opened?: boolean; // front-end only field\n}\n\ninterface IClassroomQuery {\n    classroom: IClassroom;\n}\n\nexport interface IClassroom {\n    id?: string;\n    classInProgress?: ClassRecordType;\n    enrollments?: Enrollment[];\n    studyGroups?: StudyGroup[];\n    students?: Student[];\n    studentEnrollments?: Enrollment[];\n}\n\nexport interface IClassroomFiltersInput {\n    enrollmentStatus?: string;\n    studyGroupStatus?: string;\n}\n\ninterface IAddStudentToGroupMutation {\n    addStudentToGroup: Enrollment;\n}\ninterface IAddStudentToGroupInput {\n    id: string;\n    studyGroupId: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClassroomService {\n    private classInProgressSource = new BehaviorSubject<ClassRecord>(undefined);\n\n    public classInProgress$ = this.classInProgressSource.asObservable();\n\n    getGroupByIdQuery$: QueryRef<IFindGroupById>;\n    getEnrollmentQuery$: QueryRef<IEnrollment>;\n    classroomQuery$: QueryRef<IClassroomQuery>;\n\n    classroomFiltersInput: IClassroomFiltersInput = {\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    };\n\n    constructor(private apollo: Apollo) {}\n\n    getClassroom$(): Observable<IClassroom> {\n        this.classroomQuery$ = this.apollo.watchQuery({\n            query: gql`\n                query Classroom($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        ...classroomSummary\n                    }\n                }\n                ${CLASSROOM_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n\n        return this.classroomQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IClassroomQuery>) => {\n                const classInProgress = result.data.classroom.classInProgress;\n                if (!classInProgress) {\n                    this.classInProgressSource.next(null);\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        this.classInProgressSource.next({\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        });\n                    } else {\n                        this.classInProgressSource.next({\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        });\n                    }\n                }\n\n                return result.data.classroom;\n            }),\n            share(),\n        );\n    }\n\n    classroomRefetch(): void {\n        this.getClassroom$();\n        this.classroomQuery$.refetch();\n    }\n\n    setClassroomFiltersInput(filters: IClassroomFiltersInput = {}) {\n        this.classroomFiltersInput = { ...this.classroomFiltersInput, ...filters };\n    }\n\n    createEnrollmentInvitation(createEnrollmentInput: CreateEnrollmentInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICreateEnrollmentMutation>({\n                mutation: gql`\n                    mutation CreateEnrollment($enrollmentInput: EnrollmentInput, $invitedStudent: StudentInput) {\n                        createEnrollment(enrollmentInput: $enrollmentInput, invitedStudent: $invitedStudent) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    enrollmentInput: createEnrollmentInput.enrollmentInput,\n                    invitedStudent: createEnrollmentInput.invitedStudent,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateEnrollmentMutation>) => {\n                    return result.data.createEnrollment;\n                }),\n            );\n    }\n\n    getEnrollment(enrollmentId: string): Observable<Enrollment> {\n        this.getEnrollmentQuery$ = this.apollo.watchQuery({\n            query: gql`\n            {\n                enrollment(id: \"${enrollmentId}\") {\n                    ...enrollmentDetail\n                }\n            }\n            ${ENROLLMENT_DETAIL}\n            `,\n        });\n\n        return this.getEnrollmentQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IEnrollment>) => result.data.enrollment),\n        );\n    }\n\n    refetchEnrollment(): void {\n        if (this.getEnrollmentQuery$) {\n            this.getEnrollmentQuery$.refetch();\n        }\n    }\n\n    cancelEnrollment(id: string): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICancelEnrollmentMutation>({\n                mutation: gql`\n                    mutation CancelEnrollmentMutation {\n                        cancelEnrollment(id: \"${id}\") {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICancelEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.cancelEnrollment;\n                }),\n            );\n    }\n\n    changeEnrollmentSchedule(changeScheduleInput: IChangeScheduleInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<IChangeEnrollmentScheduleMutation>({\n                mutation: gql`\n                    mutation ChangeEnrollmentScheduleMutation($changeScheduleInput: ChangeScheduleInput) {\n                        changeEnrollmentSchedule(changeScheduleInput: $changeScheduleInput) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    changeScheduleInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeEnrollmentScheduleMutation>) => {\n                    return result.data.changeEnrollmentSchedule;\n                }),\n            );\n    }\n\n    transferEnrollment(id: string, events: Event[]) {\n        return this.apollo\n            .mutate<ITransferEnrollmentMutation>({\n                mutation: gql`\n                    mutation removeStudentFromGroup($id: id, $events: EventsInput) {\n                        removeStudentFromGroup(id: $id, events: $events) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    id,\n                    events,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ITransferEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.removeStudentFromGroup;\n                }),\n            );\n    }\n\n    startClass(startClassInput: IStartClassInput): Observable<ClassRecord> {\n        return this.apollo\n            .mutate<IStartClassMutation>({\n                mutation: gql`\n                    mutation StartClassMutation($startClassInput: StartClassInput) {\n                        startClass(startClassInput: $startClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { startClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IStartClassMutation>) => {\n                    const classInProgress = result.data.startClass;\n                    this.classInProgressSource.next(classInProgress);\n\n                    this.classroomRefetch();\n                    return classInProgress;\n                }),\n            );\n    }\n\n    finishClass(finishClassInput: IFinishClassInput): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IFinishClassMutation>({\n                mutation: gql`\n                    mutation FinishClassMutation($finishClassInput: FinishClassInput) {\n                        finishClass(finishClassInput: $finishClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { finishClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IFinishClassMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.finishClass;\n                }),\n            );\n    }\n\n    getGroupsQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query ClassroomQuery($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        id\n                        studyGroups {\n                            ...studyGroupSummary\n                        }\n                    }\n                }\n                ${STUDY_GROUP_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n    }\n\n    getGroupById(id: string): Observable<StudyGroup> {\n        this.getGroupByIdQuery$ = this.apollo.watchQuery<any>({\n            query: gql`\n                query findGroupById($id: String) {\n                    findGroupById(id: $id) {\n                        ...studyGroupDetails\n                    }\n                }\n                ${STUDY_GROUP_DETAILS}\n            `,\n            variables: {\n                id,\n            },\n        });\n\n        return this.getGroupByIdQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IFindGroupById>) => result.data.findGroupById),\n        );\n    }\n\n    refetchCurrentGroupById(groupId?: string): void {\n        if (groupId) {\n            this.getGroupById(groupId);\n        }\n\n        if (this.getGroupByIdQuery$) {\n            this.getGroupByIdQuery$.refetch();\n        }\n    }\n\n    createStudyGroup(createGroupInput: CreateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<ICreateStudyGroupMutation>({\n                mutation: gql`\n                    mutation CreateGroupMutation($createGroupInput: CreateStudyGroupInput) {\n                        createStudyGroup(createGroupInput: $createGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    createGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.createStudyGroup;\n                }),\n            );\n    }\n\n    updateStudyGroup(studyGroupInput: IUpdateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IUpdateStudyGroupMutation>({\n                mutation: gql`\n                    mutation UpdateStudyGroupMutation($studyGroupInput: UpdateStudyGroupInput) {\n                        updateStudyGroup(studyGroupInput: $studyGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    studyGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.studyGroup;\n                }),\n            );\n    }\n\n    removeStudyGroup(removeGroupInput: IRemoveGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IRemoveGroupMutation>({\n                mutation: gql`\n                    mutation RemoveStudyGroupMutation($removeGroupInput: RemoveStudyGroupInput) {\n                        removeStudyGroup(removeGroupInput: $removeGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    removeGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRemoveGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.group;\n                }),\n            );\n    }\n\n    addStudentToGroup(enrollmentInput: IAddStudentToGroupInput) {\n        return this.apollo\n            .mutate<IAddStudentToGroupMutation>({\n                mutation: gql`\n                    mutation AddStudentToGroupMutation($enrollmentInput: AddStudentToGroupInput) {\n                        addStudentToGroup(enrollmentInput: $enrollmentInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    enrollmentInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IAddStudentToGroupMutation>) => {\n                    this.classroomRefetch();\n                    this.refetchCurrentGroupById();\n                    return result.data.addStudentToGroup;\n                }),\n            );\n    }\n\n    revertFinishedClassStatus(\n        revertFinishedClassStatusInput: IRevertFinishedClassStatusInput,\n    ): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IRevertFinishedClassStatusMutation>({\n                mutation: gql`\n                    mutation revertFinishedClassStatusMutation(\n                        $revertFinishedClassStatusInput: RevertFinishedClassStatusInput\n                    ) {\n                        revertFinishedClassStatus(revertFinishedClassStatusInput: $revertFinishedClassStatusInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { revertFinishedClassStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertFinishedClassStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertFinishedClassStatus;\n                }),\n            );\n    }\n\n    revertLessonStatus(revertLessonStatusInput: IRevertLessonStatusInput): Observable<Lesson> {\n        return this.apollo\n            .mutate<IRevertLessonStatusMutation>({\n                mutation: gql`\n                    mutation revertLessonStatusMutation($revertLessonStatusInput: RevertLessonStatusInput) {\n                        revertLessonStatus(revertLessonStatusInput: $revertLessonStatusInput) {\n                            ...lessonSummary\n                        }\n                    }\n                    ${LESSON_SUMMARY}\n                `,\n                variables: { revertLessonStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertLessonStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertLessonStatus;\n                }),\n            );\n    }\n\n    activateEnrollment(enrollmentId: string): Observable<any> {\n        return this.apollo\n            .mutate<IActivateEnrollmentMutation>({\n                mutation: gql`\n                    mutation ActivateEnrollmentMutation($enrollmentId: ID) {\n                        activateEnrollment(enrollmentId: $enrollmentId) {\n                            id\n                        }\n                    }\n                `,\n                variables: { enrollmentId },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IActivateEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.updatedEnrollment;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "createStudyGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StudyGroup",
                    "optional": false,
                    "description": "",
                    "line": 68
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ICreateSubscriptionCheckoutInput",
            "id": "interface-ICreateSubscriptionCheckoutInput-e3f0e9e20e141f8709c0cbc8138630c1",
            "file": "src/app/@core/services/subscription.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql } from 'apollo-angular';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Invoice } from '../models/invoice.model';\nimport { Product, IProductFilters } from '../models/product.model';\nimport { PRODUCT_DETAILS } from '../graphql/product.graphql';\nimport { SUBSCRIPTION_SUMMARY } from '../graphql/subscription.graphql';\nimport { INVOICE_DETAILS } from '../graphql/invoice.graphql';\nimport { Subscription } from '../models/subscription.model';\n\ninterface IGetInvoicePreview {\n    invoicePreview: Invoice | null;\n}\n\ninterface IGetProducts {\n    products: Product[];\n}\n\ninterface ICreateSubscriptionCheckoutMutation {\n    createSubscriptionCheckout: Subscription;\n}\n\ninterface ICheckoutItem {\n    priceId: string;\n    quantity: number;\n}\n\nexport interface ICreateSubscriptionCheckoutInput {\n    checkoutItems: ICheckoutItem[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SubscriptionService {\n    constructor(private apollo: Apollo) {}\n\n    getInvoicePreview(): Observable<Invoice | null> {\n        return this.apollo\n            .query<IGetInvoicePreview>({\n                query: gql`\n                    {\n                        invoicePreview {\n                            ...invoiceDetails\n                        }\n                    }\n                    ${INVOICE_DETAILS}\n                `,\n            })\n            .pipe(map((result: ApolloQueryResult<IGetInvoicePreview>) => result.data.invoicePreview));\n    }\n\n    getProducts(productFilters?: IProductFilters) {\n        return this.apollo\n            .query<IGetProducts>({\n                query: gql`\n                    query ProductsQuery($productFilters: ProductFilters) {\n                        products(productFilters: $productFilters) {\n                            ...productDetails\n                        }\n                    }\n                    ${PRODUCT_DETAILS}\n                `,\n                variables: {\n                    productFilters,\n                },\n            })\n            .pipe(map((result: ApolloQueryResult<IGetProducts>) => result.data.products));\n    }\n\n    createSubscriptionCheckout(subscriptionCheckoutInput: ICreateSubscriptionCheckoutInput) {\n        return this.apollo\n            .mutate<ICreateSubscriptionCheckoutMutation>({\n                mutation: gql`\n                    mutation createSubscriptionCheckoutMutation(\n                        $subscriptionCheckoutInput: CreateSubscriptionCheckoutInput\n                    ) {\n                        createSubscriptionCheckout(subscriptionCheckoutInput: $subscriptionCheckoutInput) {\n                            ...subscriptionSummary\n                        }\n                    }\n                    ${SUBSCRIPTION_SUMMARY}\n                `,\n                variables: {\n                    subscriptionCheckoutInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateSubscriptionCheckoutMutation>) => {\n                    return result.data.createSubscriptionCheckout;\n                }),\n            );\n    }\n\n    getSubscriptionById(id: string) {\n        return this.apollo.watchQuery<any>({\n            query: gql`\n                query SubscriptionQuery($id: ID) {\n                    subscription(id: $id) {\n                        ...subscriptionSummary\n                    }\n                }\n                ${SUBSCRIPTION_SUMMARY}\n            `,\n            pollInterval: 5000,\n            variables: {\n                id,\n            },\n        });\n    }\n\n    getSubscriptionByCheckoutId(checkoutId: string) {\n        return this.apollo.watchQuery<any>({\n            query: gql`\n                query SubscriptionQueryByStripeCheckoutId($checkoutId: ID) {\n                    subscriptionByStripeCheckoutId(checkoutId: $checkoutId) {\n                        ...subscriptionSummary\n                    }\n                }\n                ${SUBSCRIPTION_SUMMARY}\n            `,\n            pollInterval: 5000,\n            variables: {\n                checkoutId,\n            },\n        });\n    }\n}\n",
            "properties": [
                {
                    "name": "checkoutItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICheckoutItem[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ICreateSubscriptionCheckoutMutation",
            "id": "interface-ICreateSubscriptionCheckoutMutation-e3f0e9e20e141f8709c0cbc8138630c1",
            "file": "src/app/@core/services/subscription.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql } from 'apollo-angular';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Invoice } from '../models/invoice.model';\nimport { Product, IProductFilters } from '../models/product.model';\nimport { PRODUCT_DETAILS } from '../graphql/product.graphql';\nimport { SUBSCRIPTION_SUMMARY } from '../graphql/subscription.graphql';\nimport { INVOICE_DETAILS } from '../graphql/invoice.graphql';\nimport { Subscription } from '../models/subscription.model';\n\ninterface IGetInvoicePreview {\n    invoicePreview: Invoice | null;\n}\n\ninterface IGetProducts {\n    products: Product[];\n}\n\ninterface ICreateSubscriptionCheckoutMutation {\n    createSubscriptionCheckout: Subscription;\n}\n\ninterface ICheckoutItem {\n    priceId: string;\n    quantity: number;\n}\n\nexport interface ICreateSubscriptionCheckoutInput {\n    checkoutItems: ICheckoutItem[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SubscriptionService {\n    constructor(private apollo: Apollo) {}\n\n    getInvoicePreview(): Observable<Invoice | null> {\n        return this.apollo\n            .query<IGetInvoicePreview>({\n                query: gql`\n                    {\n                        invoicePreview {\n                            ...invoiceDetails\n                        }\n                    }\n                    ${INVOICE_DETAILS}\n                `,\n            })\n            .pipe(map((result: ApolloQueryResult<IGetInvoicePreview>) => result.data.invoicePreview));\n    }\n\n    getProducts(productFilters?: IProductFilters) {\n        return this.apollo\n            .query<IGetProducts>({\n                query: gql`\n                    query ProductsQuery($productFilters: ProductFilters) {\n                        products(productFilters: $productFilters) {\n                            ...productDetails\n                        }\n                    }\n                    ${PRODUCT_DETAILS}\n                `,\n                variables: {\n                    productFilters,\n                },\n            })\n            .pipe(map((result: ApolloQueryResult<IGetProducts>) => result.data.products));\n    }\n\n    createSubscriptionCheckout(subscriptionCheckoutInput: ICreateSubscriptionCheckoutInput) {\n        return this.apollo\n            .mutate<ICreateSubscriptionCheckoutMutation>({\n                mutation: gql`\n                    mutation createSubscriptionCheckoutMutation(\n                        $subscriptionCheckoutInput: CreateSubscriptionCheckoutInput\n                    ) {\n                        createSubscriptionCheckout(subscriptionCheckoutInput: $subscriptionCheckoutInput) {\n                            ...subscriptionSummary\n                        }\n                    }\n                    ${SUBSCRIPTION_SUMMARY}\n                `,\n                variables: {\n                    subscriptionCheckoutInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateSubscriptionCheckoutMutation>) => {\n                    return result.data.createSubscriptionCheckout;\n                }),\n            );\n    }\n\n    getSubscriptionById(id: string) {\n        return this.apollo.watchQuery<any>({\n            query: gql`\n                query SubscriptionQuery($id: ID) {\n                    subscription(id: $id) {\n                        ...subscriptionSummary\n                    }\n                }\n                ${SUBSCRIPTION_SUMMARY}\n            `,\n            pollInterval: 5000,\n            variables: {\n                id,\n            },\n        });\n    }\n\n    getSubscriptionByCheckoutId(checkoutId: string) {\n        return this.apollo.watchQuery<any>({\n            query: gql`\n                query SubscriptionQueryByStripeCheckoutId($checkoutId: ID) {\n                    subscriptionByStripeCheckoutId(checkoutId: $checkoutId) {\n                        ...subscriptionSummary\n                    }\n                }\n                ${SUBSCRIPTION_SUMMARY}\n            `,\n            pollInterval: 5000,\n            variables: {\n                checkoutId,\n            },\n        });\n    }\n}\n",
            "properties": [
                {
                    "name": "createSubscriptionCheckout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IDashboardFilters",
            "id": "interface-IDashboardFilters-5921675772b370cedd277a2e5dcff83a",
            "file": "src/app/@core/services/dashboard.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql } from 'apollo-angular';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ENROLLMENT_DETAIL } from '../graphql/enrollment.graphql';\nimport { STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { Enrollment } from '../models/enrollment.model';\nimport { EventOccurrence } from '../models/event-occurrence.model';\nimport { Subscription } from '../models/subscription.model';\n\ninterface IStudent {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    displayName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    subscriptions?: Subscription[];\n}\n\ninterface ITeacherDashboard {\n    nextEvents: EventOccurrence[];\n    students: IStudent[];\n}\n\ninterface ITeacherDashboardQuery {\n    teacherDashboard: ITeacherDashboard;\n}\n\ninterface IStudentDashboard {\n    nextEvent: EventOccurrence;\n    subscriptions: Subscription[];\n}\n\ninterface IStudentDashboardQuery {\n    studentDashboard: IStudentDashboard;\n}\n\nexport interface IDashboardFilters {\n    subscriptionsStatus?: string;\n    subscriptionsExpiringInDays?: number;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DashboardService {\n    constructor(private apollo: Apollo) {}\n\n    getTeacherDashboard(\n        filters: IDashboardFilters = { subscriptionsStatus: 'ACTIVE', subscriptionsExpiringInDays: 30 },\n    ): Observable<ITeacherDashboard> {\n        return this.apollo\n            .watchQuery<ITeacherDashboardQuery>({\n                query: gql`\n                    query TeacherDashboard($filters: DashboardFilters) {\n                        teacherDashboard(filters: $filters) {\n                            id\n                            nextEvents {\n                                id\n                                title\n                                description\n                                startDateTime\n                                enrollment {\n                                    id\n                                }\n                                studyGroup {\n                                    id\n                                }\n                            }\n                            students {\n                                id\n                                firstName\n                                familyName\n                                displayName\n                                enrollments {\n                                    id\n                                    studyGroup {\n                                        id\n                                    }\n                                }\n                                subscriptions {\n                                    id\n                                    renewalDate\n                                }\n                            }\n                        }\n                    }\n                `,\n                variables: {\n                    filters,\n                },\n            })\n            .valueChanges.pipe(\n                map((result: ApolloQueryResult<ITeacherDashboardQuery>) => result.data.teacherDashboard),\n            );\n    }\n\n    getStudentDashboard(\n        filters: IDashboardFilters = { subscriptionsStatus: 'ACTIVE', subscriptionsExpiringInDays: 100 },\n    ): Observable<IStudentDashboard> {\n        return this.apollo\n            .watchQuery<IStudentDashboardQuery>({\n                query: gql`\n                    query StudentDashboardQuery($filters: DashboardFilters) {\n                        studentDashboard(filters: $filters) {\n                            id\n                            nextEvent {\n                                id\n                                title\n                                description\n                                startDateTime\n                                enrollment {\n                                    ...enrollmentDetail\n                                }\n                                studyGroup {\n                                    ...studyGroupSummary\n                                }\n                            }\n                            subscriptions {\n                                id\n                                renewalDate\n                            }\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                    ${STUDY_GROUP_SUMMARY}\n                `,\n                variables: {\n                    filters,\n                },\n            })\n            .valueChanges.pipe(\n                map((result: ApolloQueryResult<IStudentDashboardQuery>) => result.data.studentDashboard),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "subscriptionsExpiringInDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "subscriptionsStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 41
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IEnrollment",
            "id": "interface-IEnrollment-393bbeee17eb6281c8a64cc8ff3beb12",
            "file": "src/app/@core/services/classroom.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\nimport {\n    ClassRecord,\n    ClassRecordType,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from '../models/class-record.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, SourceType, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\n\nimport { CreateStudyGroupInput } from 'app/classroom/pages/groups-page/groups-page.component';\nimport { ENROLLMENT_DETAIL } from 'app/@core/graphql/enrollment.graphql';\nimport { CLASSROOM_SUMMARY } from '../graphql/classroom.graphql';\nimport { CLASS_RECORD_SUMMARY } from '../graphql/class-record.graphql';\nimport { STUDY_GROUP_DETAILS, STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { LESSON_SUMMARY } from '../graphql/lesson.graphql';\nimport { Lesson } from '../models/lesson.model';\n\ninterface IStartClassMutation {\n    startClass: ClassRecord;\n}\n\nexport interface IStartClassInput {\n    lessonId: string;\n    levelId: string;\n    sourceId: string;\n    sourceType: SourceType;\n    teacherNotes?: string;\n}\n\ninterface ICreateEnrollmentMutation {\n    createEnrollment: Enrollment;\n}\n\ninterface IEnrollment {\n    enrollment: Enrollment;\n}\n\ninterface IGetEnrollments {\n    enrollments: Enrollment[];\n}\n\ninterface IFindGroupById {\n    findGroupById: StudyGroup;\n}\n\ninterface ICancelEnrollmentMutation {\n    cancelEnrollment: Enrollment;\n}\n\ninterface IChangeScheduleInput {\n    enrollmentId: string;\n    events: Event[];\n}\n\ninterface IChangeEnrollmentScheduleMutation {\n    changeEnrollmentSchedule: Enrollment;\n}\n\ninterface ICreateStudyGroupMutation {\n    createStudyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupMutation {\n    studyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupInput {\n    studyGroupId: string;\n    name: string;\n    events?: Event[];\n}\n\ninterface IRemoveGroupInput {\n    studyGroupId: string;\n}\n\ninterface IRemoveGroupMutation {\n    group: StudyGroup;\n}\n\ninterface StudyGroupAttendeInput {\n    studentId: string;\n    attended: boolean;\n}\ninterface IActivateEnrollmentMutation {\n    updatedEnrollment: Enrollment;\n}\n\nexport interface IFinishClassInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n    teacherNotes?: string;\n    status: string;\n    lessonStartedAt: string;\n    lessonEndedAt: string;\n    attendees?: StudyGroupAttendeInput[];\n}\n\ninterface IFinishClassMutation {\n    finishClass: ClassRecordType;\n}\n\ninterface ITransferEnrollmentMutation {\n    removeStudentFromGroup: Enrollment;\n}\nexport interface IRevertFinishedClassStatusInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n}\n\ninterface IRevertFinishedClassStatusMutation {\n    revertFinishedClassStatus: ClassRecordType;\n}\nexport interface IRevertLessonStatusInput {\n    sourceId: string;\n    sourceType: SourceType;\n    lessonId: string;\n}\n\ninterface IRevertLessonStatusMutation {\n    revertLessonStatus: Lesson;\n}\n\nexport interface Student {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    opened?: boolean; // front-end only field\n}\n\ninterface IClassroomQuery {\n    classroom: IClassroom;\n}\n\nexport interface IClassroom {\n    id?: string;\n    classInProgress?: ClassRecordType;\n    enrollments?: Enrollment[];\n    studyGroups?: StudyGroup[];\n    students?: Student[];\n    studentEnrollments?: Enrollment[];\n}\n\nexport interface IClassroomFiltersInput {\n    enrollmentStatus?: string;\n    studyGroupStatus?: string;\n}\n\ninterface IAddStudentToGroupMutation {\n    addStudentToGroup: Enrollment;\n}\ninterface IAddStudentToGroupInput {\n    id: string;\n    studyGroupId: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClassroomService {\n    private classInProgressSource = new BehaviorSubject<ClassRecord>(undefined);\n\n    public classInProgress$ = this.classInProgressSource.asObservable();\n\n    getGroupByIdQuery$: QueryRef<IFindGroupById>;\n    getEnrollmentQuery$: QueryRef<IEnrollment>;\n    classroomQuery$: QueryRef<IClassroomQuery>;\n\n    classroomFiltersInput: IClassroomFiltersInput = {\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    };\n\n    constructor(private apollo: Apollo) {}\n\n    getClassroom$(): Observable<IClassroom> {\n        this.classroomQuery$ = this.apollo.watchQuery({\n            query: gql`\n                query Classroom($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        ...classroomSummary\n                    }\n                }\n                ${CLASSROOM_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n\n        return this.classroomQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IClassroomQuery>) => {\n                const classInProgress = result.data.classroom.classInProgress;\n                if (!classInProgress) {\n                    this.classInProgressSource.next(null);\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        this.classInProgressSource.next({\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        });\n                    } else {\n                        this.classInProgressSource.next({\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        });\n                    }\n                }\n\n                return result.data.classroom;\n            }),\n            share(),\n        );\n    }\n\n    classroomRefetch(): void {\n        this.getClassroom$();\n        this.classroomQuery$.refetch();\n    }\n\n    setClassroomFiltersInput(filters: IClassroomFiltersInput = {}) {\n        this.classroomFiltersInput = { ...this.classroomFiltersInput, ...filters };\n    }\n\n    createEnrollmentInvitation(createEnrollmentInput: CreateEnrollmentInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICreateEnrollmentMutation>({\n                mutation: gql`\n                    mutation CreateEnrollment($enrollmentInput: EnrollmentInput, $invitedStudent: StudentInput) {\n                        createEnrollment(enrollmentInput: $enrollmentInput, invitedStudent: $invitedStudent) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    enrollmentInput: createEnrollmentInput.enrollmentInput,\n                    invitedStudent: createEnrollmentInput.invitedStudent,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateEnrollmentMutation>) => {\n                    return result.data.createEnrollment;\n                }),\n            );\n    }\n\n    getEnrollment(enrollmentId: string): Observable<Enrollment> {\n        this.getEnrollmentQuery$ = this.apollo.watchQuery({\n            query: gql`\n            {\n                enrollment(id: \"${enrollmentId}\") {\n                    ...enrollmentDetail\n                }\n            }\n            ${ENROLLMENT_DETAIL}\n            `,\n        });\n\n        return this.getEnrollmentQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IEnrollment>) => result.data.enrollment),\n        );\n    }\n\n    refetchEnrollment(): void {\n        if (this.getEnrollmentQuery$) {\n            this.getEnrollmentQuery$.refetch();\n        }\n    }\n\n    cancelEnrollment(id: string): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICancelEnrollmentMutation>({\n                mutation: gql`\n                    mutation CancelEnrollmentMutation {\n                        cancelEnrollment(id: \"${id}\") {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICancelEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.cancelEnrollment;\n                }),\n            );\n    }\n\n    changeEnrollmentSchedule(changeScheduleInput: IChangeScheduleInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<IChangeEnrollmentScheduleMutation>({\n                mutation: gql`\n                    mutation ChangeEnrollmentScheduleMutation($changeScheduleInput: ChangeScheduleInput) {\n                        changeEnrollmentSchedule(changeScheduleInput: $changeScheduleInput) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    changeScheduleInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeEnrollmentScheduleMutation>) => {\n                    return result.data.changeEnrollmentSchedule;\n                }),\n            );\n    }\n\n    transferEnrollment(id: string, events: Event[]) {\n        return this.apollo\n            .mutate<ITransferEnrollmentMutation>({\n                mutation: gql`\n                    mutation removeStudentFromGroup($id: id, $events: EventsInput) {\n                        removeStudentFromGroup(id: $id, events: $events) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    id,\n                    events,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ITransferEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.removeStudentFromGroup;\n                }),\n            );\n    }\n\n    startClass(startClassInput: IStartClassInput): Observable<ClassRecord> {\n        return this.apollo\n            .mutate<IStartClassMutation>({\n                mutation: gql`\n                    mutation StartClassMutation($startClassInput: StartClassInput) {\n                        startClass(startClassInput: $startClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { startClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IStartClassMutation>) => {\n                    const classInProgress = result.data.startClass;\n                    this.classInProgressSource.next(classInProgress);\n\n                    this.classroomRefetch();\n                    return classInProgress;\n                }),\n            );\n    }\n\n    finishClass(finishClassInput: IFinishClassInput): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IFinishClassMutation>({\n                mutation: gql`\n                    mutation FinishClassMutation($finishClassInput: FinishClassInput) {\n                        finishClass(finishClassInput: $finishClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { finishClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IFinishClassMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.finishClass;\n                }),\n            );\n    }\n\n    getGroupsQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query ClassroomQuery($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        id\n                        studyGroups {\n                            ...studyGroupSummary\n                        }\n                    }\n                }\n                ${STUDY_GROUP_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n    }\n\n    getGroupById(id: string): Observable<StudyGroup> {\n        this.getGroupByIdQuery$ = this.apollo.watchQuery<any>({\n            query: gql`\n                query findGroupById($id: String) {\n                    findGroupById(id: $id) {\n                        ...studyGroupDetails\n                    }\n                }\n                ${STUDY_GROUP_DETAILS}\n            `,\n            variables: {\n                id,\n            },\n        });\n\n        return this.getGroupByIdQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IFindGroupById>) => result.data.findGroupById),\n        );\n    }\n\n    refetchCurrentGroupById(groupId?: string): void {\n        if (groupId) {\n            this.getGroupById(groupId);\n        }\n\n        if (this.getGroupByIdQuery$) {\n            this.getGroupByIdQuery$.refetch();\n        }\n    }\n\n    createStudyGroup(createGroupInput: CreateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<ICreateStudyGroupMutation>({\n                mutation: gql`\n                    mutation CreateGroupMutation($createGroupInput: CreateStudyGroupInput) {\n                        createStudyGroup(createGroupInput: $createGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    createGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.createStudyGroup;\n                }),\n            );\n    }\n\n    updateStudyGroup(studyGroupInput: IUpdateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IUpdateStudyGroupMutation>({\n                mutation: gql`\n                    mutation UpdateStudyGroupMutation($studyGroupInput: UpdateStudyGroupInput) {\n                        updateStudyGroup(studyGroupInput: $studyGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    studyGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.studyGroup;\n                }),\n            );\n    }\n\n    removeStudyGroup(removeGroupInput: IRemoveGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IRemoveGroupMutation>({\n                mutation: gql`\n                    mutation RemoveStudyGroupMutation($removeGroupInput: RemoveStudyGroupInput) {\n                        removeStudyGroup(removeGroupInput: $removeGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    removeGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRemoveGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.group;\n                }),\n            );\n    }\n\n    addStudentToGroup(enrollmentInput: IAddStudentToGroupInput) {\n        return this.apollo\n            .mutate<IAddStudentToGroupMutation>({\n                mutation: gql`\n                    mutation AddStudentToGroupMutation($enrollmentInput: AddStudentToGroupInput) {\n                        addStudentToGroup(enrollmentInput: $enrollmentInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    enrollmentInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IAddStudentToGroupMutation>) => {\n                    this.classroomRefetch();\n                    this.refetchCurrentGroupById();\n                    return result.data.addStudentToGroup;\n                }),\n            );\n    }\n\n    revertFinishedClassStatus(\n        revertFinishedClassStatusInput: IRevertFinishedClassStatusInput,\n    ): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IRevertFinishedClassStatusMutation>({\n                mutation: gql`\n                    mutation revertFinishedClassStatusMutation(\n                        $revertFinishedClassStatusInput: RevertFinishedClassStatusInput\n                    ) {\n                        revertFinishedClassStatus(revertFinishedClassStatusInput: $revertFinishedClassStatusInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { revertFinishedClassStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertFinishedClassStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertFinishedClassStatus;\n                }),\n            );\n    }\n\n    revertLessonStatus(revertLessonStatusInput: IRevertLessonStatusInput): Observable<Lesson> {\n        return this.apollo\n            .mutate<IRevertLessonStatusMutation>({\n                mutation: gql`\n                    mutation revertLessonStatusMutation($revertLessonStatusInput: RevertLessonStatusInput) {\n                        revertLessonStatus(revertLessonStatusInput: $revertLessonStatusInput) {\n                            ...lessonSummary\n                        }\n                    }\n                    ${LESSON_SUMMARY}\n                `,\n                variables: { revertLessonStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertLessonStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertLessonStatus;\n                }),\n            );\n    }\n\n    activateEnrollment(enrollmentId: string): Observable<any> {\n        return this.apollo\n            .mutate<IActivateEnrollmentMutation>({\n                mutation: gql`\n                    mutation ActivateEnrollmentMutation($enrollmentId: ID) {\n                        activateEnrollment(enrollmentId: $enrollmentId) {\n                            id\n                        }\n                    }\n                `,\n                variables: { enrollmentId },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IActivateEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.updatedEnrollment;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "enrollment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Enrollment",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IEventOccurrenceInput",
            "id": "interface-IEventOccurrenceInput-bdd6e353bbd277a4923b8e2722f31510",
            "file": "src/app/@core/models/event-occurrence.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Enrollment, SourceType, StudyGroup } from './enrollment.model';\nimport { Event } from './event.model';\n\nexport interface EventOccurrence extends Event {\n    recurringEventId?: string;\n    originalStartDateTime?: string;\n    originalStartTimeZone?: string;\n    enrollment?: Enrollment;\n    studyGroup?: StudyGroup;\n}\n\nexport interface IEventOccurrenceInput {\n    status: string;\n    id: string;\n    recurringEventId: string;\n    originalStartDateTime: string;\n    originalStartTimeZone: string;\n    sourceType: SourceType;\n    sourceId: string;\n    availabilityType: string;\n    title: string;\n    description: string;\n    startDateTime: string;\n    startTimeZone: string;\n    endDateTime: string;\n    endTimeZone: string;\n    sendNotifications: boolean;\n    visibility: string;\n}\n",
            "properties": [
                {
                    "name": "availabilityType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "endDateTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "endTimeZone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "originalStartDateTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "originalStartTimeZone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "recurringEventId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "sendNotifications",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "sourceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "sourceType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SourceType",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "startDateTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "startTimeZone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "visibility",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IEventsOrganised",
            "id": "interface-IEventsOrganised-e7e5de89093583f20e2396ea110e10b5",
            "file": "src/app/@core/services/calendar.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Apollo, gql } from 'apollo-angular';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Event } from 'app/@core/models/event.model';\nimport { EventOccurrence, IEventOccurrenceInput } from 'app/@core/models/event-occurrence.model';\nimport { EVENT_OCCURRENCE_SUMMARY, EVENT_SUMMARY } from '../graphql/events.graphql';\n\nexport interface IMyCalendar {\n    myCalendar: EventOccurrence[];\n}\n\ninterface IMyEvents {\n    myProfile: IEventsOrganised;\n}\n\ninterface IEventsOrganised {\n    eventsOrganised: Event[];\n}\n\ninterface IChangeSpecificEventBySourceMutation {\n    changeSpecificEvent: EventOccurrence;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CalendarService {\n    getMyEventsQuery$: any;\n\n    constructor(private apollo: Apollo) {}\n\n    getMyEvents(): Observable<Event[]> {\n        this.getMyEventsQuery$ = this.apollo.watchQuery({\n            query: gql`\n                {\n                    myProfile {\n                        id\n                        eventsOrganised {\n                            ...eventSummary\n                        }\n                    }\n                }\n                ${EVENT_SUMMARY}\n            `,\n        });\n\n        return this.getMyEventsQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IMyEvents>) => result.data.myProfile.eventsOrganised),\n        );\n    }\n\n    getMyEventsRefetch() {\n        if (this.getMyEventsQuery$) {\n            this.getMyEventsQuery$.refetch();\n        }\n    }\n\n    getMyCalendar(fromDate: Date, toDate: Date) /* : Observable<EventOccurrence[]> */ {\n        return this.apollo.watchQuery({\n            query: gql`\n          {\n            myCalendar(fromDate: \"${fromDate.toISOString()}\", toDate: \"${toDate.toISOString()}\") {\n                ...eventOccurrenceSummary\n              }\n          }\n          ${EVENT_OCCURRENCE_SUMMARY}`,\n        });\n    }\n\n    changeSpecificEvent(changeSpecificEventInput: IEventOccurrenceInput) {\n        return this.apollo\n            .mutate<IChangeSpecificEventBySourceMutation>({\n                mutation: gql`\n                    mutation changeSpecificEventBySourceMutation($changeSpecificEventInput: EventOccurrenceInput) {\n                        changeSpecificEvent(changeSpecificEventInput: $changeSpecificEventInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    changeSpecificEventInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeSpecificEventBySourceMutation>) => {\n                    return result.data.changeSpecificEvent;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "eventsOrganised",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Event[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IFindGroupById",
            "id": "interface-IFindGroupById-393bbeee17eb6281c8a64cc8ff3beb12",
            "file": "src/app/@core/services/classroom.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\nimport {\n    ClassRecord,\n    ClassRecordType,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from '../models/class-record.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, SourceType, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\n\nimport { CreateStudyGroupInput } from 'app/classroom/pages/groups-page/groups-page.component';\nimport { ENROLLMENT_DETAIL } from 'app/@core/graphql/enrollment.graphql';\nimport { CLASSROOM_SUMMARY } from '../graphql/classroom.graphql';\nimport { CLASS_RECORD_SUMMARY } from '../graphql/class-record.graphql';\nimport { STUDY_GROUP_DETAILS, STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { LESSON_SUMMARY } from '../graphql/lesson.graphql';\nimport { Lesson } from '../models/lesson.model';\n\ninterface IStartClassMutation {\n    startClass: ClassRecord;\n}\n\nexport interface IStartClassInput {\n    lessonId: string;\n    levelId: string;\n    sourceId: string;\n    sourceType: SourceType;\n    teacherNotes?: string;\n}\n\ninterface ICreateEnrollmentMutation {\n    createEnrollment: Enrollment;\n}\n\ninterface IEnrollment {\n    enrollment: Enrollment;\n}\n\ninterface IGetEnrollments {\n    enrollments: Enrollment[];\n}\n\ninterface IFindGroupById {\n    findGroupById: StudyGroup;\n}\n\ninterface ICancelEnrollmentMutation {\n    cancelEnrollment: Enrollment;\n}\n\ninterface IChangeScheduleInput {\n    enrollmentId: string;\n    events: Event[];\n}\n\ninterface IChangeEnrollmentScheduleMutation {\n    changeEnrollmentSchedule: Enrollment;\n}\n\ninterface ICreateStudyGroupMutation {\n    createStudyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupMutation {\n    studyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupInput {\n    studyGroupId: string;\n    name: string;\n    events?: Event[];\n}\n\ninterface IRemoveGroupInput {\n    studyGroupId: string;\n}\n\ninterface IRemoveGroupMutation {\n    group: StudyGroup;\n}\n\ninterface StudyGroupAttendeInput {\n    studentId: string;\n    attended: boolean;\n}\ninterface IActivateEnrollmentMutation {\n    updatedEnrollment: Enrollment;\n}\n\nexport interface IFinishClassInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n    teacherNotes?: string;\n    status: string;\n    lessonStartedAt: string;\n    lessonEndedAt: string;\n    attendees?: StudyGroupAttendeInput[];\n}\n\ninterface IFinishClassMutation {\n    finishClass: ClassRecordType;\n}\n\ninterface ITransferEnrollmentMutation {\n    removeStudentFromGroup: Enrollment;\n}\nexport interface IRevertFinishedClassStatusInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n}\n\ninterface IRevertFinishedClassStatusMutation {\n    revertFinishedClassStatus: ClassRecordType;\n}\nexport interface IRevertLessonStatusInput {\n    sourceId: string;\n    sourceType: SourceType;\n    lessonId: string;\n}\n\ninterface IRevertLessonStatusMutation {\n    revertLessonStatus: Lesson;\n}\n\nexport interface Student {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    opened?: boolean; // front-end only field\n}\n\ninterface IClassroomQuery {\n    classroom: IClassroom;\n}\n\nexport interface IClassroom {\n    id?: string;\n    classInProgress?: ClassRecordType;\n    enrollments?: Enrollment[];\n    studyGroups?: StudyGroup[];\n    students?: Student[];\n    studentEnrollments?: Enrollment[];\n}\n\nexport interface IClassroomFiltersInput {\n    enrollmentStatus?: string;\n    studyGroupStatus?: string;\n}\n\ninterface IAddStudentToGroupMutation {\n    addStudentToGroup: Enrollment;\n}\ninterface IAddStudentToGroupInput {\n    id: string;\n    studyGroupId: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClassroomService {\n    private classInProgressSource = new BehaviorSubject<ClassRecord>(undefined);\n\n    public classInProgress$ = this.classInProgressSource.asObservable();\n\n    getGroupByIdQuery$: QueryRef<IFindGroupById>;\n    getEnrollmentQuery$: QueryRef<IEnrollment>;\n    classroomQuery$: QueryRef<IClassroomQuery>;\n\n    classroomFiltersInput: IClassroomFiltersInput = {\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    };\n\n    constructor(private apollo: Apollo) {}\n\n    getClassroom$(): Observable<IClassroom> {\n        this.classroomQuery$ = this.apollo.watchQuery({\n            query: gql`\n                query Classroom($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        ...classroomSummary\n                    }\n                }\n                ${CLASSROOM_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n\n        return this.classroomQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IClassroomQuery>) => {\n                const classInProgress = result.data.classroom.classInProgress;\n                if (!classInProgress) {\n                    this.classInProgressSource.next(null);\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        this.classInProgressSource.next({\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        });\n                    } else {\n                        this.classInProgressSource.next({\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        });\n                    }\n                }\n\n                return result.data.classroom;\n            }),\n            share(),\n        );\n    }\n\n    classroomRefetch(): void {\n        this.getClassroom$();\n        this.classroomQuery$.refetch();\n    }\n\n    setClassroomFiltersInput(filters: IClassroomFiltersInput = {}) {\n        this.classroomFiltersInput = { ...this.classroomFiltersInput, ...filters };\n    }\n\n    createEnrollmentInvitation(createEnrollmentInput: CreateEnrollmentInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICreateEnrollmentMutation>({\n                mutation: gql`\n                    mutation CreateEnrollment($enrollmentInput: EnrollmentInput, $invitedStudent: StudentInput) {\n                        createEnrollment(enrollmentInput: $enrollmentInput, invitedStudent: $invitedStudent) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    enrollmentInput: createEnrollmentInput.enrollmentInput,\n                    invitedStudent: createEnrollmentInput.invitedStudent,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateEnrollmentMutation>) => {\n                    return result.data.createEnrollment;\n                }),\n            );\n    }\n\n    getEnrollment(enrollmentId: string): Observable<Enrollment> {\n        this.getEnrollmentQuery$ = this.apollo.watchQuery({\n            query: gql`\n            {\n                enrollment(id: \"${enrollmentId}\") {\n                    ...enrollmentDetail\n                }\n            }\n            ${ENROLLMENT_DETAIL}\n            `,\n        });\n\n        return this.getEnrollmentQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IEnrollment>) => result.data.enrollment),\n        );\n    }\n\n    refetchEnrollment(): void {\n        if (this.getEnrollmentQuery$) {\n            this.getEnrollmentQuery$.refetch();\n        }\n    }\n\n    cancelEnrollment(id: string): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICancelEnrollmentMutation>({\n                mutation: gql`\n                    mutation CancelEnrollmentMutation {\n                        cancelEnrollment(id: \"${id}\") {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICancelEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.cancelEnrollment;\n                }),\n            );\n    }\n\n    changeEnrollmentSchedule(changeScheduleInput: IChangeScheduleInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<IChangeEnrollmentScheduleMutation>({\n                mutation: gql`\n                    mutation ChangeEnrollmentScheduleMutation($changeScheduleInput: ChangeScheduleInput) {\n                        changeEnrollmentSchedule(changeScheduleInput: $changeScheduleInput) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    changeScheduleInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeEnrollmentScheduleMutation>) => {\n                    return result.data.changeEnrollmentSchedule;\n                }),\n            );\n    }\n\n    transferEnrollment(id: string, events: Event[]) {\n        return this.apollo\n            .mutate<ITransferEnrollmentMutation>({\n                mutation: gql`\n                    mutation removeStudentFromGroup($id: id, $events: EventsInput) {\n                        removeStudentFromGroup(id: $id, events: $events) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    id,\n                    events,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ITransferEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.removeStudentFromGroup;\n                }),\n            );\n    }\n\n    startClass(startClassInput: IStartClassInput): Observable<ClassRecord> {\n        return this.apollo\n            .mutate<IStartClassMutation>({\n                mutation: gql`\n                    mutation StartClassMutation($startClassInput: StartClassInput) {\n                        startClass(startClassInput: $startClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { startClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IStartClassMutation>) => {\n                    const classInProgress = result.data.startClass;\n                    this.classInProgressSource.next(classInProgress);\n\n                    this.classroomRefetch();\n                    return classInProgress;\n                }),\n            );\n    }\n\n    finishClass(finishClassInput: IFinishClassInput): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IFinishClassMutation>({\n                mutation: gql`\n                    mutation FinishClassMutation($finishClassInput: FinishClassInput) {\n                        finishClass(finishClassInput: $finishClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { finishClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IFinishClassMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.finishClass;\n                }),\n            );\n    }\n\n    getGroupsQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query ClassroomQuery($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        id\n                        studyGroups {\n                            ...studyGroupSummary\n                        }\n                    }\n                }\n                ${STUDY_GROUP_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n    }\n\n    getGroupById(id: string): Observable<StudyGroup> {\n        this.getGroupByIdQuery$ = this.apollo.watchQuery<any>({\n            query: gql`\n                query findGroupById($id: String) {\n                    findGroupById(id: $id) {\n                        ...studyGroupDetails\n                    }\n                }\n                ${STUDY_GROUP_DETAILS}\n            `,\n            variables: {\n                id,\n            },\n        });\n\n        return this.getGroupByIdQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IFindGroupById>) => result.data.findGroupById),\n        );\n    }\n\n    refetchCurrentGroupById(groupId?: string): void {\n        if (groupId) {\n            this.getGroupById(groupId);\n        }\n\n        if (this.getGroupByIdQuery$) {\n            this.getGroupByIdQuery$.refetch();\n        }\n    }\n\n    createStudyGroup(createGroupInput: CreateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<ICreateStudyGroupMutation>({\n                mutation: gql`\n                    mutation CreateGroupMutation($createGroupInput: CreateStudyGroupInput) {\n                        createStudyGroup(createGroupInput: $createGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    createGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.createStudyGroup;\n                }),\n            );\n    }\n\n    updateStudyGroup(studyGroupInput: IUpdateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IUpdateStudyGroupMutation>({\n                mutation: gql`\n                    mutation UpdateStudyGroupMutation($studyGroupInput: UpdateStudyGroupInput) {\n                        updateStudyGroup(studyGroupInput: $studyGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    studyGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.studyGroup;\n                }),\n            );\n    }\n\n    removeStudyGroup(removeGroupInput: IRemoveGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IRemoveGroupMutation>({\n                mutation: gql`\n                    mutation RemoveStudyGroupMutation($removeGroupInput: RemoveStudyGroupInput) {\n                        removeStudyGroup(removeGroupInput: $removeGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    removeGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRemoveGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.group;\n                }),\n            );\n    }\n\n    addStudentToGroup(enrollmentInput: IAddStudentToGroupInput) {\n        return this.apollo\n            .mutate<IAddStudentToGroupMutation>({\n                mutation: gql`\n                    mutation AddStudentToGroupMutation($enrollmentInput: AddStudentToGroupInput) {\n                        addStudentToGroup(enrollmentInput: $enrollmentInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    enrollmentInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IAddStudentToGroupMutation>) => {\n                    this.classroomRefetch();\n                    this.refetchCurrentGroupById();\n                    return result.data.addStudentToGroup;\n                }),\n            );\n    }\n\n    revertFinishedClassStatus(\n        revertFinishedClassStatusInput: IRevertFinishedClassStatusInput,\n    ): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IRevertFinishedClassStatusMutation>({\n                mutation: gql`\n                    mutation revertFinishedClassStatusMutation(\n                        $revertFinishedClassStatusInput: RevertFinishedClassStatusInput\n                    ) {\n                        revertFinishedClassStatus(revertFinishedClassStatusInput: $revertFinishedClassStatusInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { revertFinishedClassStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertFinishedClassStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertFinishedClassStatus;\n                }),\n            );\n    }\n\n    revertLessonStatus(revertLessonStatusInput: IRevertLessonStatusInput): Observable<Lesson> {\n        return this.apollo\n            .mutate<IRevertLessonStatusMutation>({\n                mutation: gql`\n                    mutation revertLessonStatusMutation($revertLessonStatusInput: RevertLessonStatusInput) {\n                        revertLessonStatus(revertLessonStatusInput: $revertLessonStatusInput) {\n                            ...lessonSummary\n                        }\n                    }\n                    ${LESSON_SUMMARY}\n                `,\n                variables: { revertLessonStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertLessonStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertLessonStatus;\n                }),\n            );\n    }\n\n    activateEnrollment(enrollmentId: string): Observable<any> {\n        return this.apollo\n            .mutate<IActivateEnrollmentMutation>({\n                mutation: gql`\n                    mutation ActivateEnrollmentMutation($enrollmentId: ID) {\n                        activateEnrollment(enrollmentId: $enrollmentId) {\n                            id\n                        }\n                    }\n                `,\n                variables: { enrollmentId },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IActivateEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.updatedEnrollment;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "findGroupById",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StudyGroup",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IFinishClassInput",
            "id": "interface-IFinishClassInput-393bbeee17eb6281c8a64cc8ff3beb12",
            "file": "src/app/@core/services/classroom.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\nimport {\n    ClassRecord,\n    ClassRecordType,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from '../models/class-record.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, SourceType, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\n\nimport { CreateStudyGroupInput } from 'app/classroom/pages/groups-page/groups-page.component';\nimport { ENROLLMENT_DETAIL } from 'app/@core/graphql/enrollment.graphql';\nimport { CLASSROOM_SUMMARY } from '../graphql/classroom.graphql';\nimport { CLASS_RECORD_SUMMARY } from '../graphql/class-record.graphql';\nimport { STUDY_GROUP_DETAILS, STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { LESSON_SUMMARY } from '../graphql/lesson.graphql';\nimport { Lesson } from '../models/lesson.model';\n\ninterface IStartClassMutation {\n    startClass: ClassRecord;\n}\n\nexport interface IStartClassInput {\n    lessonId: string;\n    levelId: string;\n    sourceId: string;\n    sourceType: SourceType;\n    teacherNotes?: string;\n}\n\ninterface ICreateEnrollmentMutation {\n    createEnrollment: Enrollment;\n}\n\ninterface IEnrollment {\n    enrollment: Enrollment;\n}\n\ninterface IGetEnrollments {\n    enrollments: Enrollment[];\n}\n\ninterface IFindGroupById {\n    findGroupById: StudyGroup;\n}\n\ninterface ICancelEnrollmentMutation {\n    cancelEnrollment: Enrollment;\n}\n\ninterface IChangeScheduleInput {\n    enrollmentId: string;\n    events: Event[];\n}\n\ninterface IChangeEnrollmentScheduleMutation {\n    changeEnrollmentSchedule: Enrollment;\n}\n\ninterface ICreateStudyGroupMutation {\n    createStudyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupMutation {\n    studyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupInput {\n    studyGroupId: string;\n    name: string;\n    events?: Event[];\n}\n\ninterface IRemoveGroupInput {\n    studyGroupId: string;\n}\n\ninterface IRemoveGroupMutation {\n    group: StudyGroup;\n}\n\ninterface StudyGroupAttendeInput {\n    studentId: string;\n    attended: boolean;\n}\ninterface IActivateEnrollmentMutation {\n    updatedEnrollment: Enrollment;\n}\n\nexport interface IFinishClassInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n    teacherNotes?: string;\n    status: string;\n    lessonStartedAt: string;\n    lessonEndedAt: string;\n    attendees?: StudyGroupAttendeInput[];\n}\n\ninterface IFinishClassMutation {\n    finishClass: ClassRecordType;\n}\n\ninterface ITransferEnrollmentMutation {\n    removeStudentFromGroup: Enrollment;\n}\nexport interface IRevertFinishedClassStatusInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n}\n\ninterface IRevertFinishedClassStatusMutation {\n    revertFinishedClassStatus: ClassRecordType;\n}\nexport interface IRevertLessonStatusInput {\n    sourceId: string;\n    sourceType: SourceType;\n    lessonId: string;\n}\n\ninterface IRevertLessonStatusMutation {\n    revertLessonStatus: Lesson;\n}\n\nexport interface Student {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    opened?: boolean; // front-end only field\n}\n\ninterface IClassroomQuery {\n    classroom: IClassroom;\n}\n\nexport interface IClassroom {\n    id?: string;\n    classInProgress?: ClassRecordType;\n    enrollments?: Enrollment[];\n    studyGroups?: StudyGroup[];\n    students?: Student[];\n    studentEnrollments?: Enrollment[];\n}\n\nexport interface IClassroomFiltersInput {\n    enrollmentStatus?: string;\n    studyGroupStatus?: string;\n}\n\ninterface IAddStudentToGroupMutation {\n    addStudentToGroup: Enrollment;\n}\ninterface IAddStudentToGroupInput {\n    id: string;\n    studyGroupId: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClassroomService {\n    private classInProgressSource = new BehaviorSubject<ClassRecord>(undefined);\n\n    public classInProgress$ = this.classInProgressSource.asObservable();\n\n    getGroupByIdQuery$: QueryRef<IFindGroupById>;\n    getEnrollmentQuery$: QueryRef<IEnrollment>;\n    classroomQuery$: QueryRef<IClassroomQuery>;\n\n    classroomFiltersInput: IClassroomFiltersInput = {\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    };\n\n    constructor(private apollo: Apollo) {}\n\n    getClassroom$(): Observable<IClassroom> {\n        this.classroomQuery$ = this.apollo.watchQuery({\n            query: gql`\n                query Classroom($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        ...classroomSummary\n                    }\n                }\n                ${CLASSROOM_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n\n        return this.classroomQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IClassroomQuery>) => {\n                const classInProgress = result.data.classroom.classInProgress;\n                if (!classInProgress) {\n                    this.classInProgressSource.next(null);\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        this.classInProgressSource.next({\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        });\n                    } else {\n                        this.classInProgressSource.next({\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        });\n                    }\n                }\n\n                return result.data.classroom;\n            }),\n            share(),\n        );\n    }\n\n    classroomRefetch(): void {\n        this.getClassroom$();\n        this.classroomQuery$.refetch();\n    }\n\n    setClassroomFiltersInput(filters: IClassroomFiltersInput = {}) {\n        this.classroomFiltersInput = { ...this.classroomFiltersInput, ...filters };\n    }\n\n    createEnrollmentInvitation(createEnrollmentInput: CreateEnrollmentInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICreateEnrollmentMutation>({\n                mutation: gql`\n                    mutation CreateEnrollment($enrollmentInput: EnrollmentInput, $invitedStudent: StudentInput) {\n                        createEnrollment(enrollmentInput: $enrollmentInput, invitedStudent: $invitedStudent) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    enrollmentInput: createEnrollmentInput.enrollmentInput,\n                    invitedStudent: createEnrollmentInput.invitedStudent,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateEnrollmentMutation>) => {\n                    return result.data.createEnrollment;\n                }),\n            );\n    }\n\n    getEnrollment(enrollmentId: string): Observable<Enrollment> {\n        this.getEnrollmentQuery$ = this.apollo.watchQuery({\n            query: gql`\n            {\n                enrollment(id: \"${enrollmentId}\") {\n                    ...enrollmentDetail\n                }\n            }\n            ${ENROLLMENT_DETAIL}\n            `,\n        });\n\n        return this.getEnrollmentQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IEnrollment>) => result.data.enrollment),\n        );\n    }\n\n    refetchEnrollment(): void {\n        if (this.getEnrollmentQuery$) {\n            this.getEnrollmentQuery$.refetch();\n        }\n    }\n\n    cancelEnrollment(id: string): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICancelEnrollmentMutation>({\n                mutation: gql`\n                    mutation CancelEnrollmentMutation {\n                        cancelEnrollment(id: \"${id}\") {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICancelEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.cancelEnrollment;\n                }),\n            );\n    }\n\n    changeEnrollmentSchedule(changeScheduleInput: IChangeScheduleInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<IChangeEnrollmentScheduleMutation>({\n                mutation: gql`\n                    mutation ChangeEnrollmentScheduleMutation($changeScheduleInput: ChangeScheduleInput) {\n                        changeEnrollmentSchedule(changeScheduleInput: $changeScheduleInput) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    changeScheduleInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeEnrollmentScheduleMutation>) => {\n                    return result.data.changeEnrollmentSchedule;\n                }),\n            );\n    }\n\n    transferEnrollment(id: string, events: Event[]) {\n        return this.apollo\n            .mutate<ITransferEnrollmentMutation>({\n                mutation: gql`\n                    mutation removeStudentFromGroup($id: id, $events: EventsInput) {\n                        removeStudentFromGroup(id: $id, events: $events) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    id,\n                    events,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ITransferEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.removeStudentFromGroup;\n                }),\n            );\n    }\n\n    startClass(startClassInput: IStartClassInput): Observable<ClassRecord> {\n        return this.apollo\n            .mutate<IStartClassMutation>({\n                mutation: gql`\n                    mutation StartClassMutation($startClassInput: StartClassInput) {\n                        startClass(startClassInput: $startClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { startClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IStartClassMutation>) => {\n                    const classInProgress = result.data.startClass;\n                    this.classInProgressSource.next(classInProgress);\n\n                    this.classroomRefetch();\n                    return classInProgress;\n                }),\n            );\n    }\n\n    finishClass(finishClassInput: IFinishClassInput): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IFinishClassMutation>({\n                mutation: gql`\n                    mutation FinishClassMutation($finishClassInput: FinishClassInput) {\n                        finishClass(finishClassInput: $finishClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { finishClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IFinishClassMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.finishClass;\n                }),\n            );\n    }\n\n    getGroupsQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query ClassroomQuery($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        id\n                        studyGroups {\n                            ...studyGroupSummary\n                        }\n                    }\n                }\n                ${STUDY_GROUP_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n    }\n\n    getGroupById(id: string): Observable<StudyGroup> {\n        this.getGroupByIdQuery$ = this.apollo.watchQuery<any>({\n            query: gql`\n                query findGroupById($id: String) {\n                    findGroupById(id: $id) {\n                        ...studyGroupDetails\n                    }\n                }\n                ${STUDY_GROUP_DETAILS}\n            `,\n            variables: {\n                id,\n            },\n        });\n\n        return this.getGroupByIdQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IFindGroupById>) => result.data.findGroupById),\n        );\n    }\n\n    refetchCurrentGroupById(groupId?: string): void {\n        if (groupId) {\n            this.getGroupById(groupId);\n        }\n\n        if (this.getGroupByIdQuery$) {\n            this.getGroupByIdQuery$.refetch();\n        }\n    }\n\n    createStudyGroup(createGroupInput: CreateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<ICreateStudyGroupMutation>({\n                mutation: gql`\n                    mutation CreateGroupMutation($createGroupInput: CreateStudyGroupInput) {\n                        createStudyGroup(createGroupInput: $createGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    createGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.createStudyGroup;\n                }),\n            );\n    }\n\n    updateStudyGroup(studyGroupInput: IUpdateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IUpdateStudyGroupMutation>({\n                mutation: gql`\n                    mutation UpdateStudyGroupMutation($studyGroupInput: UpdateStudyGroupInput) {\n                        updateStudyGroup(studyGroupInput: $studyGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    studyGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.studyGroup;\n                }),\n            );\n    }\n\n    removeStudyGroup(removeGroupInput: IRemoveGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IRemoveGroupMutation>({\n                mutation: gql`\n                    mutation RemoveStudyGroupMutation($removeGroupInput: RemoveStudyGroupInput) {\n                        removeStudyGroup(removeGroupInput: $removeGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    removeGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRemoveGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.group;\n                }),\n            );\n    }\n\n    addStudentToGroup(enrollmentInput: IAddStudentToGroupInput) {\n        return this.apollo\n            .mutate<IAddStudentToGroupMutation>({\n                mutation: gql`\n                    mutation AddStudentToGroupMutation($enrollmentInput: AddStudentToGroupInput) {\n                        addStudentToGroup(enrollmentInput: $enrollmentInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    enrollmentInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IAddStudentToGroupMutation>) => {\n                    this.classroomRefetch();\n                    this.refetchCurrentGroupById();\n                    return result.data.addStudentToGroup;\n                }),\n            );\n    }\n\n    revertFinishedClassStatus(\n        revertFinishedClassStatusInput: IRevertFinishedClassStatusInput,\n    ): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IRevertFinishedClassStatusMutation>({\n                mutation: gql`\n                    mutation revertFinishedClassStatusMutation(\n                        $revertFinishedClassStatusInput: RevertFinishedClassStatusInput\n                    ) {\n                        revertFinishedClassStatus(revertFinishedClassStatusInput: $revertFinishedClassStatusInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { revertFinishedClassStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertFinishedClassStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertFinishedClassStatus;\n                }),\n            );\n    }\n\n    revertLessonStatus(revertLessonStatusInput: IRevertLessonStatusInput): Observable<Lesson> {\n        return this.apollo\n            .mutate<IRevertLessonStatusMutation>({\n                mutation: gql`\n                    mutation revertLessonStatusMutation($revertLessonStatusInput: RevertLessonStatusInput) {\n                        revertLessonStatus(revertLessonStatusInput: $revertLessonStatusInput) {\n                            ...lessonSummary\n                        }\n                    }\n                    ${LESSON_SUMMARY}\n                `,\n                variables: { revertLessonStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertLessonStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertLessonStatus;\n                }),\n            );\n    }\n\n    activateEnrollment(enrollmentId: string): Observable<any> {\n        return this.apollo\n            .mutate<IActivateEnrollmentMutation>({\n                mutation: gql`\n                    mutation ActivateEnrollmentMutation($enrollmentId: ID) {\n                        activateEnrollment(enrollmentId: $enrollmentId) {\n                            id\n                        }\n                    }\n                `,\n                variables: { enrollmentId },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IActivateEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.updatedEnrollment;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "attendees",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StudyGroupAttendeInput[]",
                    "optional": true,
                    "description": "",
                    "line": 105
                },
                {
                    "name": "classRecordId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "lessonEndedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "lessonStartedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "sourceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "sourceType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SourceType",
                    "optional": false,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 102
                },
                {
                    "name": "teacherNotes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 101
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IFinishClassMutation",
            "id": "interface-IFinishClassMutation-393bbeee17eb6281c8a64cc8ff3beb12",
            "file": "src/app/@core/services/classroom.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\nimport {\n    ClassRecord,\n    ClassRecordType,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from '../models/class-record.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, SourceType, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\n\nimport { CreateStudyGroupInput } from 'app/classroom/pages/groups-page/groups-page.component';\nimport { ENROLLMENT_DETAIL } from 'app/@core/graphql/enrollment.graphql';\nimport { CLASSROOM_SUMMARY } from '../graphql/classroom.graphql';\nimport { CLASS_RECORD_SUMMARY } from '../graphql/class-record.graphql';\nimport { STUDY_GROUP_DETAILS, STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { LESSON_SUMMARY } from '../graphql/lesson.graphql';\nimport { Lesson } from '../models/lesson.model';\n\ninterface IStartClassMutation {\n    startClass: ClassRecord;\n}\n\nexport interface IStartClassInput {\n    lessonId: string;\n    levelId: string;\n    sourceId: string;\n    sourceType: SourceType;\n    teacherNotes?: string;\n}\n\ninterface ICreateEnrollmentMutation {\n    createEnrollment: Enrollment;\n}\n\ninterface IEnrollment {\n    enrollment: Enrollment;\n}\n\ninterface IGetEnrollments {\n    enrollments: Enrollment[];\n}\n\ninterface IFindGroupById {\n    findGroupById: StudyGroup;\n}\n\ninterface ICancelEnrollmentMutation {\n    cancelEnrollment: Enrollment;\n}\n\ninterface IChangeScheduleInput {\n    enrollmentId: string;\n    events: Event[];\n}\n\ninterface IChangeEnrollmentScheduleMutation {\n    changeEnrollmentSchedule: Enrollment;\n}\n\ninterface ICreateStudyGroupMutation {\n    createStudyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupMutation {\n    studyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupInput {\n    studyGroupId: string;\n    name: string;\n    events?: Event[];\n}\n\ninterface IRemoveGroupInput {\n    studyGroupId: string;\n}\n\ninterface IRemoveGroupMutation {\n    group: StudyGroup;\n}\n\ninterface StudyGroupAttendeInput {\n    studentId: string;\n    attended: boolean;\n}\ninterface IActivateEnrollmentMutation {\n    updatedEnrollment: Enrollment;\n}\n\nexport interface IFinishClassInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n    teacherNotes?: string;\n    status: string;\n    lessonStartedAt: string;\n    lessonEndedAt: string;\n    attendees?: StudyGroupAttendeInput[];\n}\n\ninterface IFinishClassMutation {\n    finishClass: ClassRecordType;\n}\n\ninterface ITransferEnrollmentMutation {\n    removeStudentFromGroup: Enrollment;\n}\nexport interface IRevertFinishedClassStatusInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n}\n\ninterface IRevertFinishedClassStatusMutation {\n    revertFinishedClassStatus: ClassRecordType;\n}\nexport interface IRevertLessonStatusInput {\n    sourceId: string;\n    sourceType: SourceType;\n    lessonId: string;\n}\n\ninterface IRevertLessonStatusMutation {\n    revertLessonStatus: Lesson;\n}\n\nexport interface Student {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    opened?: boolean; // front-end only field\n}\n\ninterface IClassroomQuery {\n    classroom: IClassroom;\n}\n\nexport interface IClassroom {\n    id?: string;\n    classInProgress?: ClassRecordType;\n    enrollments?: Enrollment[];\n    studyGroups?: StudyGroup[];\n    students?: Student[];\n    studentEnrollments?: Enrollment[];\n}\n\nexport interface IClassroomFiltersInput {\n    enrollmentStatus?: string;\n    studyGroupStatus?: string;\n}\n\ninterface IAddStudentToGroupMutation {\n    addStudentToGroup: Enrollment;\n}\ninterface IAddStudentToGroupInput {\n    id: string;\n    studyGroupId: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClassroomService {\n    private classInProgressSource = new BehaviorSubject<ClassRecord>(undefined);\n\n    public classInProgress$ = this.classInProgressSource.asObservable();\n\n    getGroupByIdQuery$: QueryRef<IFindGroupById>;\n    getEnrollmentQuery$: QueryRef<IEnrollment>;\n    classroomQuery$: QueryRef<IClassroomQuery>;\n\n    classroomFiltersInput: IClassroomFiltersInput = {\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    };\n\n    constructor(private apollo: Apollo) {}\n\n    getClassroom$(): Observable<IClassroom> {\n        this.classroomQuery$ = this.apollo.watchQuery({\n            query: gql`\n                query Classroom($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        ...classroomSummary\n                    }\n                }\n                ${CLASSROOM_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n\n        return this.classroomQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IClassroomQuery>) => {\n                const classInProgress = result.data.classroom.classInProgress;\n                if (!classInProgress) {\n                    this.classInProgressSource.next(null);\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        this.classInProgressSource.next({\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        });\n                    } else {\n                        this.classInProgressSource.next({\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        });\n                    }\n                }\n\n                return result.data.classroom;\n            }),\n            share(),\n        );\n    }\n\n    classroomRefetch(): void {\n        this.getClassroom$();\n        this.classroomQuery$.refetch();\n    }\n\n    setClassroomFiltersInput(filters: IClassroomFiltersInput = {}) {\n        this.classroomFiltersInput = { ...this.classroomFiltersInput, ...filters };\n    }\n\n    createEnrollmentInvitation(createEnrollmentInput: CreateEnrollmentInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICreateEnrollmentMutation>({\n                mutation: gql`\n                    mutation CreateEnrollment($enrollmentInput: EnrollmentInput, $invitedStudent: StudentInput) {\n                        createEnrollment(enrollmentInput: $enrollmentInput, invitedStudent: $invitedStudent) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    enrollmentInput: createEnrollmentInput.enrollmentInput,\n                    invitedStudent: createEnrollmentInput.invitedStudent,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateEnrollmentMutation>) => {\n                    return result.data.createEnrollment;\n                }),\n            );\n    }\n\n    getEnrollment(enrollmentId: string): Observable<Enrollment> {\n        this.getEnrollmentQuery$ = this.apollo.watchQuery({\n            query: gql`\n            {\n                enrollment(id: \"${enrollmentId}\") {\n                    ...enrollmentDetail\n                }\n            }\n            ${ENROLLMENT_DETAIL}\n            `,\n        });\n\n        return this.getEnrollmentQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IEnrollment>) => result.data.enrollment),\n        );\n    }\n\n    refetchEnrollment(): void {\n        if (this.getEnrollmentQuery$) {\n            this.getEnrollmentQuery$.refetch();\n        }\n    }\n\n    cancelEnrollment(id: string): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICancelEnrollmentMutation>({\n                mutation: gql`\n                    mutation CancelEnrollmentMutation {\n                        cancelEnrollment(id: \"${id}\") {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICancelEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.cancelEnrollment;\n                }),\n            );\n    }\n\n    changeEnrollmentSchedule(changeScheduleInput: IChangeScheduleInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<IChangeEnrollmentScheduleMutation>({\n                mutation: gql`\n                    mutation ChangeEnrollmentScheduleMutation($changeScheduleInput: ChangeScheduleInput) {\n                        changeEnrollmentSchedule(changeScheduleInput: $changeScheduleInput) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    changeScheduleInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeEnrollmentScheduleMutation>) => {\n                    return result.data.changeEnrollmentSchedule;\n                }),\n            );\n    }\n\n    transferEnrollment(id: string, events: Event[]) {\n        return this.apollo\n            .mutate<ITransferEnrollmentMutation>({\n                mutation: gql`\n                    mutation removeStudentFromGroup($id: id, $events: EventsInput) {\n                        removeStudentFromGroup(id: $id, events: $events) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    id,\n                    events,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ITransferEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.removeStudentFromGroup;\n                }),\n            );\n    }\n\n    startClass(startClassInput: IStartClassInput): Observable<ClassRecord> {\n        return this.apollo\n            .mutate<IStartClassMutation>({\n                mutation: gql`\n                    mutation StartClassMutation($startClassInput: StartClassInput) {\n                        startClass(startClassInput: $startClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { startClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IStartClassMutation>) => {\n                    const classInProgress = result.data.startClass;\n                    this.classInProgressSource.next(classInProgress);\n\n                    this.classroomRefetch();\n                    return classInProgress;\n                }),\n            );\n    }\n\n    finishClass(finishClassInput: IFinishClassInput): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IFinishClassMutation>({\n                mutation: gql`\n                    mutation FinishClassMutation($finishClassInput: FinishClassInput) {\n                        finishClass(finishClassInput: $finishClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { finishClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IFinishClassMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.finishClass;\n                }),\n            );\n    }\n\n    getGroupsQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query ClassroomQuery($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        id\n                        studyGroups {\n                            ...studyGroupSummary\n                        }\n                    }\n                }\n                ${STUDY_GROUP_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n    }\n\n    getGroupById(id: string): Observable<StudyGroup> {\n        this.getGroupByIdQuery$ = this.apollo.watchQuery<any>({\n            query: gql`\n                query findGroupById($id: String) {\n                    findGroupById(id: $id) {\n                        ...studyGroupDetails\n                    }\n                }\n                ${STUDY_GROUP_DETAILS}\n            `,\n            variables: {\n                id,\n            },\n        });\n\n        return this.getGroupByIdQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IFindGroupById>) => result.data.findGroupById),\n        );\n    }\n\n    refetchCurrentGroupById(groupId?: string): void {\n        if (groupId) {\n            this.getGroupById(groupId);\n        }\n\n        if (this.getGroupByIdQuery$) {\n            this.getGroupByIdQuery$.refetch();\n        }\n    }\n\n    createStudyGroup(createGroupInput: CreateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<ICreateStudyGroupMutation>({\n                mutation: gql`\n                    mutation CreateGroupMutation($createGroupInput: CreateStudyGroupInput) {\n                        createStudyGroup(createGroupInput: $createGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    createGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.createStudyGroup;\n                }),\n            );\n    }\n\n    updateStudyGroup(studyGroupInput: IUpdateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IUpdateStudyGroupMutation>({\n                mutation: gql`\n                    mutation UpdateStudyGroupMutation($studyGroupInput: UpdateStudyGroupInput) {\n                        updateStudyGroup(studyGroupInput: $studyGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    studyGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.studyGroup;\n                }),\n            );\n    }\n\n    removeStudyGroup(removeGroupInput: IRemoveGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IRemoveGroupMutation>({\n                mutation: gql`\n                    mutation RemoveStudyGroupMutation($removeGroupInput: RemoveStudyGroupInput) {\n                        removeStudyGroup(removeGroupInput: $removeGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    removeGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRemoveGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.group;\n                }),\n            );\n    }\n\n    addStudentToGroup(enrollmentInput: IAddStudentToGroupInput) {\n        return this.apollo\n            .mutate<IAddStudentToGroupMutation>({\n                mutation: gql`\n                    mutation AddStudentToGroupMutation($enrollmentInput: AddStudentToGroupInput) {\n                        addStudentToGroup(enrollmentInput: $enrollmentInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    enrollmentInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IAddStudentToGroupMutation>) => {\n                    this.classroomRefetch();\n                    this.refetchCurrentGroupById();\n                    return result.data.addStudentToGroup;\n                }),\n            );\n    }\n\n    revertFinishedClassStatus(\n        revertFinishedClassStatusInput: IRevertFinishedClassStatusInput,\n    ): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IRevertFinishedClassStatusMutation>({\n                mutation: gql`\n                    mutation revertFinishedClassStatusMutation(\n                        $revertFinishedClassStatusInput: RevertFinishedClassStatusInput\n                    ) {\n                        revertFinishedClassStatus(revertFinishedClassStatusInput: $revertFinishedClassStatusInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { revertFinishedClassStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertFinishedClassStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertFinishedClassStatus;\n                }),\n            );\n    }\n\n    revertLessonStatus(revertLessonStatusInput: IRevertLessonStatusInput): Observable<Lesson> {\n        return this.apollo\n            .mutate<IRevertLessonStatusMutation>({\n                mutation: gql`\n                    mutation revertLessonStatusMutation($revertLessonStatusInput: RevertLessonStatusInput) {\n                        revertLessonStatus(revertLessonStatusInput: $revertLessonStatusInput) {\n                            ...lessonSummary\n                        }\n                    }\n                    ${LESSON_SUMMARY}\n                `,\n                variables: { revertLessonStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertLessonStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertLessonStatus;\n                }),\n            );\n    }\n\n    activateEnrollment(enrollmentId: string): Observable<any> {\n        return this.apollo\n            .mutate<IActivateEnrollmentMutation>({\n                mutation: gql`\n                    mutation ActivateEnrollmentMutation($enrollmentId: ID) {\n                        activateEnrollment(enrollmentId: $enrollmentId) {\n                            id\n                        }\n                    }\n                `,\n                variables: { enrollmentId },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IActivateEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.updatedEnrollment;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "finishClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClassRecordType",
                    "optional": false,
                    "description": "",
                    "line": 109
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IGetEnrollments",
            "id": "interface-IGetEnrollments-393bbeee17eb6281c8a64cc8ff3beb12",
            "file": "src/app/@core/services/classroom.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\nimport {\n    ClassRecord,\n    ClassRecordType,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from '../models/class-record.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, SourceType, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\n\nimport { CreateStudyGroupInput } from 'app/classroom/pages/groups-page/groups-page.component';\nimport { ENROLLMENT_DETAIL } from 'app/@core/graphql/enrollment.graphql';\nimport { CLASSROOM_SUMMARY } from '../graphql/classroom.graphql';\nimport { CLASS_RECORD_SUMMARY } from '../graphql/class-record.graphql';\nimport { STUDY_GROUP_DETAILS, STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { LESSON_SUMMARY } from '../graphql/lesson.graphql';\nimport { Lesson } from '../models/lesson.model';\n\ninterface IStartClassMutation {\n    startClass: ClassRecord;\n}\n\nexport interface IStartClassInput {\n    lessonId: string;\n    levelId: string;\n    sourceId: string;\n    sourceType: SourceType;\n    teacherNotes?: string;\n}\n\ninterface ICreateEnrollmentMutation {\n    createEnrollment: Enrollment;\n}\n\ninterface IEnrollment {\n    enrollment: Enrollment;\n}\n\ninterface IGetEnrollments {\n    enrollments: Enrollment[];\n}\n\ninterface IFindGroupById {\n    findGroupById: StudyGroup;\n}\n\ninterface ICancelEnrollmentMutation {\n    cancelEnrollment: Enrollment;\n}\n\ninterface IChangeScheduleInput {\n    enrollmentId: string;\n    events: Event[];\n}\n\ninterface IChangeEnrollmentScheduleMutation {\n    changeEnrollmentSchedule: Enrollment;\n}\n\ninterface ICreateStudyGroupMutation {\n    createStudyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupMutation {\n    studyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupInput {\n    studyGroupId: string;\n    name: string;\n    events?: Event[];\n}\n\ninterface IRemoveGroupInput {\n    studyGroupId: string;\n}\n\ninterface IRemoveGroupMutation {\n    group: StudyGroup;\n}\n\ninterface StudyGroupAttendeInput {\n    studentId: string;\n    attended: boolean;\n}\ninterface IActivateEnrollmentMutation {\n    updatedEnrollment: Enrollment;\n}\n\nexport interface IFinishClassInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n    teacherNotes?: string;\n    status: string;\n    lessonStartedAt: string;\n    lessonEndedAt: string;\n    attendees?: StudyGroupAttendeInput[];\n}\n\ninterface IFinishClassMutation {\n    finishClass: ClassRecordType;\n}\n\ninterface ITransferEnrollmentMutation {\n    removeStudentFromGroup: Enrollment;\n}\nexport interface IRevertFinishedClassStatusInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n}\n\ninterface IRevertFinishedClassStatusMutation {\n    revertFinishedClassStatus: ClassRecordType;\n}\nexport interface IRevertLessonStatusInput {\n    sourceId: string;\n    sourceType: SourceType;\n    lessonId: string;\n}\n\ninterface IRevertLessonStatusMutation {\n    revertLessonStatus: Lesson;\n}\n\nexport interface Student {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    opened?: boolean; // front-end only field\n}\n\ninterface IClassroomQuery {\n    classroom: IClassroom;\n}\n\nexport interface IClassroom {\n    id?: string;\n    classInProgress?: ClassRecordType;\n    enrollments?: Enrollment[];\n    studyGroups?: StudyGroup[];\n    students?: Student[];\n    studentEnrollments?: Enrollment[];\n}\n\nexport interface IClassroomFiltersInput {\n    enrollmentStatus?: string;\n    studyGroupStatus?: string;\n}\n\ninterface IAddStudentToGroupMutation {\n    addStudentToGroup: Enrollment;\n}\ninterface IAddStudentToGroupInput {\n    id: string;\n    studyGroupId: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClassroomService {\n    private classInProgressSource = new BehaviorSubject<ClassRecord>(undefined);\n\n    public classInProgress$ = this.classInProgressSource.asObservable();\n\n    getGroupByIdQuery$: QueryRef<IFindGroupById>;\n    getEnrollmentQuery$: QueryRef<IEnrollment>;\n    classroomQuery$: QueryRef<IClassroomQuery>;\n\n    classroomFiltersInput: IClassroomFiltersInput = {\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    };\n\n    constructor(private apollo: Apollo) {}\n\n    getClassroom$(): Observable<IClassroom> {\n        this.classroomQuery$ = this.apollo.watchQuery({\n            query: gql`\n                query Classroom($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        ...classroomSummary\n                    }\n                }\n                ${CLASSROOM_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n\n        return this.classroomQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IClassroomQuery>) => {\n                const classInProgress = result.data.classroom.classInProgress;\n                if (!classInProgress) {\n                    this.classInProgressSource.next(null);\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        this.classInProgressSource.next({\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        });\n                    } else {\n                        this.classInProgressSource.next({\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        });\n                    }\n                }\n\n                return result.data.classroom;\n            }),\n            share(),\n        );\n    }\n\n    classroomRefetch(): void {\n        this.getClassroom$();\n        this.classroomQuery$.refetch();\n    }\n\n    setClassroomFiltersInput(filters: IClassroomFiltersInput = {}) {\n        this.classroomFiltersInput = { ...this.classroomFiltersInput, ...filters };\n    }\n\n    createEnrollmentInvitation(createEnrollmentInput: CreateEnrollmentInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICreateEnrollmentMutation>({\n                mutation: gql`\n                    mutation CreateEnrollment($enrollmentInput: EnrollmentInput, $invitedStudent: StudentInput) {\n                        createEnrollment(enrollmentInput: $enrollmentInput, invitedStudent: $invitedStudent) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    enrollmentInput: createEnrollmentInput.enrollmentInput,\n                    invitedStudent: createEnrollmentInput.invitedStudent,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateEnrollmentMutation>) => {\n                    return result.data.createEnrollment;\n                }),\n            );\n    }\n\n    getEnrollment(enrollmentId: string): Observable<Enrollment> {\n        this.getEnrollmentQuery$ = this.apollo.watchQuery({\n            query: gql`\n            {\n                enrollment(id: \"${enrollmentId}\") {\n                    ...enrollmentDetail\n                }\n            }\n            ${ENROLLMENT_DETAIL}\n            `,\n        });\n\n        return this.getEnrollmentQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IEnrollment>) => result.data.enrollment),\n        );\n    }\n\n    refetchEnrollment(): void {\n        if (this.getEnrollmentQuery$) {\n            this.getEnrollmentQuery$.refetch();\n        }\n    }\n\n    cancelEnrollment(id: string): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICancelEnrollmentMutation>({\n                mutation: gql`\n                    mutation CancelEnrollmentMutation {\n                        cancelEnrollment(id: \"${id}\") {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICancelEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.cancelEnrollment;\n                }),\n            );\n    }\n\n    changeEnrollmentSchedule(changeScheduleInput: IChangeScheduleInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<IChangeEnrollmentScheduleMutation>({\n                mutation: gql`\n                    mutation ChangeEnrollmentScheduleMutation($changeScheduleInput: ChangeScheduleInput) {\n                        changeEnrollmentSchedule(changeScheduleInput: $changeScheduleInput) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    changeScheduleInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeEnrollmentScheduleMutation>) => {\n                    return result.data.changeEnrollmentSchedule;\n                }),\n            );\n    }\n\n    transferEnrollment(id: string, events: Event[]) {\n        return this.apollo\n            .mutate<ITransferEnrollmentMutation>({\n                mutation: gql`\n                    mutation removeStudentFromGroup($id: id, $events: EventsInput) {\n                        removeStudentFromGroup(id: $id, events: $events) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    id,\n                    events,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ITransferEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.removeStudentFromGroup;\n                }),\n            );\n    }\n\n    startClass(startClassInput: IStartClassInput): Observable<ClassRecord> {\n        return this.apollo\n            .mutate<IStartClassMutation>({\n                mutation: gql`\n                    mutation StartClassMutation($startClassInput: StartClassInput) {\n                        startClass(startClassInput: $startClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { startClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IStartClassMutation>) => {\n                    const classInProgress = result.data.startClass;\n                    this.classInProgressSource.next(classInProgress);\n\n                    this.classroomRefetch();\n                    return classInProgress;\n                }),\n            );\n    }\n\n    finishClass(finishClassInput: IFinishClassInput): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IFinishClassMutation>({\n                mutation: gql`\n                    mutation FinishClassMutation($finishClassInput: FinishClassInput) {\n                        finishClass(finishClassInput: $finishClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { finishClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IFinishClassMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.finishClass;\n                }),\n            );\n    }\n\n    getGroupsQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query ClassroomQuery($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        id\n                        studyGroups {\n                            ...studyGroupSummary\n                        }\n                    }\n                }\n                ${STUDY_GROUP_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n    }\n\n    getGroupById(id: string): Observable<StudyGroup> {\n        this.getGroupByIdQuery$ = this.apollo.watchQuery<any>({\n            query: gql`\n                query findGroupById($id: String) {\n                    findGroupById(id: $id) {\n                        ...studyGroupDetails\n                    }\n                }\n                ${STUDY_GROUP_DETAILS}\n            `,\n            variables: {\n                id,\n            },\n        });\n\n        return this.getGroupByIdQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IFindGroupById>) => result.data.findGroupById),\n        );\n    }\n\n    refetchCurrentGroupById(groupId?: string): void {\n        if (groupId) {\n            this.getGroupById(groupId);\n        }\n\n        if (this.getGroupByIdQuery$) {\n            this.getGroupByIdQuery$.refetch();\n        }\n    }\n\n    createStudyGroup(createGroupInput: CreateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<ICreateStudyGroupMutation>({\n                mutation: gql`\n                    mutation CreateGroupMutation($createGroupInput: CreateStudyGroupInput) {\n                        createStudyGroup(createGroupInput: $createGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    createGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.createStudyGroup;\n                }),\n            );\n    }\n\n    updateStudyGroup(studyGroupInput: IUpdateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IUpdateStudyGroupMutation>({\n                mutation: gql`\n                    mutation UpdateStudyGroupMutation($studyGroupInput: UpdateStudyGroupInput) {\n                        updateStudyGroup(studyGroupInput: $studyGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    studyGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.studyGroup;\n                }),\n            );\n    }\n\n    removeStudyGroup(removeGroupInput: IRemoveGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IRemoveGroupMutation>({\n                mutation: gql`\n                    mutation RemoveStudyGroupMutation($removeGroupInput: RemoveStudyGroupInput) {\n                        removeStudyGroup(removeGroupInput: $removeGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    removeGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRemoveGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.group;\n                }),\n            );\n    }\n\n    addStudentToGroup(enrollmentInput: IAddStudentToGroupInput) {\n        return this.apollo\n            .mutate<IAddStudentToGroupMutation>({\n                mutation: gql`\n                    mutation AddStudentToGroupMutation($enrollmentInput: AddStudentToGroupInput) {\n                        addStudentToGroup(enrollmentInput: $enrollmentInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    enrollmentInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IAddStudentToGroupMutation>) => {\n                    this.classroomRefetch();\n                    this.refetchCurrentGroupById();\n                    return result.data.addStudentToGroup;\n                }),\n            );\n    }\n\n    revertFinishedClassStatus(\n        revertFinishedClassStatusInput: IRevertFinishedClassStatusInput,\n    ): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IRevertFinishedClassStatusMutation>({\n                mutation: gql`\n                    mutation revertFinishedClassStatusMutation(\n                        $revertFinishedClassStatusInput: RevertFinishedClassStatusInput\n                    ) {\n                        revertFinishedClassStatus(revertFinishedClassStatusInput: $revertFinishedClassStatusInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { revertFinishedClassStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertFinishedClassStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertFinishedClassStatus;\n                }),\n            );\n    }\n\n    revertLessonStatus(revertLessonStatusInput: IRevertLessonStatusInput): Observable<Lesson> {\n        return this.apollo\n            .mutate<IRevertLessonStatusMutation>({\n                mutation: gql`\n                    mutation revertLessonStatusMutation($revertLessonStatusInput: RevertLessonStatusInput) {\n                        revertLessonStatus(revertLessonStatusInput: $revertLessonStatusInput) {\n                            ...lessonSummary\n                        }\n                    }\n                    ${LESSON_SUMMARY}\n                `,\n                variables: { revertLessonStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertLessonStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertLessonStatus;\n                }),\n            );\n    }\n\n    activateEnrollment(enrollmentId: string): Observable<any> {\n        return this.apollo\n            .mutate<IActivateEnrollmentMutation>({\n                mutation: gql`\n                    mutation ActivateEnrollmentMutation($enrollmentId: ID) {\n                        activateEnrollment(enrollmentId: $enrollmentId) {\n                            id\n                        }\n                    }\n                `,\n                variables: { enrollmentId },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IActivateEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.updatedEnrollment;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "enrollments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Enrollment[]",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IGetInvoicePreview",
            "id": "interface-IGetInvoicePreview-e3f0e9e20e141f8709c0cbc8138630c1",
            "file": "src/app/@core/services/subscription.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql } from 'apollo-angular';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Invoice } from '../models/invoice.model';\nimport { Product, IProductFilters } from '../models/product.model';\nimport { PRODUCT_DETAILS } from '../graphql/product.graphql';\nimport { SUBSCRIPTION_SUMMARY } from '../graphql/subscription.graphql';\nimport { INVOICE_DETAILS } from '../graphql/invoice.graphql';\nimport { Subscription } from '../models/subscription.model';\n\ninterface IGetInvoicePreview {\n    invoicePreview: Invoice | null;\n}\n\ninterface IGetProducts {\n    products: Product[];\n}\n\ninterface ICreateSubscriptionCheckoutMutation {\n    createSubscriptionCheckout: Subscription;\n}\n\ninterface ICheckoutItem {\n    priceId: string;\n    quantity: number;\n}\n\nexport interface ICreateSubscriptionCheckoutInput {\n    checkoutItems: ICheckoutItem[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SubscriptionService {\n    constructor(private apollo: Apollo) {}\n\n    getInvoicePreview(): Observable<Invoice | null> {\n        return this.apollo\n            .query<IGetInvoicePreview>({\n                query: gql`\n                    {\n                        invoicePreview {\n                            ...invoiceDetails\n                        }\n                    }\n                    ${INVOICE_DETAILS}\n                `,\n            })\n            .pipe(map((result: ApolloQueryResult<IGetInvoicePreview>) => result.data.invoicePreview));\n    }\n\n    getProducts(productFilters?: IProductFilters) {\n        return this.apollo\n            .query<IGetProducts>({\n                query: gql`\n                    query ProductsQuery($productFilters: ProductFilters) {\n                        products(productFilters: $productFilters) {\n                            ...productDetails\n                        }\n                    }\n                    ${PRODUCT_DETAILS}\n                `,\n                variables: {\n                    productFilters,\n                },\n            })\n            .pipe(map((result: ApolloQueryResult<IGetProducts>) => result.data.products));\n    }\n\n    createSubscriptionCheckout(subscriptionCheckoutInput: ICreateSubscriptionCheckoutInput) {\n        return this.apollo\n            .mutate<ICreateSubscriptionCheckoutMutation>({\n                mutation: gql`\n                    mutation createSubscriptionCheckoutMutation(\n                        $subscriptionCheckoutInput: CreateSubscriptionCheckoutInput\n                    ) {\n                        createSubscriptionCheckout(subscriptionCheckoutInput: $subscriptionCheckoutInput) {\n                            ...subscriptionSummary\n                        }\n                    }\n                    ${SUBSCRIPTION_SUMMARY}\n                `,\n                variables: {\n                    subscriptionCheckoutInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateSubscriptionCheckoutMutation>) => {\n                    return result.data.createSubscriptionCheckout;\n                }),\n            );\n    }\n\n    getSubscriptionById(id: string) {\n        return this.apollo.watchQuery<any>({\n            query: gql`\n                query SubscriptionQuery($id: ID) {\n                    subscription(id: $id) {\n                        ...subscriptionSummary\n                    }\n                }\n                ${SUBSCRIPTION_SUMMARY}\n            `,\n            pollInterval: 5000,\n            variables: {\n                id,\n            },\n        });\n    }\n\n    getSubscriptionByCheckoutId(checkoutId: string) {\n        return this.apollo.watchQuery<any>({\n            query: gql`\n                query SubscriptionQueryByStripeCheckoutId($checkoutId: ID) {\n                    subscriptionByStripeCheckoutId(checkoutId: $checkoutId) {\n                        ...subscriptionSummary\n                    }\n                }\n                ${SUBSCRIPTION_SUMMARY}\n            `,\n            pollInterval: 5000,\n            variables: {\n                checkoutId,\n            },\n        });\n    }\n}\n",
            "properties": [
                {
                    "name": "invoicePreview",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Invoice | null",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IGetProducts",
            "id": "interface-IGetProducts-e3f0e9e20e141f8709c0cbc8138630c1",
            "file": "src/app/@core/services/subscription.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql } from 'apollo-angular';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Invoice } from '../models/invoice.model';\nimport { Product, IProductFilters } from '../models/product.model';\nimport { PRODUCT_DETAILS } from '../graphql/product.graphql';\nimport { SUBSCRIPTION_SUMMARY } from '../graphql/subscription.graphql';\nimport { INVOICE_DETAILS } from '../graphql/invoice.graphql';\nimport { Subscription } from '../models/subscription.model';\n\ninterface IGetInvoicePreview {\n    invoicePreview: Invoice | null;\n}\n\ninterface IGetProducts {\n    products: Product[];\n}\n\ninterface ICreateSubscriptionCheckoutMutation {\n    createSubscriptionCheckout: Subscription;\n}\n\ninterface ICheckoutItem {\n    priceId: string;\n    quantity: number;\n}\n\nexport interface ICreateSubscriptionCheckoutInput {\n    checkoutItems: ICheckoutItem[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SubscriptionService {\n    constructor(private apollo: Apollo) {}\n\n    getInvoicePreview(): Observable<Invoice | null> {\n        return this.apollo\n            .query<IGetInvoicePreview>({\n                query: gql`\n                    {\n                        invoicePreview {\n                            ...invoiceDetails\n                        }\n                    }\n                    ${INVOICE_DETAILS}\n                `,\n            })\n            .pipe(map((result: ApolloQueryResult<IGetInvoicePreview>) => result.data.invoicePreview));\n    }\n\n    getProducts(productFilters?: IProductFilters) {\n        return this.apollo\n            .query<IGetProducts>({\n                query: gql`\n                    query ProductsQuery($productFilters: ProductFilters) {\n                        products(productFilters: $productFilters) {\n                            ...productDetails\n                        }\n                    }\n                    ${PRODUCT_DETAILS}\n                `,\n                variables: {\n                    productFilters,\n                },\n            })\n            .pipe(map((result: ApolloQueryResult<IGetProducts>) => result.data.products));\n    }\n\n    createSubscriptionCheckout(subscriptionCheckoutInput: ICreateSubscriptionCheckoutInput) {\n        return this.apollo\n            .mutate<ICreateSubscriptionCheckoutMutation>({\n                mutation: gql`\n                    mutation createSubscriptionCheckoutMutation(\n                        $subscriptionCheckoutInput: CreateSubscriptionCheckoutInput\n                    ) {\n                        createSubscriptionCheckout(subscriptionCheckoutInput: $subscriptionCheckoutInput) {\n                            ...subscriptionSummary\n                        }\n                    }\n                    ${SUBSCRIPTION_SUMMARY}\n                `,\n                variables: {\n                    subscriptionCheckoutInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateSubscriptionCheckoutMutation>) => {\n                    return result.data.createSubscriptionCheckout;\n                }),\n            );\n    }\n\n    getSubscriptionById(id: string) {\n        return this.apollo.watchQuery<any>({\n            query: gql`\n                query SubscriptionQuery($id: ID) {\n                    subscription(id: $id) {\n                        ...subscriptionSummary\n                    }\n                }\n                ${SUBSCRIPTION_SUMMARY}\n            `,\n            pollInterval: 5000,\n            variables: {\n                id,\n            },\n        });\n    }\n\n    getSubscriptionByCheckoutId(checkoutId: string) {\n        return this.apollo.watchQuery<any>({\n            query: gql`\n                query SubscriptionQueryByStripeCheckoutId($checkoutId: ID) {\n                    subscriptionByStripeCheckoutId(checkoutId: $checkoutId) {\n                        ...subscriptionSummary\n                    }\n                }\n                ${SUBSCRIPTION_SUMMARY}\n            `,\n            pollInterval: 5000,\n            variables: {\n                checkoutId,\n            },\n        });\n    }\n}\n",
            "properties": [
                {
                    "name": "products",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Product[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ILessonResult",
            "id": "interface-ILessonResult-dc32ff151dd7201599a396387ce838a7",
            "file": "src/app/@core/services/lms.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Apollo, gql } from 'apollo-angular';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Program } from 'app/@core/models/program.model';\nimport { Lesson } from 'app/@core/models/lesson.model';\nimport { PROGRAM_DETAILS, PROGRAM_SUMMARY } from '../graphql/program.graphql';\nimport { LESSON_DETAILS } from '../graphql/lesson.graphql';\n\ninterface IProgramResult {\n    program: Program;\n}\n\ninterface IProgramsResult {\n    programs: Program[];\n}\ninterface ILessonResult {\n    lesson: Lesson;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class LMSService {\n    constructor(private apollo: Apollo) {}\n\n    getPrograms(): Observable<Program[]> {\n        return this.apollo\n            .query({\n                query: gql`\n                    {\n                        programs {\n                            ...programSummary\n                        }\n                    }\n                    ${PROGRAM_SUMMARY}\n                `,\n            })\n            .pipe(map((result: ApolloQueryResult<IProgramsResult>) => result.data.programs));\n    }\n\n    getProgram(programId: string): Observable<Program> {\n        return this.apollo\n            .query({\n                query: gql`\n      {\n        program(id: \"${programId}\") {\n            ...programDetails\n        }\n      }\n      ${PROGRAM_DETAILS}`,\n            })\n            .pipe(map((result: ApolloQueryResult<IProgramResult>) => result.data.program));\n    }\n\n    getLesson(lessonId: string): Observable<Lesson> {\n        return this.apollo\n            .query({\n                query: gql`\n      {\n        lesson(id: \"${lessonId}\") {\n            ...lessonDetails\n        }\n      }\n      ${LESSON_DETAILS}`,\n            })\n            .pipe(map((result: ApolloQueryResult<ILessonResult>) => result.data.lesson));\n    }\n}\n",
            "properties": [
                {
                    "name": "lesson",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Lesson",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ILiveChatTokenResult",
            "id": "interface-ILiveChatTokenResult-f0a6401a62c0e075340935fed6b3a1ab",
            "file": "src/app/@core/services/live-chat.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\n\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql } from 'apollo-angular';\n\ninterface ILiveChatTokenResult {\n    liveChatToken: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class LiveChatService {\n    private zE: any;\n    private currentRoute: string;\n    private liveChatToken: string;\n\n    /**\n     * Live Chat Settings\n     *  - only chat and contact form enabled\n     *  - set authentication based on live chat token (from server)\n     *  - offset live chat icon (very important om mobile)\n     */\n    private zESettings = {\n        webWidget: {\n            chat: { supress: false },\n            contactForm: { suppress: false },\n            helpCenter: { supress: true },\n            talk: { supress: true },\n            authenticate: {\n                chat: {\n                    jwtFn: (callback: Function) => {\n                        if (this.liveChatToken) {\n                            callback(this.liveChatToken);\n                        }\n                    },\n                },\n            },\n            offset: {\n                horizontal: '20px',\n                vertical: '20px',\n                mobile: {\n                    horizontal: '0px',\n                    vertical: '60px', // TODO: @Rodrigo check if we can calculate offset\n                },\n            },\n        },\n    };\n\n    constructor(private router: Router, private apollo: Apollo) {\n        this.zE = window['zE'];\n        this.watchRoute();\n    }\n\n    private enableChat(): boolean {\n        return (\n            this.zE !== undefined && this.currentRoute !== undefined && ['/dashboard', '/'].includes(this.currentRoute)\n        );\n    }\n\n    /**\n     * Watch route and toggle live chat depending on route\n     */\n    private watchRoute(): void {\n        this.router.events.subscribe({\n            next: (event) => {\n                if (event instanceof NavigationEnd) {\n                    const { url } = event as NavigationEnd;\n\n                    if (this.currentRoute !== url) {\n                        this.currentRoute = url;\n                        if (this.currentRoute) {\n                            this.updateSettings();\n                        }\n                    }\n                }\n            },\n        });\n    }\n\n    /**\n     * This function is executed from user service when jwt is set (user logged in)\n     */\n    getLiveChatToken(): void {\n        this.apollo\n            .query({\n                query: gql`\n                    {\n                        liveChatToken\n                    }\n                `,\n            })\n            .subscribe((result: ApolloQueryResult<ILiveChatTokenResult>) => {\n                this.liveChatToken = result.data.liveChatToken;\n                this.updateSettings();\n            });\n    }\n\n    /**\n     * update Live Chat settings (check zESettings)\n     * TODO: error when hard reloading page after toggling chat. Steps to reproduce:\n     *  - login and stay on dashboard; hit refresh. No error occurrs.\n     *  - Hard reset the page. Error occurs.\n     */\n    private updateSettings(): void {\n        this.zE = window['zE'];\n        this.zE('webWidget', 'updateSettings', this.zESettings);\n\n        if (typeof this.zE.show !== 'function') {\n            return;\n        }\n\n        if (this.enableChat()) {\n            this.zE.show();\n        } else if (this.currentRoute) {\n            this.zE.hide();\n        }\n    }\n}\n",
            "properties": [
                {
                    "name": "liveChatToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ILoginResult",
            "id": "interface-ILoginResult-56d579829aba74f364a721cb116cbe5e",
            "file": "src/app/@core/services/user.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Apollo, gql } from 'apollo-angular';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { environment } from 'environments/environment';\nimport { UserAuthDetails, UserProfile } from 'app/@core/models/user-profile.model';\nimport { UserSessionService } from 'app/@core/services/user-session.service';\nimport { USER_PROFILE } from '../graphql/user-profile.graphql';\nimport { CreatePasswordStudentInfo } from '../models/invitation.model';\nimport { LiveChatService } from './live-chat.service';\n\ninterface ILoginResult {\n    token: string;\n}\n\ninterface IUserResult {\n    myProfile: UserProfile;\n}\n\ninterface IUpdateMyProfileResult {\n    updateMyProfile: UserProfile;\n}\n\ninterface IChangePassword {\n    user: UserProfile;\n}\n\ninterface INewUser {\n    email: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n    cpf: string;\n    postalCode: string;\n    street: string;\n    streetNumber: string;\n    streetComplement: string;\n    district: string;\n    city: string;\n    state: string;\n    addressType?: string;\n    countryISO?: string;\n    category?: string;\n    earlyAccessCode?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n    private loggedUserSubject: BehaviorSubject<UserAuthDetails>;\n    public loggedUser: Observable<UserAuthDetails>;\n\n    private studentInfoSubject = new BehaviorSubject<CreatePasswordStudentInfo | null>(null);\n    studentInfo$ = this.studentInfoSubject.asObservable();\n\n    constructor(\n        private http: HttpClient,\n        private apollo: Apollo,\n        private _userSessionService: UserSessionService,\n        private liveChatService: LiveChatService,\n    ) {\n        this.loggedUserSubject = new BehaviorSubject<UserAuthDetails>(null);\n        this.loggedUser = this.loggedUserSubject.asObservable();\n\n        this.setUserFromAuthToken().subscribe();\n    }\n\n    setUserFromAuthToken(): Observable<UserAuthDetails> {\n        const jwt = this._userSessionService.getAuthToken();\n        if (!jwt) {\n            return of(undefined);\n        }\n\n        this.liveChatService.getLiveChatToken();\n        const jwtPayload = JSON.parse(atob(jwt.split('.')[1])) as UserAuthDetails;\n        if (!jwtPayload.roles) {\n            jwtPayload.roles = [];\n        }\n\n        this.loggedUserSubject.next(jwtPayload);\n\n        return of(jwtPayload);\n    }\n\n    getUserProfile(): Observable<UserProfile> {\n        if (!this._userSessionService.getAuthToken()) {\n            return;\n        }\n\n        return this.apollo\n            .query({\n                query: gql`\n                    {\n                        myProfile {\n                            ...userProfile\n                        }\n                    }\n                    ${USER_PROFILE}\n                `,\n            })\n            .pipe(map((result: ApolloQueryResult<IUserResult>) => result.data.myProfile));\n    }\n\n    updateMyProfile(userProfile: UserProfile): Observable<UserProfile> {\n        return this.apollo\n            .mutate<IUpdateMyProfileResult>({\n                variables: {\n                    userProfile,\n                },\n                mutation: gql`\n                    mutation updateMyProfile($userProfile: UserInput) {\n                        updateMyProfile(userProfile: $userProfile) {\n                            ...userProfile\n                        }\n                    }\n                    ${USER_PROFILE}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateMyProfileResult>) => {\n                    const updatedUser = result.data.updateMyProfile;\n                    return updatedUser;\n                }),\n            );\n    }\n\n    changePassword(changePasswordInput: {\n        userEmail: string;\n        oldPassword: string;\n        newPassword: string;\n    }): Observable<any> {\n        return this.apollo\n            .mutate<IChangePassword>({\n                variables: {\n                    changePasswordInput,\n                },\n                mutation: gql`\n                    mutation changeMyPassword($changePasswordInput: ChangePasswordInput) {\n                        changeMyPassword(changePasswordInput: $changePasswordInput) {\n                            id\n                        }\n                    }\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangePassword>) => {\n                    const updatedUser = result.data.user;\n                    return updatedUser;\n                }),\n            );\n    }\n\n    register(newUser: INewUser): Observable<{ token: string }> {\n        return this.http.post<{ token: string }>(`${environment.apiUrl}/auth/register`, newUser);\n    }\n\n    login(email: string, password: string): Observable<{ token: string }> {\n        return this.http.post<any>(\n            `${environment.apiUrl}/auth/login`,\n            { email, password },\n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                responseType: 'json',\n            },\n        );\n    }\n\n    login2(email: string, password: string): Observable<UserProfile> {\n        return this.http.post<any>(`${environment.apiUrl}/auth/login`, { email, password });\n    }\n\n    loginSuccess(result: ILoginResult) {\n        this._userSessionService.setAuthToken(result.token);\n        return this.setUserFromAuthToken();\n    }\n\n    logout(): void {\n        this.loggedUserSubject.next(null);\n        this._userSessionService.removeAuthToken();\n    }\n\n    forgotPassword(email: string): Observable<any> {\n        return this.http.post<any>(\n            `${environment.apiUrl}/auth/forgot-password`,\n            { email },\n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                responseType: 'json',\n            },\n        );\n    }\n\n    resetPassword(resetPasswordToken: string, newPassword: string): Observable<any> {\n        return this.http.post<any>(\n            `${environment.apiUrl}/auth/reset-password`,\n            { resetPasswordToken, newPassword },\n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                responseType: 'json',\n            },\n        );\n    }\n\n    validateEmail(email: string): Observable<any> {\n        return this.http.post<any>(\n            `${environment.apiUrl}/auth/email-validation`,\n            { primaryEmail: email },\n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                responseType: 'json',\n            },\n        );\n    }\n\n    setStudentInfoForCreatePassword(studentInfo: CreatePasswordStudentInfo) {\n        this.studentInfoSubject.next(studentInfo);\n    }\n\n    getStudentInfo() {\n        return this.studentInfoSubject.getValue();\n    }\n\n    hasRole(role: string) {\n        const { roles } = this.loggedUserSubject.getValue();\n        return roles.includes(role);\n    }\n}\n",
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IMyCalendar",
            "id": "interface-IMyCalendar-e7e5de89093583f20e2396ea110e10b5",
            "file": "src/app/@core/services/calendar.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Apollo, gql } from 'apollo-angular';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Event } from 'app/@core/models/event.model';\nimport { EventOccurrence, IEventOccurrenceInput } from 'app/@core/models/event-occurrence.model';\nimport { EVENT_OCCURRENCE_SUMMARY, EVENT_SUMMARY } from '../graphql/events.graphql';\n\nexport interface IMyCalendar {\n    myCalendar: EventOccurrence[];\n}\n\ninterface IMyEvents {\n    myProfile: IEventsOrganised;\n}\n\ninterface IEventsOrganised {\n    eventsOrganised: Event[];\n}\n\ninterface IChangeSpecificEventBySourceMutation {\n    changeSpecificEvent: EventOccurrence;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CalendarService {\n    getMyEventsQuery$: any;\n\n    constructor(private apollo: Apollo) {}\n\n    getMyEvents(): Observable<Event[]> {\n        this.getMyEventsQuery$ = this.apollo.watchQuery({\n            query: gql`\n                {\n                    myProfile {\n                        id\n                        eventsOrganised {\n                            ...eventSummary\n                        }\n                    }\n                }\n                ${EVENT_SUMMARY}\n            `,\n        });\n\n        return this.getMyEventsQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IMyEvents>) => result.data.myProfile.eventsOrganised),\n        );\n    }\n\n    getMyEventsRefetch() {\n        if (this.getMyEventsQuery$) {\n            this.getMyEventsQuery$.refetch();\n        }\n    }\n\n    getMyCalendar(fromDate: Date, toDate: Date) /* : Observable<EventOccurrence[]> */ {\n        return this.apollo.watchQuery({\n            query: gql`\n          {\n            myCalendar(fromDate: \"${fromDate.toISOString()}\", toDate: \"${toDate.toISOString()}\") {\n                ...eventOccurrenceSummary\n              }\n          }\n          ${EVENT_OCCURRENCE_SUMMARY}`,\n        });\n    }\n\n    changeSpecificEvent(changeSpecificEventInput: IEventOccurrenceInput) {\n        return this.apollo\n            .mutate<IChangeSpecificEventBySourceMutation>({\n                mutation: gql`\n                    mutation changeSpecificEventBySourceMutation($changeSpecificEventInput: EventOccurrenceInput) {\n                        changeSpecificEvent(changeSpecificEventInput: $changeSpecificEventInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    changeSpecificEventInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeSpecificEventBySourceMutation>) => {\n                    return result.data.changeSpecificEvent;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "myCalendar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventOccurrence[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IMyEvents",
            "id": "interface-IMyEvents-e7e5de89093583f20e2396ea110e10b5",
            "file": "src/app/@core/services/calendar.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Apollo, gql } from 'apollo-angular';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Event } from 'app/@core/models/event.model';\nimport { EventOccurrence, IEventOccurrenceInput } from 'app/@core/models/event-occurrence.model';\nimport { EVENT_OCCURRENCE_SUMMARY, EVENT_SUMMARY } from '../graphql/events.graphql';\n\nexport interface IMyCalendar {\n    myCalendar: EventOccurrence[];\n}\n\ninterface IMyEvents {\n    myProfile: IEventsOrganised;\n}\n\ninterface IEventsOrganised {\n    eventsOrganised: Event[];\n}\n\ninterface IChangeSpecificEventBySourceMutation {\n    changeSpecificEvent: EventOccurrence;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CalendarService {\n    getMyEventsQuery$: any;\n\n    constructor(private apollo: Apollo) {}\n\n    getMyEvents(): Observable<Event[]> {\n        this.getMyEventsQuery$ = this.apollo.watchQuery({\n            query: gql`\n                {\n                    myProfile {\n                        id\n                        eventsOrganised {\n                            ...eventSummary\n                        }\n                    }\n                }\n                ${EVENT_SUMMARY}\n            `,\n        });\n\n        return this.getMyEventsQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IMyEvents>) => result.data.myProfile.eventsOrganised),\n        );\n    }\n\n    getMyEventsRefetch() {\n        if (this.getMyEventsQuery$) {\n            this.getMyEventsQuery$.refetch();\n        }\n    }\n\n    getMyCalendar(fromDate: Date, toDate: Date) /* : Observable<EventOccurrence[]> */ {\n        return this.apollo.watchQuery({\n            query: gql`\n          {\n            myCalendar(fromDate: \"${fromDate.toISOString()}\", toDate: \"${toDate.toISOString()}\") {\n                ...eventOccurrenceSummary\n              }\n          }\n          ${EVENT_OCCURRENCE_SUMMARY}`,\n        });\n    }\n\n    changeSpecificEvent(changeSpecificEventInput: IEventOccurrenceInput) {\n        return this.apollo\n            .mutate<IChangeSpecificEventBySourceMutation>({\n                mutation: gql`\n                    mutation changeSpecificEventBySourceMutation($changeSpecificEventInput: EventOccurrenceInput) {\n                        changeSpecificEvent(changeSpecificEventInput: $changeSpecificEventInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    changeSpecificEventInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeSpecificEventBySourceMutation>) => {\n                    return result.data.changeSpecificEvent;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "myProfile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IEventsOrganised",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "INavigationTabsConfig",
            "id": "interface-INavigationTabsConfig-d1262211ee830438148f93ca17d1dcf1",
            "file": "src/app/@shared/components/navigation-tabs/navigation-tabs.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { MediaObserver } from '@angular/flex-layout';\nimport { Router, NavigationEnd } from '@angular/router';\nimport { Subject } from 'rxjs';\nimport { takeUntil, filter } from 'rxjs/operators';\n\nexport interface INavigationTabsPath {\n    path: string;\n    icon?: string;\n    textIcon?: string;\n    label?: string;\n    layoutOnly?: boolean;\n    queryParams?: Record<string, string>;\n}\n\nexport interface INavigationTabsConfig {\n    links: INavigationTabsPath[];\n}\n\n@Component({\n    selector: 'app-navigation-tabs',\n    templateUrl: './navigation-tabs.component.html',\n    styleUrls: ['./navigation-tabs.component.scss'],\n})\nexport class NavigationTabsComponent implements OnInit, OnDestroy {\n    _navigationTabsConfig: INavigationTabsConfig;\n    get navigationTabsConfig() {\n        return this._navigationTabsConfig;\n    }\n\n    @Input() set navigationTabsConfig(value) {\n        this._navigationTabsConfig = value;\n\n        if (value) {\n            this.updateNavigationTabsConfig();\n        }\n    }\n\n    activePath: string;\n\n    private destroy$ = new Subject<void>();\n\n    constructor(private router: Router, private mediaObserver: MediaObserver) {}\n\n    updateNavigationTabsConfig() {\n        // check path of current route to activate the right tab\n        this.router.events\n            .pipe(\n                takeUntil(this.destroy$),\n                filter((evt) => evt instanceof NavigationEnd),\n            )\n            .subscribe({\n                next: ({ url }: NavigationEnd) => {\n                    this.checkRoute(url);\n                },\n            });\n    }\n\n    ngOnInit(): void {\n        const url = this.router.url;\n        this.checkRoute(url);\n    }\n\n    checkRoute(url: string) {\n        const currentPath = url.split('/').pop();\n        this.activePath = this.navigationTabsConfig.links.find(\n            (link) => link.path.replace(/..\\//g, '') === currentPath,\n        )?.path;\n    }\n\n    ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    get isGreaterThanMobile() {\n        return this.mediaObserver.isActive('gt-xs');\n    }\n}\n",
            "properties": [
                {
                    "name": "links",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INavigationTabsPath[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "INavigationTabsPath",
            "id": "interface-INavigationTabsPath-d1262211ee830438148f93ca17d1dcf1",
            "file": "src/app/@shared/components/navigation-tabs/navigation-tabs.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { MediaObserver } from '@angular/flex-layout';\nimport { Router, NavigationEnd } from '@angular/router';\nimport { Subject } from 'rxjs';\nimport { takeUntil, filter } from 'rxjs/operators';\n\nexport interface INavigationTabsPath {\n    path: string;\n    icon?: string;\n    textIcon?: string;\n    label?: string;\n    layoutOnly?: boolean;\n    queryParams?: Record<string, string>;\n}\n\nexport interface INavigationTabsConfig {\n    links: INavigationTabsPath[];\n}\n\n@Component({\n    selector: 'app-navigation-tabs',\n    templateUrl: './navigation-tabs.component.html',\n    styleUrls: ['./navigation-tabs.component.scss'],\n})\nexport class NavigationTabsComponent implements OnInit, OnDestroy {\n    _navigationTabsConfig: INavigationTabsConfig;\n    get navigationTabsConfig() {\n        return this._navigationTabsConfig;\n    }\n\n    @Input() set navigationTabsConfig(value) {\n        this._navigationTabsConfig = value;\n\n        if (value) {\n            this.updateNavigationTabsConfig();\n        }\n    }\n\n    activePath: string;\n\n    private destroy$ = new Subject<void>();\n\n    constructor(private router: Router, private mediaObserver: MediaObserver) {}\n\n    updateNavigationTabsConfig() {\n        // check path of current route to activate the right tab\n        this.router.events\n            .pipe(\n                takeUntil(this.destroy$),\n                filter((evt) => evt instanceof NavigationEnd),\n            )\n            .subscribe({\n                next: ({ url }: NavigationEnd) => {\n                    this.checkRoute(url);\n                },\n            });\n    }\n\n    ngOnInit(): void {\n        const url = this.router.url;\n        this.checkRoute(url);\n    }\n\n    checkRoute(url: string) {\n        const currentPath = url.split('/').pop();\n        this.activePath = this.navigationTabsConfig.links.find(\n            (link) => link.path.replace(/..\\//g, '') === currentPath,\n        )?.path;\n    }\n\n    ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    get isGreaterThanMobile() {\n        return this.mediaObserver.isActive('gt-xs');\n    }\n}\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "layoutOnly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "queryParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | string>",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "textIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "INewUser",
            "id": "interface-INewUser-56d579829aba74f364a721cb116cbe5e",
            "file": "src/app/@core/services/user.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Apollo, gql } from 'apollo-angular';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { environment } from 'environments/environment';\nimport { UserAuthDetails, UserProfile } from 'app/@core/models/user-profile.model';\nimport { UserSessionService } from 'app/@core/services/user-session.service';\nimport { USER_PROFILE } from '../graphql/user-profile.graphql';\nimport { CreatePasswordStudentInfo } from '../models/invitation.model';\nimport { LiveChatService } from './live-chat.service';\n\ninterface ILoginResult {\n    token: string;\n}\n\ninterface IUserResult {\n    myProfile: UserProfile;\n}\n\ninterface IUpdateMyProfileResult {\n    updateMyProfile: UserProfile;\n}\n\ninterface IChangePassword {\n    user: UserProfile;\n}\n\ninterface INewUser {\n    email: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n    cpf: string;\n    postalCode: string;\n    street: string;\n    streetNumber: string;\n    streetComplement: string;\n    district: string;\n    city: string;\n    state: string;\n    addressType?: string;\n    countryISO?: string;\n    category?: string;\n    earlyAccessCode?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n    private loggedUserSubject: BehaviorSubject<UserAuthDetails>;\n    public loggedUser: Observable<UserAuthDetails>;\n\n    private studentInfoSubject = new BehaviorSubject<CreatePasswordStudentInfo | null>(null);\n    studentInfo$ = this.studentInfoSubject.asObservable();\n\n    constructor(\n        private http: HttpClient,\n        private apollo: Apollo,\n        private _userSessionService: UserSessionService,\n        private liveChatService: LiveChatService,\n    ) {\n        this.loggedUserSubject = new BehaviorSubject<UserAuthDetails>(null);\n        this.loggedUser = this.loggedUserSubject.asObservable();\n\n        this.setUserFromAuthToken().subscribe();\n    }\n\n    setUserFromAuthToken(): Observable<UserAuthDetails> {\n        const jwt = this._userSessionService.getAuthToken();\n        if (!jwt) {\n            return of(undefined);\n        }\n\n        this.liveChatService.getLiveChatToken();\n        const jwtPayload = JSON.parse(atob(jwt.split('.')[1])) as UserAuthDetails;\n        if (!jwtPayload.roles) {\n            jwtPayload.roles = [];\n        }\n\n        this.loggedUserSubject.next(jwtPayload);\n\n        return of(jwtPayload);\n    }\n\n    getUserProfile(): Observable<UserProfile> {\n        if (!this._userSessionService.getAuthToken()) {\n            return;\n        }\n\n        return this.apollo\n            .query({\n                query: gql`\n                    {\n                        myProfile {\n                            ...userProfile\n                        }\n                    }\n                    ${USER_PROFILE}\n                `,\n            })\n            .pipe(map((result: ApolloQueryResult<IUserResult>) => result.data.myProfile));\n    }\n\n    updateMyProfile(userProfile: UserProfile): Observable<UserProfile> {\n        return this.apollo\n            .mutate<IUpdateMyProfileResult>({\n                variables: {\n                    userProfile,\n                },\n                mutation: gql`\n                    mutation updateMyProfile($userProfile: UserInput) {\n                        updateMyProfile(userProfile: $userProfile) {\n                            ...userProfile\n                        }\n                    }\n                    ${USER_PROFILE}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateMyProfileResult>) => {\n                    const updatedUser = result.data.updateMyProfile;\n                    return updatedUser;\n                }),\n            );\n    }\n\n    changePassword(changePasswordInput: {\n        userEmail: string;\n        oldPassword: string;\n        newPassword: string;\n    }): Observable<any> {\n        return this.apollo\n            .mutate<IChangePassword>({\n                variables: {\n                    changePasswordInput,\n                },\n                mutation: gql`\n                    mutation changeMyPassword($changePasswordInput: ChangePasswordInput) {\n                        changeMyPassword(changePasswordInput: $changePasswordInput) {\n                            id\n                        }\n                    }\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangePassword>) => {\n                    const updatedUser = result.data.user;\n                    return updatedUser;\n                }),\n            );\n    }\n\n    register(newUser: INewUser): Observable<{ token: string }> {\n        return this.http.post<{ token: string }>(`${environment.apiUrl}/auth/register`, newUser);\n    }\n\n    login(email: string, password: string): Observable<{ token: string }> {\n        return this.http.post<any>(\n            `${environment.apiUrl}/auth/login`,\n            { email, password },\n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                responseType: 'json',\n            },\n        );\n    }\n\n    login2(email: string, password: string): Observable<UserProfile> {\n        return this.http.post<any>(`${environment.apiUrl}/auth/login`, { email, password });\n    }\n\n    loginSuccess(result: ILoginResult) {\n        this._userSessionService.setAuthToken(result.token);\n        return this.setUserFromAuthToken();\n    }\n\n    logout(): void {\n        this.loggedUserSubject.next(null);\n        this._userSessionService.removeAuthToken();\n    }\n\n    forgotPassword(email: string): Observable<any> {\n        return this.http.post<any>(\n            `${environment.apiUrl}/auth/forgot-password`,\n            { email },\n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                responseType: 'json',\n            },\n        );\n    }\n\n    resetPassword(resetPasswordToken: string, newPassword: string): Observable<any> {\n        return this.http.post<any>(\n            `${environment.apiUrl}/auth/reset-password`,\n            { resetPasswordToken, newPassword },\n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                responseType: 'json',\n            },\n        );\n    }\n\n    validateEmail(email: string): Observable<any> {\n        return this.http.post<any>(\n            `${environment.apiUrl}/auth/email-validation`,\n            { primaryEmail: email },\n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                responseType: 'json',\n            },\n        );\n    }\n\n    setStudentInfoForCreatePassword(studentInfo: CreatePasswordStudentInfo) {\n        this.studentInfoSubject.next(studentInfo);\n    }\n\n    getStudentInfo() {\n        return this.studentInfoSubject.getValue();\n    }\n\n    hasRole(role: string) {\n        const { roles } = this.loggedUserSubject.getValue();\n        return roles.includes(role);\n    }\n}\n",
            "properties": [
                {
                    "name": "addressType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "countryISO",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "cpf",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "district",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "earlyAccessCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "postalCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "street",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "streetComplement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "streetNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Invitation",
            "id": "interface-Invitation-ed329306bffe333cedee10487bd56f10",
            "file": "src/app/@core/models/invitation.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { UserProfile } from './user-profile.model';\n\nexport interface Invitation {\n    id?: string;\n    sourceType?: string;\n    sourceId?: string;\n    invitationToken?: string;\n    tokenIssuedDateTime?: string; // DateTime\n    tokenActionedDateTime?: string; // DateTime\n    inviterId?: string;\n    inviteeId?: string;\n    inviteeEmail?: string;\n    inviteeFirstName?: string;\n    inviteeSurname?: string;\n    status?: string;\n    invitee?: UserProfile;\n    inviter?: UserProfile;\n}\n\nexport interface CreatePasswordStudentInfo {\n    invitationToken: string;\n    email: string;\n    firstName: string;\n    surname: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "invitationToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "invitee",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserProfile",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "inviteeEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "inviteeFirstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "inviteeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "inviteeSurname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "inviter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserProfile",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "inviterId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "sourceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "sourceType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "tokenActionedDateTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "tokenIssuedDateTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Invoice",
            "id": "interface-Invoice-0a191ea3703bc2dbe2ef2b07078f4cf1",
            "file": "src/app/@core/models/invoice.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Invoice {\n    id: string;\n    processedAt: string;\n    dueDate: string;\n    invoicePeriodFrom: string;\n    invoicePeriodTo: string;\n    companyDetails: Details;\n    customerDetails: Details;\n    balanceSummary: BalanceSummary;\n    invoiceItems: InvoiceItem[];\n}\n\nexport interface BalanceSummary {\n    taxAmount: number;\n    totalAmount: number;\n    discountAmount: number;\n}\n\nexport interface Details {\n    id: string;\n    name: string;\n    address: string;\n    phone: string;\n    email: string;\n    webSite?: string;\n}\n\nexport interface InvoiceItem {\n    id: string;\n    invoiceLineNumber: number;\n    productId: string;\n    productName: string;\n    productDescription: string;\n    balance: Balance;\n}\n\nexport interface Balance {\n    quantity: number;\n    unitPrice: number;\n    taxAmount: number;\n    totalAmount: number;\n    discountAmount: number;\n}\n",
            "properties": [
                {
                    "name": "balanceSummary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BalanceSummary",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "companyDetails",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Details",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "customerDetails",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Details",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "invoiceItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InvoiceItem[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "invoicePeriodFrom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "invoicePeriodTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "processedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "InvoiceItem",
            "id": "interface-InvoiceItem-0a191ea3703bc2dbe2ef2b07078f4cf1",
            "file": "src/app/@core/models/invoice.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Invoice {\n    id: string;\n    processedAt: string;\n    dueDate: string;\n    invoicePeriodFrom: string;\n    invoicePeriodTo: string;\n    companyDetails: Details;\n    customerDetails: Details;\n    balanceSummary: BalanceSummary;\n    invoiceItems: InvoiceItem[];\n}\n\nexport interface BalanceSummary {\n    taxAmount: number;\n    totalAmount: number;\n    discountAmount: number;\n}\n\nexport interface Details {\n    id: string;\n    name: string;\n    address: string;\n    phone: string;\n    email: string;\n    webSite?: string;\n}\n\nexport interface InvoiceItem {\n    id: string;\n    invoiceLineNumber: number;\n    productId: string;\n    productName: string;\n    productDescription: string;\n    balance: Balance;\n}\n\nexport interface Balance {\n    quantity: number;\n    unitPrice: number;\n    taxAmount: number;\n    totalAmount: number;\n    discountAmount: number;\n}\n",
            "properties": [
                {
                    "name": "balance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Balance",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "invoiceLineNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "productDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "productId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "productName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IProductFilters",
            "id": "interface-IProductFilters-d90153a495076db2e5de2c20f10e48b3",
            "file": "src/app/@core/models/product.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Product {\n    description: string;\n    id: string;\n    name: string;\n    prices: ProductPrice[];\n    slug: string;\n    subcategory: ProductSubcategory;\n    selected?: boolean; // front-end only field\n    hover?: boolean; // front-end only field\n}\n\nexport interface ProductCategory {\n    code: string;\n    description: string;\n    name: string;\n}\n\ntype IntervalType = 'day' | 'month' | 'week' | 'year';\nexport interface PricePeriod {\n    interval: IntervalType;\n    intervalCount: number;\n}\n\nexport interface ProductPrice {\n    currencyIsoCode: string;\n    description: string;\n    id: string;\n    name: string;\n    pricePeriod: PricePeriod;\n    slug: string;\n    taxAmount: number;\n    type: string;\n    unitTotalAmount: number;\n}\n\nexport interface ProductSubcategory {\n    category: ProductCategory;\n    code: string;\n    description: string;\n    name: string;\n}\n\nexport interface IProductFilters {\n    categoryCode?: 'teacher_licence' | 'student_licence';\n}\n",
            "properties": [
                {
                    "name": "categoryCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"teacher_licence\" | \"student_licence\"",
                    "optional": true,
                    "description": "",
                    "line": 44
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IProgramResult",
            "id": "interface-IProgramResult-dc32ff151dd7201599a396387ce838a7",
            "file": "src/app/@core/services/lms.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Apollo, gql } from 'apollo-angular';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Program } from 'app/@core/models/program.model';\nimport { Lesson } from 'app/@core/models/lesson.model';\nimport { PROGRAM_DETAILS, PROGRAM_SUMMARY } from '../graphql/program.graphql';\nimport { LESSON_DETAILS } from '../graphql/lesson.graphql';\n\ninterface IProgramResult {\n    program: Program;\n}\n\ninterface IProgramsResult {\n    programs: Program[];\n}\ninterface ILessonResult {\n    lesson: Lesson;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class LMSService {\n    constructor(private apollo: Apollo) {}\n\n    getPrograms(): Observable<Program[]> {\n        return this.apollo\n            .query({\n                query: gql`\n                    {\n                        programs {\n                            ...programSummary\n                        }\n                    }\n                    ${PROGRAM_SUMMARY}\n                `,\n            })\n            .pipe(map((result: ApolloQueryResult<IProgramsResult>) => result.data.programs));\n    }\n\n    getProgram(programId: string): Observable<Program> {\n        return this.apollo\n            .query({\n                query: gql`\n      {\n        program(id: \"${programId}\") {\n            ...programDetails\n        }\n      }\n      ${PROGRAM_DETAILS}`,\n            })\n            .pipe(map((result: ApolloQueryResult<IProgramResult>) => result.data.program));\n    }\n\n    getLesson(lessonId: string): Observable<Lesson> {\n        return this.apollo\n            .query({\n                query: gql`\n      {\n        lesson(id: \"${lessonId}\") {\n            ...lessonDetails\n        }\n      }\n      ${LESSON_DETAILS}`,\n            })\n            .pipe(map((result: ApolloQueryResult<ILessonResult>) => result.data.lesson));\n    }\n}\n",
            "properties": [
                {
                    "name": "program",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Program",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IProgramsResult",
            "id": "interface-IProgramsResult-dc32ff151dd7201599a396387ce838a7",
            "file": "src/app/@core/services/lms.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Apollo, gql } from 'apollo-angular';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Program } from 'app/@core/models/program.model';\nimport { Lesson } from 'app/@core/models/lesson.model';\nimport { PROGRAM_DETAILS, PROGRAM_SUMMARY } from '../graphql/program.graphql';\nimport { LESSON_DETAILS } from '../graphql/lesson.graphql';\n\ninterface IProgramResult {\n    program: Program;\n}\n\ninterface IProgramsResult {\n    programs: Program[];\n}\ninterface ILessonResult {\n    lesson: Lesson;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class LMSService {\n    constructor(private apollo: Apollo) {}\n\n    getPrograms(): Observable<Program[]> {\n        return this.apollo\n            .query({\n                query: gql`\n                    {\n                        programs {\n                            ...programSummary\n                        }\n                    }\n                    ${PROGRAM_SUMMARY}\n                `,\n            })\n            .pipe(map((result: ApolloQueryResult<IProgramsResult>) => result.data.programs));\n    }\n\n    getProgram(programId: string): Observable<Program> {\n        return this.apollo\n            .query({\n                query: gql`\n      {\n        program(id: \"${programId}\") {\n            ...programDetails\n        }\n      }\n      ${PROGRAM_DETAILS}`,\n            })\n            .pipe(map((result: ApolloQueryResult<IProgramResult>) => result.data.program));\n    }\n\n    getLesson(lessonId: string): Observable<Lesson> {\n        return this.apollo\n            .query({\n                query: gql`\n      {\n        lesson(id: \"${lessonId}\") {\n            ...lessonDetails\n        }\n      }\n      ${LESSON_DETAILS}`,\n            })\n            .pipe(map((result: ApolloQueryResult<ILessonResult>) => result.data.lesson));\n    }\n}\n",
            "properties": [
                {
                    "name": "programs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Program[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IRemoveGroupInput",
            "id": "interface-IRemoveGroupInput-393bbeee17eb6281c8a64cc8ff3beb12",
            "file": "src/app/@core/services/classroom.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\nimport {\n    ClassRecord,\n    ClassRecordType,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from '../models/class-record.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, SourceType, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\n\nimport { CreateStudyGroupInput } from 'app/classroom/pages/groups-page/groups-page.component';\nimport { ENROLLMENT_DETAIL } from 'app/@core/graphql/enrollment.graphql';\nimport { CLASSROOM_SUMMARY } from '../graphql/classroom.graphql';\nimport { CLASS_RECORD_SUMMARY } from '../graphql/class-record.graphql';\nimport { STUDY_GROUP_DETAILS, STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { LESSON_SUMMARY } from '../graphql/lesson.graphql';\nimport { Lesson } from '../models/lesson.model';\n\ninterface IStartClassMutation {\n    startClass: ClassRecord;\n}\n\nexport interface IStartClassInput {\n    lessonId: string;\n    levelId: string;\n    sourceId: string;\n    sourceType: SourceType;\n    teacherNotes?: string;\n}\n\ninterface ICreateEnrollmentMutation {\n    createEnrollment: Enrollment;\n}\n\ninterface IEnrollment {\n    enrollment: Enrollment;\n}\n\ninterface IGetEnrollments {\n    enrollments: Enrollment[];\n}\n\ninterface IFindGroupById {\n    findGroupById: StudyGroup;\n}\n\ninterface ICancelEnrollmentMutation {\n    cancelEnrollment: Enrollment;\n}\n\ninterface IChangeScheduleInput {\n    enrollmentId: string;\n    events: Event[];\n}\n\ninterface IChangeEnrollmentScheduleMutation {\n    changeEnrollmentSchedule: Enrollment;\n}\n\ninterface ICreateStudyGroupMutation {\n    createStudyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupMutation {\n    studyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupInput {\n    studyGroupId: string;\n    name: string;\n    events?: Event[];\n}\n\ninterface IRemoveGroupInput {\n    studyGroupId: string;\n}\n\ninterface IRemoveGroupMutation {\n    group: StudyGroup;\n}\n\ninterface StudyGroupAttendeInput {\n    studentId: string;\n    attended: boolean;\n}\ninterface IActivateEnrollmentMutation {\n    updatedEnrollment: Enrollment;\n}\n\nexport interface IFinishClassInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n    teacherNotes?: string;\n    status: string;\n    lessonStartedAt: string;\n    lessonEndedAt: string;\n    attendees?: StudyGroupAttendeInput[];\n}\n\ninterface IFinishClassMutation {\n    finishClass: ClassRecordType;\n}\n\ninterface ITransferEnrollmentMutation {\n    removeStudentFromGroup: Enrollment;\n}\nexport interface IRevertFinishedClassStatusInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n}\n\ninterface IRevertFinishedClassStatusMutation {\n    revertFinishedClassStatus: ClassRecordType;\n}\nexport interface IRevertLessonStatusInput {\n    sourceId: string;\n    sourceType: SourceType;\n    lessonId: string;\n}\n\ninterface IRevertLessonStatusMutation {\n    revertLessonStatus: Lesson;\n}\n\nexport interface Student {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    opened?: boolean; // front-end only field\n}\n\ninterface IClassroomQuery {\n    classroom: IClassroom;\n}\n\nexport interface IClassroom {\n    id?: string;\n    classInProgress?: ClassRecordType;\n    enrollments?: Enrollment[];\n    studyGroups?: StudyGroup[];\n    students?: Student[];\n    studentEnrollments?: Enrollment[];\n}\n\nexport interface IClassroomFiltersInput {\n    enrollmentStatus?: string;\n    studyGroupStatus?: string;\n}\n\ninterface IAddStudentToGroupMutation {\n    addStudentToGroup: Enrollment;\n}\ninterface IAddStudentToGroupInput {\n    id: string;\n    studyGroupId: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClassroomService {\n    private classInProgressSource = new BehaviorSubject<ClassRecord>(undefined);\n\n    public classInProgress$ = this.classInProgressSource.asObservable();\n\n    getGroupByIdQuery$: QueryRef<IFindGroupById>;\n    getEnrollmentQuery$: QueryRef<IEnrollment>;\n    classroomQuery$: QueryRef<IClassroomQuery>;\n\n    classroomFiltersInput: IClassroomFiltersInput = {\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    };\n\n    constructor(private apollo: Apollo) {}\n\n    getClassroom$(): Observable<IClassroom> {\n        this.classroomQuery$ = this.apollo.watchQuery({\n            query: gql`\n                query Classroom($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        ...classroomSummary\n                    }\n                }\n                ${CLASSROOM_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n\n        return this.classroomQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IClassroomQuery>) => {\n                const classInProgress = result.data.classroom.classInProgress;\n                if (!classInProgress) {\n                    this.classInProgressSource.next(null);\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        this.classInProgressSource.next({\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        });\n                    } else {\n                        this.classInProgressSource.next({\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        });\n                    }\n                }\n\n                return result.data.classroom;\n            }),\n            share(),\n        );\n    }\n\n    classroomRefetch(): void {\n        this.getClassroom$();\n        this.classroomQuery$.refetch();\n    }\n\n    setClassroomFiltersInput(filters: IClassroomFiltersInput = {}) {\n        this.classroomFiltersInput = { ...this.classroomFiltersInput, ...filters };\n    }\n\n    createEnrollmentInvitation(createEnrollmentInput: CreateEnrollmentInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICreateEnrollmentMutation>({\n                mutation: gql`\n                    mutation CreateEnrollment($enrollmentInput: EnrollmentInput, $invitedStudent: StudentInput) {\n                        createEnrollment(enrollmentInput: $enrollmentInput, invitedStudent: $invitedStudent) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    enrollmentInput: createEnrollmentInput.enrollmentInput,\n                    invitedStudent: createEnrollmentInput.invitedStudent,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateEnrollmentMutation>) => {\n                    return result.data.createEnrollment;\n                }),\n            );\n    }\n\n    getEnrollment(enrollmentId: string): Observable<Enrollment> {\n        this.getEnrollmentQuery$ = this.apollo.watchQuery({\n            query: gql`\n            {\n                enrollment(id: \"${enrollmentId}\") {\n                    ...enrollmentDetail\n                }\n            }\n            ${ENROLLMENT_DETAIL}\n            `,\n        });\n\n        return this.getEnrollmentQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IEnrollment>) => result.data.enrollment),\n        );\n    }\n\n    refetchEnrollment(): void {\n        if (this.getEnrollmentQuery$) {\n            this.getEnrollmentQuery$.refetch();\n        }\n    }\n\n    cancelEnrollment(id: string): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICancelEnrollmentMutation>({\n                mutation: gql`\n                    mutation CancelEnrollmentMutation {\n                        cancelEnrollment(id: \"${id}\") {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICancelEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.cancelEnrollment;\n                }),\n            );\n    }\n\n    changeEnrollmentSchedule(changeScheduleInput: IChangeScheduleInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<IChangeEnrollmentScheduleMutation>({\n                mutation: gql`\n                    mutation ChangeEnrollmentScheduleMutation($changeScheduleInput: ChangeScheduleInput) {\n                        changeEnrollmentSchedule(changeScheduleInput: $changeScheduleInput) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    changeScheduleInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeEnrollmentScheduleMutation>) => {\n                    return result.data.changeEnrollmentSchedule;\n                }),\n            );\n    }\n\n    transferEnrollment(id: string, events: Event[]) {\n        return this.apollo\n            .mutate<ITransferEnrollmentMutation>({\n                mutation: gql`\n                    mutation removeStudentFromGroup($id: id, $events: EventsInput) {\n                        removeStudentFromGroup(id: $id, events: $events) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    id,\n                    events,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ITransferEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.removeStudentFromGroup;\n                }),\n            );\n    }\n\n    startClass(startClassInput: IStartClassInput): Observable<ClassRecord> {\n        return this.apollo\n            .mutate<IStartClassMutation>({\n                mutation: gql`\n                    mutation StartClassMutation($startClassInput: StartClassInput) {\n                        startClass(startClassInput: $startClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { startClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IStartClassMutation>) => {\n                    const classInProgress = result.data.startClass;\n                    this.classInProgressSource.next(classInProgress);\n\n                    this.classroomRefetch();\n                    return classInProgress;\n                }),\n            );\n    }\n\n    finishClass(finishClassInput: IFinishClassInput): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IFinishClassMutation>({\n                mutation: gql`\n                    mutation FinishClassMutation($finishClassInput: FinishClassInput) {\n                        finishClass(finishClassInput: $finishClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { finishClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IFinishClassMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.finishClass;\n                }),\n            );\n    }\n\n    getGroupsQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query ClassroomQuery($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        id\n                        studyGroups {\n                            ...studyGroupSummary\n                        }\n                    }\n                }\n                ${STUDY_GROUP_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n    }\n\n    getGroupById(id: string): Observable<StudyGroup> {\n        this.getGroupByIdQuery$ = this.apollo.watchQuery<any>({\n            query: gql`\n                query findGroupById($id: String) {\n                    findGroupById(id: $id) {\n                        ...studyGroupDetails\n                    }\n                }\n                ${STUDY_GROUP_DETAILS}\n            `,\n            variables: {\n                id,\n            },\n        });\n\n        return this.getGroupByIdQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IFindGroupById>) => result.data.findGroupById),\n        );\n    }\n\n    refetchCurrentGroupById(groupId?: string): void {\n        if (groupId) {\n            this.getGroupById(groupId);\n        }\n\n        if (this.getGroupByIdQuery$) {\n            this.getGroupByIdQuery$.refetch();\n        }\n    }\n\n    createStudyGroup(createGroupInput: CreateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<ICreateStudyGroupMutation>({\n                mutation: gql`\n                    mutation CreateGroupMutation($createGroupInput: CreateStudyGroupInput) {\n                        createStudyGroup(createGroupInput: $createGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    createGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.createStudyGroup;\n                }),\n            );\n    }\n\n    updateStudyGroup(studyGroupInput: IUpdateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IUpdateStudyGroupMutation>({\n                mutation: gql`\n                    mutation UpdateStudyGroupMutation($studyGroupInput: UpdateStudyGroupInput) {\n                        updateStudyGroup(studyGroupInput: $studyGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    studyGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.studyGroup;\n                }),\n            );\n    }\n\n    removeStudyGroup(removeGroupInput: IRemoveGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IRemoveGroupMutation>({\n                mutation: gql`\n                    mutation RemoveStudyGroupMutation($removeGroupInput: RemoveStudyGroupInput) {\n                        removeStudyGroup(removeGroupInput: $removeGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    removeGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRemoveGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.group;\n                }),\n            );\n    }\n\n    addStudentToGroup(enrollmentInput: IAddStudentToGroupInput) {\n        return this.apollo\n            .mutate<IAddStudentToGroupMutation>({\n                mutation: gql`\n                    mutation AddStudentToGroupMutation($enrollmentInput: AddStudentToGroupInput) {\n                        addStudentToGroup(enrollmentInput: $enrollmentInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    enrollmentInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IAddStudentToGroupMutation>) => {\n                    this.classroomRefetch();\n                    this.refetchCurrentGroupById();\n                    return result.data.addStudentToGroup;\n                }),\n            );\n    }\n\n    revertFinishedClassStatus(\n        revertFinishedClassStatusInput: IRevertFinishedClassStatusInput,\n    ): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IRevertFinishedClassStatusMutation>({\n                mutation: gql`\n                    mutation revertFinishedClassStatusMutation(\n                        $revertFinishedClassStatusInput: RevertFinishedClassStatusInput\n                    ) {\n                        revertFinishedClassStatus(revertFinishedClassStatusInput: $revertFinishedClassStatusInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { revertFinishedClassStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertFinishedClassStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertFinishedClassStatus;\n                }),\n            );\n    }\n\n    revertLessonStatus(revertLessonStatusInput: IRevertLessonStatusInput): Observable<Lesson> {\n        return this.apollo\n            .mutate<IRevertLessonStatusMutation>({\n                mutation: gql`\n                    mutation revertLessonStatusMutation($revertLessonStatusInput: RevertLessonStatusInput) {\n                        revertLessonStatus(revertLessonStatusInput: $revertLessonStatusInput) {\n                            ...lessonSummary\n                        }\n                    }\n                    ${LESSON_SUMMARY}\n                `,\n                variables: { revertLessonStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertLessonStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertLessonStatus;\n                }),\n            );\n    }\n\n    activateEnrollment(enrollmentId: string): Observable<any> {\n        return this.apollo\n            .mutate<IActivateEnrollmentMutation>({\n                mutation: gql`\n                    mutation ActivateEnrollmentMutation($enrollmentId: ID) {\n                        activateEnrollment(enrollmentId: $enrollmentId) {\n                            id\n                        }\n                    }\n                `,\n                variables: { enrollmentId },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IActivateEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.updatedEnrollment;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "studyGroupId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 82
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IRemoveGroupMutation",
            "id": "interface-IRemoveGroupMutation-393bbeee17eb6281c8a64cc8ff3beb12",
            "file": "src/app/@core/services/classroom.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\nimport {\n    ClassRecord,\n    ClassRecordType,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from '../models/class-record.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, SourceType, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\n\nimport { CreateStudyGroupInput } from 'app/classroom/pages/groups-page/groups-page.component';\nimport { ENROLLMENT_DETAIL } from 'app/@core/graphql/enrollment.graphql';\nimport { CLASSROOM_SUMMARY } from '../graphql/classroom.graphql';\nimport { CLASS_RECORD_SUMMARY } from '../graphql/class-record.graphql';\nimport { STUDY_GROUP_DETAILS, STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { LESSON_SUMMARY } from '../graphql/lesson.graphql';\nimport { Lesson } from '../models/lesson.model';\n\ninterface IStartClassMutation {\n    startClass: ClassRecord;\n}\n\nexport interface IStartClassInput {\n    lessonId: string;\n    levelId: string;\n    sourceId: string;\n    sourceType: SourceType;\n    teacherNotes?: string;\n}\n\ninterface ICreateEnrollmentMutation {\n    createEnrollment: Enrollment;\n}\n\ninterface IEnrollment {\n    enrollment: Enrollment;\n}\n\ninterface IGetEnrollments {\n    enrollments: Enrollment[];\n}\n\ninterface IFindGroupById {\n    findGroupById: StudyGroup;\n}\n\ninterface ICancelEnrollmentMutation {\n    cancelEnrollment: Enrollment;\n}\n\ninterface IChangeScheduleInput {\n    enrollmentId: string;\n    events: Event[];\n}\n\ninterface IChangeEnrollmentScheduleMutation {\n    changeEnrollmentSchedule: Enrollment;\n}\n\ninterface ICreateStudyGroupMutation {\n    createStudyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupMutation {\n    studyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupInput {\n    studyGroupId: string;\n    name: string;\n    events?: Event[];\n}\n\ninterface IRemoveGroupInput {\n    studyGroupId: string;\n}\n\ninterface IRemoveGroupMutation {\n    group: StudyGroup;\n}\n\ninterface StudyGroupAttendeInput {\n    studentId: string;\n    attended: boolean;\n}\ninterface IActivateEnrollmentMutation {\n    updatedEnrollment: Enrollment;\n}\n\nexport interface IFinishClassInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n    teacherNotes?: string;\n    status: string;\n    lessonStartedAt: string;\n    lessonEndedAt: string;\n    attendees?: StudyGroupAttendeInput[];\n}\n\ninterface IFinishClassMutation {\n    finishClass: ClassRecordType;\n}\n\ninterface ITransferEnrollmentMutation {\n    removeStudentFromGroup: Enrollment;\n}\nexport interface IRevertFinishedClassStatusInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n}\n\ninterface IRevertFinishedClassStatusMutation {\n    revertFinishedClassStatus: ClassRecordType;\n}\nexport interface IRevertLessonStatusInput {\n    sourceId: string;\n    sourceType: SourceType;\n    lessonId: string;\n}\n\ninterface IRevertLessonStatusMutation {\n    revertLessonStatus: Lesson;\n}\n\nexport interface Student {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    opened?: boolean; // front-end only field\n}\n\ninterface IClassroomQuery {\n    classroom: IClassroom;\n}\n\nexport interface IClassroom {\n    id?: string;\n    classInProgress?: ClassRecordType;\n    enrollments?: Enrollment[];\n    studyGroups?: StudyGroup[];\n    students?: Student[];\n    studentEnrollments?: Enrollment[];\n}\n\nexport interface IClassroomFiltersInput {\n    enrollmentStatus?: string;\n    studyGroupStatus?: string;\n}\n\ninterface IAddStudentToGroupMutation {\n    addStudentToGroup: Enrollment;\n}\ninterface IAddStudentToGroupInput {\n    id: string;\n    studyGroupId: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClassroomService {\n    private classInProgressSource = new BehaviorSubject<ClassRecord>(undefined);\n\n    public classInProgress$ = this.classInProgressSource.asObservable();\n\n    getGroupByIdQuery$: QueryRef<IFindGroupById>;\n    getEnrollmentQuery$: QueryRef<IEnrollment>;\n    classroomQuery$: QueryRef<IClassroomQuery>;\n\n    classroomFiltersInput: IClassroomFiltersInput = {\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    };\n\n    constructor(private apollo: Apollo) {}\n\n    getClassroom$(): Observable<IClassroom> {\n        this.classroomQuery$ = this.apollo.watchQuery({\n            query: gql`\n                query Classroom($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        ...classroomSummary\n                    }\n                }\n                ${CLASSROOM_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n\n        return this.classroomQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IClassroomQuery>) => {\n                const classInProgress = result.data.classroom.classInProgress;\n                if (!classInProgress) {\n                    this.classInProgressSource.next(null);\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        this.classInProgressSource.next({\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        });\n                    } else {\n                        this.classInProgressSource.next({\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        });\n                    }\n                }\n\n                return result.data.classroom;\n            }),\n            share(),\n        );\n    }\n\n    classroomRefetch(): void {\n        this.getClassroom$();\n        this.classroomQuery$.refetch();\n    }\n\n    setClassroomFiltersInput(filters: IClassroomFiltersInput = {}) {\n        this.classroomFiltersInput = { ...this.classroomFiltersInput, ...filters };\n    }\n\n    createEnrollmentInvitation(createEnrollmentInput: CreateEnrollmentInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICreateEnrollmentMutation>({\n                mutation: gql`\n                    mutation CreateEnrollment($enrollmentInput: EnrollmentInput, $invitedStudent: StudentInput) {\n                        createEnrollment(enrollmentInput: $enrollmentInput, invitedStudent: $invitedStudent) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    enrollmentInput: createEnrollmentInput.enrollmentInput,\n                    invitedStudent: createEnrollmentInput.invitedStudent,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateEnrollmentMutation>) => {\n                    return result.data.createEnrollment;\n                }),\n            );\n    }\n\n    getEnrollment(enrollmentId: string): Observable<Enrollment> {\n        this.getEnrollmentQuery$ = this.apollo.watchQuery({\n            query: gql`\n            {\n                enrollment(id: \"${enrollmentId}\") {\n                    ...enrollmentDetail\n                }\n            }\n            ${ENROLLMENT_DETAIL}\n            `,\n        });\n\n        return this.getEnrollmentQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IEnrollment>) => result.data.enrollment),\n        );\n    }\n\n    refetchEnrollment(): void {\n        if (this.getEnrollmentQuery$) {\n            this.getEnrollmentQuery$.refetch();\n        }\n    }\n\n    cancelEnrollment(id: string): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICancelEnrollmentMutation>({\n                mutation: gql`\n                    mutation CancelEnrollmentMutation {\n                        cancelEnrollment(id: \"${id}\") {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICancelEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.cancelEnrollment;\n                }),\n            );\n    }\n\n    changeEnrollmentSchedule(changeScheduleInput: IChangeScheduleInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<IChangeEnrollmentScheduleMutation>({\n                mutation: gql`\n                    mutation ChangeEnrollmentScheduleMutation($changeScheduleInput: ChangeScheduleInput) {\n                        changeEnrollmentSchedule(changeScheduleInput: $changeScheduleInput) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    changeScheduleInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeEnrollmentScheduleMutation>) => {\n                    return result.data.changeEnrollmentSchedule;\n                }),\n            );\n    }\n\n    transferEnrollment(id: string, events: Event[]) {\n        return this.apollo\n            .mutate<ITransferEnrollmentMutation>({\n                mutation: gql`\n                    mutation removeStudentFromGroup($id: id, $events: EventsInput) {\n                        removeStudentFromGroup(id: $id, events: $events) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    id,\n                    events,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ITransferEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.removeStudentFromGroup;\n                }),\n            );\n    }\n\n    startClass(startClassInput: IStartClassInput): Observable<ClassRecord> {\n        return this.apollo\n            .mutate<IStartClassMutation>({\n                mutation: gql`\n                    mutation StartClassMutation($startClassInput: StartClassInput) {\n                        startClass(startClassInput: $startClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { startClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IStartClassMutation>) => {\n                    const classInProgress = result.data.startClass;\n                    this.classInProgressSource.next(classInProgress);\n\n                    this.classroomRefetch();\n                    return classInProgress;\n                }),\n            );\n    }\n\n    finishClass(finishClassInput: IFinishClassInput): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IFinishClassMutation>({\n                mutation: gql`\n                    mutation FinishClassMutation($finishClassInput: FinishClassInput) {\n                        finishClass(finishClassInput: $finishClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { finishClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IFinishClassMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.finishClass;\n                }),\n            );\n    }\n\n    getGroupsQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query ClassroomQuery($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        id\n                        studyGroups {\n                            ...studyGroupSummary\n                        }\n                    }\n                }\n                ${STUDY_GROUP_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n    }\n\n    getGroupById(id: string): Observable<StudyGroup> {\n        this.getGroupByIdQuery$ = this.apollo.watchQuery<any>({\n            query: gql`\n                query findGroupById($id: String) {\n                    findGroupById(id: $id) {\n                        ...studyGroupDetails\n                    }\n                }\n                ${STUDY_GROUP_DETAILS}\n            `,\n            variables: {\n                id,\n            },\n        });\n\n        return this.getGroupByIdQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IFindGroupById>) => result.data.findGroupById),\n        );\n    }\n\n    refetchCurrentGroupById(groupId?: string): void {\n        if (groupId) {\n            this.getGroupById(groupId);\n        }\n\n        if (this.getGroupByIdQuery$) {\n            this.getGroupByIdQuery$.refetch();\n        }\n    }\n\n    createStudyGroup(createGroupInput: CreateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<ICreateStudyGroupMutation>({\n                mutation: gql`\n                    mutation CreateGroupMutation($createGroupInput: CreateStudyGroupInput) {\n                        createStudyGroup(createGroupInput: $createGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    createGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.createStudyGroup;\n                }),\n            );\n    }\n\n    updateStudyGroup(studyGroupInput: IUpdateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IUpdateStudyGroupMutation>({\n                mutation: gql`\n                    mutation UpdateStudyGroupMutation($studyGroupInput: UpdateStudyGroupInput) {\n                        updateStudyGroup(studyGroupInput: $studyGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    studyGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.studyGroup;\n                }),\n            );\n    }\n\n    removeStudyGroup(removeGroupInput: IRemoveGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IRemoveGroupMutation>({\n                mutation: gql`\n                    mutation RemoveStudyGroupMutation($removeGroupInput: RemoveStudyGroupInput) {\n                        removeStudyGroup(removeGroupInput: $removeGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    removeGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRemoveGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.group;\n                }),\n            );\n    }\n\n    addStudentToGroup(enrollmentInput: IAddStudentToGroupInput) {\n        return this.apollo\n            .mutate<IAddStudentToGroupMutation>({\n                mutation: gql`\n                    mutation AddStudentToGroupMutation($enrollmentInput: AddStudentToGroupInput) {\n                        addStudentToGroup(enrollmentInput: $enrollmentInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    enrollmentInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IAddStudentToGroupMutation>) => {\n                    this.classroomRefetch();\n                    this.refetchCurrentGroupById();\n                    return result.data.addStudentToGroup;\n                }),\n            );\n    }\n\n    revertFinishedClassStatus(\n        revertFinishedClassStatusInput: IRevertFinishedClassStatusInput,\n    ): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IRevertFinishedClassStatusMutation>({\n                mutation: gql`\n                    mutation revertFinishedClassStatusMutation(\n                        $revertFinishedClassStatusInput: RevertFinishedClassStatusInput\n                    ) {\n                        revertFinishedClassStatus(revertFinishedClassStatusInput: $revertFinishedClassStatusInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { revertFinishedClassStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertFinishedClassStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertFinishedClassStatus;\n                }),\n            );\n    }\n\n    revertLessonStatus(revertLessonStatusInput: IRevertLessonStatusInput): Observable<Lesson> {\n        return this.apollo\n            .mutate<IRevertLessonStatusMutation>({\n                mutation: gql`\n                    mutation revertLessonStatusMutation($revertLessonStatusInput: RevertLessonStatusInput) {\n                        revertLessonStatus(revertLessonStatusInput: $revertLessonStatusInput) {\n                            ...lessonSummary\n                        }\n                    }\n                    ${LESSON_SUMMARY}\n                `,\n                variables: { revertLessonStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertLessonStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertLessonStatus;\n                }),\n            );\n    }\n\n    activateEnrollment(enrollmentId: string): Observable<any> {\n        return this.apollo\n            .mutate<IActivateEnrollmentMutation>({\n                mutation: gql`\n                    mutation ActivateEnrollmentMutation($enrollmentId: ID) {\n                        activateEnrollment(enrollmentId: $enrollmentId) {\n                            id\n                        }\n                    }\n                `,\n                variables: { enrollmentId },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IActivateEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.updatedEnrollment;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StudyGroup",
                    "optional": false,
                    "description": "",
                    "line": 86
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IRevertFinishedClassStatusInput",
            "id": "interface-IRevertFinishedClassStatusInput-393bbeee17eb6281c8a64cc8ff3beb12",
            "file": "src/app/@core/services/classroom.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\nimport {\n    ClassRecord,\n    ClassRecordType,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from '../models/class-record.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, SourceType, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\n\nimport { CreateStudyGroupInput } from 'app/classroom/pages/groups-page/groups-page.component';\nimport { ENROLLMENT_DETAIL } from 'app/@core/graphql/enrollment.graphql';\nimport { CLASSROOM_SUMMARY } from '../graphql/classroom.graphql';\nimport { CLASS_RECORD_SUMMARY } from '../graphql/class-record.graphql';\nimport { STUDY_GROUP_DETAILS, STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { LESSON_SUMMARY } from '../graphql/lesson.graphql';\nimport { Lesson } from '../models/lesson.model';\n\ninterface IStartClassMutation {\n    startClass: ClassRecord;\n}\n\nexport interface IStartClassInput {\n    lessonId: string;\n    levelId: string;\n    sourceId: string;\n    sourceType: SourceType;\n    teacherNotes?: string;\n}\n\ninterface ICreateEnrollmentMutation {\n    createEnrollment: Enrollment;\n}\n\ninterface IEnrollment {\n    enrollment: Enrollment;\n}\n\ninterface IGetEnrollments {\n    enrollments: Enrollment[];\n}\n\ninterface IFindGroupById {\n    findGroupById: StudyGroup;\n}\n\ninterface ICancelEnrollmentMutation {\n    cancelEnrollment: Enrollment;\n}\n\ninterface IChangeScheduleInput {\n    enrollmentId: string;\n    events: Event[];\n}\n\ninterface IChangeEnrollmentScheduleMutation {\n    changeEnrollmentSchedule: Enrollment;\n}\n\ninterface ICreateStudyGroupMutation {\n    createStudyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupMutation {\n    studyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupInput {\n    studyGroupId: string;\n    name: string;\n    events?: Event[];\n}\n\ninterface IRemoveGroupInput {\n    studyGroupId: string;\n}\n\ninterface IRemoveGroupMutation {\n    group: StudyGroup;\n}\n\ninterface StudyGroupAttendeInput {\n    studentId: string;\n    attended: boolean;\n}\ninterface IActivateEnrollmentMutation {\n    updatedEnrollment: Enrollment;\n}\n\nexport interface IFinishClassInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n    teacherNotes?: string;\n    status: string;\n    lessonStartedAt: string;\n    lessonEndedAt: string;\n    attendees?: StudyGroupAttendeInput[];\n}\n\ninterface IFinishClassMutation {\n    finishClass: ClassRecordType;\n}\n\ninterface ITransferEnrollmentMutation {\n    removeStudentFromGroup: Enrollment;\n}\nexport interface IRevertFinishedClassStatusInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n}\n\ninterface IRevertFinishedClassStatusMutation {\n    revertFinishedClassStatus: ClassRecordType;\n}\nexport interface IRevertLessonStatusInput {\n    sourceId: string;\n    sourceType: SourceType;\n    lessonId: string;\n}\n\ninterface IRevertLessonStatusMutation {\n    revertLessonStatus: Lesson;\n}\n\nexport interface Student {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    opened?: boolean; // front-end only field\n}\n\ninterface IClassroomQuery {\n    classroom: IClassroom;\n}\n\nexport interface IClassroom {\n    id?: string;\n    classInProgress?: ClassRecordType;\n    enrollments?: Enrollment[];\n    studyGroups?: StudyGroup[];\n    students?: Student[];\n    studentEnrollments?: Enrollment[];\n}\n\nexport interface IClassroomFiltersInput {\n    enrollmentStatus?: string;\n    studyGroupStatus?: string;\n}\n\ninterface IAddStudentToGroupMutation {\n    addStudentToGroup: Enrollment;\n}\ninterface IAddStudentToGroupInput {\n    id: string;\n    studyGroupId: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClassroomService {\n    private classInProgressSource = new BehaviorSubject<ClassRecord>(undefined);\n\n    public classInProgress$ = this.classInProgressSource.asObservable();\n\n    getGroupByIdQuery$: QueryRef<IFindGroupById>;\n    getEnrollmentQuery$: QueryRef<IEnrollment>;\n    classroomQuery$: QueryRef<IClassroomQuery>;\n\n    classroomFiltersInput: IClassroomFiltersInput = {\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    };\n\n    constructor(private apollo: Apollo) {}\n\n    getClassroom$(): Observable<IClassroom> {\n        this.classroomQuery$ = this.apollo.watchQuery({\n            query: gql`\n                query Classroom($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        ...classroomSummary\n                    }\n                }\n                ${CLASSROOM_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n\n        return this.classroomQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IClassroomQuery>) => {\n                const classInProgress = result.data.classroom.classInProgress;\n                if (!classInProgress) {\n                    this.classInProgressSource.next(null);\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        this.classInProgressSource.next({\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        });\n                    } else {\n                        this.classInProgressSource.next({\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        });\n                    }\n                }\n\n                return result.data.classroom;\n            }),\n            share(),\n        );\n    }\n\n    classroomRefetch(): void {\n        this.getClassroom$();\n        this.classroomQuery$.refetch();\n    }\n\n    setClassroomFiltersInput(filters: IClassroomFiltersInput = {}) {\n        this.classroomFiltersInput = { ...this.classroomFiltersInput, ...filters };\n    }\n\n    createEnrollmentInvitation(createEnrollmentInput: CreateEnrollmentInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICreateEnrollmentMutation>({\n                mutation: gql`\n                    mutation CreateEnrollment($enrollmentInput: EnrollmentInput, $invitedStudent: StudentInput) {\n                        createEnrollment(enrollmentInput: $enrollmentInput, invitedStudent: $invitedStudent) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    enrollmentInput: createEnrollmentInput.enrollmentInput,\n                    invitedStudent: createEnrollmentInput.invitedStudent,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateEnrollmentMutation>) => {\n                    return result.data.createEnrollment;\n                }),\n            );\n    }\n\n    getEnrollment(enrollmentId: string): Observable<Enrollment> {\n        this.getEnrollmentQuery$ = this.apollo.watchQuery({\n            query: gql`\n            {\n                enrollment(id: \"${enrollmentId}\") {\n                    ...enrollmentDetail\n                }\n            }\n            ${ENROLLMENT_DETAIL}\n            `,\n        });\n\n        return this.getEnrollmentQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IEnrollment>) => result.data.enrollment),\n        );\n    }\n\n    refetchEnrollment(): void {\n        if (this.getEnrollmentQuery$) {\n            this.getEnrollmentQuery$.refetch();\n        }\n    }\n\n    cancelEnrollment(id: string): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICancelEnrollmentMutation>({\n                mutation: gql`\n                    mutation CancelEnrollmentMutation {\n                        cancelEnrollment(id: \"${id}\") {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICancelEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.cancelEnrollment;\n                }),\n            );\n    }\n\n    changeEnrollmentSchedule(changeScheduleInput: IChangeScheduleInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<IChangeEnrollmentScheduleMutation>({\n                mutation: gql`\n                    mutation ChangeEnrollmentScheduleMutation($changeScheduleInput: ChangeScheduleInput) {\n                        changeEnrollmentSchedule(changeScheduleInput: $changeScheduleInput) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    changeScheduleInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeEnrollmentScheduleMutation>) => {\n                    return result.data.changeEnrollmentSchedule;\n                }),\n            );\n    }\n\n    transferEnrollment(id: string, events: Event[]) {\n        return this.apollo\n            .mutate<ITransferEnrollmentMutation>({\n                mutation: gql`\n                    mutation removeStudentFromGroup($id: id, $events: EventsInput) {\n                        removeStudentFromGroup(id: $id, events: $events) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    id,\n                    events,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ITransferEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.removeStudentFromGroup;\n                }),\n            );\n    }\n\n    startClass(startClassInput: IStartClassInput): Observable<ClassRecord> {\n        return this.apollo\n            .mutate<IStartClassMutation>({\n                mutation: gql`\n                    mutation StartClassMutation($startClassInput: StartClassInput) {\n                        startClass(startClassInput: $startClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { startClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IStartClassMutation>) => {\n                    const classInProgress = result.data.startClass;\n                    this.classInProgressSource.next(classInProgress);\n\n                    this.classroomRefetch();\n                    return classInProgress;\n                }),\n            );\n    }\n\n    finishClass(finishClassInput: IFinishClassInput): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IFinishClassMutation>({\n                mutation: gql`\n                    mutation FinishClassMutation($finishClassInput: FinishClassInput) {\n                        finishClass(finishClassInput: $finishClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { finishClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IFinishClassMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.finishClass;\n                }),\n            );\n    }\n\n    getGroupsQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query ClassroomQuery($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        id\n                        studyGroups {\n                            ...studyGroupSummary\n                        }\n                    }\n                }\n                ${STUDY_GROUP_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n    }\n\n    getGroupById(id: string): Observable<StudyGroup> {\n        this.getGroupByIdQuery$ = this.apollo.watchQuery<any>({\n            query: gql`\n                query findGroupById($id: String) {\n                    findGroupById(id: $id) {\n                        ...studyGroupDetails\n                    }\n                }\n                ${STUDY_GROUP_DETAILS}\n            `,\n            variables: {\n                id,\n            },\n        });\n\n        return this.getGroupByIdQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IFindGroupById>) => result.data.findGroupById),\n        );\n    }\n\n    refetchCurrentGroupById(groupId?: string): void {\n        if (groupId) {\n            this.getGroupById(groupId);\n        }\n\n        if (this.getGroupByIdQuery$) {\n            this.getGroupByIdQuery$.refetch();\n        }\n    }\n\n    createStudyGroup(createGroupInput: CreateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<ICreateStudyGroupMutation>({\n                mutation: gql`\n                    mutation CreateGroupMutation($createGroupInput: CreateStudyGroupInput) {\n                        createStudyGroup(createGroupInput: $createGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    createGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.createStudyGroup;\n                }),\n            );\n    }\n\n    updateStudyGroup(studyGroupInput: IUpdateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IUpdateStudyGroupMutation>({\n                mutation: gql`\n                    mutation UpdateStudyGroupMutation($studyGroupInput: UpdateStudyGroupInput) {\n                        updateStudyGroup(studyGroupInput: $studyGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    studyGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.studyGroup;\n                }),\n            );\n    }\n\n    removeStudyGroup(removeGroupInput: IRemoveGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IRemoveGroupMutation>({\n                mutation: gql`\n                    mutation RemoveStudyGroupMutation($removeGroupInput: RemoveStudyGroupInput) {\n                        removeStudyGroup(removeGroupInput: $removeGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    removeGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRemoveGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.group;\n                }),\n            );\n    }\n\n    addStudentToGroup(enrollmentInput: IAddStudentToGroupInput) {\n        return this.apollo\n            .mutate<IAddStudentToGroupMutation>({\n                mutation: gql`\n                    mutation AddStudentToGroupMutation($enrollmentInput: AddStudentToGroupInput) {\n                        addStudentToGroup(enrollmentInput: $enrollmentInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    enrollmentInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IAddStudentToGroupMutation>) => {\n                    this.classroomRefetch();\n                    this.refetchCurrentGroupById();\n                    return result.data.addStudentToGroup;\n                }),\n            );\n    }\n\n    revertFinishedClassStatus(\n        revertFinishedClassStatusInput: IRevertFinishedClassStatusInput,\n    ): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IRevertFinishedClassStatusMutation>({\n                mutation: gql`\n                    mutation revertFinishedClassStatusMutation(\n                        $revertFinishedClassStatusInput: RevertFinishedClassStatusInput\n                    ) {\n                        revertFinishedClassStatus(revertFinishedClassStatusInput: $revertFinishedClassStatusInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { revertFinishedClassStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertFinishedClassStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertFinishedClassStatus;\n                }),\n            );\n    }\n\n    revertLessonStatus(revertLessonStatusInput: IRevertLessonStatusInput): Observable<Lesson> {\n        return this.apollo\n            .mutate<IRevertLessonStatusMutation>({\n                mutation: gql`\n                    mutation revertLessonStatusMutation($revertLessonStatusInput: RevertLessonStatusInput) {\n                        revertLessonStatus(revertLessonStatusInput: $revertLessonStatusInput) {\n                            ...lessonSummary\n                        }\n                    }\n                    ${LESSON_SUMMARY}\n                `,\n                variables: { revertLessonStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertLessonStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertLessonStatus;\n                }),\n            );\n    }\n\n    activateEnrollment(enrollmentId: string): Observable<any> {\n        return this.apollo\n            .mutate<IActivateEnrollmentMutation>({\n                mutation: gql`\n                    mutation ActivateEnrollmentMutation($enrollmentId: ID) {\n                        activateEnrollment(enrollmentId: $enrollmentId) {\n                            id\n                        }\n                    }\n                `,\n                variables: { enrollmentId },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IActivateEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.updatedEnrollment;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "classRecordId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "sourceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "sourceType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SourceType",
                    "optional": false,
                    "description": "",
                    "line": 117
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IRevertFinishedClassStatusMutation",
            "id": "interface-IRevertFinishedClassStatusMutation-393bbeee17eb6281c8a64cc8ff3beb12",
            "file": "src/app/@core/services/classroom.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\nimport {\n    ClassRecord,\n    ClassRecordType,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from '../models/class-record.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, SourceType, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\n\nimport { CreateStudyGroupInput } from 'app/classroom/pages/groups-page/groups-page.component';\nimport { ENROLLMENT_DETAIL } from 'app/@core/graphql/enrollment.graphql';\nimport { CLASSROOM_SUMMARY } from '../graphql/classroom.graphql';\nimport { CLASS_RECORD_SUMMARY } from '../graphql/class-record.graphql';\nimport { STUDY_GROUP_DETAILS, STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { LESSON_SUMMARY } from '../graphql/lesson.graphql';\nimport { Lesson } from '../models/lesson.model';\n\ninterface IStartClassMutation {\n    startClass: ClassRecord;\n}\n\nexport interface IStartClassInput {\n    lessonId: string;\n    levelId: string;\n    sourceId: string;\n    sourceType: SourceType;\n    teacherNotes?: string;\n}\n\ninterface ICreateEnrollmentMutation {\n    createEnrollment: Enrollment;\n}\n\ninterface IEnrollment {\n    enrollment: Enrollment;\n}\n\ninterface IGetEnrollments {\n    enrollments: Enrollment[];\n}\n\ninterface IFindGroupById {\n    findGroupById: StudyGroup;\n}\n\ninterface ICancelEnrollmentMutation {\n    cancelEnrollment: Enrollment;\n}\n\ninterface IChangeScheduleInput {\n    enrollmentId: string;\n    events: Event[];\n}\n\ninterface IChangeEnrollmentScheduleMutation {\n    changeEnrollmentSchedule: Enrollment;\n}\n\ninterface ICreateStudyGroupMutation {\n    createStudyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupMutation {\n    studyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupInput {\n    studyGroupId: string;\n    name: string;\n    events?: Event[];\n}\n\ninterface IRemoveGroupInput {\n    studyGroupId: string;\n}\n\ninterface IRemoveGroupMutation {\n    group: StudyGroup;\n}\n\ninterface StudyGroupAttendeInput {\n    studentId: string;\n    attended: boolean;\n}\ninterface IActivateEnrollmentMutation {\n    updatedEnrollment: Enrollment;\n}\n\nexport interface IFinishClassInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n    teacherNotes?: string;\n    status: string;\n    lessonStartedAt: string;\n    lessonEndedAt: string;\n    attendees?: StudyGroupAttendeInput[];\n}\n\ninterface IFinishClassMutation {\n    finishClass: ClassRecordType;\n}\n\ninterface ITransferEnrollmentMutation {\n    removeStudentFromGroup: Enrollment;\n}\nexport interface IRevertFinishedClassStatusInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n}\n\ninterface IRevertFinishedClassStatusMutation {\n    revertFinishedClassStatus: ClassRecordType;\n}\nexport interface IRevertLessonStatusInput {\n    sourceId: string;\n    sourceType: SourceType;\n    lessonId: string;\n}\n\ninterface IRevertLessonStatusMutation {\n    revertLessonStatus: Lesson;\n}\n\nexport interface Student {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    opened?: boolean; // front-end only field\n}\n\ninterface IClassroomQuery {\n    classroom: IClassroom;\n}\n\nexport interface IClassroom {\n    id?: string;\n    classInProgress?: ClassRecordType;\n    enrollments?: Enrollment[];\n    studyGroups?: StudyGroup[];\n    students?: Student[];\n    studentEnrollments?: Enrollment[];\n}\n\nexport interface IClassroomFiltersInput {\n    enrollmentStatus?: string;\n    studyGroupStatus?: string;\n}\n\ninterface IAddStudentToGroupMutation {\n    addStudentToGroup: Enrollment;\n}\ninterface IAddStudentToGroupInput {\n    id: string;\n    studyGroupId: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClassroomService {\n    private classInProgressSource = new BehaviorSubject<ClassRecord>(undefined);\n\n    public classInProgress$ = this.classInProgressSource.asObservable();\n\n    getGroupByIdQuery$: QueryRef<IFindGroupById>;\n    getEnrollmentQuery$: QueryRef<IEnrollment>;\n    classroomQuery$: QueryRef<IClassroomQuery>;\n\n    classroomFiltersInput: IClassroomFiltersInput = {\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    };\n\n    constructor(private apollo: Apollo) {}\n\n    getClassroom$(): Observable<IClassroom> {\n        this.classroomQuery$ = this.apollo.watchQuery({\n            query: gql`\n                query Classroom($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        ...classroomSummary\n                    }\n                }\n                ${CLASSROOM_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n\n        return this.classroomQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IClassroomQuery>) => {\n                const classInProgress = result.data.classroom.classInProgress;\n                if (!classInProgress) {\n                    this.classInProgressSource.next(null);\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        this.classInProgressSource.next({\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        });\n                    } else {\n                        this.classInProgressSource.next({\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        });\n                    }\n                }\n\n                return result.data.classroom;\n            }),\n            share(),\n        );\n    }\n\n    classroomRefetch(): void {\n        this.getClassroom$();\n        this.classroomQuery$.refetch();\n    }\n\n    setClassroomFiltersInput(filters: IClassroomFiltersInput = {}) {\n        this.classroomFiltersInput = { ...this.classroomFiltersInput, ...filters };\n    }\n\n    createEnrollmentInvitation(createEnrollmentInput: CreateEnrollmentInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICreateEnrollmentMutation>({\n                mutation: gql`\n                    mutation CreateEnrollment($enrollmentInput: EnrollmentInput, $invitedStudent: StudentInput) {\n                        createEnrollment(enrollmentInput: $enrollmentInput, invitedStudent: $invitedStudent) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    enrollmentInput: createEnrollmentInput.enrollmentInput,\n                    invitedStudent: createEnrollmentInput.invitedStudent,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateEnrollmentMutation>) => {\n                    return result.data.createEnrollment;\n                }),\n            );\n    }\n\n    getEnrollment(enrollmentId: string): Observable<Enrollment> {\n        this.getEnrollmentQuery$ = this.apollo.watchQuery({\n            query: gql`\n            {\n                enrollment(id: \"${enrollmentId}\") {\n                    ...enrollmentDetail\n                }\n            }\n            ${ENROLLMENT_DETAIL}\n            `,\n        });\n\n        return this.getEnrollmentQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IEnrollment>) => result.data.enrollment),\n        );\n    }\n\n    refetchEnrollment(): void {\n        if (this.getEnrollmentQuery$) {\n            this.getEnrollmentQuery$.refetch();\n        }\n    }\n\n    cancelEnrollment(id: string): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICancelEnrollmentMutation>({\n                mutation: gql`\n                    mutation CancelEnrollmentMutation {\n                        cancelEnrollment(id: \"${id}\") {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICancelEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.cancelEnrollment;\n                }),\n            );\n    }\n\n    changeEnrollmentSchedule(changeScheduleInput: IChangeScheduleInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<IChangeEnrollmentScheduleMutation>({\n                mutation: gql`\n                    mutation ChangeEnrollmentScheduleMutation($changeScheduleInput: ChangeScheduleInput) {\n                        changeEnrollmentSchedule(changeScheduleInput: $changeScheduleInput) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    changeScheduleInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeEnrollmentScheduleMutation>) => {\n                    return result.data.changeEnrollmentSchedule;\n                }),\n            );\n    }\n\n    transferEnrollment(id: string, events: Event[]) {\n        return this.apollo\n            .mutate<ITransferEnrollmentMutation>({\n                mutation: gql`\n                    mutation removeStudentFromGroup($id: id, $events: EventsInput) {\n                        removeStudentFromGroup(id: $id, events: $events) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    id,\n                    events,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ITransferEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.removeStudentFromGroup;\n                }),\n            );\n    }\n\n    startClass(startClassInput: IStartClassInput): Observable<ClassRecord> {\n        return this.apollo\n            .mutate<IStartClassMutation>({\n                mutation: gql`\n                    mutation StartClassMutation($startClassInput: StartClassInput) {\n                        startClass(startClassInput: $startClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { startClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IStartClassMutation>) => {\n                    const classInProgress = result.data.startClass;\n                    this.classInProgressSource.next(classInProgress);\n\n                    this.classroomRefetch();\n                    return classInProgress;\n                }),\n            );\n    }\n\n    finishClass(finishClassInput: IFinishClassInput): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IFinishClassMutation>({\n                mutation: gql`\n                    mutation FinishClassMutation($finishClassInput: FinishClassInput) {\n                        finishClass(finishClassInput: $finishClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { finishClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IFinishClassMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.finishClass;\n                }),\n            );\n    }\n\n    getGroupsQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query ClassroomQuery($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        id\n                        studyGroups {\n                            ...studyGroupSummary\n                        }\n                    }\n                }\n                ${STUDY_GROUP_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n    }\n\n    getGroupById(id: string): Observable<StudyGroup> {\n        this.getGroupByIdQuery$ = this.apollo.watchQuery<any>({\n            query: gql`\n                query findGroupById($id: String) {\n                    findGroupById(id: $id) {\n                        ...studyGroupDetails\n                    }\n                }\n                ${STUDY_GROUP_DETAILS}\n            `,\n            variables: {\n                id,\n            },\n        });\n\n        return this.getGroupByIdQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IFindGroupById>) => result.data.findGroupById),\n        );\n    }\n\n    refetchCurrentGroupById(groupId?: string): void {\n        if (groupId) {\n            this.getGroupById(groupId);\n        }\n\n        if (this.getGroupByIdQuery$) {\n            this.getGroupByIdQuery$.refetch();\n        }\n    }\n\n    createStudyGroup(createGroupInput: CreateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<ICreateStudyGroupMutation>({\n                mutation: gql`\n                    mutation CreateGroupMutation($createGroupInput: CreateStudyGroupInput) {\n                        createStudyGroup(createGroupInput: $createGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    createGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.createStudyGroup;\n                }),\n            );\n    }\n\n    updateStudyGroup(studyGroupInput: IUpdateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IUpdateStudyGroupMutation>({\n                mutation: gql`\n                    mutation UpdateStudyGroupMutation($studyGroupInput: UpdateStudyGroupInput) {\n                        updateStudyGroup(studyGroupInput: $studyGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    studyGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.studyGroup;\n                }),\n            );\n    }\n\n    removeStudyGroup(removeGroupInput: IRemoveGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IRemoveGroupMutation>({\n                mutation: gql`\n                    mutation RemoveStudyGroupMutation($removeGroupInput: RemoveStudyGroupInput) {\n                        removeStudyGroup(removeGroupInput: $removeGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    removeGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRemoveGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.group;\n                }),\n            );\n    }\n\n    addStudentToGroup(enrollmentInput: IAddStudentToGroupInput) {\n        return this.apollo\n            .mutate<IAddStudentToGroupMutation>({\n                mutation: gql`\n                    mutation AddStudentToGroupMutation($enrollmentInput: AddStudentToGroupInput) {\n                        addStudentToGroup(enrollmentInput: $enrollmentInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    enrollmentInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IAddStudentToGroupMutation>) => {\n                    this.classroomRefetch();\n                    this.refetchCurrentGroupById();\n                    return result.data.addStudentToGroup;\n                }),\n            );\n    }\n\n    revertFinishedClassStatus(\n        revertFinishedClassStatusInput: IRevertFinishedClassStatusInput,\n    ): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IRevertFinishedClassStatusMutation>({\n                mutation: gql`\n                    mutation revertFinishedClassStatusMutation(\n                        $revertFinishedClassStatusInput: RevertFinishedClassStatusInput\n                    ) {\n                        revertFinishedClassStatus(revertFinishedClassStatusInput: $revertFinishedClassStatusInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { revertFinishedClassStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertFinishedClassStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertFinishedClassStatus;\n                }),\n            );\n    }\n\n    revertLessonStatus(revertLessonStatusInput: IRevertLessonStatusInput): Observable<Lesson> {\n        return this.apollo\n            .mutate<IRevertLessonStatusMutation>({\n                mutation: gql`\n                    mutation revertLessonStatusMutation($revertLessonStatusInput: RevertLessonStatusInput) {\n                        revertLessonStatus(revertLessonStatusInput: $revertLessonStatusInput) {\n                            ...lessonSummary\n                        }\n                    }\n                    ${LESSON_SUMMARY}\n                `,\n                variables: { revertLessonStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertLessonStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertLessonStatus;\n                }),\n            );\n    }\n\n    activateEnrollment(enrollmentId: string): Observable<any> {\n        return this.apollo\n            .mutate<IActivateEnrollmentMutation>({\n                mutation: gql`\n                    mutation ActivateEnrollmentMutation($enrollmentId: ID) {\n                        activateEnrollment(enrollmentId: $enrollmentId) {\n                            id\n                        }\n                    }\n                `,\n                variables: { enrollmentId },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IActivateEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.updatedEnrollment;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "revertFinishedClassStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClassRecordType",
                    "optional": false,
                    "description": "",
                    "line": 122
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IRevertLessonStatusInput",
            "id": "interface-IRevertLessonStatusInput-393bbeee17eb6281c8a64cc8ff3beb12",
            "file": "src/app/@core/services/classroom.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\nimport {\n    ClassRecord,\n    ClassRecordType,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from '../models/class-record.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, SourceType, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\n\nimport { CreateStudyGroupInput } from 'app/classroom/pages/groups-page/groups-page.component';\nimport { ENROLLMENT_DETAIL } from 'app/@core/graphql/enrollment.graphql';\nimport { CLASSROOM_SUMMARY } from '../graphql/classroom.graphql';\nimport { CLASS_RECORD_SUMMARY } from '../graphql/class-record.graphql';\nimport { STUDY_GROUP_DETAILS, STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { LESSON_SUMMARY } from '../graphql/lesson.graphql';\nimport { Lesson } from '../models/lesson.model';\n\ninterface IStartClassMutation {\n    startClass: ClassRecord;\n}\n\nexport interface IStartClassInput {\n    lessonId: string;\n    levelId: string;\n    sourceId: string;\n    sourceType: SourceType;\n    teacherNotes?: string;\n}\n\ninterface ICreateEnrollmentMutation {\n    createEnrollment: Enrollment;\n}\n\ninterface IEnrollment {\n    enrollment: Enrollment;\n}\n\ninterface IGetEnrollments {\n    enrollments: Enrollment[];\n}\n\ninterface IFindGroupById {\n    findGroupById: StudyGroup;\n}\n\ninterface ICancelEnrollmentMutation {\n    cancelEnrollment: Enrollment;\n}\n\ninterface IChangeScheduleInput {\n    enrollmentId: string;\n    events: Event[];\n}\n\ninterface IChangeEnrollmentScheduleMutation {\n    changeEnrollmentSchedule: Enrollment;\n}\n\ninterface ICreateStudyGroupMutation {\n    createStudyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupMutation {\n    studyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupInput {\n    studyGroupId: string;\n    name: string;\n    events?: Event[];\n}\n\ninterface IRemoveGroupInput {\n    studyGroupId: string;\n}\n\ninterface IRemoveGroupMutation {\n    group: StudyGroup;\n}\n\ninterface StudyGroupAttendeInput {\n    studentId: string;\n    attended: boolean;\n}\ninterface IActivateEnrollmentMutation {\n    updatedEnrollment: Enrollment;\n}\n\nexport interface IFinishClassInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n    teacherNotes?: string;\n    status: string;\n    lessonStartedAt: string;\n    lessonEndedAt: string;\n    attendees?: StudyGroupAttendeInput[];\n}\n\ninterface IFinishClassMutation {\n    finishClass: ClassRecordType;\n}\n\ninterface ITransferEnrollmentMutation {\n    removeStudentFromGroup: Enrollment;\n}\nexport interface IRevertFinishedClassStatusInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n}\n\ninterface IRevertFinishedClassStatusMutation {\n    revertFinishedClassStatus: ClassRecordType;\n}\nexport interface IRevertLessonStatusInput {\n    sourceId: string;\n    sourceType: SourceType;\n    lessonId: string;\n}\n\ninterface IRevertLessonStatusMutation {\n    revertLessonStatus: Lesson;\n}\n\nexport interface Student {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    opened?: boolean; // front-end only field\n}\n\ninterface IClassroomQuery {\n    classroom: IClassroom;\n}\n\nexport interface IClassroom {\n    id?: string;\n    classInProgress?: ClassRecordType;\n    enrollments?: Enrollment[];\n    studyGroups?: StudyGroup[];\n    students?: Student[];\n    studentEnrollments?: Enrollment[];\n}\n\nexport interface IClassroomFiltersInput {\n    enrollmentStatus?: string;\n    studyGroupStatus?: string;\n}\n\ninterface IAddStudentToGroupMutation {\n    addStudentToGroup: Enrollment;\n}\ninterface IAddStudentToGroupInput {\n    id: string;\n    studyGroupId: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClassroomService {\n    private classInProgressSource = new BehaviorSubject<ClassRecord>(undefined);\n\n    public classInProgress$ = this.classInProgressSource.asObservable();\n\n    getGroupByIdQuery$: QueryRef<IFindGroupById>;\n    getEnrollmentQuery$: QueryRef<IEnrollment>;\n    classroomQuery$: QueryRef<IClassroomQuery>;\n\n    classroomFiltersInput: IClassroomFiltersInput = {\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    };\n\n    constructor(private apollo: Apollo) {}\n\n    getClassroom$(): Observable<IClassroom> {\n        this.classroomQuery$ = this.apollo.watchQuery({\n            query: gql`\n                query Classroom($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        ...classroomSummary\n                    }\n                }\n                ${CLASSROOM_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n\n        return this.classroomQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IClassroomQuery>) => {\n                const classInProgress = result.data.classroom.classInProgress;\n                if (!classInProgress) {\n                    this.classInProgressSource.next(null);\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        this.classInProgressSource.next({\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        });\n                    } else {\n                        this.classInProgressSource.next({\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        });\n                    }\n                }\n\n                return result.data.classroom;\n            }),\n            share(),\n        );\n    }\n\n    classroomRefetch(): void {\n        this.getClassroom$();\n        this.classroomQuery$.refetch();\n    }\n\n    setClassroomFiltersInput(filters: IClassroomFiltersInput = {}) {\n        this.classroomFiltersInput = { ...this.classroomFiltersInput, ...filters };\n    }\n\n    createEnrollmentInvitation(createEnrollmentInput: CreateEnrollmentInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICreateEnrollmentMutation>({\n                mutation: gql`\n                    mutation CreateEnrollment($enrollmentInput: EnrollmentInput, $invitedStudent: StudentInput) {\n                        createEnrollment(enrollmentInput: $enrollmentInput, invitedStudent: $invitedStudent) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    enrollmentInput: createEnrollmentInput.enrollmentInput,\n                    invitedStudent: createEnrollmentInput.invitedStudent,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateEnrollmentMutation>) => {\n                    return result.data.createEnrollment;\n                }),\n            );\n    }\n\n    getEnrollment(enrollmentId: string): Observable<Enrollment> {\n        this.getEnrollmentQuery$ = this.apollo.watchQuery({\n            query: gql`\n            {\n                enrollment(id: \"${enrollmentId}\") {\n                    ...enrollmentDetail\n                }\n            }\n            ${ENROLLMENT_DETAIL}\n            `,\n        });\n\n        return this.getEnrollmentQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IEnrollment>) => result.data.enrollment),\n        );\n    }\n\n    refetchEnrollment(): void {\n        if (this.getEnrollmentQuery$) {\n            this.getEnrollmentQuery$.refetch();\n        }\n    }\n\n    cancelEnrollment(id: string): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICancelEnrollmentMutation>({\n                mutation: gql`\n                    mutation CancelEnrollmentMutation {\n                        cancelEnrollment(id: \"${id}\") {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICancelEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.cancelEnrollment;\n                }),\n            );\n    }\n\n    changeEnrollmentSchedule(changeScheduleInput: IChangeScheduleInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<IChangeEnrollmentScheduleMutation>({\n                mutation: gql`\n                    mutation ChangeEnrollmentScheduleMutation($changeScheduleInput: ChangeScheduleInput) {\n                        changeEnrollmentSchedule(changeScheduleInput: $changeScheduleInput) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    changeScheduleInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeEnrollmentScheduleMutation>) => {\n                    return result.data.changeEnrollmentSchedule;\n                }),\n            );\n    }\n\n    transferEnrollment(id: string, events: Event[]) {\n        return this.apollo\n            .mutate<ITransferEnrollmentMutation>({\n                mutation: gql`\n                    mutation removeStudentFromGroup($id: id, $events: EventsInput) {\n                        removeStudentFromGroup(id: $id, events: $events) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    id,\n                    events,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ITransferEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.removeStudentFromGroup;\n                }),\n            );\n    }\n\n    startClass(startClassInput: IStartClassInput): Observable<ClassRecord> {\n        return this.apollo\n            .mutate<IStartClassMutation>({\n                mutation: gql`\n                    mutation StartClassMutation($startClassInput: StartClassInput) {\n                        startClass(startClassInput: $startClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { startClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IStartClassMutation>) => {\n                    const classInProgress = result.data.startClass;\n                    this.classInProgressSource.next(classInProgress);\n\n                    this.classroomRefetch();\n                    return classInProgress;\n                }),\n            );\n    }\n\n    finishClass(finishClassInput: IFinishClassInput): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IFinishClassMutation>({\n                mutation: gql`\n                    mutation FinishClassMutation($finishClassInput: FinishClassInput) {\n                        finishClass(finishClassInput: $finishClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { finishClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IFinishClassMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.finishClass;\n                }),\n            );\n    }\n\n    getGroupsQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query ClassroomQuery($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        id\n                        studyGroups {\n                            ...studyGroupSummary\n                        }\n                    }\n                }\n                ${STUDY_GROUP_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n    }\n\n    getGroupById(id: string): Observable<StudyGroup> {\n        this.getGroupByIdQuery$ = this.apollo.watchQuery<any>({\n            query: gql`\n                query findGroupById($id: String) {\n                    findGroupById(id: $id) {\n                        ...studyGroupDetails\n                    }\n                }\n                ${STUDY_GROUP_DETAILS}\n            `,\n            variables: {\n                id,\n            },\n        });\n\n        return this.getGroupByIdQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IFindGroupById>) => result.data.findGroupById),\n        );\n    }\n\n    refetchCurrentGroupById(groupId?: string): void {\n        if (groupId) {\n            this.getGroupById(groupId);\n        }\n\n        if (this.getGroupByIdQuery$) {\n            this.getGroupByIdQuery$.refetch();\n        }\n    }\n\n    createStudyGroup(createGroupInput: CreateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<ICreateStudyGroupMutation>({\n                mutation: gql`\n                    mutation CreateGroupMutation($createGroupInput: CreateStudyGroupInput) {\n                        createStudyGroup(createGroupInput: $createGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    createGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.createStudyGroup;\n                }),\n            );\n    }\n\n    updateStudyGroup(studyGroupInput: IUpdateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IUpdateStudyGroupMutation>({\n                mutation: gql`\n                    mutation UpdateStudyGroupMutation($studyGroupInput: UpdateStudyGroupInput) {\n                        updateStudyGroup(studyGroupInput: $studyGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    studyGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.studyGroup;\n                }),\n            );\n    }\n\n    removeStudyGroup(removeGroupInput: IRemoveGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IRemoveGroupMutation>({\n                mutation: gql`\n                    mutation RemoveStudyGroupMutation($removeGroupInput: RemoveStudyGroupInput) {\n                        removeStudyGroup(removeGroupInput: $removeGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    removeGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRemoveGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.group;\n                }),\n            );\n    }\n\n    addStudentToGroup(enrollmentInput: IAddStudentToGroupInput) {\n        return this.apollo\n            .mutate<IAddStudentToGroupMutation>({\n                mutation: gql`\n                    mutation AddStudentToGroupMutation($enrollmentInput: AddStudentToGroupInput) {\n                        addStudentToGroup(enrollmentInput: $enrollmentInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    enrollmentInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IAddStudentToGroupMutation>) => {\n                    this.classroomRefetch();\n                    this.refetchCurrentGroupById();\n                    return result.data.addStudentToGroup;\n                }),\n            );\n    }\n\n    revertFinishedClassStatus(\n        revertFinishedClassStatusInput: IRevertFinishedClassStatusInput,\n    ): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IRevertFinishedClassStatusMutation>({\n                mutation: gql`\n                    mutation revertFinishedClassStatusMutation(\n                        $revertFinishedClassStatusInput: RevertFinishedClassStatusInput\n                    ) {\n                        revertFinishedClassStatus(revertFinishedClassStatusInput: $revertFinishedClassStatusInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { revertFinishedClassStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertFinishedClassStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertFinishedClassStatus;\n                }),\n            );\n    }\n\n    revertLessonStatus(revertLessonStatusInput: IRevertLessonStatusInput): Observable<Lesson> {\n        return this.apollo\n            .mutate<IRevertLessonStatusMutation>({\n                mutation: gql`\n                    mutation revertLessonStatusMutation($revertLessonStatusInput: RevertLessonStatusInput) {\n                        revertLessonStatus(revertLessonStatusInput: $revertLessonStatusInput) {\n                            ...lessonSummary\n                        }\n                    }\n                    ${LESSON_SUMMARY}\n                `,\n                variables: { revertLessonStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertLessonStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertLessonStatus;\n                }),\n            );\n    }\n\n    activateEnrollment(enrollmentId: string): Observable<any> {\n        return this.apollo\n            .mutate<IActivateEnrollmentMutation>({\n                mutation: gql`\n                    mutation ActivateEnrollmentMutation($enrollmentId: ID) {\n                        activateEnrollment(enrollmentId: $enrollmentId) {\n                            id\n                        }\n                    }\n                `,\n                variables: { enrollmentId },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IActivateEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.updatedEnrollment;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "lessonId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 127
                },
                {
                    "name": "sourceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 125
                },
                {
                    "name": "sourceType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SourceType",
                    "optional": false,
                    "description": "",
                    "line": 126
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IRevertLessonStatusMutation",
            "id": "interface-IRevertLessonStatusMutation-393bbeee17eb6281c8a64cc8ff3beb12",
            "file": "src/app/@core/services/classroom.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\nimport {\n    ClassRecord,\n    ClassRecordType,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from '../models/class-record.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, SourceType, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\n\nimport { CreateStudyGroupInput } from 'app/classroom/pages/groups-page/groups-page.component';\nimport { ENROLLMENT_DETAIL } from 'app/@core/graphql/enrollment.graphql';\nimport { CLASSROOM_SUMMARY } from '../graphql/classroom.graphql';\nimport { CLASS_RECORD_SUMMARY } from '../graphql/class-record.graphql';\nimport { STUDY_GROUP_DETAILS, STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { LESSON_SUMMARY } from '../graphql/lesson.graphql';\nimport { Lesson } from '../models/lesson.model';\n\ninterface IStartClassMutation {\n    startClass: ClassRecord;\n}\n\nexport interface IStartClassInput {\n    lessonId: string;\n    levelId: string;\n    sourceId: string;\n    sourceType: SourceType;\n    teacherNotes?: string;\n}\n\ninterface ICreateEnrollmentMutation {\n    createEnrollment: Enrollment;\n}\n\ninterface IEnrollment {\n    enrollment: Enrollment;\n}\n\ninterface IGetEnrollments {\n    enrollments: Enrollment[];\n}\n\ninterface IFindGroupById {\n    findGroupById: StudyGroup;\n}\n\ninterface ICancelEnrollmentMutation {\n    cancelEnrollment: Enrollment;\n}\n\ninterface IChangeScheduleInput {\n    enrollmentId: string;\n    events: Event[];\n}\n\ninterface IChangeEnrollmentScheduleMutation {\n    changeEnrollmentSchedule: Enrollment;\n}\n\ninterface ICreateStudyGroupMutation {\n    createStudyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupMutation {\n    studyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupInput {\n    studyGroupId: string;\n    name: string;\n    events?: Event[];\n}\n\ninterface IRemoveGroupInput {\n    studyGroupId: string;\n}\n\ninterface IRemoveGroupMutation {\n    group: StudyGroup;\n}\n\ninterface StudyGroupAttendeInput {\n    studentId: string;\n    attended: boolean;\n}\ninterface IActivateEnrollmentMutation {\n    updatedEnrollment: Enrollment;\n}\n\nexport interface IFinishClassInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n    teacherNotes?: string;\n    status: string;\n    lessonStartedAt: string;\n    lessonEndedAt: string;\n    attendees?: StudyGroupAttendeInput[];\n}\n\ninterface IFinishClassMutation {\n    finishClass: ClassRecordType;\n}\n\ninterface ITransferEnrollmentMutation {\n    removeStudentFromGroup: Enrollment;\n}\nexport interface IRevertFinishedClassStatusInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n}\n\ninterface IRevertFinishedClassStatusMutation {\n    revertFinishedClassStatus: ClassRecordType;\n}\nexport interface IRevertLessonStatusInput {\n    sourceId: string;\n    sourceType: SourceType;\n    lessonId: string;\n}\n\ninterface IRevertLessonStatusMutation {\n    revertLessonStatus: Lesson;\n}\n\nexport interface Student {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    opened?: boolean; // front-end only field\n}\n\ninterface IClassroomQuery {\n    classroom: IClassroom;\n}\n\nexport interface IClassroom {\n    id?: string;\n    classInProgress?: ClassRecordType;\n    enrollments?: Enrollment[];\n    studyGroups?: StudyGroup[];\n    students?: Student[];\n    studentEnrollments?: Enrollment[];\n}\n\nexport interface IClassroomFiltersInput {\n    enrollmentStatus?: string;\n    studyGroupStatus?: string;\n}\n\ninterface IAddStudentToGroupMutation {\n    addStudentToGroup: Enrollment;\n}\ninterface IAddStudentToGroupInput {\n    id: string;\n    studyGroupId: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClassroomService {\n    private classInProgressSource = new BehaviorSubject<ClassRecord>(undefined);\n\n    public classInProgress$ = this.classInProgressSource.asObservable();\n\n    getGroupByIdQuery$: QueryRef<IFindGroupById>;\n    getEnrollmentQuery$: QueryRef<IEnrollment>;\n    classroomQuery$: QueryRef<IClassroomQuery>;\n\n    classroomFiltersInput: IClassroomFiltersInput = {\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    };\n\n    constructor(private apollo: Apollo) {}\n\n    getClassroom$(): Observable<IClassroom> {\n        this.classroomQuery$ = this.apollo.watchQuery({\n            query: gql`\n                query Classroom($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        ...classroomSummary\n                    }\n                }\n                ${CLASSROOM_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n\n        return this.classroomQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IClassroomQuery>) => {\n                const classInProgress = result.data.classroom.classInProgress;\n                if (!classInProgress) {\n                    this.classInProgressSource.next(null);\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        this.classInProgressSource.next({\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        });\n                    } else {\n                        this.classInProgressSource.next({\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        });\n                    }\n                }\n\n                return result.data.classroom;\n            }),\n            share(),\n        );\n    }\n\n    classroomRefetch(): void {\n        this.getClassroom$();\n        this.classroomQuery$.refetch();\n    }\n\n    setClassroomFiltersInput(filters: IClassroomFiltersInput = {}) {\n        this.classroomFiltersInput = { ...this.classroomFiltersInput, ...filters };\n    }\n\n    createEnrollmentInvitation(createEnrollmentInput: CreateEnrollmentInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICreateEnrollmentMutation>({\n                mutation: gql`\n                    mutation CreateEnrollment($enrollmentInput: EnrollmentInput, $invitedStudent: StudentInput) {\n                        createEnrollment(enrollmentInput: $enrollmentInput, invitedStudent: $invitedStudent) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    enrollmentInput: createEnrollmentInput.enrollmentInput,\n                    invitedStudent: createEnrollmentInput.invitedStudent,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateEnrollmentMutation>) => {\n                    return result.data.createEnrollment;\n                }),\n            );\n    }\n\n    getEnrollment(enrollmentId: string): Observable<Enrollment> {\n        this.getEnrollmentQuery$ = this.apollo.watchQuery({\n            query: gql`\n            {\n                enrollment(id: \"${enrollmentId}\") {\n                    ...enrollmentDetail\n                }\n            }\n            ${ENROLLMENT_DETAIL}\n            `,\n        });\n\n        return this.getEnrollmentQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IEnrollment>) => result.data.enrollment),\n        );\n    }\n\n    refetchEnrollment(): void {\n        if (this.getEnrollmentQuery$) {\n            this.getEnrollmentQuery$.refetch();\n        }\n    }\n\n    cancelEnrollment(id: string): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICancelEnrollmentMutation>({\n                mutation: gql`\n                    mutation CancelEnrollmentMutation {\n                        cancelEnrollment(id: \"${id}\") {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICancelEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.cancelEnrollment;\n                }),\n            );\n    }\n\n    changeEnrollmentSchedule(changeScheduleInput: IChangeScheduleInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<IChangeEnrollmentScheduleMutation>({\n                mutation: gql`\n                    mutation ChangeEnrollmentScheduleMutation($changeScheduleInput: ChangeScheduleInput) {\n                        changeEnrollmentSchedule(changeScheduleInput: $changeScheduleInput) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    changeScheduleInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeEnrollmentScheduleMutation>) => {\n                    return result.data.changeEnrollmentSchedule;\n                }),\n            );\n    }\n\n    transferEnrollment(id: string, events: Event[]) {\n        return this.apollo\n            .mutate<ITransferEnrollmentMutation>({\n                mutation: gql`\n                    mutation removeStudentFromGroup($id: id, $events: EventsInput) {\n                        removeStudentFromGroup(id: $id, events: $events) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    id,\n                    events,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ITransferEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.removeStudentFromGroup;\n                }),\n            );\n    }\n\n    startClass(startClassInput: IStartClassInput): Observable<ClassRecord> {\n        return this.apollo\n            .mutate<IStartClassMutation>({\n                mutation: gql`\n                    mutation StartClassMutation($startClassInput: StartClassInput) {\n                        startClass(startClassInput: $startClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { startClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IStartClassMutation>) => {\n                    const classInProgress = result.data.startClass;\n                    this.classInProgressSource.next(classInProgress);\n\n                    this.classroomRefetch();\n                    return classInProgress;\n                }),\n            );\n    }\n\n    finishClass(finishClassInput: IFinishClassInput): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IFinishClassMutation>({\n                mutation: gql`\n                    mutation FinishClassMutation($finishClassInput: FinishClassInput) {\n                        finishClass(finishClassInput: $finishClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { finishClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IFinishClassMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.finishClass;\n                }),\n            );\n    }\n\n    getGroupsQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query ClassroomQuery($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        id\n                        studyGroups {\n                            ...studyGroupSummary\n                        }\n                    }\n                }\n                ${STUDY_GROUP_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n    }\n\n    getGroupById(id: string): Observable<StudyGroup> {\n        this.getGroupByIdQuery$ = this.apollo.watchQuery<any>({\n            query: gql`\n                query findGroupById($id: String) {\n                    findGroupById(id: $id) {\n                        ...studyGroupDetails\n                    }\n                }\n                ${STUDY_GROUP_DETAILS}\n            `,\n            variables: {\n                id,\n            },\n        });\n\n        return this.getGroupByIdQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IFindGroupById>) => result.data.findGroupById),\n        );\n    }\n\n    refetchCurrentGroupById(groupId?: string): void {\n        if (groupId) {\n            this.getGroupById(groupId);\n        }\n\n        if (this.getGroupByIdQuery$) {\n            this.getGroupByIdQuery$.refetch();\n        }\n    }\n\n    createStudyGroup(createGroupInput: CreateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<ICreateStudyGroupMutation>({\n                mutation: gql`\n                    mutation CreateGroupMutation($createGroupInput: CreateStudyGroupInput) {\n                        createStudyGroup(createGroupInput: $createGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    createGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.createStudyGroup;\n                }),\n            );\n    }\n\n    updateStudyGroup(studyGroupInput: IUpdateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IUpdateStudyGroupMutation>({\n                mutation: gql`\n                    mutation UpdateStudyGroupMutation($studyGroupInput: UpdateStudyGroupInput) {\n                        updateStudyGroup(studyGroupInput: $studyGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    studyGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.studyGroup;\n                }),\n            );\n    }\n\n    removeStudyGroup(removeGroupInput: IRemoveGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IRemoveGroupMutation>({\n                mutation: gql`\n                    mutation RemoveStudyGroupMutation($removeGroupInput: RemoveStudyGroupInput) {\n                        removeStudyGroup(removeGroupInput: $removeGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    removeGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRemoveGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.group;\n                }),\n            );\n    }\n\n    addStudentToGroup(enrollmentInput: IAddStudentToGroupInput) {\n        return this.apollo\n            .mutate<IAddStudentToGroupMutation>({\n                mutation: gql`\n                    mutation AddStudentToGroupMutation($enrollmentInput: AddStudentToGroupInput) {\n                        addStudentToGroup(enrollmentInput: $enrollmentInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    enrollmentInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IAddStudentToGroupMutation>) => {\n                    this.classroomRefetch();\n                    this.refetchCurrentGroupById();\n                    return result.data.addStudentToGroup;\n                }),\n            );\n    }\n\n    revertFinishedClassStatus(\n        revertFinishedClassStatusInput: IRevertFinishedClassStatusInput,\n    ): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IRevertFinishedClassStatusMutation>({\n                mutation: gql`\n                    mutation revertFinishedClassStatusMutation(\n                        $revertFinishedClassStatusInput: RevertFinishedClassStatusInput\n                    ) {\n                        revertFinishedClassStatus(revertFinishedClassStatusInput: $revertFinishedClassStatusInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { revertFinishedClassStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertFinishedClassStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertFinishedClassStatus;\n                }),\n            );\n    }\n\n    revertLessonStatus(revertLessonStatusInput: IRevertLessonStatusInput): Observable<Lesson> {\n        return this.apollo\n            .mutate<IRevertLessonStatusMutation>({\n                mutation: gql`\n                    mutation revertLessonStatusMutation($revertLessonStatusInput: RevertLessonStatusInput) {\n                        revertLessonStatus(revertLessonStatusInput: $revertLessonStatusInput) {\n                            ...lessonSummary\n                        }\n                    }\n                    ${LESSON_SUMMARY}\n                `,\n                variables: { revertLessonStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertLessonStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertLessonStatus;\n                }),\n            );\n    }\n\n    activateEnrollment(enrollmentId: string): Observable<any> {\n        return this.apollo\n            .mutate<IActivateEnrollmentMutation>({\n                mutation: gql`\n                    mutation ActivateEnrollmentMutation($enrollmentId: ID) {\n                        activateEnrollment(enrollmentId: $enrollmentId) {\n                            id\n                        }\n                    }\n                `,\n                variables: { enrollmentId },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IActivateEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.updatedEnrollment;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "revertLessonStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Lesson",
                    "optional": false,
                    "description": "",
                    "line": 131
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IStartClassInput",
            "id": "interface-IStartClassInput-393bbeee17eb6281c8a64cc8ff3beb12",
            "file": "src/app/@core/services/classroom.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\nimport {\n    ClassRecord,\n    ClassRecordType,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from '../models/class-record.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, SourceType, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\n\nimport { CreateStudyGroupInput } from 'app/classroom/pages/groups-page/groups-page.component';\nimport { ENROLLMENT_DETAIL } from 'app/@core/graphql/enrollment.graphql';\nimport { CLASSROOM_SUMMARY } from '../graphql/classroom.graphql';\nimport { CLASS_RECORD_SUMMARY } from '../graphql/class-record.graphql';\nimport { STUDY_GROUP_DETAILS, STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { LESSON_SUMMARY } from '../graphql/lesson.graphql';\nimport { Lesson } from '../models/lesson.model';\n\ninterface IStartClassMutation {\n    startClass: ClassRecord;\n}\n\nexport interface IStartClassInput {\n    lessonId: string;\n    levelId: string;\n    sourceId: string;\n    sourceType: SourceType;\n    teacherNotes?: string;\n}\n\ninterface ICreateEnrollmentMutation {\n    createEnrollment: Enrollment;\n}\n\ninterface IEnrollment {\n    enrollment: Enrollment;\n}\n\ninterface IGetEnrollments {\n    enrollments: Enrollment[];\n}\n\ninterface IFindGroupById {\n    findGroupById: StudyGroup;\n}\n\ninterface ICancelEnrollmentMutation {\n    cancelEnrollment: Enrollment;\n}\n\ninterface IChangeScheduleInput {\n    enrollmentId: string;\n    events: Event[];\n}\n\ninterface IChangeEnrollmentScheduleMutation {\n    changeEnrollmentSchedule: Enrollment;\n}\n\ninterface ICreateStudyGroupMutation {\n    createStudyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupMutation {\n    studyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupInput {\n    studyGroupId: string;\n    name: string;\n    events?: Event[];\n}\n\ninterface IRemoveGroupInput {\n    studyGroupId: string;\n}\n\ninterface IRemoveGroupMutation {\n    group: StudyGroup;\n}\n\ninterface StudyGroupAttendeInput {\n    studentId: string;\n    attended: boolean;\n}\ninterface IActivateEnrollmentMutation {\n    updatedEnrollment: Enrollment;\n}\n\nexport interface IFinishClassInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n    teacherNotes?: string;\n    status: string;\n    lessonStartedAt: string;\n    lessonEndedAt: string;\n    attendees?: StudyGroupAttendeInput[];\n}\n\ninterface IFinishClassMutation {\n    finishClass: ClassRecordType;\n}\n\ninterface ITransferEnrollmentMutation {\n    removeStudentFromGroup: Enrollment;\n}\nexport interface IRevertFinishedClassStatusInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n}\n\ninterface IRevertFinishedClassStatusMutation {\n    revertFinishedClassStatus: ClassRecordType;\n}\nexport interface IRevertLessonStatusInput {\n    sourceId: string;\n    sourceType: SourceType;\n    lessonId: string;\n}\n\ninterface IRevertLessonStatusMutation {\n    revertLessonStatus: Lesson;\n}\n\nexport interface Student {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    opened?: boolean; // front-end only field\n}\n\ninterface IClassroomQuery {\n    classroom: IClassroom;\n}\n\nexport interface IClassroom {\n    id?: string;\n    classInProgress?: ClassRecordType;\n    enrollments?: Enrollment[];\n    studyGroups?: StudyGroup[];\n    students?: Student[];\n    studentEnrollments?: Enrollment[];\n}\n\nexport interface IClassroomFiltersInput {\n    enrollmentStatus?: string;\n    studyGroupStatus?: string;\n}\n\ninterface IAddStudentToGroupMutation {\n    addStudentToGroup: Enrollment;\n}\ninterface IAddStudentToGroupInput {\n    id: string;\n    studyGroupId: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClassroomService {\n    private classInProgressSource = new BehaviorSubject<ClassRecord>(undefined);\n\n    public classInProgress$ = this.classInProgressSource.asObservable();\n\n    getGroupByIdQuery$: QueryRef<IFindGroupById>;\n    getEnrollmentQuery$: QueryRef<IEnrollment>;\n    classroomQuery$: QueryRef<IClassroomQuery>;\n\n    classroomFiltersInput: IClassroomFiltersInput = {\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    };\n\n    constructor(private apollo: Apollo) {}\n\n    getClassroom$(): Observable<IClassroom> {\n        this.classroomQuery$ = this.apollo.watchQuery({\n            query: gql`\n                query Classroom($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        ...classroomSummary\n                    }\n                }\n                ${CLASSROOM_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n\n        return this.classroomQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IClassroomQuery>) => {\n                const classInProgress = result.data.classroom.classInProgress;\n                if (!classInProgress) {\n                    this.classInProgressSource.next(null);\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        this.classInProgressSource.next({\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        });\n                    } else {\n                        this.classInProgressSource.next({\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        });\n                    }\n                }\n\n                return result.data.classroom;\n            }),\n            share(),\n        );\n    }\n\n    classroomRefetch(): void {\n        this.getClassroom$();\n        this.classroomQuery$.refetch();\n    }\n\n    setClassroomFiltersInput(filters: IClassroomFiltersInput = {}) {\n        this.classroomFiltersInput = { ...this.classroomFiltersInput, ...filters };\n    }\n\n    createEnrollmentInvitation(createEnrollmentInput: CreateEnrollmentInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICreateEnrollmentMutation>({\n                mutation: gql`\n                    mutation CreateEnrollment($enrollmentInput: EnrollmentInput, $invitedStudent: StudentInput) {\n                        createEnrollment(enrollmentInput: $enrollmentInput, invitedStudent: $invitedStudent) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    enrollmentInput: createEnrollmentInput.enrollmentInput,\n                    invitedStudent: createEnrollmentInput.invitedStudent,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateEnrollmentMutation>) => {\n                    return result.data.createEnrollment;\n                }),\n            );\n    }\n\n    getEnrollment(enrollmentId: string): Observable<Enrollment> {\n        this.getEnrollmentQuery$ = this.apollo.watchQuery({\n            query: gql`\n            {\n                enrollment(id: \"${enrollmentId}\") {\n                    ...enrollmentDetail\n                }\n            }\n            ${ENROLLMENT_DETAIL}\n            `,\n        });\n\n        return this.getEnrollmentQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IEnrollment>) => result.data.enrollment),\n        );\n    }\n\n    refetchEnrollment(): void {\n        if (this.getEnrollmentQuery$) {\n            this.getEnrollmentQuery$.refetch();\n        }\n    }\n\n    cancelEnrollment(id: string): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICancelEnrollmentMutation>({\n                mutation: gql`\n                    mutation CancelEnrollmentMutation {\n                        cancelEnrollment(id: \"${id}\") {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICancelEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.cancelEnrollment;\n                }),\n            );\n    }\n\n    changeEnrollmentSchedule(changeScheduleInput: IChangeScheduleInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<IChangeEnrollmentScheduleMutation>({\n                mutation: gql`\n                    mutation ChangeEnrollmentScheduleMutation($changeScheduleInput: ChangeScheduleInput) {\n                        changeEnrollmentSchedule(changeScheduleInput: $changeScheduleInput) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    changeScheduleInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeEnrollmentScheduleMutation>) => {\n                    return result.data.changeEnrollmentSchedule;\n                }),\n            );\n    }\n\n    transferEnrollment(id: string, events: Event[]) {\n        return this.apollo\n            .mutate<ITransferEnrollmentMutation>({\n                mutation: gql`\n                    mutation removeStudentFromGroup($id: id, $events: EventsInput) {\n                        removeStudentFromGroup(id: $id, events: $events) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    id,\n                    events,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ITransferEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.removeStudentFromGroup;\n                }),\n            );\n    }\n\n    startClass(startClassInput: IStartClassInput): Observable<ClassRecord> {\n        return this.apollo\n            .mutate<IStartClassMutation>({\n                mutation: gql`\n                    mutation StartClassMutation($startClassInput: StartClassInput) {\n                        startClass(startClassInput: $startClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { startClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IStartClassMutation>) => {\n                    const classInProgress = result.data.startClass;\n                    this.classInProgressSource.next(classInProgress);\n\n                    this.classroomRefetch();\n                    return classInProgress;\n                }),\n            );\n    }\n\n    finishClass(finishClassInput: IFinishClassInput): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IFinishClassMutation>({\n                mutation: gql`\n                    mutation FinishClassMutation($finishClassInput: FinishClassInput) {\n                        finishClass(finishClassInput: $finishClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { finishClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IFinishClassMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.finishClass;\n                }),\n            );\n    }\n\n    getGroupsQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query ClassroomQuery($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        id\n                        studyGroups {\n                            ...studyGroupSummary\n                        }\n                    }\n                }\n                ${STUDY_GROUP_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n    }\n\n    getGroupById(id: string): Observable<StudyGroup> {\n        this.getGroupByIdQuery$ = this.apollo.watchQuery<any>({\n            query: gql`\n                query findGroupById($id: String) {\n                    findGroupById(id: $id) {\n                        ...studyGroupDetails\n                    }\n                }\n                ${STUDY_GROUP_DETAILS}\n            `,\n            variables: {\n                id,\n            },\n        });\n\n        return this.getGroupByIdQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IFindGroupById>) => result.data.findGroupById),\n        );\n    }\n\n    refetchCurrentGroupById(groupId?: string): void {\n        if (groupId) {\n            this.getGroupById(groupId);\n        }\n\n        if (this.getGroupByIdQuery$) {\n            this.getGroupByIdQuery$.refetch();\n        }\n    }\n\n    createStudyGroup(createGroupInput: CreateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<ICreateStudyGroupMutation>({\n                mutation: gql`\n                    mutation CreateGroupMutation($createGroupInput: CreateStudyGroupInput) {\n                        createStudyGroup(createGroupInput: $createGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    createGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.createStudyGroup;\n                }),\n            );\n    }\n\n    updateStudyGroup(studyGroupInput: IUpdateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IUpdateStudyGroupMutation>({\n                mutation: gql`\n                    mutation UpdateStudyGroupMutation($studyGroupInput: UpdateStudyGroupInput) {\n                        updateStudyGroup(studyGroupInput: $studyGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    studyGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.studyGroup;\n                }),\n            );\n    }\n\n    removeStudyGroup(removeGroupInput: IRemoveGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IRemoveGroupMutation>({\n                mutation: gql`\n                    mutation RemoveStudyGroupMutation($removeGroupInput: RemoveStudyGroupInput) {\n                        removeStudyGroup(removeGroupInput: $removeGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    removeGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRemoveGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.group;\n                }),\n            );\n    }\n\n    addStudentToGroup(enrollmentInput: IAddStudentToGroupInput) {\n        return this.apollo\n            .mutate<IAddStudentToGroupMutation>({\n                mutation: gql`\n                    mutation AddStudentToGroupMutation($enrollmentInput: AddStudentToGroupInput) {\n                        addStudentToGroup(enrollmentInput: $enrollmentInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    enrollmentInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IAddStudentToGroupMutation>) => {\n                    this.classroomRefetch();\n                    this.refetchCurrentGroupById();\n                    return result.data.addStudentToGroup;\n                }),\n            );\n    }\n\n    revertFinishedClassStatus(\n        revertFinishedClassStatusInput: IRevertFinishedClassStatusInput,\n    ): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IRevertFinishedClassStatusMutation>({\n                mutation: gql`\n                    mutation revertFinishedClassStatusMutation(\n                        $revertFinishedClassStatusInput: RevertFinishedClassStatusInput\n                    ) {\n                        revertFinishedClassStatus(revertFinishedClassStatusInput: $revertFinishedClassStatusInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { revertFinishedClassStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertFinishedClassStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertFinishedClassStatus;\n                }),\n            );\n    }\n\n    revertLessonStatus(revertLessonStatusInput: IRevertLessonStatusInput): Observable<Lesson> {\n        return this.apollo\n            .mutate<IRevertLessonStatusMutation>({\n                mutation: gql`\n                    mutation revertLessonStatusMutation($revertLessonStatusInput: RevertLessonStatusInput) {\n                        revertLessonStatus(revertLessonStatusInput: $revertLessonStatusInput) {\n                            ...lessonSummary\n                        }\n                    }\n                    ${LESSON_SUMMARY}\n                `,\n                variables: { revertLessonStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertLessonStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertLessonStatus;\n                }),\n            );\n    }\n\n    activateEnrollment(enrollmentId: string): Observable<any> {\n        return this.apollo\n            .mutate<IActivateEnrollmentMutation>({\n                mutation: gql`\n                    mutation ActivateEnrollmentMutation($enrollmentId: ID) {\n                        activateEnrollment(enrollmentId: $enrollmentId) {\n                            id\n                        }\n                    }\n                `,\n                variables: { enrollmentId },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IActivateEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.updatedEnrollment;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "lessonId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "levelId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "sourceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "sourceType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SourceType",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "teacherNotes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IStartClassMutation",
            "id": "interface-IStartClassMutation-393bbeee17eb6281c8a64cc8ff3beb12",
            "file": "src/app/@core/services/classroom.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\nimport {\n    ClassRecord,\n    ClassRecordType,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from '../models/class-record.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, SourceType, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\n\nimport { CreateStudyGroupInput } from 'app/classroom/pages/groups-page/groups-page.component';\nimport { ENROLLMENT_DETAIL } from 'app/@core/graphql/enrollment.graphql';\nimport { CLASSROOM_SUMMARY } from '../graphql/classroom.graphql';\nimport { CLASS_RECORD_SUMMARY } from '../graphql/class-record.graphql';\nimport { STUDY_GROUP_DETAILS, STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { LESSON_SUMMARY } from '../graphql/lesson.graphql';\nimport { Lesson } from '../models/lesson.model';\n\ninterface IStartClassMutation {\n    startClass: ClassRecord;\n}\n\nexport interface IStartClassInput {\n    lessonId: string;\n    levelId: string;\n    sourceId: string;\n    sourceType: SourceType;\n    teacherNotes?: string;\n}\n\ninterface ICreateEnrollmentMutation {\n    createEnrollment: Enrollment;\n}\n\ninterface IEnrollment {\n    enrollment: Enrollment;\n}\n\ninterface IGetEnrollments {\n    enrollments: Enrollment[];\n}\n\ninterface IFindGroupById {\n    findGroupById: StudyGroup;\n}\n\ninterface ICancelEnrollmentMutation {\n    cancelEnrollment: Enrollment;\n}\n\ninterface IChangeScheduleInput {\n    enrollmentId: string;\n    events: Event[];\n}\n\ninterface IChangeEnrollmentScheduleMutation {\n    changeEnrollmentSchedule: Enrollment;\n}\n\ninterface ICreateStudyGroupMutation {\n    createStudyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupMutation {\n    studyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupInput {\n    studyGroupId: string;\n    name: string;\n    events?: Event[];\n}\n\ninterface IRemoveGroupInput {\n    studyGroupId: string;\n}\n\ninterface IRemoveGroupMutation {\n    group: StudyGroup;\n}\n\ninterface StudyGroupAttendeInput {\n    studentId: string;\n    attended: boolean;\n}\ninterface IActivateEnrollmentMutation {\n    updatedEnrollment: Enrollment;\n}\n\nexport interface IFinishClassInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n    teacherNotes?: string;\n    status: string;\n    lessonStartedAt: string;\n    lessonEndedAt: string;\n    attendees?: StudyGroupAttendeInput[];\n}\n\ninterface IFinishClassMutation {\n    finishClass: ClassRecordType;\n}\n\ninterface ITransferEnrollmentMutation {\n    removeStudentFromGroup: Enrollment;\n}\nexport interface IRevertFinishedClassStatusInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n}\n\ninterface IRevertFinishedClassStatusMutation {\n    revertFinishedClassStatus: ClassRecordType;\n}\nexport interface IRevertLessonStatusInput {\n    sourceId: string;\n    sourceType: SourceType;\n    lessonId: string;\n}\n\ninterface IRevertLessonStatusMutation {\n    revertLessonStatus: Lesson;\n}\n\nexport interface Student {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    opened?: boolean; // front-end only field\n}\n\ninterface IClassroomQuery {\n    classroom: IClassroom;\n}\n\nexport interface IClassroom {\n    id?: string;\n    classInProgress?: ClassRecordType;\n    enrollments?: Enrollment[];\n    studyGroups?: StudyGroup[];\n    students?: Student[];\n    studentEnrollments?: Enrollment[];\n}\n\nexport interface IClassroomFiltersInput {\n    enrollmentStatus?: string;\n    studyGroupStatus?: string;\n}\n\ninterface IAddStudentToGroupMutation {\n    addStudentToGroup: Enrollment;\n}\ninterface IAddStudentToGroupInput {\n    id: string;\n    studyGroupId: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClassroomService {\n    private classInProgressSource = new BehaviorSubject<ClassRecord>(undefined);\n\n    public classInProgress$ = this.classInProgressSource.asObservable();\n\n    getGroupByIdQuery$: QueryRef<IFindGroupById>;\n    getEnrollmentQuery$: QueryRef<IEnrollment>;\n    classroomQuery$: QueryRef<IClassroomQuery>;\n\n    classroomFiltersInput: IClassroomFiltersInput = {\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    };\n\n    constructor(private apollo: Apollo) {}\n\n    getClassroom$(): Observable<IClassroom> {\n        this.classroomQuery$ = this.apollo.watchQuery({\n            query: gql`\n                query Classroom($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        ...classroomSummary\n                    }\n                }\n                ${CLASSROOM_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n\n        return this.classroomQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IClassroomQuery>) => {\n                const classInProgress = result.data.classroom.classInProgress;\n                if (!classInProgress) {\n                    this.classInProgressSource.next(null);\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        this.classInProgressSource.next({\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        });\n                    } else {\n                        this.classInProgressSource.next({\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        });\n                    }\n                }\n\n                return result.data.classroom;\n            }),\n            share(),\n        );\n    }\n\n    classroomRefetch(): void {\n        this.getClassroom$();\n        this.classroomQuery$.refetch();\n    }\n\n    setClassroomFiltersInput(filters: IClassroomFiltersInput = {}) {\n        this.classroomFiltersInput = { ...this.classroomFiltersInput, ...filters };\n    }\n\n    createEnrollmentInvitation(createEnrollmentInput: CreateEnrollmentInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICreateEnrollmentMutation>({\n                mutation: gql`\n                    mutation CreateEnrollment($enrollmentInput: EnrollmentInput, $invitedStudent: StudentInput) {\n                        createEnrollment(enrollmentInput: $enrollmentInput, invitedStudent: $invitedStudent) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    enrollmentInput: createEnrollmentInput.enrollmentInput,\n                    invitedStudent: createEnrollmentInput.invitedStudent,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateEnrollmentMutation>) => {\n                    return result.data.createEnrollment;\n                }),\n            );\n    }\n\n    getEnrollment(enrollmentId: string): Observable<Enrollment> {\n        this.getEnrollmentQuery$ = this.apollo.watchQuery({\n            query: gql`\n            {\n                enrollment(id: \"${enrollmentId}\") {\n                    ...enrollmentDetail\n                }\n            }\n            ${ENROLLMENT_DETAIL}\n            `,\n        });\n\n        return this.getEnrollmentQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IEnrollment>) => result.data.enrollment),\n        );\n    }\n\n    refetchEnrollment(): void {\n        if (this.getEnrollmentQuery$) {\n            this.getEnrollmentQuery$.refetch();\n        }\n    }\n\n    cancelEnrollment(id: string): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICancelEnrollmentMutation>({\n                mutation: gql`\n                    mutation CancelEnrollmentMutation {\n                        cancelEnrollment(id: \"${id}\") {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICancelEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.cancelEnrollment;\n                }),\n            );\n    }\n\n    changeEnrollmentSchedule(changeScheduleInput: IChangeScheduleInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<IChangeEnrollmentScheduleMutation>({\n                mutation: gql`\n                    mutation ChangeEnrollmentScheduleMutation($changeScheduleInput: ChangeScheduleInput) {\n                        changeEnrollmentSchedule(changeScheduleInput: $changeScheduleInput) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    changeScheduleInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeEnrollmentScheduleMutation>) => {\n                    return result.data.changeEnrollmentSchedule;\n                }),\n            );\n    }\n\n    transferEnrollment(id: string, events: Event[]) {\n        return this.apollo\n            .mutate<ITransferEnrollmentMutation>({\n                mutation: gql`\n                    mutation removeStudentFromGroup($id: id, $events: EventsInput) {\n                        removeStudentFromGroup(id: $id, events: $events) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    id,\n                    events,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ITransferEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.removeStudentFromGroup;\n                }),\n            );\n    }\n\n    startClass(startClassInput: IStartClassInput): Observable<ClassRecord> {\n        return this.apollo\n            .mutate<IStartClassMutation>({\n                mutation: gql`\n                    mutation StartClassMutation($startClassInput: StartClassInput) {\n                        startClass(startClassInput: $startClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { startClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IStartClassMutation>) => {\n                    const classInProgress = result.data.startClass;\n                    this.classInProgressSource.next(classInProgress);\n\n                    this.classroomRefetch();\n                    return classInProgress;\n                }),\n            );\n    }\n\n    finishClass(finishClassInput: IFinishClassInput): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IFinishClassMutation>({\n                mutation: gql`\n                    mutation FinishClassMutation($finishClassInput: FinishClassInput) {\n                        finishClass(finishClassInput: $finishClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { finishClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IFinishClassMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.finishClass;\n                }),\n            );\n    }\n\n    getGroupsQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query ClassroomQuery($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        id\n                        studyGroups {\n                            ...studyGroupSummary\n                        }\n                    }\n                }\n                ${STUDY_GROUP_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n    }\n\n    getGroupById(id: string): Observable<StudyGroup> {\n        this.getGroupByIdQuery$ = this.apollo.watchQuery<any>({\n            query: gql`\n                query findGroupById($id: String) {\n                    findGroupById(id: $id) {\n                        ...studyGroupDetails\n                    }\n                }\n                ${STUDY_GROUP_DETAILS}\n            `,\n            variables: {\n                id,\n            },\n        });\n\n        return this.getGroupByIdQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IFindGroupById>) => result.data.findGroupById),\n        );\n    }\n\n    refetchCurrentGroupById(groupId?: string): void {\n        if (groupId) {\n            this.getGroupById(groupId);\n        }\n\n        if (this.getGroupByIdQuery$) {\n            this.getGroupByIdQuery$.refetch();\n        }\n    }\n\n    createStudyGroup(createGroupInput: CreateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<ICreateStudyGroupMutation>({\n                mutation: gql`\n                    mutation CreateGroupMutation($createGroupInput: CreateStudyGroupInput) {\n                        createStudyGroup(createGroupInput: $createGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    createGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.createStudyGroup;\n                }),\n            );\n    }\n\n    updateStudyGroup(studyGroupInput: IUpdateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IUpdateStudyGroupMutation>({\n                mutation: gql`\n                    mutation UpdateStudyGroupMutation($studyGroupInput: UpdateStudyGroupInput) {\n                        updateStudyGroup(studyGroupInput: $studyGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    studyGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.studyGroup;\n                }),\n            );\n    }\n\n    removeStudyGroup(removeGroupInput: IRemoveGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IRemoveGroupMutation>({\n                mutation: gql`\n                    mutation RemoveStudyGroupMutation($removeGroupInput: RemoveStudyGroupInput) {\n                        removeStudyGroup(removeGroupInput: $removeGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    removeGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRemoveGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.group;\n                }),\n            );\n    }\n\n    addStudentToGroup(enrollmentInput: IAddStudentToGroupInput) {\n        return this.apollo\n            .mutate<IAddStudentToGroupMutation>({\n                mutation: gql`\n                    mutation AddStudentToGroupMutation($enrollmentInput: AddStudentToGroupInput) {\n                        addStudentToGroup(enrollmentInput: $enrollmentInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    enrollmentInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IAddStudentToGroupMutation>) => {\n                    this.classroomRefetch();\n                    this.refetchCurrentGroupById();\n                    return result.data.addStudentToGroup;\n                }),\n            );\n    }\n\n    revertFinishedClassStatus(\n        revertFinishedClassStatusInput: IRevertFinishedClassStatusInput,\n    ): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IRevertFinishedClassStatusMutation>({\n                mutation: gql`\n                    mutation revertFinishedClassStatusMutation(\n                        $revertFinishedClassStatusInput: RevertFinishedClassStatusInput\n                    ) {\n                        revertFinishedClassStatus(revertFinishedClassStatusInput: $revertFinishedClassStatusInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { revertFinishedClassStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertFinishedClassStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertFinishedClassStatus;\n                }),\n            );\n    }\n\n    revertLessonStatus(revertLessonStatusInput: IRevertLessonStatusInput): Observable<Lesson> {\n        return this.apollo\n            .mutate<IRevertLessonStatusMutation>({\n                mutation: gql`\n                    mutation revertLessonStatusMutation($revertLessonStatusInput: RevertLessonStatusInput) {\n                        revertLessonStatus(revertLessonStatusInput: $revertLessonStatusInput) {\n                            ...lessonSummary\n                        }\n                    }\n                    ${LESSON_SUMMARY}\n                `,\n                variables: { revertLessonStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertLessonStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertLessonStatus;\n                }),\n            );\n    }\n\n    activateEnrollment(enrollmentId: string): Observable<any> {\n        return this.apollo\n            .mutate<IActivateEnrollmentMutation>({\n                mutation: gql`\n                    mutation ActivateEnrollmentMutation($enrollmentId: ID) {\n                        activateEnrollment(enrollmentId: $enrollmentId) {\n                            id\n                        }\n                    }\n                `,\n                variables: { enrollmentId },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IActivateEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.updatedEnrollment;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "startClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClassRecord",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IStudent",
            "id": "interface-IStudent-5921675772b370cedd277a2e5dcff83a",
            "file": "src/app/@core/services/dashboard.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql } from 'apollo-angular';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ENROLLMENT_DETAIL } from '../graphql/enrollment.graphql';\nimport { STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { Enrollment } from '../models/enrollment.model';\nimport { EventOccurrence } from '../models/event-occurrence.model';\nimport { Subscription } from '../models/subscription.model';\n\ninterface IStudent {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    displayName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    subscriptions?: Subscription[];\n}\n\ninterface ITeacherDashboard {\n    nextEvents: EventOccurrence[];\n    students: IStudent[];\n}\n\ninterface ITeacherDashboardQuery {\n    teacherDashboard: ITeacherDashboard;\n}\n\ninterface IStudentDashboard {\n    nextEvent: EventOccurrence;\n    subscriptions: Subscription[];\n}\n\ninterface IStudentDashboardQuery {\n    studentDashboard: IStudentDashboard;\n}\n\nexport interface IDashboardFilters {\n    subscriptionsStatus?: string;\n    subscriptionsExpiringInDays?: number;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DashboardService {\n    constructor(private apollo: Apollo) {}\n\n    getTeacherDashboard(\n        filters: IDashboardFilters = { subscriptionsStatus: 'ACTIVE', subscriptionsExpiringInDays: 30 },\n    ): Observable<ITeacherDashboard> {\n        return this.apollo\n            .watchQuery<ITeacherDashboardQuery>({\n                query: gql`\n                    query TeacherDashboard($filters: DashboardFilters) {\n                        teacherDashboard(filters: $filters) {\n                            id\n                            nextEvents {\n                                id\n                                title\n                                description\n                                startDateTime\n                                enrollment {\n                                    id\n                                }\n                                studyGroup {\n                                    id\n                                }\n                            }\n                            students {\n                                id\n                                firstName\n                                familyName\n                                displayName\n                                enrollments {\n                                    id\n                                    studyGroup {\n                                        id\n                                    }\n                                }\n                                subscriptions {\n                                    id\n                                    renewalDate\n                                }\n                            }\n                        }\n                    }\n                `,\n                variables: {\n                    filters,\n                },\n            })\n            .valueChanges.pipe(\n                map((result: ApolloQueryResult<ITeacherDashboardQuery>) => result.data.teacherDashboard),\n            );\n    }\n\n    getStudentDashboard(\n        filters: IDashboardFilters = { subscriptionsStatus: 'ACTIVE', subscriptionsExpiringInDays: 100 },\n    ): Observable<IStudentDashboard> {\n        return this.apollo\n            .watchQuery<IStudentDashboardQuery>({\n                query: gql`\n                    query StudentDashboardQuery($filters: DashboardFilters) {\n                        studentDashboard(filters: $filters) {\n                            id\n                            nextEvent {\n                                id\n                                title\n                                description\n                                startDateTime\n                                enrollment {\n                                    ...enrollmentDetail\n                                }\n                                studyGroup {\n                                    ...studyGroupSummary\n                                }\n                            }\n                            subscriptions {\n                                id\n                                renewalDate\n                            }\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                    ${STUDY_GROUP_SUMMARY}\n                `,\n                variables: {\n                    filters,\n                },\n            })\n            .valueChanges.pipe(\n                map((result: ApolloQueryResult<IStudentDashboardQuery>) => result.data.studentDashboard),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "enrollments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Enrollment[]",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "familyName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "primaryEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "subscriptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": true,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IStudentDashboard",
            "id": "interface-IStudentDashboard-5921675772b370cedd277a2e5dcff83a",
            "file": "src/app/@core/services/dashboard.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql } from 'apollo-angular';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ENROLLMENT_DETAIL } from '../graphql/enrollment.graphql';\nimport { STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { Enrollment } from '../models/enrollment.model';\nimport { EventOccurrence } from '../models/event-occurrence.model';\nimport { Subscription } from '../models/subscription.model';\n\ninterface IStudent {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    displayName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    subscriptions?: Subscription[];\n}\n\ninterface ITeacherDashboard {\n    nextEvents: EventOccurrence[];\n    students: IStudent[];\n}\n\ninterface ITeacherDashboardQuery {\n    teacherDashboard: ITeacherDashboard;\n}\n\ninterface IStudentDashboard {\n    nextEvent: EventOccurrence;\n    subscriptions: Subscription[];\n}\n\ninterface IStudentDashboardQuery {\n    studentDashboard: IStudentDashboard;\n}\n\nexport interface IDashboardFilters {\n    subscriptionsStatus?: string;\n    subscriptionsExpiringInDays?: number;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DashboardService {\n    constructor(private apollo: Apollo) {}\n\n    getTeacherDashboard(\n        filters: IDashboardFilters = { subscriptionsStatus: 'ACTIVE', subscriptionsExpiringInDays: 30 },\n    ): Observable<ITeacherDashboard> {\n        return this.apollo\n            .watchQuery<ITeacherDashboardQuery>({\n                query: gql`\n                    query TeacherDashboard($filters: DashboardFilters) {\n                        teacherDashboard(filters: $filters) {\n                            id\n                            nextEvents {\n                                id\n                                title\n                                description\n                                startDateTime\n                                enrollment {\n                                    id\n                                }\n                                studyGroup {\n                                    id\n                                }\n                            }\n                            students {\n                                id\n                                firstName\n                                familyName\n                                displayName\n                                enrollments {\n                                    id\n                                    studyGroup {\n                                        id\n                                    }\n                                }\n                                subscriptions {\n                                    id\n                                    renewalDate\n                                }\n                            }\n                        }\n                    }\n                `,\n                variables: {\n                    filters,\n                },\n            })\n            .valueChanges.pipe(\n                map((result: ApolloQueryResult<ITeacherDashboardQuery>) => result.data.teacherDashboard),\n            );\n    }\n\n    getStudentDashboard(\n        filters: IDashboardFilters = { subscriptionsStatus: 'ACTIVE', subscriptionsExpiringInDays: 100 },\n    ): Observable<IStudentDashboard> {\n        return this.apollo\n            .watchQuery<IStudentDashboardQuery>({\n                query: gql`\n                    query StudentDashboardQuery($filters: DashboardFilters) {\n                        studentDashboard(filters: $filters) {\n                            id\n                            nextEvent {\n                                id\n                                title\n                                description\n                                startDateTime\n                                enrollment {\n                                    ...enrollmentDetail\n                                }\n                                studyGroup {\n                                    ...studyGroupSummary\n                                }\n                            }\n                            subscriptions {\n                                id\n                                renewalDate\n                            }\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                    ${STUDY_GROUP_SUMMARY}\n                `,\n                variables: {\n                    filters,\n                },\n            })\n            .valueChanges.pipe(\n                map((result: ApolloQueryResult<IStudentDashboardQuery>) => result.data.studentDashboard),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "nextEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventOccurrence",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "subscriptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IStudentDashboardQuery",
            "id": "interface-IStudentDashboardQuery-5921675772b370cedd277a2e5dcff83a",
            "file": "src/app/@core/services/dashboard.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql } from 'apollo-angular';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ENROLLMENT_DETAIL } from '../graphql/enrollment.graphql';\nimport { STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { Enrollment } from '../models/enrollment.model';\nimport { EventOccurrence } from '../models/event-occurrence.model';\nimport { Subscription } from '../models/subscription.model';\n\ninterface IStudent {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    displayName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    subscriptions?: Subscription[];\n}\n\ninterface ITeacherDashboard {\n    nextEvents: EventOccurrence[];\n    students: IStudent[];\n}\n\ninterface ITeacherDashboardQuery {\n    teacherDashboard: ITeacherDashboard;\n}\n\ninterface IStudentDashboard {\n    nextEvent: EventOccurrence;\n    subscriptions: Subscription[];\n}\n\ninterface IStudentDashboardQuery {\n    studentDashboard: IStudentDashboard;\n}\n\nexport interface IDashboardFilters {\n    subscriptionsStatus?: string;\n    subscriptionsExpiringInDays?: number;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DashboardService {\n    constructor(private apollo: Apollo) {}\n\n    getTeacherDashboard(\n        filters: IDashboardFilters = { subscriptionsStatus: 'ACTIVE', subscriptionsExpiringInDays: 30 },\n    ): Observable<ITeacherDashboard> {\n        return this.apollo\n            .watchQuery<ITeacherDashboardQuery>({\n                query: gql`\n                    query TeacherDashboard($filters: DashboardFilters) {\n                        teacherDashboard(filters: $filters) {\n                            id\n                            nextEvents {\n                                id\n                                title\n                                description\n                                startDateTime\n                                enrollment {\n                                    id\n                                }\n                                studyGroup {\n                                    id\n                                }\n                            }\n                            students {\n                                id\n                                firstName\n                                familyName\n                                displayName\n                                enrollments {\n                                    id\n                                    studyGroup {\n                                        id\n                                    }\n                                }\n                                subscriptions {\n                                    id\n                                    renewalDate\n                                }\n                            }\n                        }\n                    }\n                `,\n                variables: {\n                    filters,\n                },\n            })\n            .valueChanges.pipe(\n                map((result: ApolloQueryResult<ITeacherDashboardQuery>) => result.data.teacherDashboard),\n            );\n    }\n\n    getStudentDashboard(\n        filters: IDashboardFilters = { subscriptionsStatus: 'ACTIVE', subscriptionsExpiringInDays: 100 },\n    ): Observable<IStudentDashboard> {\n        return this.apollo\n            .watchQuery<IStudentDashboardQuery>({\n                query: gql`\n                    query StudentDashboardQuery($filters: DashboardFilters) {\n                        studentDashboard(filters: $filters) {\n                            id\n                            nextEvent {\n                                id\n                                title\n                                description\n                                startDateTime\n                                enrollment {\n                                    ...enrollmentDetail\n                                }\n                                studyGroup {\n                                    ...studyGroupSummary\n                                }\n                            }\n                            subscriptions {\n                                id\n                                renewalDate\n                            }\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                    ${STUDY_GROUP_SUMMARY}\n                `,\n                variables: {\n                    filters,\n                },\n            })\n            .valueChanges.pipe(\n                map((result: ApolloQueryResult<IStudentDashboardQuery>) => result.data.studentDashboard),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "studentDashboard",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IStudentDashboard",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ITab",
            "id": "interface-ITab-2ea6cd6a97ca27431ee1c481f4636b9e",
            "file": "src/app/classroom/components/invitation-dialog/invitation-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, HostListener, Inject, OnDestroy, OnInit } from '@angular/core';\nimport { MediaObserver } from '@angular/flex-layout';\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef, MatDialog } from '@angular/material/dialog';\nimport { Enrollment, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\nimport { ClassroomService } from 'app/@core/services/classroom.service';\nimport {\n    EventHasNoDaySelectedValidator,\n    EventHasScheduleConflictValidator,\n    EventHasStartAndEndTimeConflictValidator,\n    EventsWithSameDateValidator,\n} from 'app/@shared/components/calendar/schedule-input/validators';\nimport {\n    ModalConfirmationComponent,\n    ModalConfirmationDataOptions,\n} from 'app/@shared/components/modal-confirmation/modal-confirmation.component';\nimport { combineLatest, EMPTY, of, Subject } from 'rxjs';\nimport { debounceTime, map, skip, startWith, switchMap, take, takeUntil } from 'rxjs/operators';\n\nexport interface ITab {\n    title?: string;\n    active?: boolean;\n    icon?: string;\n    completed?: boolean;\n}\n\n@Component({\n    selector: 'app-invitation-dialog',\n    templateUrl: './invitation-dialog.component.html',\n    styleUrls: ['./invitation-dialog.component.scss'],\n})\nexport class InvitationDialogComponent implements OnInit, OnDestroy {\n    private destroy$ = new Subject<void>();\n    private resetEventsFormTimeout: ReturnType<typeof setTimeout>;\n\n    studentForm = new FormGroup({\n        studentInfo: new FormGroup({\n            firstName: new FormControl('', [Validators.required]),\n            lastName: new FormControl('', [Validators.required]),\n            email: new FormControl('', [Validators.required, Validators.email]),\n        }),\n        // sourceType: new FormControl('', [Validators.required]),\n        selectedGroup: new FormControl(''),\n    });\n\n    groupForm = new FormGroup({\n        name: new FormControl('', [Validators.required]),\n    });\n\n    courseForm = new FormGroup({\n        sourceType: new FormControl('', [Validators.required]),\n        program: new FormControl('', [Validators.required]),\n        level: new FormControl('', [Validators.required]),\n    });\n\n    eventsForm = new FormGroup({\n        events: new FormArray([], [Validators.required], [EventsWithSameDateValidator.validate()]),\n    });\n\n    formProgress = 0;\n    studentInfoTabCompleted = false;\n    courseTabCompleted = false;\n    scheduleTabCompleted = false;\n\n    groups$ = of([]);\n\n    @HostListener('document:keydown.escape', ['$event'])\n    handleKeyDown(event: KeyboardEvent) {\n        this.dialogRef.close();\n    }\n\n    constructor(\n        private mediaObserver: MediaObserver,\n        private dialog: MatDialog,\n        private dialogRef: MatDialogRef<InvitationDialogComponent>,\n        private formBuilder: FormBuilder,\n        private classroomService: ClassroomService,\n        @Inject(MAT_DIALOG_DATA)\n        public data: {\n            tabs: ITab[];\n            enrollment: Enrollment;\n            type: string;\n            group: StudyGroup;\n            selectedGroup: StudyGroup;\n        },\n    ) {}\n\n    ngOnInit() {\n        this.tabs[0].active = true;\n\n        if (this.type === 'student') {\n            this.checkEditingEnrollment();\n            this.listenSourceTypeChange();\n\n            if (!this.editingEnrollment) {\n                this.checkSelectedGroup();\n                this.calculateFormProgress();\n                this.addEvent();\n            }\n        }\n\n        if (this.type === 'group') {\n            this.checkEditingGroup();\n            this.sourceTypeControl.setValidators([]);\n            this.sourceTypeControl.updateValueAndValidity();\n\n            if (!this.editingGroup) {\n                this.calculateFormProgress();\n                this.addEvent();\n            }\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n\n        if (this.resetEventsFormTimeout) {\n            clearTimeout(this.resetEventsFormTimeout);\n        }\n    }\n\n    listenSourceTypeChange() {\n        this.sourceTypeControl.valueChanges.pipe(takeUntil(this.destroy$)).subscribe({\n            next: (sourceType) => {\n                if (sourceType === 'group') {\n                    this.groups$ = this.classroomService\n                        .getGroupsQuery()\n                        .valueChanges.pipe(map((result: any) => result.data.classroom.studyGroups));\n\n                    this.programControl.setValidators([]);\n                    this.programControl.updateValueAndValidity();\n                    this.levelControl.setValidators([]);\n                    this.levelControl.updateValueAndValidity();\n                    this.selectedGroupControl.setValidators([Validators.required]);\n                    this.selectedGroupControl.updateValueAndValidity();\n\n                    this.resetEventsFormTimeout = setTimeout(() => {\n                        this.events.setValidators([]);\n                        this.events.setAsyncValidators([]);\n                        this.events.clear();\n                        this.events.updateValueAndValidity();\n                    }, 0);\n                }\n\n                if (sourceType === 'oneOnOne') {\n                    this.programControl.setValidators([Validators.required]);\n                    this.programControl.updateValueAndValidity();\n                    this.levelControl.setValidators([Validators.required]);\n                    this.levelControl.updateValueAndValidity();\n                    this.events.setValidators([Validators.required]);\n                    this.events.setAsyncValidators([EventsWithSameDateValidator.validate()]);\n                    this.events.updateValueAndValidity();\n                    this.selectedGroupControl.setValidators([]);\n                    this.selectedGroupControl.reset();\n                    this.selectedGroupControl.updateValueAndValidity();\n\n                    if (!this.editingEnrollment && !this.events.length) {\n                        this.addEvent();\n                    }\n                }\n            },\n        });\n    }\n\n    checkEditingEnrollment() {\n        if (!this.editingEnrollment) {\n            return;\n        }\n\n        const {\n            student: { familyName: lastName, firstName, primaryEmail: email },\n            level,\n            sourceType,\n            studyGroup,\n            events,\n        } = this.editingEnrollment;\n\n        this.studentInfoForm.patchValue({\n            firstName,\n            lastName,\n            email,\n        });\n\n        this.courseForm.get('level').patchValue(level);\n        // this.studentForm.get('termsAndConditions').patchValue(true);\n\n        const hasGroup = sourceType === 'STUDY_GROUP';\n        const sourceTypeValue = hasGroup ? 'group' : 'oneOnOne';\n        this.sourceTypeControl.patchValue(sourceTypeValue);\n\n        if (hasGroup) {\n            this.selectedGroupControl.patchValue(studyGroup);\n        }\n\n        events.forEach((event) => {\n            const formEvent: Event = {\n                ...event,\n            };\n            this.events.push(\n                this.formBuilder.control(\n                    formEvent,\n                    [],\n                    [\n                        EventHasScheduleConflictValidator.validate(),\n                        EventHasNoDaySelectedValidator.validate(),\n                        EventHasStartAndEndTimeConflictValidator.validate(),\n                    ],\n                ),\n            );\n        });\n    }\n\n    checkEditingGroup() {\n        if (!this.editingGroup) {\n            return;\n        }\n\n        const { name, level, events } = this.editingGroup;\n\n        this.groupForm.patchValue({\n            name,\n        });\n\n        this.courseForm.get('level').patchValue(level);\n\n        events.forEach((event) => {\n            const formEvent: Event = {\n                ...event,\n            };\n            this.events.push(\n                this.formBuilder.control(\n                    formEvent,\n                    [],\n                    [\n                        EventHasScheduleConflictValidator.validate(),\n                        EventHasNoDaySelectedValidator.validate(),\n                        EventHasStartAndEndTimeConflictValidator.validate(),\n                    ],\n                ),\n            );\n        });\n    }\n\n    checkSelectedGroup() {\n        if (!this.selectedGroup) {\n            return;\n        }\n\n        this.sourceTypeControl.patchValue('group');\n        this.selectedGroupControl.patchValue(this.selectedGroup);\n    }\n\n    calculateFormProgress() {\n        combineLatest([\n            this.studentForm.valueChanges.pipe(startWith(this.studentForm.value)),\n            this.groupForm.valueChanges.pipe(startWith(this.studentForm.value)),\n            this.courseForm.valueChanges.pipe(startWith(this.courseForm.value)),\n            this.eventsForm.valueChanges.pipe(startWith(this.eventsForm.value)),\n        ])\n            .pipe(takeUntil(this.destroy$), debounceTime(350))\n            .subscribe({\n                next: ([studentForm, groupForm, courseForm, eventsForm]) => {\n                    const { selectedGroup } = studentForm;\n                    const { sourceType, program, level } = courseForm;\n                    const { events } = eventsForm;\n\n                    if (this.type === 'group') {\n                        if (this.editingGroup ? true : this.groupForm.valid) {\n                            this.tabs[0].completed = true;\n                        } else {\n                            this.tabs[0].completed = false;\n                        }\n\n                        if (program && level) {\n                            this.tabs[1].completed = true;\n                        } else {\n                            this.tabs[1].completed = false;\n                        }\n\n                        if (this.events.valid) {\n                            this.tabs[2].completed = true;\n                        } else {\n                            this.tabs[2].completed = false;\n                        }\n                    } else {\n                        if (this.editingEnrollment ? true : this.studentInfoForm.valid) {\n                            this.tabs[0].completed = true;\n                        } else {\n                            this.tabs[0].completed = false;\n                        }\n\n                        if (\n                            (sourceType === 'group' && selectedGroup) ||\n                            (sourceType === 'oneOnOne' && program && level)\n                        ) {\n                            this.tabs[1].completed = true;\n                        } else {\n                            this.tabs[1].completed = false;\n                        }\n\n                        if (\n                            (sourceType === 'group' && selectedGroup) ||\n                            (sourceType === 'oneOnOne' && this.events.valid)\n                        ) {\n                            this.tabs[2].completed = true;\n                        } else {\n                            this.tabs[2].completed = false;\n                        }\n                    }\n\n                    const completedTabsLength = [\n                        this.tabs[0].completed,\n                        this.tabs[1].completed,\n                        this.tabs[2].completed,\n                    ].filter((tab) => tab).length;\n\n                    if (completedTabsLength === 0) {\n                        this.formProgress = 0;\n                        return;\n                    }\n\n                    if (completedTabsLength === 1) {\n                        this.formProgress = 33;\n                        return;\n                    }\n                    if (completedTabsLength === 2) {\n                        this.formProgress = 66;\n                        return;\n                    }\n                    if (completedTabsLength === 3) {\n                        this.formProgress = 100;\n                        return;\n                    }\n                },\n            });\n    }\n\n    // Push a new event to the Form Array\n    addEvent(): void {\n        const todayStartDate = new Date();\n        todayStartDate.setHours(18, 0);\n        const todayEndDate = new Date();\n        todayEndDate.setHours(19, 0);\n\n        const startDateTime = todayStartDate.getTime().toString();\n        const endDateTime = todayEndDate.getTime().toString();\n\n        const newEvent: Event = {\n            changeStatus: 'NEW',\n            currentDays: [],\n            startDateTime,\n            hasConflict: false,\n            endDateTime,\n            recurrence: 'RRULE:FREQ=WEEKLY;INTERVAL=1',\n        };\n        this.events.push(\n            this.formBuilder.control(\n                newEvent,\n                [],\n                [\n                    EventHasScheduleConflictValidator.validate(),\n                    EventHasNoDaySelectedValidator.validate(),\n                    EventHasStartAndEndTimeConflictValidator.validate(),\n                ],\n            ),\n        );\n    }\n\n    updateEvent({ event, controlIndex }: { event: Event; controlIndex: number }): void {\n        // see if event has an id to only set the change status to edited\n        const currentEvent = this.events.at(controlIndex);\n        if (currentEvent.value.id) {\n            this.events.at(controlIndex).setValue({ ...event, changeStatus: 'EDITED' });\n            return;\n        }\n\n        this.events.at(controlIndex).setValue(event);\n    }\n\n    // Remove event from FormArray\n    removeEvent(eventIndex: number): void {\n        // see if event has an id to only set the change status to deleted\n        const currentEvent = this.events.at(eventIndex);\n        if (currentEvent.value.id) {\n            this.events.at(eventIndex).patchValue({\n                ...currentEvent.value,\n                changeStatus: 'DELETED',\n            });\n            return;\n        }\n\n        this.events.removeAt(eventIndex);\n    }\n\n    selectTab(tab: any) {\n        // deactivate all tabs\n        this.tabs.forEach((tab) => (tab.active = false));\n\n        // activate the tab the user has clicked on.\n        tab.active = true;\n    }\n\n    backStep() {\n        if (this.selectedTab.title === this.tabs[1].title) {\n            this.selectTab(this.tabs[0]);\n        } else if (this.selectedTab.title === this.tabs[2].title) {\n            this.selectTab(this.tabs[1]);\n        }\n    }\n\n    nextStep() {\n        if (this.selectedTab.title === this.tabs[0].title) {\n            this.selectTab(this.tabs[1]);\n        } else if (this.selectedTab.title === this.tabs[1].title) {\n            this.selectTab(this.tabs[2]);\n        }\n    }\n\n    // SAVE METHODS\n    onSave() {\n        if (this.type === 'group') {\n            if (this.editingGroup) {\n                this.onUpdateGroup();\n                return;\n            }\n\n            // create group\n            const formValues = {\n                groupForm: this.groupForm.value,\n                courseForm: this.courseForm.value,\n                eventsForm: this.eventsForm.value,\n            };\n\n            this.dialogRef.close(formValues);\n            return;\n        }\n\n        if (this.type === 'student') {\n            if (this.editingEnrollment) {\n                if (\n                    this.editingEnrollment.sourceType === 'STUDY_GROUP' &&\n                    this.sourceTypeControl.value === 'oneOnOne'\n                ) {\n                    this.onTransferEnrollment();\n                    return;\n                }\n\n                this.onChangeSchedule();\n                return;\n            }\n\n            // create student invitation\n            const formValues = {\n                studentForm: this.studentForm.value,\n                courseForm: this.courseForm.value,\n                eventsForm: this.eventsForm.value,\n            };\n\n            this.dialogRef.close(formValues);\n        }\n    }\n\n    onChangeSchedule(): void {\n        const {\n            studentInfo: { firstName },\n        } = this.studentForm.getRawValue();\n\n        const { level } = this.courseForm.getRawValue();\n        const { events: unparsedEvents } = this.eventsForm.getRawValue();\n\n        let browserTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n        if (!browserTimeZone) {\n            // default to SP if not found\n            browserTimeZone = 'America/Sao_Paulo';\n        }\n\n        const enrollmentId = this.editingEnrollment.id;\n\n        const events = unparsedEvents\n            .map((event) => {\n                const parsedEvent: Event = {\n                    title: `${firstName} (1 on 1)`,\n                    description: level.name,\n                    startTimeZone: browserTimeZone,\n                    endTimeZone: browserTimeZone,\n                    startDateTime: new Date(parseInt(event.startDateTime, 10)).toISOString(),\n                    endDateTime: new Date(parseInt(event.endDateTime, 10)).toISOString(),\n                    recurrence: event.recurrence,\n                    sourceType: 'ENROLLMENT',\n                    availabilityType: 'BUSY',\n                };\n\n                if (event.id) {\n                    parsedEvent.id = event.id;\n                }\n\n                if (event.changeStatus) {\n                    parsedEvent.changeStatus = event.changeStatus;\n                }\n\n                return parsedEvent;\n            })\n            .filter((event) => event.changeStatus);\n\n        const dialogRef = this.dialog.open<ModalConfirmationComponent, ModalConfirmationDataOptions>(\n            ModalConfirmationComponent,\n            {\n                restoreFocus: false,\n                disableClose: true,\n                data: {\n                    message: 'Are you sure?',\n                },\n            },\n        );\n\n        dialogRef\n            .afterClosed()\n            .pipe(\n                take(1),\n                switchMap((confirm: boolean) => {\n                    if (!confirm) {\n                        return EMPTY;\n                    }\n\n                    return this.classroomService.changeEnrollmentSchedule({ enrollmentId, events });\n                }),\n            )\n            .subscribe({\n                next: (changeScheduleEnrollment: Enrollment) => {\n                    this.dialogRef.close(changeScheduleEnrollment);\n                },\n            });\n    }\n\n    onTransferEnrollment() {\n        const {\n            studentInfo: { firstName },\n        } = this.studentForm.getRawValue();\n\n        const { level } = this.courseForm.getRawValue();\n        const { events: unparsedEvents } = this.eventsForm.getRawValue();\n\n        let browserTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n        if (!browserTimeZone) {\n            // default to SP if not found\n            browserTimeZone = 'America/Sao_Paulo';\n        }\n\n        const enrollmentId = this.editingEnrollment.id;\n\n        const events: Event[] = unparsedEvents.map((event) => {\n            const parsedEvent: Event = {\n                title: `${firstName} (1 on 1)`,\n                description: level.name,\n                startTimeZone: browserTimeZone,\n                endTimeZone: browserTimeZone,\n                startDateTime: new Date(parseInt(event.startDateTime, 10)).toISOString(),\n                endDateTime: new Date(parseInt(event.endDateTime, 10)).toISOString(),\n                recurrence: event.recurrence,\n            };\n\n            if (event.id) {\n                parsedEvent.id = event.id;\n            }\n\n            return parsedEvent;\n        });\n\n        const dialogRef = this.dialog.open<ModalConfirmationComponent, ModalConfirmationDataOptions>(\n            ModalConfirmationComponent,\n            {\n                restoreFocus: false,\n                disableClose: true,\n                data: {\n                    title: 'Transfer Enrollment',\n                    message: 'Are you sure you want to move this enrollment to One-on-one?',\n                },\n            },\n        );\n\n        dialogRef\n            .afterClosed()\n            .pipe(\n                take(1),\n                switchMap((confirm: boolean) => {\n                    if (!confirm) {\n                        return EMPTY;\n                    }\n\n                    return this.classroomService.transferEnrollment(enrollmentId, events);\n                }),\n            )\n            .subscribe({\n                next: (enrollmentTransferInvitation: Enrollment) => {\n                    this.dialogRef.close(enrollmentTransferInvitation);\n                },\n            });\n    }\n\n    onCancelEnrollment() {\n        const enrollmentId = this.editingEnrollment.id;\n\n        const dialogRef = this.dialog.open<ModalConfirmationComponent, ModalConfirmationDataOptions>(\n            ModalConfirmationComponent,\n            {\n                restoreFocus: false,\n                disableClose: true,\n                data: {\n                    title: 'Cancel enrollment',\n                    message: 'Are you sure you want to cancel this enrollment?',\n                },\n            },\n        );\n\n        dialogRef\n            .afterClosed()\n            .pipe(\n                take(1),\n                switchMap((confirm: boolean) => {\n                    if (!confirm) {\n                        return EMPTY;\n                    }\n\n                    return this.classroomService.cancelEnrollment(enrollmentId);\n                }),\n            )\n            .subscribe({\n                next: (cancelEnrollment: Enrollment) => {\n                    this.dialogRef.close(cancelEnrollment);\n                },\n            });\n    }\n\n    onUpdateGroup(): void {\n        const { name } = this.groupForm.getRawValue();\n\n        const { level } = this.courseForm.getRawValue();\n        const { events: unparsedEvents } = this.eventsForm.getRawValue();\n\n        let browserTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n        if (!browserTimeZone) {\n            // default to SP if not found\n            browserTimeZone = 'America/Sao_Paulo';\n        }\n\n        const studyGroupId = this.editingGroup.id;\n\n        const events = unparsedEvents\n            .map((event) => {\n                const parsedEvent: Event = {\n                    title: `${name}`,\n                    description: level.name,\n                    startTimeZone: browserTimeZone,\n                    endTimeZone: browserTimeZone,\n                    startDateTime: new Date(parseInt(event.startDateTime, 10)).toISOString(),\n                    endDateTime: new Date(parseInt(event.endDateTime, 10)).toISOString(),\n                    recurrence: event.recurrence,\n                    sourceType: 'STUDY_GROUP',\n                    availabilityType: 'BUSY',\n                };\n\n                if (event.id) {\n                    parsedEvent.id = event.id;\n                }\n\n                if (event.changeStatus) {\n                    parsedEvent.changeStatus = event.changeStatus;\n                }\n\n                return parsedEvent;\n            })\n            .filter((event) => event.changeStatus);\n\n        const dialogRef = this.dialog.open<ModalConfirmationComponent, ModalConfirmationDataOptions>(\n            ModalConfirmationComponent,\n            {\n                restoreFocus: false,\n                disableClose: true,\n                data: {\n                    message: 'Are you sure?',\n                },\n            },\n        );\n\n        dialogRef\n            .afterClosed()\n            .pipe(\n                take(1),\n                switchMap((confirm: boolean) => {\n                    if (!confirm) {\n                        return EMPTY;\n                    }\n\n                    return this.classroomService.updateStudyGroup({ studyGroupId, name, events });\n                }),\n            )\n            .subscribe({\n                next: (group: StudyGroup) => {\n                    this.dialogRef.close(group);\n                },\n            });\n    }\n\n    // -- SAVE METHODS\n\n    // STUDENT\n    get studentInfoForm() {\n        return this.studentForm.get('studentInfo') as FormGroup;\n    }\n\n    get selectedGroupControl() {\n        return this.studentForm.get('selectedGroup') as FormControl;\n    }\n\n    // GROUP\n    get groupNameControl() {\n        return this.groupForm.get('name') as FormControl;\n    }\n\n    get sourceTypeControl() {\n        return this.courseForm.get('sourceType') as FormControl;\n    }\n\n    get programControl() {\n        return this.courseForm.get('program') as FormControl;\n    }\n\n    get levelControl() {\n        return this.courseForm.get('level') as FormControl;\n    }\n\n    get events() {\n        return this.eventsForm.get('events') as FormArray;\n    }\n\n    get type(): string {\n        return this.data?.type;\n    }\n\n    get editingEnrollment() {\n        return this.data?.enrollment;\n    }\n\n    get editingGroup() {\n        return this.data?.group;\n    }\n\n    get selectedGroup() {\n        return this.data?.selectedGroup;\n    }\n\n    get selectedTab(): ITab {\n        return this.tabs.find((tab) => tab.active);\n    }\n\n    get tabs() {\n        return this.data?.tabs;\n    }\n\n    get isMobile() {\n        return this.mediaObserver.isActive('xs');\n    }\n}\n",
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "completed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ITeacherCardContent",
            "id": "interface-ITeacherCardContent-b81caefb38d46baeeb112f6faf123fb5",
            "file": "src/app/dashboard/pages/dashboard-page/dashboard-page.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Enrollment, ENROLLMENT_STATUS } from 'app/@core/models/enrollment.model';\nimport { ClassroomService } from 'app/@core/services/classroom.service';\nimport { DashboardService } from 'app/@core/services/dashboard.service';\nimport { UserService } from 'app/@core/services/user.service';\nimport { differenceInDays } from 'date-fns';\nimport { map, take } from 'rxjs/operators';\n\nimport { ENROLLMENT_CARD_TYPES } from './../../../@shared/components/enrollment-card/enrollment-card.component';\n\nexport interface ITeacherCardContent {\n    name: string;\n    time: string;\n    startDateTime?: number;\n    enrollmentSource?: {\n        id: string;\n        type: string;\n    };\n    enrollments?: Enrollment[];\n}\n\n@Component({\n    selector: 'app-dashboard-page',\n    templateUrl: './dashboard-page.component.html',\n    styleUrls: ['./dashboard-page.component.scss'],\n})\nexport class DashboardPageComponent {\n    ENROLLMENT_CARD_TYPES = ENROLLMENT_CARD_TYPES;\n\n    hasAdminRole = this.userService.hasRole('admin');\n    hasTeacherRole = this.userService.hasRole('teacher');\n    hasStudentRole = this.userService.hasRole('student');\n\n    pendingEnrollments$ = this.classroomService\n        .getClassroom$()\n        .pipe(\n            map(({ studentEnrollments }) =>\n                studentEnrollments.filter((enrollment) => enrollment.status === ENROLLMENT_STATUS.PENDING),\n            ),\n        );\n\n    teacherDashboard$ = this.dashboardService.getTeacherDashboard().pipe(\n        map((teacherDashboard) => {\n            const nextEvents = teacherDashboard.nextEvents\n                .map((scheduleItem) => {\n                    const startDateTime = parseInt(scheduleItem.startDateTime, 10);\n                    const startDate = new Date(startDateTime);\n                    const time = Intl.DateTimeFormat('pt-br', {\n                        hour: 'numeric',\n                        minute: 'numeric',\n                    }).format(startDate);\n\n                    const enrollmentSource = {\n                        id: scheduleItem?.enrollment?.id || scheduleItem?.studyGroup?.id,\n                        type: scheduleItem?.enrollment?.id ? 'ENROLLMENT' : 'STUDY_GROUP',\n                    };\n\n                    return {\n                        name: scheduleItem.title,\n                        time,\n                        startDateTime,\n                        enrollmentSource,\n                    };\n                })\n                .sort((a, b) => a.startDateTime - b.startDateTime);\n\n            const subscriptionsRenewals = teacherDashboard.students.reduce((acc, currentStudent) => {\n                const subscriptions = currentStudent.subscriptions.map((subscription) => {\n                    const today = new Date();\n                    const renewalDate = new Date(subscription.renewalDate);\n                    const time = `${differenceInDays(renewalDate, today)} days`;\n                    return {\n                        name: `${currentStudent.firstName} ${currentStudent.familyName}`,\n                        time,\n                        enrollments: currentStudent.enrollments,\n                    };\n                });\n\n                return [...acc, ...subscriptions];\n            }, []);\n\n            return { nextEvents, subscriptionsRenewals };\n        }),\n    );\n\n    studentDashboard$ = this.dashboardService.getStudentDashboard().pipe(\n        map(({ nextEvent }) => {\n            return { nextEvent };\n        }),\n    );\n\n    constructor(\n        private classroomService: ClassroomService,\n        private userService: UserService,\n        private dashboardService: DashboardService,\n        private router: Router,\n    ) {}\n\n    onAcceptEnrollment({ action, enrollment }: { action: string; enrollment }) {\n        if (action === 'decline') {\n            this.classroomService.cancelEnrollment(enrollment.id).pipe(take(1)).subscribe();\n            return;\n        }\n\n        this.classroomService.activateEnrollment(enrollment.id).pipe(take(1)).subscribe();\n    }\n\n    onGoTo(content: ITeacherCardContent) {\n        if (content?.enrollments) {\n            const { name } = content;\n\n            this.router.navigate(['/classroom/students'], { fragment: name.replace(/ /g, '') });\n        }\n\n        if (content?.enrollmentSource) {\n            const { id, type } = content?.enrollmentSource;\n            const isGroup = type === 'STUDY_GROUP';\n            const path = isGroup ? 'groups' : 'enrollments';\n            const schedulePath = isGroup ? 'schedule' : '';\n\n            this.router.navigate(['/classroom', path, id, schedulePath]);\n            return;\n        }\n    }\n}\n",
            "properties": [
                {
                    "name": "enrollments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Enrollment[]",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "enrollmentSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "startDateTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "time",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ITeacherDashboard",
            "id": "interface-ITeacherDashboard-5921675772b370cedd277a2e5dcff83a",
            "file": "src/app/@core/services/dashboard.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql } from 'apollo-angular';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ENROLLMENT_DETAIL } from '../graphql/enrollment.graphql';\nimport { STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { Enrollment } from '../models/enrollment.model';\nimport { EventOccurrence } from '../models/event-occurrence.model';\nimport { Subscription } from '../models/subscription.model';\n\ninterface IStudent {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    displayName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    subscriptions?: Subscription[];\n}\n\ninterface ITeacherDashboard {\n    nextEvents: EventOccurrence[];\n    students: IStudent[];\n}\n\ninterface ITeacherDashboardQuery {\n    teacherDashboard: ITeacherDashboard;\n}\n\ninterface IStudentDashboard {\n    nextEvent: EventOccurrence;\n    subscriptions: Subscription[];\n}\n\ninterface IStudentDashboardQuery {\n    studentDashboard: IStudentDashboard;\n}\n\nexport interface IDashboardFilters {\n    subscriptionsStatus?: string;\n    subscriptionsExpiringInDays?: number;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DashboardService {\n    constructor(private apollo: Apollo) {}\n\n    getTeacherDashboard(\n        filters: IDashboardFilters = { subscriptionsStatus: 'ACTIVE', subscriptionsExpiringInDays: 30 },\n    ): Observable<ITeacherDashboard> {\n        return this.apollo\n            .watchQuery<ITeacherDashboardQuery>({\n                query: gql`\n                    query TeacherDashboard($filters: DashboardFilters) {\n                        teacherDashboard(filters: $filters) {\n                            id\n                            nextEvents {\n                                id\n                                title\n                                description\n                                startDateTime\n                                enrollment {\n                                    id\n                                }\n                                studyGroup {\n                                    id\n                                }\n                            }\n                            students {\n                                id\n                                firstName\n                                familyName\n                                displayName\n                                enrollments {\n                                    id\n                                    studyGroup {\n                                        id\n                                    }\n                                }\n                                subscriptions {\n                                    id\n                                    renewalDate\n                                }\n                            }\n                        }\n                    }\n                `,\n                variables: {\n                    filters,\n                },\n            })\n            .valueChanges.pipe(\n                map((result: ApolloQueryResult<ITeacherDashboardQuery>) => result.data.teacherDashboard),\n            );\n    }\n\n    getStudentDashboard(\n        filters: IDashboardFilters = { subscriptionsStatus: 'ACTIVE', subscriptionsExpiringInDays: 100 },\n    ): Observable<IStudentDashboard> {\n        return this.apollo\n            .watchQuery<IStudentDashboardQuery>({\n                query: gql`\n                    query StudentDashboardQuery($filters: DashboardFilters) {\n                        studentDashboard(filters: $filters) {\n                            id\n                            nextEvent {\n                                id\n                                title\n                                description\n                                startDateTime\n                                enrollment {\n                                    ...enrollmentDetail\n                                }\n                                studyGroup {\n                                    ...studyGroupSummary\n                                }\n                            }\n                            subscriptions {\n                                id\n                                renewalDate\n                            }\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                    ${STUDY_GROUP_SUMMARY}\n                `,\n                variables: {\n                    filters,\n                },\n            })\n            .valueChanges.pipe(\n                map((result: ApolloQueryResult<IStudentDashboardQuery>) => result.data.studentDashboard),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "nextEvents",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventOccurrence[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "students",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IStudent[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ITeacherDashboardQuery",
            "id": "interface-ITeacherDashboardQuery-5921675772b370cedd277a2e5dcff83a",
            "file": "src/app/@core/services/dashboard.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql } from 'apollo-angular';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ENROLLMENT_DETAIL } from '../graphql/enrollment.graphql';\nimport { STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { Enrollment } from '../models/enrollment.model';\nimport { EventOccurrence } from '../models/event-occurrence.model';\nimport { Subscription } from '../models/subscription.model';\n\ninterface IStudent {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    displayName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    subscriptions?: Subscription[];\n}\n\ninterface ITeacherDashboard {\n    nextEvents: EventOccurrence[];\n    students: IStudent[];\n}\n\ninterface ITeacherDashboardQuery {\n    teacherDashboard: ITeacherDashboard;\n}\n\ninterface IStudentDashboard {\n    nextEvent: EventOccurrence;\n    subscriptions: Subscription[];\n}\n\ninterface IStudentDashboardQuery {\n    studentDashboard: IStudentDashboard;\n}\n\nexport interface IDashboardFilters {\n    subscriptionsStatus?: string;\n    subscriptionsExpiringInDays?: number;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DashboardService {\n    constructor(private apollo: Apollo) {}\n\n    getTeacherDashboard(\n        filters: IDashboardFilters = { subscriptionsStatus: 'ACTIVE', subscriptionsExpiringInDays: 30 },\n    ): Observable<ITeacherDashboard> {\n        return this.apollo\n            .watchQuery<ITeacherDashboardQuery>({\n                query: gql`\n                    query TeacherDashboard($filters: DashboardFilters) {\n                        teacherDashboard(filters: $filters) {\n                            id\n                            nextEvents {\n                                id\n                                title\n                                description\n                                startDateTime\n                                enrollment {\n                                    id\n                                }\n                                studyGroup {\n                                    id\n                                }\n                            }\n                            students {\n                                id\n                                firstName\n                                familyName\n                                displayName\n                                enrollments {\n                                    id\n                                    studyGroup {\n                                        id\n                                    }\n                                }\n                                subscriptions {\n                                    id\n                                    renewalDate\n                                }\n                            }\n                        }\n                    }\n                `,\n                variables: {\n                    filters,\n                },\n            })\n            .valueChanges.pipe(\n                map((result: ApolloQueryResult<ITeacherDashboardQuery>) => result.data.teacherDashboard),\n            );\n    }\n\n    getStudentDashboard(\n        filters: IDashboardFilters = { subscriptionsStatus: 'ACTIVE', subscriptionsExpiringInDays: 100 },\n    ): Observable<IStudentDashboard> {\n        return this.apollo\n            .watchQuery<IStudentDashboardQuery>({\n                query: gql`\n                    query StudentDashboardQuery($filters: DashboardFilters) {\n                        studentDashboard(filters: $filters) {\n                            id\n                            nextEvent {\n                                id\n                                title\n                                description\n                                startDateTime\n                                enrollment {\n                                    ...enrollmentDetail\n                                }\n                                studyGroup {\n                                    ...studyGroupSummary\n                                }\n                            }\n                            subscriptions {\n                                id\n                                renewalDate\n                            }\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                    ${STUDY_GROUP_SUMMARY}\n                `,\n                variables: {\n                    filters,\n                },\n            })\n            .valueChanges.pipe(\n                map((result: ApolloQueryResult<IStudentDashboardQuery>) => result.data.studentDashboard),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "teacherDashboard",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITeacherDashboard",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ITransferEnrollmentMutation",
            "id": "interface-ITransferEnrollmentMutation-393bbeee17eb6281c8a64cc8ff3beb12",
            "file": "src/app/@core/services/classroom.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\nimport {\n    ClassRecord,\n    ClassRecordType,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from '../models/class-record.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, SourceType, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\n\nimport { CreateStudyGroupInput } from 'app/classroom/pages/groups-page/groups-page.component';\nimport { ENROLLMENT_DETAIL } from 'app/@core/graphql/enrollment.graphql';\nimport { CLASSROOM_SUMMARY } from '../graphql/classroom.graphql';\nimport { CLASS_RECORD_SUMMARY } from '../graphql/class-record.graphql';\nimport { STUDY_GROUP_DETAILS, STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { LESSON_SUMMARY } from '../graphql/lesson.graphql';\nimport { Lesson } from '../models/lesson.model';\n\ninterface IStartClassMutation {\n    startClass: ClassRecord;\n}\n\nexport interface IStartClassInput {\n    lessonId: string;\n    levelId: string;\n    sourceId: string;\n    sourceType: SourceType;\n    teacherNotes?: string;\n}\n\ninterface ICreateEnrollmentMutation {\n    createEnrollment: Enrollment;\n}\n\ninterface IEnrollment {\n    enrollment: Enrollment;\n}\n\ninterface IGetEnrollments {\n    enrollments: Enrollment[];\n}\n\ninterface IFindGroupById {\n    findGroupById: StudyGroup;\n}\n\ninterface ICancelEnrollmentMutation {\n    cancelEnrollment: Enrollment;\n}\n\ninterface IChangeScheduleInput {\n    enrollmentId: string;\n    events: Event[];\n}\n\ninterface IChangeEnrollmentScheduleMutation {\n    changeEnrollmentSchedule: Enrollment;\n}\n\ninterface ICreateStudyGroupMutation {\n    createStudyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupMutation {\n    studyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupInput {\n    studyGroupId: string;\n    name: string;\n    events?: Event[];\n}\n\ninterface IRemoveGroupInput {\n    studyGroupId: string;\n}\n\ninterface IRemoveGroupMutation {\n    group: StudyGroup;\n}\n\ninterface StudyGroupAttendeInput {\n    studentId: string;\n    attended: boolean;\n}\ninterface IActivateEnrollmentMutation {\n    updatedEnrollment: Enrollment;\n}\n\nexport interface IFinishClassInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n    teacherNotes?: string;\n    status: string;\n    lessonStartedAt: string;\n    lessonEndedAt: string;\n    attendees?: StudyGroupAttendeInput[];\n}\n\ninterface IFinishClassMutation {\n    finishClass: ClassRecordType;\n}\n\ninterface ITransferEnrollmentMutation {\n    removeStudentFromGroup: Enrollment;\n}\nexport interface IRevertFinishedClassStatusInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n}\n\ninterface IRevertFinishedClassStatusMutation {\n    revertFinishedClassStatus: ClassRecordType;\n}\nexport interface IRevertLessonStatusInput {\n    sourceId: string;\n    sourceType: SourceType;\n    lessonId: string;\n}\n\ninterface IRevertLessonStatusMutation {\n    revertLessonStatus: Lesson;\n}\n\nexport interface Student {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    opened?: boolean; // front-end only field\n}\n\ninterface IClassroomQuery {\n    classroom: IClassroom;\n}\n\nexport interface IClassroom {\n    id?: string;\n    classInProgress?: ClassRecordType;\n    enrollments?: Enrollment[];\n    studyGroups?: StudyGroup[];\n    students?: Student[];\n    studentEnrollments?: Enrollment[];\n}\n\nexport interface IClassroomFiltersInput {\n    enrollmentStatus?: string;\n    studyGroupStatus?: string;\n}\n\ninterface IAddStudentToGroupMutation {\n    addStudentToGroup: Enrollment;\n}\ninterface IAddStudentToGroupInput {\n    id: string;\n    studyGroupId: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClassroomService {\n    private classInProgressSource = new BehaviorSubject<ClassRecord>(undefined);\n\n    public classInProgress$ = this.classInProgressSource.asObservable();\n\n    getGroupByIdQuery$: QueryRef<IFindGroupById>;\n    getEnrollmentQuery$: QueryRef<IEnrollment>;\n    classroomQuery$: QueryRef<IClassroomQuery>;\n\n    classroomFiltersInput: IClassroomFiltersInput = {\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    };\n\n    constructor(private apollo: Apollo) {}\n\n    getClassroom$(): Observable<IClassroom> {\n        this.classroomQuery$ = this.apollo.watchQuery({\n            query: gql`\n                query Classroom($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        ...classroomSummary\n                    }\n                }\n                ${CLASSROOM_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n\n        return this.classroomQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IClassroomQuery>) => {\n                const classInProgress = result.data.classroom.classInProgress;\n                if (!classInProgress) {\n                    this.classInProgressSource.next(null);\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        this.classInProgressSource.next({\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        });\n                    } else {\n                        this.classInProgressSource.next({\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        });\n                    }\n                }\n\n                return result.data.classroom;\n            }),\n            share(),\n        );\n    }\n\n    classroomRefetch(): void {\n        this.getClassroom$();\n        this.classroomQuery$.refetch();\n    }\n\n    setClassroomFiltersInput(filters: IClassroomFiltersInput = {}) {\n        this.classroomFiltersInput = { ...this.classroomFiltersInput, ...filters };\n    }\n\n    createEnrollmentInvitation(createEnrollmentInput: CreateEnrollmentInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICreateEnrollmentMutation>({\n                mutation: gql`\n                    mutation CreateEnrollment($enrollmentInput: EnrollmentInput, $invitedStudent: StudentInput) {\n                        createEnrollment(enrollmentInput: $enrollmentInput, invitedStudent: $invitedStudent) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    enrollmentInput: createEnrollmentInput.enrollmentInput,\n                    invitedStudent: createEnrollmentInput.invitedStudent,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateEnrollmentMutation>) => {\n                    return result.data.createEnrollment;\n                }),\n            );\n    }\n\n    getEnrollment(enrollmentId: string): Observable<Enrollment> {\n        this.getEnrollmentQuery$ = this.apollo.watchQuery({\n            query: gql`\n            {\n                enrollment(id: \"${enrollmentId}\") {\n                    ...enrollmentDetail\n                }\n            }\n            ${ENROLLMENT_DETAIL}\n            `,\n        });\n\n        return this.getEnrollmentQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IEnrollment>) => result.data.enrollment),\n        );\n    }\n\n    refetchEnrollment(): void {\n        if (this.getEnrollmentQuery$) {\n            this.getEnrollmentQuery$.refetch();\n        }\n    }\n\n    cancelEnrollment(id: string): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICancelEnrollmentMutation>({\n                mutation: gql`\n                    mutation CancelEnrollmentMutation {\n                        cancelEnrollment(id: \"${id}\") {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICancelEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.cancelEnrollment;\n                }),\n            );\n    }\n\n    changeEnrollmentSchedule(changeScheduleInput: IChangeScheduleInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<IChangeEnrollmentScheduleMutation>({\n                mutation: gql`\n                    mutation ChangeEnrollmentScheduleMutation($changeScheduleInput: ChangeScheduleInput) {\n                        changeEnrollmentSchedule(changeScheduleInput: $changeScheduleInput) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    changeScheduleInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeEnrollmentScheduleMutation>) => {\n                    return result.data.changeEnrollmentSchedule;\n                }),\n            );\n    }\n\n    transferEnrollment(id: string, events: Event[]) {\n        return this.apollo\n            .mutate<ITransferEnrollmentMutation>({\n                mutation: gql`\n                    mutation removeStudentFromGroup($id: id, $events: EventsInput) {\n                        removeStudentFromGroup(id: $id, events: $events) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    id,\n                    events,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ITransferEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.removeStudentFromGroup;\n                }),\n            );\n    }\n\n    startClass(startClassInput: IStartClassInput): Observable<ClassRecord> {\n        return this.apollo\n            .mutate<IStartClassMutation>({\n                mutation: gql`\n                    mutation StartClassMutation($startClassInput: StartClassInput) {\n                        startClass(startClassInput: $startClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { startClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IStartClassMutation>) => {\n                    const classInProgress = result.data.startClass;\n                    this.classInProgressSource.next(classInProgress);\n\n                    this.classroomRefetch();\n                    return classInProgress;\n                }),\n            );\n    }\n\n    finishClass(finishClassInput: IFinishClassInput): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IFinishClassMutation>({\n                mutation: gql`\n                    mutation FinishClassMutation($finishClassInput: FinishClassInput) {\n                        finishClass(finishClassInput: $finishClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { finishClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IFinishClassMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.finishClass;\n                }),\n            );\n    }\n\n    getGroupsQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query ClassroomQuery($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        id\n                        studyGroups {\n                            ...studyGroupSummary\n                        }\n                    }\n                }\n                ${STUDY_GROUP_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n    }\n\n    getGroupById(id: string): Observable<StudyGroup> {\n        this.getGroupByIdQuery$ = this.apollo.watchQuery<any>({\n            query: gql`\n                query findGroupById($id: String) {\n                    findGroupById(id: $id) {\n                        ...studyGroupDetails\n                    }\n                }\n                ${STUDY_GROUP_DETAILS}\n            `,\n            variables: {\n                id,\n            },\n        });\n\n        return this.getGroupByIdQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IFindGroupById>) => result.data.findGroupById),\n        );\n    }\n\n    refetchCurrentGroupById(groupId?: string): void {\n        if (groupId) {\n            this.getGroupById(groupId);\n        }\n\n        if (this.getGroupByIdQuery$) {\n            this.getGroupByIdQuery$.refetch();\n        }\n    }\n\n    createStudyGroup(createGroupInput: CreateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<ICreateStudyGroupMutation>({\n                mutation: gql`\n                    mutation CreateGroupMutation($createGroupInput: CreateStudyGroupInput) {\n                        createStudyGroup(createGroupInput: $createGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    createGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.createStudyGroup;\n                }),\n            );\n    }\n\n    updateStudyGroup(studyGroupInput: IUpdateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IUpdateStudyGroupMutation>({\n                mutation: gql`\n                    mutation UpdateStudyGroupMutation($studyGroupInput: UpdateStudyGroupInput) {\n                        updateStudyGroup(studyGroupInput: $studyGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    studyGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.studyGroup;\n                }),\n            );\n    }\n\n    removeStudyGroup(removeGroupInput: IRemoveGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IRemoveGroupMutation>({\n                mutation: gql`\n                    mutation RemoveStudyGroupMutation($removeGroupInput: RemoveStudyGroupInput) {\n                        removeStudyGroup(removeGroupInput: $removeGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    removeGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRemoveGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.group;\n                }),\n            );\n    }\n\n    addStudentToGroup(enrollmentInput: IAddStudentToGroupInput) {\n        return this.apollo\n            .mutate<IAddStudentToGroupMutation>({\n                mutation: gql`\n                    mutation AddStudentToGroupMutation($enrollmentInput: AddStudentToGroupInput) {\n                        addStudentToGroup(enrollmentInput: $enrollmentInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    enrollmentInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IAddStudentToGroupMutation>) => {\n                    this.classroomRefetch();\n                    this.refetchCurrentGroupById();\n                    return result.data.addStudentToGroup;\n                }),\n            );\n    }\n\n    revertFinishedClassStatus(\n        revertFinishedClassStatusInput: IRevertFinishedClassStatusInput,\n    ): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IRevertFinishedClassStatusMutation>({\n                mutation: gql`\n                    mutation revertFinishedClassStatusMutation(\n                        $revertFinishedClassStatusInput: RevertFinishedClassStatusInput\n                    ) {\n                        revertFinishedClassStatus(revertFinishedClassStatusInput: $revertFinishedClassStatusInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { revertFinishedClassStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertFinishedClassStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertFinishedClassStatus;\n                }),\n            );\n    }\n\n    revertLessonStatus(revertLessonStatusInput: IRevertLessonStatusInput): Observable<Lesson> {\n        return this.apollo\n            .mutate<IRevertLessonStatusMutation>({\n                mutation: gql`\n                    mutation revertLessonStatusMutation($revertLessonStatusInput: RevertLessonStatusInput) {\n                        revertLessonStatus(revertLessonStatusInput: $revertLessonStatusInput) {\n                            ...lessonSummary\n                        }\n                    }\n                    ${LESSON_SUMMARY}\n                `,\n                variables: { revertLessonStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertLessonStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertLessonStatus;\n                }),\n            );\n    }\n\n    activateEnrollment(enrollmentId: string): Observable<any> {\n        return this.apollo\n            .mutate<IActivateEnrollmentMutation>({\n                mutation: gql`\n                    mutation ActivateEnrollmentMutation($enrollmentId: ID) {\n                        activateEnrollment(enrollmentId: $enrollmentId) {\n                            id\n                        }\n                    }\n                `,\n                variables: { enrollmentId },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IActivateEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.updatedEnrollment;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "removeStudentFromGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Enrollment",
                    "optional": false,
                    "description": "",
                    "line": 113
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IUpdateMyProfileResult",
            "id": "interface-IUpdateMyProfileResult-56d579829aba74f364a721cb116cbe5e",
            "file": "src/app/@core/services/user.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Apollo, gql } from 'apollo-angular';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { environment } from 'environments/environment';\nimport { UserAuthDetails, UserProfile } from 'app/@core/models/user-profile.model';\nimport { UserSessionService } from 'app/@core/services/user-session.service';\nimport { USER_PROFILE } from '../graphql/user-profile.graphql';\nimport { CreatePasswordStudentInfo } from '../models/invitation.model';\nimport { LiveChatService } from './live-chat.service';\n\ninterface ILoginResult {\n    token: string;\n}\n\ninterface IUserResult {\n    myProfile: UserProfile;\n}\n\ninterface IUpdateMyProfileResult {\n    updateMyProfile: UserProfile;\n}\n\ninterface IChangePassword {\n    user: UserProfile;\n}\n\ninterface INewUser {\n    email: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n    cpf: string;\n    postalCode: string;\n    street: string;\n    streetNumber: string;\n    streetComplement: string;\n    district: string;\n    city: string;\n    state: string;\n    addressType?: string;\n    countryISO?: string;\n    category?: string;\n    earlyAccessCode?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n    private loggedUserSubject: BehaviorSubject<UserAuthDetails>;\n    public loggedUser: Observable<UserAuthDetails>;\n\n    private studentInfoSubject = new BehaviorSubject<CreatePasswordStudentInfo | null>(null);\n    studentInfo$ = this.studentInfoSubject.asObservable();\n\n    constructor(\n        private http: HttpClient,\n        private apollo: Apollo,\n        private _userSessionService: UserSessionService,\n        private liveChatService: LiveChatService,\n    ) {\n        this.loggedUserSubject = new BehaviorSubject<UserAuthDetails>(null);\n        this.loggedUser = this.loggedUserSubject.asObservable();\n\n        this.setUserFromAuthToken().subscribe();\n    }\n\n    setUserFromAuthToken(): Observable<UserAuthDetails> {\n        const jwt = this._userSessionService.getAuthToken();\n        if (!jwt) {\n            return of(undefined);\n        }\n\n        this.liveChatService.getLiveChatToken();\n        const jwtPayload = JSON.parse(atob(jwt.split('.')[1])) as UserAuthDetails;\n        if (!jwtPayload.roles) {\n            jwtPayload.roles = [];\n        }\n\n        this.loggedUserSubject.next(jwtPayload);\n\n        return of(jwtPayload);\n    }\n\n    getUserProfile(): Observable<UserProfile> {\n        if (!this._userSessionService.getAuthToken()) {\n            return;\n        }\n\n        return this.apollo\n            .query({\n                query: gql`\n                    {\n                        myProfile {\n                            ...userProfile\n                        }\n                    }\n                    ${USER_PROFILE}\n                `,\n            })\n            .pipe(map((result: ApolloQueryResult<IUserResult>) => result.data.myProfile));\n    }\n\n    updateMyProfile(userProfile: UserProfile): Observable<UserProfile> {\n        return this.apollo\n            .mutate<IUpdateMyProfileResult>({\n                variables: {\n                    userProfile,\n                },\n                mutation: gql`\n                    mutation updateMyProfile($userProfile: UserInput) {\n                        updateMyProfile(userProfile: $userProfile) {\n                            ...userProfile\n                        }\n                    }\n                    ${USER_PROFILE}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateMyProfileResult>) => {\n                    const updatedUser = result.data.updateMyProfile;\n                    return updatedUser;\n                }),\n            );\n    }\n\n    changePassword(changePasswordInput: {\n        userEmail: string;\n        oldPassword: string;\n        newPassword: string;\n    }): Observable<any> {\n        return this.apollo\n            .mutate<IChangePassword>({\n                variables: {\n                    changePasswordInput,\n                },\n                mutation: gql`\n                    mutation changeMyPassword($changePasswordInput: ChangePasswordInput) {\n                        changeMyPassword(changePasswordInput: $changePasswordInput) {\n                            id\n                        }\n                    }\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangePassword>) => {\n                    const updatedUser = result.data.user;\n                    return updatedUser;\n                }),\n            );\n    }\n\n    register(newUser: INewUser): Observable<{ token: string }> {\n        return this.http.post<{ token: string }>(`${environment.apiUrl}/auth/register`, newUser);\n    }\n\n    login(email: string, password: string): Observable<{ token: string }> {\n        return this.http.post<any>(\n            `${environment.apiUrl}/auth/login`,\n            { email, password },\n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                responseType: 'json',\n            },\n        );\n    }\n\n    login2(email: string, password: string): Observable<UserProfile> {\n        return this.http.post<any>(`${environment.apiUrl}/auth/login`, { email, password });\n    }\n\n    loginSuccess(result: ILoginResult) {\n        this._userSessionService.setAuthToken(result.token);\n        return this.setUserFromAuthToken();\n    }\n\n    logout(): void {\n        this.loggedUserSubject.next(null);\n        this._userSessionService.removeAuthToken();\n    }\n\n    forgotPassword(email: string): Observable<any> {\n        return this.http.post<any>(\n            `${environment.apiUrl}/auth/forgot-password`,\n            { email },\n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                responseType: 'json',\n            },\n        );\n    }\n\n    resetPassword(resetPasswordToken: string, newPassword: string): Observable<any> {\n        return this.http.post<any>(\n            `${environment.apiUrl}/auth/reset-password`,\n            { resetPasswordToken, newPassword },\n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                responseType: 'json',\n            },\n        );\n    }\n\n    validateEmail(email: string): Observable<any> {\n        return this.http.post<any>(\n            `${environment.apiUrl}/auth/email-validation`,\n            { primaryEmail: email },\n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                responseType: 'json',\n            },\n        );\n    }\n\n    setStudentInfoForCreatePassword(studentInfo: CreatePasswordStudentInfo) {\n        this.studentInfoSubject.next(studentInfo);\n    }\n\n    getStudentInfo() {\n        return this.studentInfoSubject.getValue();\n    }\n\n    hasRole(role: string) {\n        const { roles } = this.loggedUserSubject.getValue();\n        return roles.includes(role);\n    }\n}\n",
            "properties": [
                {
                    "name": "updateMyProfile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserProfile",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IUpdateStudyGroupInput",
            "id": "interface-IUpdateStudyGroupInput-393bbeee17eb6281c8a64cc8ff3beb12",
            "file": "src/app/@core/services/classroom.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\nimport {\n    ClassRecord,\n    ClassRecordType,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from '../models/class-record.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, SourceType, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\n\nimport { CreateStudyGroupInput } from 'app/classroom/pages/groups-page/groups-page.component';\nimport { ENROLLMENT_DETAIL } from 'app/@core/graphql/enrollment.graphql';\nimport { CLASSROOM_SUMMARY } from '../graphql/classroom.graphql';\nimport { CLASS_RECORD_SUMMARY } from '../graphql/class-record.graphql';\nimport { STUDY_GROUP_DETAILS, STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { LESSON_SUMMARY } from '../graphql/lesson.graphql';\nimport { Lesson } from '../models/lesson.model';\n\ninterface IStartClassMutation {\n    startClass: ClassRecord;\n}\n\nexport interface IStartClassInput {\n    lessonId: string;\n    levelId: string;\n    sourceId: string;\n    sourceType: SourceType;\n    teacherNotes?: string;\n}\n\ninterface ICreateEnrollmentMutation {\n    createEnrollment: Enrollment;\n}\n\ninterface IEnrollment {\n    enrollment: Enrollment;\n}\n\ninterface IGetEnrollments {\n    enrollments: Enrollment[];\n}\n\ninterface IFindGroupById {\n    findGroupById: StudyGroup;\n}\n\ninterface ICancelEnrollmentMutation {\n    cancelEnrollment: Enrollment;\n}\n\ninterface IChangeScheduleInput {\n    enrollmentId: string;\n    events: Event[];\n}\n\ninterface IChangeEnrollmentScheduleMutation {\n    changeEnrollmentSchedule: Enrollment;\n}\n\ninterface ICreateStudyGroupMutation {\n    createStudyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupMutation {\n    studyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupInput {\n    studyGroupId: string;\n    name: string;\n    events?: Event[];\n}\n\ninterface IRemoveGroupInput {\n    studyGroupId: string;\n}\n\ninterface IRemoveGroupMutation {\n    group: StudyGroup;\n}\n\ninterface StudyGroupAttendeInput {\n    studentId: string;\n    attended: boolean;\n}\ninterface IActivateEnrollmentMutation {\n    updatedEnrollment: Enrollment;\n}\n\nexport interface IFinishClassInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n    teacherNotes?: string;\n    status: string;\n    lessonStartedAt: string;\n    lessonEndedAt: string;\n    attendees?: StudyGroupAttendeInput[];\n}\n\ninterface IFinishClassMutation {\n    finishClass: ClassRecordType;\n}\n\ninterface ITransferEnrollmentMutation {\n    removeStudentFromGroup: Enrollment;\n}\nexport interface IRevertFinishedClassStatusInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n}\n\ninterface IRevertFinishedClassStatusMutation {\n    revertFinishedClassStatus: ClassRecordType;\n}\nexport interface IRevertLessonStatusInput {\n    sourceId: string;\n    sourceType: SourceType;\n    lessonId: string;\n}\n\ninterface IRevertLessonStatusMutation {\n    revertLessonStatus: Lesson;\n}\n\nexport interface Student {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    opened?: boolean; // front-end only field\n}\n\ninterface IClassroomQuery {\n    classroom: IClassroom;\n}\n\nexport interface IClassroom {\n    id?: string;\n    classInProgress?: ClassRecordType;\n    enrollments?: Enrollment[];\n    studyGroups?: StudyGroup[];\n    students?: Student[];\n    studentEnrollments?: Enrollment[];\n}\n\nexport interface IClassroomFiltersInput {\n    enrollmentStatus?: string;\n    studyGroupStatus?: string;\n}\n\ninterface IAddStudentToGroupMutation {\n    addStudentToGroup: Enrollment;\n}\ninterface IAddStudentToGroupInput {\n    id: string;\n    studyGroupId: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClassroomService {\n    private classInProgressSource = new BehaviorSubject<ClassRecord>(undefined);\n\n    public classInProgress$ = this.classInProgressSource.asObservable();\n\n    getGroupByIdQuery$: QueryRef<IFindGroupById>;\n    getEnrollmentQuery$: QueryRef<IEnrollment>;\n    classroomQuery$: QueryRef<IClassroomQuery>;\n\n    classroomFiltersInput: IClassroomFiltersInput = {\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    };\n\n    constructor(private apollo: Apollo) {}\n\n    getClassroom$(): Observable<IClassroom> {\n        this.classroomQuery$ = this.apollo.watchQuery({\n            query: gql`\n                query Classroom($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        ...classroomSummary\n                    }\n                }\n                ${CLASSROOM_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n\n        return this.classroomQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IClassroomQuery>) => {\n                const classInProgress = result.data.classroom.classInProgress;\n                if (!classInProgress) {\n                    this.classInProgressSource.next(null);\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        this.classInProgressSource.next({\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        });\n                    } else {\n                        this.classInProgressSource.next({\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        });\n                    }\n                }\n\n                return result.data.classroom;\n            }),\n            share(),\n        );\n    }\n\n    classroomRefetch(): void {\n        this.getClassroom$();\n        this.classroomQuery$.refetch();\n    }\n\n    setClassroomFiltersInput(filters: IClassroomFiltersInput = {}) {\n        this.classroomFiltersInput = { ...this.classroomFiltersInput, ...filters };\n    }\n\n    createEnrollmentInvitation(createEnrollmentInput: CreateEnrollmentInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICreateEnrollmentMutation>({\n                mutation: gql`\n                    mutation CreateEnrollment($enrollmentInput: EnrollmentInput, $invitedStudent: StudentInput) {\n                        createEnrollment(enrollmentInput: $enrollmentInput, invitedStudent: $invitedStudent) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    enrollmentInput: createEnrollmentInput.enrollmentInput,\n                    invitedStudent: createEnrollmentInput.invitedStudent,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateEnrollmentMutation>) => {\n                    return result.data.createEnrollment;\n                }),\n            );\n    }\n\n    getEnrollment(enrollmentId: string): Observable<Enrollment> {\n        this.getEnrollmentQuery$ = this.apollo.watchQuery({\n            query: gql`\n            {\n                enrollment(id: \"${enrollmentId}\") {\n                    ...enrollmentDetail\n                }\n            }\n            ${ENROLLMENT_DETAIL}\n            `,\n        });\n\n        return this.getEnrollmentQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IEnrollment>) => result.data.enrollment),\n        );\n    }\n\n    refetchEnrollment(): void {\n        if (this.getEnrollmentQuery$) {\n            this.getEnrollmentQuery$.refetch();\n        }\n    }\n\n    cancelEnrollment(id: string): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICancelEnrollmentMutation>({\n                mutation: gql`\n                    mutation CancelEnrollmentMutation {\n                        cancelEnrollment(id: \"${id}\") {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICancelEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.cancelEnrollment;\n                }),\n            );\n    }\n\n    changeEnrollmentSchedule(changeScheduleInput: IChangeScheduleInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<IChangeEnrollmentScheduleMutation>({\n                mutation: gql`\n                    mutation ChangeEnrollmentScheduleMutation($changeScheduleInput: ChangeScheduleInput) {\n                        changeEnrollmentSchedule(changeScheduleInput: $changeScheduleInput) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    changeScheduleInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeEnrollmentScheduleMutation>) => {\n                    return result.data.changeEnrollmentSchedule;\n                }),\n            );\n    }\n\n    transferEnrollment(id: string, events: Event[]) {\n        return this.apollo\n            .mutate<ITransferEnrollmentMutation>({\n                mutation: gql`\n                    mutation removeStudentFromGroup($id: id, $events: EventsInput) {\n                        removeStudentFromGroup(id: $id, events: $events) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    id,\n                    events,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ITransferEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.removeStudentFromGroup;\n                }),\n            );\n    }\n\n    startClass(startClassInput: IStartClassInput): Observable<ClassRecord> {\n        return this.apollo\n            .mutate<IStartClassMutation>({\n                mutation: gql`\n                    mutation StartClassMutation($startClassInput: StartClassInput) {\n                        startClass(startClassInput: $startClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { startClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IStartClassMutation>) => {\n                    const classInProgress = result.data.startClass;\n                    this.classInProgressSource.next(classInProgress);\n\n                    this.classroomRefetch();\n                    return classInProgress;\n                }),\n            );\n    }\n\n    finishClass(finishClassInput: IFinishClassInput): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IFinishClassMutation>({\n                mutation: gql`\n                    mutation FinishClassMutation($finishClassInput: FinishClassInput) {\n                        finishClass(finishClassInput: $finishClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { finishClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IFinishClassMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.finishClass;\n                }),\n            );\n    }\n\n    getGroupsQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query ClassroomQuery($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        id\n                        studyGroups {\n                            ...studyGroupSummary\n                        }\n                    }\n                }\n                ${STUDY_GROUP_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n    }\n\n    getGroupById(id: string): Observable<StudyGroup> {\n        this.getGroupByIdQuery$ = this.apollo.watchQuery<any>({\n            query: gql`\n                query findGroupById($id: String) {\n                    findGroupById(id: $id) {\n                        ...studyGroupDetails\n                    }\n                }\n                ${STUDY_GROUP_DETAILS}\n            `,\n            variables: {\n                id,\n            },\n        });\n\n        return this.getGroupByIdQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IFindGroupById>) => result.data.findGroupById),\n        );\n    }\n\n    refetchCurrentGroupById(groupId?: string): void {\n        if (groupId) {\n            this.getGroupById(groupId);\n        }\n\n        if (this.getGroupByIdQuery$) {\n            this.getGroupByIdQuery$.refetch();\n        }\n    }\n\n    createStudyGroup(createGroupInput: CreateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<ICreateStudyGroupMutation>({\n                mutation: gql`\n                    mutation CreateGroupMutation($createGroupInput: CreateStudyGroupInput) {\n                        createStudyGroup(createGroupInput: $createGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    createGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.createStudyGroup;\n                }),\n            );\n    }\n\n    updateStudyGroup(studyGroupInput: IUpdateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IUpdateStudyGroupMutation>({\n                mutation: gql`\n                    mutation UpdateStudyGroupMutation($studyGroupInput: UpdateStudyGroupInput) {\n                        updateStudyGroup(studyGroupInput: $studyGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    studyGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.studyGroup;\n                }),\n            );\n    }\n\n    removeStudyGroup(removeGroupInput: IRemoveGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IRemoveGroupMutation>({\n                mutation: gql`\n                    mutation RemoveStudyGroupMutation($removeGroupInput: RemoveStudyGroupInput) {\n                        removeStudyGroup(removeGroupInput: $removeGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    removeGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRemoveGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.group;\n                }),\n            );\n    }\n\n    addStudentToGroup(enrollmentInput: IAddStudentToGroupInput) {\n        return this.apollo\n            .mutate<IAddStudentToGroupMutation>({\n                mutation: gql`\n                    mutation AddStudentToGroupMutation($enrollmentInput: AddStudentToGroupInput) {\n                        addStudentToGroup(enrollmentInput: $enrollmentInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    enrollmentInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IAddStudentToGroupMutation>) => {\n                    this.classroomRefetch();\n                    this.refetchCurrentGroupById();\n                    return result.data.addStudentToGroup;\n                }),\n            );\n    }\n\n    revertFinishedClassStatus(\n        revertFinishedClassStatusInput: IRevertFinishedClassStatusInput,\n    ): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IRevertFinishedClassStatusMutation>({\n                mutation: gql`\n                    mutation revertFinishedClassStatusMutation(\n                        $revertFinishedClassStatusInput: RevertFinishedClassStatusInput\n                    ) {\n                        revertFinishedClassStatus(revertFinishedClassStatusInput: $revertFinishedClassStatusInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { revertFinishedClassStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertFinishedClassStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertFinishedClassStatus;\n                }),\n            );\n    }\n\n    revertLessonStatus(revertLessonStatusInput: IRevertLessonStatusInput): Observable<Lesson> {\n        return this.apollo\n            .mutate<IRevertLessonStatusMutation>({\n                mutation: gql`\n                    mutation revertLessonStatusMutation($revertLessonStatusInput: RevertLessonStatusInput) {\n                        revertLessonStatus(revertLessonStatusInput: $revertLessonStatusInput) {\n                            ...lessonSummary\n                        }\n                    }\n                    ${LESSON_SUMMARY}\n                `,\n                variables: { revertLessonStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertLessonStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertLessonStatus;\n                }),\n            );\n    }\n\n    activateEnrollment(enrollmentId: string): Observable<any> {\n        return this.apollo\n            .mutate<IActivateEnrollmentMutation>({\n                mutation: gql`\n                    mutation ActivateEnrollmentMutation($enrollmentId: ID) {\n                        activateEnrollment(enrollmentId: $enrollmentId) {\n                            id\n                        }\n                    }\n                `,\n                variables: { enrollmentId },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IActivateEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.updatedEnrollment;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "events",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Event[]",
                    "optional": true,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "studyGroupId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 76
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IUpdateStudyGroupMutation",
            "id": "interface-IUpdateStudyGroupMutation-393bbeee17eb6281c8a64cc8ff3beb12",
            "file": "src/app/@core/services/classroom.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\nimport {\n    ClassRecord,\n    ClassRecordType,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from '../models/class-record.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, SourceType, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\n\nimport { CreateStudyGroupInput } from 'app/classroom/pages/groups-page/groups-page.component';\nimport { ENROLLMENT_DETAIL } from 'app/@core/graphql/enrollment.graphql';\nimport { CLASSROOM_SUMMARY } from '../graphql/classroom.graphql';\nimport { CLASS_RECORD_SUMMARY } from '../graphql/class-record.graphql';\nimport { STUDY_GROUP_DETAILS, STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { LESSON_SUMMARY } from '../graphql/lesson.graphql';\nimport { Lesson } from '../models/lesson.model';\n\ninterface IStartClassMutation {\n    startClass: ClassRecord;\n}\n\nexport interface IStartClassInput {\n    lessonId: string;\n    levelId: string;\n    sourceId: string;\n    sourceType: SourceType;\n    teacherNotes?: string;\n}\n\ninterface ICreateEnrollmentMutation {\n    createEnrollment: Enrollment;\n}\n\ninterface IEnrollment {\n    enrollment: Enrollment;\n}\n\ninterface IGetEnrollments {\n    enrollments: Enrollment[];\n}\n\ninterface IFindGroupById {\n    findGroupById: StudyGroup;\n}\n\ninterface ICancelEnrollmentMutation {\n    cancelEnrollment: Enrollment;\n}\n\ninterface IChangeScheduleInput {\n    enrollmentId: string;\n    events: Event[];\n}\n\ninterface IChangeEnrollmentScheduleMutation {\n    changeEnrollmentSchedule: Enrollment;\n}\n\ninterface ICreateStudyGroupMutation {\n    createStudyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupMutation {\n    studyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupInput {\n    studyGroupId: string;\n    name: string;\n    events?: Event[];\n}\n\ninterface IRemoveGroupInput {\n    studyGroupId: string;\n}\n\ninterface IRemoveGroupMutation {\n    group: StudyGroup;\n}\n\ninterface StudyGroupAttendeInput {\n    studentId: string;\n    attended: boolean;\n}\ninterface IActivateEnrollmentMutation {\n    updatedEnrollment: Enrollment;\n}\n\nexport interface IFinishClassInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n    teacherNotes?: string;\n    status: string;\n    lessonStartedAt: string;\n    lessonEndedAt: string;\n    attendees?: StudyGroupAttendeInput[];\n}\n\ninterface IFinishClassMutation {\n    finishClass: ClassRecordType;\n}\n\ninterface ITransferEnrollmentMutation {\n    removeStudentFromGroup: Enrollment;\n}\nexport interface IRevertFinishedClassStatusInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n}\n\ninterface IRevertFinishedClassStatusMutation {\n    revertFinishedClassStatus: ClassRecordType;\n}\nexport interface IRevertLessonStatusInput {\n    sourceId: string;\n    sourceType: SourceType;\n    lessonId: string;\n}\n\ninterface IRevertLessonStatusMutation {\n    revertLessonStatus: Lesson;\n}\n\nexport interface Student {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    opened?: boolean; // front-end only field\n}\n\ninterface IClassroomQuery {\n    classroom: IClassroom;\n}\n\nexport interface IClassroom {\n    id?: string;\n    classInProgress?: ClassRecordType;\n    enrollments?: Enrollment[];\n    studyGroups?: StudyGroup[];\n    students?: Student[];\n    studentEnrollments?: Enrollment[];\n}\n\nexport interface IClassroomFiltersInput {\n    enrollmentStatus?: string;\n    studyGroupStatus?: string;\n}\n\ninterface IAddStudentToGroupMutation {\n    addStudentToGroup: Enrollment;\n}\ninterface IAddStudentToGroupInput {\n    id: string;\n    studyGroupId: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClassroomService {\n    private classInProgressSource = new BehaviorSubject<ClassRecord>(undefined);\n\n    public classInProgress$ = this.classInProgressSource.asObservable();\n\n    getGroupByIdQuery$: QueryRef<IFindGroupById>;\n    getEnrollmentQuery$: QueryRef<IEnrollment>;\n    classroomQuery$: QueryRef<IClassroomQuery>;\n\n    classroomFiltersInput: IClassroomFiltersInput = {\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    };\n\n    constructor(private apollo: Apollo) {}\n\n    getClassroom$(): Observable<IClassroom> {\n        this.classroomQuery$ = this.apollo.watchQuery({\n            query: gql`\n                query Classroom($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        ...classroomSummary\n                    }\n                }\n                ${CLASSROOM_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n\n        return this.classroomQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IClassroomQuery>) => {\n                const classInProgress = result.data.classroom.classInProgress;\n                if (!classInProgress) {\n                    this.classInProgressSource.next(null);\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        this.classInProgressSource.next({\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        });\n                    } else {\n                        this.classInProgressSource.next({\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        });\n                    }\n                }\n\n                return result.data.classroom;\n            }),\n            share(),\n        );\n    }\n\n    classroomRefetch(): void {\n        this.getClassroom$();\n        this.classroomQuery$.refetch();\n    }\n\n    setClassroomFiltersInput(filters: IClassroomFiltersInput = {}) {\n        this.classroomFiltersInput = { ...this.classroomFiltersInput, ...filters };\n    }\n\n    createEnrollmentInvitation(createEnrollmentInput: CreateEnrollmentInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICreateEnrollmentMutation>({\n                mutation: gql`\n                    mutation CreateEnrollment($enrollmentInput: EnrollmentInput, $invitedStudent: StudentInput) {\n                        createEnrollment(enrollmentInput: $enrollmentInput, invitedStudent: $invitedStudent) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    enrollmentInput: createEnrollmentInput.enrollmentInput,\n                    invitedStudent: createEnrollmentInput.invitedStudent,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateEnrollmentMutation>) => {\n                    return result.data.createEnrollment;\n                }),\n            );\n    }\n\n    getEnrollment(enrollmentId: string): Observable<Enrollment> {\n        this.getEnrollmentQuery$ = this.apollo.watchQuery({\n            query: gql`\n            {\n                enrollment(id: \"${enrollmentId}\") {\n                    ...enrollmentDetail\n                }\n            }\n            ${ENROLLMENT_DETAIL}\n            `,\n        });\n\n        return this.getEnrollmentQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IEnrollment>) => result.data.enrollment),\n        );\n    }\n\n    refetchEnrollment(): void {\n        if (this.getEnrollmentQuery$) {\n            this.getEnrollmentQuery$.refetch();\n        }\n    }\n\n    cancelEnrollment(id: string): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICancelEnrollmentMutation>({\n                mutation: gql`\n                    mutation CancelEnrollmentMutation {\n                        cancelEnrollment(id: \"${id}\") {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICancelEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.cancelEnrollment;\n                }),\n            );\n    }\n\n    changeEnrollmentSchedule(changeScheduleInput: IChangeScheduleInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<IChangeEnrollmentScheduleMutation>({\n                mutation: gql`\n                    mutation ChangeEnrollmentScheduleMutation($changeScheduleInput: ChangeScheduleInput) {\n                        changeEnrollmentSchedule(changeScheduleInput: $changeScheduleInput) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    changeScheduleInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeEnrollmentScheduleMutation>) => {\n                    return result.data.changeEnrollmentSchedule;\n                }),\n            );\n    }\n\n    transferEnrollment(id: string, events: Event[]) {\n        return this.apollo\n            .mutate<ITransferEnrollmentMutation>({\n                mutation: gql`\n                    mutation removeStudentFromGroup($id: id, $events: EventsInput) {\n                        removeStudentFromGroup(id: $id, events: $events) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    id,\n                    events,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ITransferEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.removeStudentFromGroup;\n                }),\n            );\n    }\n\n    startClass(startClassInput: IStartClassInput): Observable<ClassRecord> {\n        return this.apollo\n            .mutate<IStartClassMutation>({\n                mutation: gql`\n                    mutation StartClassMutation($startClassInput: StartClassInput) {\n                        startClass(startClassInput: $startClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { startClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IStartClassMutation>) => {\n                    const classInProgress = result.data.startClass;\n                    this.classInProgressSource.next(classInProgress);\n\n                    this.classroomRefetch();\n                    return classInProgress;\n                }),\n            );\n    }\n\n    finishClass(finishClassInput: IFinishClassInput): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IFinishClassMutation>({\n                mutation: gql`\n                    mutation FinishClassMutation($finishClassInput: FinishClassInput) {\n                        finishClass(finishClassInput: $finishClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { finishClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IFinishClassMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.finishClass;\n                }),\n            );\n    }\n\n    getGroupsQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query ClassroomQuery($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        id\n                        studyGroups {\n                            ...studyGroupSummary\n                        }\n                    }\n                }\n                ${STUDY_GROUP_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n    }\n\n    getGroupById(id: string): Observable<StudyGroup> {\n        this.getGroupByIdQuery$ = this.apollo.watchQuery<any>({\n            query: gql`\n                query findGroupById($id: String) {\n                    findGroupById(id: $id) {\n                        ...studyGroupDetails\n                    }\n                }\n                ${STUDY_GROUP_DETAILS}\n            `,\n            variables: {\n                id,\n            },\n        });\n\n        return this.getGroupByIdQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IFindGroupById>) => result.data.findGroupById),\n        );\n    }\n\n    refetchCurrentGroupById(groupId?: string): void {\n        if (groupId) {\n            this.getGroupById(groupId);\n        }\n\n        if (this.getGroupByIdQuery$) {\n            this.getGroupByIdQuery$.refetch();\n        }\n    }\n\n    createStudyGroup(createGroupInput: CreateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<ICreateStudyGroupMutation>({\n                mutation: gql`\n                    mutation CreateGroupMutation($createGroupInput: CreateStudyGroupInput) {\n                        createStudyGroup(createGroupInput: $createGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    createGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.createStudyGroup;\n                }),\n            );\n    }\n\n    updateStudyGroup(studyGroupInput: IUpdateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IUpdateStudyGroupMutation>({\n                mutation: gql`\n                    mutation UpdateStudyGroupMutation($studyGroupInput: UpdateStudyGroupInput) {\n                        updateStudyGroup(studyGroupInput: $studyGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    studyGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.studyGroup;\n                }),\n            );\n    }\n\n    removeStudyGroup(removeGroupInput: IRemoveGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IRemoveGroupMutation>({\n                mutation: gql`\n                    mutation RemoveStudyGroupMutation($removeGroupInput: RemoveStudyGroupInput) {\n                        removeStudyGroup(removeGroupInput: $removeGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    removeGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRemoveGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.group;\n                }),\n            );\n    }\n\n    addStudentToGroup(enrollmentInput: IAddStudentToGroupInput) {\n        return this.apollo\n            .mutate<IAddStudentToGroupMutation>({\n                mutation: gql`\n                    mutation AddStudentToGroupMutation($enrollmentInput: AddStudentToGroupInput) {\n                        addStudentToGroup(enrollmentInput: $enrollmentInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    enrollmentInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IAddStudentToGroupMutation>) => {\n                    this.classroomRefetch();\n                    this.refetchCurrentGroupById();\n                    return result.data.addStudentToGroup;\n                }),\n            );\n    }\n\n    revertFinishedClassStatus(\n        revertFinishedClassStatusInput: IRevertFinishedClassStatusInput,\n    ): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IRevertFinishedClassStatusMutation>({\n                mutation: gql`\n                    mutation revertFinishedClassStatusMutation(\n                        $revertFinishedClassStatusInput: RevertFinishedClassStatusInput\n                    ) {\n                        revertFinishedClassStatus(revertFinishedClassStatusInput: $revertFinishedClassStatusInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { revertFinishedClassStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertFinishedClassStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertFinishedClassStatus;\n                }),\n            );\n    }\n\n    revertLessonStatus(revertLessonStatusInput: IRevertLessonStatusInput): Observable<Lesson> {\n        return this.apollo\n            .mutate<IRevertLessonStatusMutation>({\n                mutation: gql`\n                    mutation revertLessonStatusMutation($revertLessonStatusInput: RevertLessonStatusInput) {\n                        revertLessonStatus(revertLessonStatusInput: $revertLessonStatusInput) {\n                            ...lessonSummary\n                        }\n                    }\n                    ${LESSON_SUMMARY}\n                `,\n                variables: { revertLessonStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertLessonStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertLessonStatus;\n                }),\n            );\n    }\n\n    activateEnrollment(enrollmentId: string): Observable<any> {\n        return this.apollo\n            .mutate<IActivateEnrollmentMutation>({\n                mutation: gql`\n                    mutation ActivateEnrollmentMutation($enrollmentId: ID) {\n                        activateEnrollment(enrollmentId: $enrollmentId) {\n                            id\n                        }\n                    }\n                `,\n                variables: { enrollmentId },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IActivateEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.updatedEnrollment;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "studyGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StudyGroup",
                    "optional": false,
                    "description": "",
                    "line": 72
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IUserResult",
            "id": "interface-IUserResult-56d579829aba74f364a721cb116cbe5e",
            "file": "src/app/@core/services/user.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Apollo, gql } from 'apollo-angular';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { environment } from 'environments/environment';\nimport { UserAuthDetails, UserProfile } from 'app/@core/models/user-profile.model';\nimport { UserSessionService } from 'app/@core/services/user-session.service';\nimport { USER_PROFILE } from '../graphql/user-profile.graphql';\nimport { CreatePasswordStudentInfo } from '../models/invitation.model';\nimport { LiveChatService } from './live-chat.service';\n\ninterface ILoginResult {\n    token: string;\n}\n\ninterface IUserResult {\n    myProfile: UserProfile;\n}\n\ninterface IUpdateMyProfileResult {\n    updateMyProfile: UserProfile;\n}\n\ninterface IChangePassword {\n    user: UserProfile;\n}\n\ninterface INewUser {\n    email: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n    cpf: string;\n    postalCode: string;\n    street: string;\n    streetNumber: string;\n    streetComplement: string;\n    district: string;\n    city: string;\n    state: string;\n    addressType?: string;\n    countryISO?: string;\n    category?: string;\n    earlyAccessCode?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n    private loggedUserSubject: BehaviorSubject<UserAuthDetails>;\n    public loggedUser: Observable<UserAuthDetails>;\n\n    private studentInfoSubject = new BehaviorSubject<CreatePasswordStudentInfo | null>(null);\n    studentInfo$ = this.studentInfoSubject.asObservable();\n\n    constructor(\n        private http: HttpClient,\n        private apollo: Apollo,\n        private _userSessionService: UserSessionService,\n        private liveChatService: LiveChatService,\n    ) {\n        this.loggedUserSubject = new BehaviorSubject<UserAuthDetails>(null);\n        this.loggedUser = this.loggedUserSubject.asObservable();\n\n        this.setUserFromAuthToken().subscribe();\n    }\n\n    setUserFromAuthToken(): Observable<UserAuthDetails> {\n        const jwt = this._userSessionService.getAuthToken();\n        if (!jwt) {\n            return of(undefined);\n        }\n\n        this.liveChatService.getLiveChatToken();\n        const jwtPayload = JSON.parse(atob(jwt.split('.')[1])) as UserAuthDetails;\n        if (!jwtPayload.roles) {\n            jwtPayload.roles = [];\n        }\n\n        this.loggedUserSubject.next(jwtPayload);\n\n        return of(jwtPayload);\n    }\n\n    getUserProfile(): Observable<UserProfile> {\n        if (!this._userSessionService.getAuthToken()) {\n            return;\n        }\n\n        return this.apollo\n            .query({\n                query: gql`\n                    {\n                        myProfile {\n                            ...userProfile\n                        }\n                    }\n                    ${USER_PROFILE}\n                `,\n            })\n            .pipe(map((result: ApolloQueryResult<IUserResult>) => result.data.myProfile));\n    }\n\n    updateMyProfile(userProfile: UserProfile): Observable<UserProfile> {\n        return this.apollo\n            .mutate<IUpdateMyProfileResult>({\n                variables: {\n                    userProfile,\n                },\n                mutation: gql`\n                    mutation updateMyProfile($userProfile: UserInput) {\n                        updateMyProfile(userProfile: $userProfile) {\n                            ...userProfile\n                        }\n                    }\n                    ${USER_PROFILE}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateMyProfileResult>) => {\n                    const updatedUser = result.data.updateMyProfile;\n                    return updatedUser;\n                }),\n            );\n    }\n\n    changePassword(changePasswordInput: {\n        userEmail: string;\n        oldPassword: string;\n        newPassword: string;\n    }): Observable<any> {\n        return this.apollo\n            .mutate<IChangePassword>({\n                variables: {\n                    changePasswordInput,\n                },\n                mutation: gql`\n                    mutation changeMyPassword($changePasswordInput: ChangePasswordInput) {\n                        changeMyPassword(changePasswordInput: $changePasswordInput) {\n                            id\n                        }\n                    }\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangePassword>) => {\n                    const updatedUser = result.data.user;\n                    return updatedUser;\n                }),\n            );\n    }\n\n    register(newUser: INewUser): Observable<{ token: string }> {\n        return this.http.post<{ token: string }>(`${environment.apiUrl}/auth/register`, newUser);\n    }\n\n    login(email: string, password: string): Observable<{ token: string }> {\n        return this.http.post<any>(\n            `${environment.apiUrl}/auth/login`,\n            { email, password },\n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                responseType: 'json',\n            },\n        );\n    }\n\n    login2(email: string, password: string): Observable<UserProfile> {\n        return this.http.post<any>(`${environment.apiUrl}/auth/login`, { email, password });\n    }\n\n    loginSuccess(result: ILoginResult) {\n        this._userSessionService.setAuthToken(result.token);\n        return this.setUserFromAuthToken();\n    }\n\n    logout(): void {\n        this.loggedUserSubject.next(null);\n        this._userSessionService.removeAuthToken();\n    }\n\n    forgotPassword(email: string): Observable<any> {\n        return this.http.post<any>(\n            `${environment.apiUrl}/auth/forgot-password`,\n            { email },\n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                responseType: 'json',\n            },\n        );\n    }\n\n    resetPassword(resetPasswordToken: string, newPassword: string): Observable<any> {\n        return this.http.post<any>(\n            `${environment.apiUrl}/auth/reset-password`,\n            { resetPasswordToken, newPassword },\n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                responseType: 'json',\n            },\n        );\n    }\n\n    validateEmail(email: string): Observable<any> {\n        return this.http.post<any>(\n            `${environment.apiUrl}/auth/email-validation`,\n            { primaryEmail: email },\n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                responseType: 'json',\n            },\n        );\n    }\n\n    setStudentInfoForCreatePassword(studentInfo: CreatePasswordStudentInfo) {\n        this.studentInfoSubject.next(studentInfo);\n    }\n\n    getStudentInfo() {\n        return this.studentInfoSubject.getValue();\n    }\n\n    hasRole(role: string) {\n        const { roles } = this.loggedUserSubject.getValue();\n        return roles.includes(role);\n    }\n}\n",
            "properties": [
                {
                    "name": "myProfile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserProfile",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Lesson",
            "id": "interface-Lesson-dc733994e76c972cd858e32caa18fbbb",
            "file": "src/app/@core/models/lesson.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { LessonMaterial } from './lesson-material.model';\n\nexport interface Lesson {\n    id?: string;\n    category?: string;\n    code?: string;\n    lessonMaterial?: LessonMaterial;\n    levelOrder?: number;\n    slug?: string;\n    subject?: string;\n    title?: string;\n}\n",
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "lessonMaterial",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LessonMaterial",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "levelOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "slug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "subject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "LessonMaterial",
            "id": "interface-LessonMaterial-680a7145150b05d7d1519e810eba2360",
            "file": "src/app/@core/models/lesson-material.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Media } from './media.model';\n\nexport interface MediaAssociation {\n    media?: Media;\n    order?: number;\n}\n\nexport interface Activity {\n    activitySlides?: MediaAssociation[];\n    order?: number;\n    title?: string;\n}\n\nexport interface LessonMaterial {\n    activities?: Activity[];\n    audio?: MediaAssociation[];\n    lectureScript?: MediaAssociation[];\n    studentBook?: MediaAssociation[];\n}\n",
            "properties": [
                {
                    "name": "activities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Activity[]",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "audio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MediaAssociation[]",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "lectureScript",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MediaAssociation[]",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "studentBook",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MediaAssociation[]",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "LessonRecordList",
            "id": "interface-LessonRecordList-d95381fc1996794175d33172c7609136",
            "file": "src/app/@core/models/class-record.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Enrollment, SourceType, StudyGroup } from './enrollment.model';\nimport { Lesson } from './lesson.model';\n\ninterface ClassRecordInterface {\n    id?: string;\n    teacherNotes?: string;\n    status?: string;\n    startedAt?: string; // DateTime\n    completedAt?: string; // DateTime\n    lessonStartedAt?: string;\n    lessonEndedAt?: string;\n    lesson?: Lesson;\n    revertClassStatus?: boolean;\n}\n\nexport interface EnrollmentClassRecord extends ClassRecordInterface {\n    enrollmentId: string;\n    enrollment?: Enrollment;\n}\n\nexport interface StudyGroupClassRecord extends ClassRecordInterface {\n    studyGroupId: string;\n    studyGroup?: StudyGroup;\n    studyGroupClassAttendees?: any;\n}\n\nexport type ClassRecordType = EnrollmentClassRecord | StudyGroupClassRecord;\n\nexport interface ClassRecord {\n    sourceType: SourceType;\n    enrollmentClassRecord?: EnrollmentClassRecord;\n    studyGroupClassRecord?: StudyGroupClassRecord;\n}\n\nexport interface LessonRecordList extends Lesson {\n    classRecords?: ClassRecordType[];\n}\n\nexport interface ClassSession {\n    eventStart: string;\n    eventEnd: string;\n    lessonFinished: boolean;\n    attendees?: ClassSessionAttendee[];\n}\n\nexport interface ClassSessionAttendee {\n    studentId: string;\n    attended: boolean;\n}\n",
            "properties": [
                {
                    "name": "classRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClassRecordType[]",
                    "optional": true,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "Lesson"
        },
        {
            "name": "Level",
            "id": "interface-Level-50bc587b45e8503caae537264ad84b8c",
            "file": "src/app/@core/models/level.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Lesson } from './lesson.model';\nimport { Module } from './module.model';\n\nexport interface LevelLayoutSettings {\n    svgImageUrl?: string;\n    icon?: string;\n    primaryColour?: string; // hex\n    secondaryColour?: string; // hex\n}\n\nexport interface Level {\n    id?: string;\n    code?: string;\n    description?: string;\n    moduleOrder?: number;\n    name?: string;\n    label?: string;\n    layoutSettings?: LevelLayoutSettings;\n    lessons?: Lesson[];\n    module?: Module;\n}\n",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "layoutSettings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LevelLayoutSettings",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "lessons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Lesson[]",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "module",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Module",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "moduleOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "LevelLayoutSettings",
            "id": "interface-LevelLayoutSettings-50bc587b45e8503caae537264ad84b8c",
            "file": "src/app/@core/models/level.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Lesson } from './lesson.model';\nimport { Module } from './module.model';\n\nexport interface LevelLayoutSettings {\n    svgImageUrl?: string;\n    icon?: string;\n    primaryColour?: string; // hex\n    secondaryColour?: string; // hex\n}\n\nexport interface Level {\n    id?: string;\n    code?: string;\n    description?: string;\n    moduleOrder?: number;\n    name?: string;\n    label?: string;\n    layoutSettings?: LevelLayoutSettings;\n    lessons?: Lesson[];\n    module?: Module;\n}\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "primaryColour",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "secondaryColour",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "svgImageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Media",
            "id": "interface-Media-f437250fdb6d9aee0e8ec80d49388197",
            "file": "src/app/@core/models/media.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Media {\n    id?: string;\n    altTxt?: string;\n    largeFilename?: string;\n    mediumFilename?: string;\n    mimeType?: string;\n    rootUri?: string;\n    smallFilename?: string;\n    thumbnailFilename?: string;\n}\n",
            "properties": [
                {
                    "name": "altTxt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "largeFilename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "mediumFilename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "mimeType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "rootUri",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "smallFilename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "thumbnailFilename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "MediaAssociation",
            "id": "interface-MediaAssociation-680a7145150b05d7d1519e810eba2360",
            "file": "src/app/@core/models/lesson-material.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Media } from './media.model';\n\nexport interface MediaAssociation {\n    media?: Media;\n    order?: number;\n}\n\nexport interface Activity {\n    activitySlides?: MediaAssociation[];\n    order?: number;\n    title?: string;\n}\n\nexport interface LessonMaterial {\n    activities?: Activity[];\n    audio?: MediaAssociation[];\n    lectureScript?: MediaAssociation[];\n    studentBook?: MediaAssociation[];\n}\n",
            "properties": [
                {
                    "name": "media",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Media",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ModalConfirmationDataOptions",
            "id": "interface-ModalConfirmationDataOptions-5394e8f694e2506a2a9a73d1dcde9fa3",
            "file": "src/app/@shared/components/modal-confirmation/modal-confirmation.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nexport interface ModalConfirmationDataOptions {\n    title?: string;\n    message?: string;\n    confirmLabel?: string;\n    cancelLabel?: string;\n}\n\n@Component({\n    selector: 'app-modal-confirmation',\n    templateUrl: './modal-confirmation.component.html',\n    styleUrls: ['./modal-confirmation.component.scss'],\n})\nexport class ModalConfirmationComponent {\n    constructor(\n        public dialogRef: MatDialogRef<ModalConfirmationComponent>,\n        @Inject(MAT_DIALOG_DATA) private data: ModalConfirmationDataOptions,\n    ) {\n        this.dialogRef.addPanelClass('dialog-border-radius--padding');\n    }\n\n    get title(): string {\n        return this.data?.title;\n    }\n\n    get message(): string {\n        return this.data?.message ?? 'Are you sure you want to continue this action?';\n    }\n\n    get confirmLabel(): string {\n        return this.data?.confirmLabel ?? 'Confirm';\n    }\n\n    get cancelLabel(): string {\n        return this.data?.cancelLabel ?? 'Cancel';\n    }\n}\n",
            "properties": [
                {
                    "name": "cancelLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "confirmLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Module",
            "id": "interface-Module-9315c88a81052ea776242ea1dfb46312",
            "file": "src/app/@core/models/module.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Level } from './level.model';\nimport { Program } from './program.model';\n\nexport interface Module {\n    id?: string;\n    code?: string;\n    description?: string;\n    name?: string;\n    programOrder?: number;\n    levels?: Level[];\n    program?: Program;\n}\n",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "levels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Level[]",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "program",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Program",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "programOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "PostalCode",
            "id": "interface-PostalCode-7c5f12a454b0407016af1c60372b9060",
            "file": "src/app/@shared/components/forms/address-input/address-input.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\nimport { Address } from 'app/@core/models/address.model';\nimport { PostalCodeService } from 'app/@core/services/postal-code.service';\n\n// Brazilian Post Code API object\ninterface PostalCode {\n    logradouro: string;\n    complemento: string;\n    bairro: string;\n    localidade: string;\n    uf: string;\n    erro: boolean;\n}\n\n@Component({\n    selector: 'app-address-input',\n    templateUrl: './address-input.component.html',\n    styleUrls: ['./address-input.component.scss'],\n})\nexport class AddressInputComponent implements OnChanges {\n    @Input() address: Address;\n\n    @Input() column: boolean;\n\n    formAddress: FormGroup;\n\n    constructor(private formBuilder: FormBuilder, private postalCodeService: PostalCodeService) {}\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes['address']) {\n            this.formAddress = this.formBuilder.group({\n                postalCode: [this.address.postalCode, Validators.required],\n                street: [this.address.street, Validators.required],\n                streetNumber: [\n                    this.address.streetNumber,\n                    Validators.compose([Validators.required, Validators.pattern('^[0-9]*$')]),\n                ],\n                streetComplement: [this.address.streetComplement],\n                district: [this.address.district, Validators.required],\n                city: [{ value: this.address.city, disabled: true }, Validators.required],\n                state: [{ value: this.address.state, disabled: true }, Validators.required],\n            });\n        }\n    }\n\n    getAddress(): void {\n        const postalCode = this.formAddress.controls['postalCode'].value;\n        if (postalCode?.length === 8) {\n            this.postalCodeService.getAddress(postalCode).subscribe((data: PostalCode) => {\n                if (!data.erro) {\n                    this.formAddress.patchValue({\n                        street: `${data.logradouro}`,\n                        streetComplement: `${data.complemento}`,\n                        district: `${data.bairro}`,\n                        city: `${data.localidade}`,\n                        state: `${data.uf}`,\n                    });\n                } else {\n                    this.formAddress.patchValue({\n                        postalCode: '',\n                        street: '',\n                        streetComplement: '',\n                        district: '',\n                        city: '',\n                        state: '',\n                    });\n\n                    alert('Postal Code not found\\nPlease enter a valid Postal Code.');\n                }\n            });\n        }\n    }\n}\n",
            "properties": [
                {
                    "name": "bairro",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "complemento",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "erro",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "localidade",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "logradouro",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "uf",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "PricePeriod",
            "id": "interface-PricePeriod-d90153a495076db2e5de2c20f10e48b3",
            "file": "src/app/@core/models/product.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Product {\n    description: string;\n    id: string;\n    name: string;\n    prices: ProductPrice[];\n    slug: string;\n    subcategory: ProductSubcategory;\n    selected?: boolean; // front-end only field\n    hover?: boolean; // front-end only field\n}\n\nexport interface ProductCategory {\n    code: string;\n    description: string;\n    name: string;\n}\n\ntype IntervalType = 'day' | 'month' | 'week' | 'year';\nexport interface PricePeriod {\n    interval: IntervalType;\n    intervalCount: number;\n}\n\nexport interface ProductPrice {\n    currencyIsoCode: string;\n    description: string;\n    id: string;\n    name: string;\n    pricePeriod: PricePeriod;\n    slug: string;\n    taxAmount: number;\n    type: string;\n    unitTotalAmount: number;\n}\n\nexport interface ProductSubcategory {\n    category: ProductCategory;\n    code: string;\n    description: string;\n    name: string;\n}\n\nexport interface IProductFilters {\n    categoryCode?: 'teacher_licence' | 'student_licence';\n}\n",
            "properties": [
                {
                    "name": "interval",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IntervalType",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "intervalCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Product",
            "id": "interface-Product-d90153a495076db2e5de2c20f10e48b3",
            "file": "src/app/@core/models/product.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Product {\n    description: string;\n    id: string;\n    name: string;\n    prices: ProductPrice[];\n    slug: string;\n    subcategory: ProductSubcategory;\n    selected?: boolean; // front-end only field\n    hover?: boolean; // front-end only field\n}\n\nexport interface ProductCategory {\n    code: string;\n    description: string;\n    name: string;\n}\n\ntype IntervalType = 'day' | 'month' | 'week' | 'year';\nexport interface PricePeriod {\n    interval: IntervalType;\n    intervalCount: number;\n}\n\nexport interface ProductPrice {\n    currencyIsoCode: string;\n    description: string;\n    id: string;\n    name: string;\n    pricePeriod: PricePeriod;\n    slug: string;\n    taxAmount: number;\n    type: string;\n    unitTotalAmount: number;\n}\n\nexport interface ProductSubcategory {\n    category: ProductCategory;\n    code: string;\n    description: string;\n    name: string;\n}\n\nexport interface IProductFilters {\n    categoryCode?: 'teacher_licence' | 'student_licence';\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "hover",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "prices",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductPrice[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "slug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "subcategory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductSubcategory",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ProductCategory",
            "id": "interface-ProductCategory-d90153a495076db2e5de2c20f10e48b3",
            "file": "src/app/@core/models/product.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Product {\n    description: string;\n    id: string;\n    name: string;\n    prices: ProductPrice[];\n    slug: string;\n    subcategory: ProductSubcategory;\n    selected?: boolean; // front-end only field\n    hover?: boolean; // front-end only field\n}\n\nexport interface ProductCategory {\n    code: string;\n    description: string;\n    name: string;\n}\n\ntype IntervalType = 'day' | 'month' | 'week' | 'year';\nexport interface PricePeriod {\n    interval: IntervalType;\n    intervalCount: number;\n}\n\nexport interface ProductPrice {\n    currencyIsoCode: string;\n    description: string;\n    id: string;\n    name: string;\n    pricePeriod: PricePeriod;\n    slug: string;\n    taxAmount: number;\n    type: string;\n    unitTotalAmount: number;\n}\n\nexport interface ProductSubcategory {\n    category: ProductCategory;\n    code: string;\n    description: string;\n    name: string;\n}\n\nexport interface IProductFilters {\n    categoryCode?: 'teacher_licence' | 'student_licence';\n}\n",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ProductPrice",
            "id": "interface-ProductPrice-d90153a495076db2e5de2c20f10e48b3",
            "file": "src/app/@core/models/product.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Product {\n    description: string;\n    id: string;\n    name: string;\n    prices: ProductPrice[];\n    slug: string;\n    subcategory: ProductSubcategory;\n    selected?: boolean; // front-end only field\n    hover?: boolean; // front-end only field\n}\n\nexport interface ProductCategory {\n    code: string;\n    description: string;\n    name: string;\n}\n\ntype IntervalType = 'day' | 'month' | 'week' | 'year';\nexport interface PricePeriod {\n    interval: IntervalType;\n    intervalCount: number;\n}\n\nexport interface ProductPrice {\n    currencyIsoCode: string;\n    description: string;\n    id: string;\n    name: string;\n    pricePeriod: PricePeriod;\n    slug: string;\n    taxAmount: number;\n    type: string;\n    unitTotalAmount: number;\n}\n\nexport interface ProductSubcategory {\n    category: ProductCategory;\n    code: string;\n    description: string;\n    name: string;\n}\n\nexport interface IProductFilters {\n    categoryCode?: 'teacher_licence' | 'student_licence';\n}\n",
            "properties": [
                {
                    "name": "currencyIsoCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "pricePeriod",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PricePeriod",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "slug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "taxAmount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "unitTotalAmount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ProductSubcategory",
            "id": "interface-ProductSubcategory-d90153a495076db2e5de2c20f10e48b3",
            "file": "src/app/@core/models/product.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Product {\n    description: string;\n    id: string;\n    name: string;\n    prices: ProductPrice[];\n    slug: string;\n    subcategory: ProductSubcategory;\n    selected?: boolean; // front-end only field\n    hover?: boolean; // front-end only field\n}\n\nexport interface ProductCategory {\n    code: string;\n    description: string;\n    name: string;\n}\n\ntype IntervalType = 'day' | 'month' | 'week' | 'year';\nexport interface PricePeriod {\n    interval: IntervalType;\n    intervalCount: number;\n}\n\nexport interface ProductPrice {\n    currencyIsoCode: string;\n    description: string;\n    id: string;\n    name: string;\n    pricePeriod: PricePeriod;\n    slug: string;\n    taxAmount: number;\n    type: string;\n    unitTotalAmount: number;\n}\n\nexport interface ProductSubcategory {\n    category: ProductCategory;\n    code: string;\n    description: string;\n    name: string;\n}\n\nexport interface IProductFilters {\n    categoryCode?: 'teacher_licence' | 'student_licence';\n}\n",
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductCategory",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Program",
            "id": "interface-Program-ebe17d818cef424a4dc9efa6a8a900d7",
            "file": "src/app/@core/models/program.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Module } from './module.model';\n\nexport interface Program {\n    id?: string;\n    code?: string;\n    modules?: Module[];\n    name?: string;\n    icon?: string;\n    label?: string;\n}\n",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "modules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Module[]",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "StreamState",
            "id": "interface-StreamState-6c831a8d17a9bb1f85fae7739a1aa246",
            "file": "src/app/@shared/components/audio-control-card/audio.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, BehaviorSubject, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as moment from 'moment';\n\nexport interface StreamState {\n    playing: boolean;\n    muted: boolean;\n    readableCurrentTime: string;\n    readableDuration: string;\n    duration: number | undefined;\n    currentTime: number | undefined;\n    volume: number | undefined;\n    canplay: boolean;\n    error: boolean;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class AudioService {\n    private stop$ = new Subject();\n    private audioObj = new Audio();\n    audioEvents = [\n        'ended',\n        'error',\n        'play',\n        'playing',\n        'pause',\n        'timeupdate',\n        'canplay',\n        'loadedmetadata',\n        'loadstart',\n        'volumechange',\n    ];\n    private state: StreamState = {\n        playing: false,\n        muted: false,\n        readableCurrentTime: '',\n        readableDuration: '',\n        duration: undefined,\n        currentTime: undefined,\n        canplay: false,\n        error: false,\n        volume: 100,\n    };\n\n    private stateChange: BehaviorSubject<StreamState> = new BehaviorSubject(this.state);\n\n    private streamObservable(url: string) {\n        return new Observable((observer) => {\n            // Play audio\n            this.audioObj.src = url;\n            this.audioObj.load();\n            this.audioObj.play();\n\n            const handler = (event: Event) => {\n                this.updateStateEvents(event);\n                observer.next(event);\n            };\n\n            this.addEvents(this.audioObj, this.audioEvents, handler);\n            return () => {\n                // Stop Playing\n                this.audioObj.pause();\n                this.audioObj.currentTime = 0;\n                // remove event listeners\n                this.removeEvents(this.audioObj, this.audioEvents, handler);\n                // reset state\n                this.resetState();\n            };\n        });\n    }\n\n    private addEvents(obj, events, handler) {\n        events.forEach((event) => {\n            obj.addEventListener(event, handler);\n        });\n    }\n\n    private removeEvents(obj, events, handler) {\n        events.forEach((event) => {\n            obj.removeEventListener(event, handler);\n        });\n    }\n\n    playStream(url: string) {\n        return this.streamObservable(url).pipe(takeUntil(this.stop$));\n    }\n\n    play() {\n        this.audioObj.play();\n    }\n\n    pause() {\n        this.audioObj.pause();\n    }\n\n    toggleMuted() {\n        this.audioObj.muted = !this.audioObj.muted;\n        this.state = {\n            ...this.state,\n            muted: this.audioObj.muted,\n        };\n        this.stateChange.next(this.state);\n    }\n\n    stop() {\n        this.stop$.next();\n    }\n\n    seekTo(seconds: number) {\n        this.audioObj.currentTime = seconds;\n    }\n\n    changeVolume(volume: number) {\n        this.audioObj.volume = volume / 100;\n        this.state = {\n            ...this.state,\n            volume,\n        };\n        this.stateChange.next(this.state);\n\n        if (volume === 0 && !this.state.muted) {\n            this.toggleMuted();\n        } else if (volume > 0 && this.state.muted) {\n            this.toggleMuted();\n        }\n    }\n\n    formatTime(time: number, format: string = 'mm:ss') {\n        const momentTime = time * 1000;\n        return moment.utc(momentTime).format(format);\n    }\n\n    private updateStateEvents(event: Event): void {\n        switch (event.type) {\n            case 'canplay':\n                this.state.duration = this.audioObj.duration;\n                this.state.readableDuration = this.formatTime(this.state.duration);\n                this.state.canplay = true;\n                break;\n            case 'playing':\n                this.state.playing = true;\n                break;\n            case 'pause':\n                this.state.playing = false;\n                break;\n            case 'timeupdate':\n                this.state.currentTime = this.audioObj.currentTime;\n                this.state.readableCurrentTime = this.formatTime(this.state.currentTime);\n                break;\n            case 'volumechange':\n                break;\n            case 'error':\n                this.resetState();\n                this.state.error = true;\n                break;\n        }\n        this.stateChange.next(this.state);\n    }\n\n    private resetState() {\n        this.state = {\n            playing: false,\n            muted: false,\n            readableCurrentTime: '',\n            readableDuration: '',\n            duration: undefined,\n            currentTime: undefined,\n            canplay: false,\n            error: false,\n            volume: 100,\n        };\n    }\n\n    getState(): Observable<StreamState> {\n        return this.stateChange.asObservable();\n    }\n}\n",
            "properties": [
                {
                    "name": "canplay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "currentTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "muted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "playing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "readableCurrentTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "readableDuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "volume",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Student",
            "id": "interface-Student-393bbeee17eb6281c8a64cc8ff3beb12",
            "file": "src/app/@core/services/classroom.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\nimport {\n    ClassRecord,\n    ClassRecordType,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from '../models/class-record.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, SourceType, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\n\nimport { CreateStudyGroupInput } from 'app/classroom/pages/groups-page/groups-page.component';\nimport { ENROLLMENT_DETAIL } from 'app/@core/graphql/enrollment.graphql';\nimport { CLASSROOM_SUMMARY } from '../graphql/classroom.graphql';\nimport { CLASS_RECORD_SUMMARY } from '../graphql/class-record.graphql';\nimport { STUDY_GROUP_DETAILS, STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { LESSON_SUMMARY } from '../graphql/lesson.graphql';\nimport { Lesson } from '../models/lesson.model';\n\ninterface IStartClassMutation {\n    startClass: ClassRecord;\n}\n\nexport interface IStartClassInput {\n    lessonId: string;\n    levelId: string;\n    sourceId: string;\n    sourceType: SourceType;\n    teacherNotes?: string;\n}\n\ninterface ICreateEnrollmentMutation {\n    createEnrollment: Enrollment;\n}\n\ninterface IEnrollment {\n    enrollment: Enrollment;\n}\n\ninterface IGetEnrollments {\n    enrollments: Enrollment[];\n}\n\ninterface IFindGroupById {\n    findGroupById: StudyGroup;\n}\n\ninterface ICancelEnrollmentMutation {\n    cancelEnrollment: Enrollment;\n}\n\ninterface IChangeScheduleInput {\n    enrollmentId: string;\n    events: Event[];\n}\n\ninterface IChangeEnrollmentScheduleMutation {\n    changeEnrollmentSchedule: Enrollment;\n}\n\ninterface ICreateStudyGroupMutation {\n    createStudyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupMutation {\n    studyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupInput {\n    studyGroupId: string;\n    name: string;\n    events?: Event[];\n}\n\ninterface IRemoveGroupInput {\n    studyGroupId: string;\n}\n\ninterface IRemoveGroupMutation {\n    group: StudyGroup;\n}\n\ninterface StudyGroupAttendeInput {\n    studentId: string;\n    attended: boolean;\n}\ninterface IActivateEnrollmentMutation {\n    updatedEnrollment: Enrollment;\n}\n\nexport interface IFinishClassInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n    teacherNotes?: string;\n    status: string;\n    lessonStartedAt: string;\n    lessonEndedAt: string;\n    attendees?: StudyGroupAttendeInput[];\n}\n\ninterface IFinishClassMutation {\n    finishClass: ClassRecordType;\n}\n\ninterface ITransferEnrollmentMutation {\n    removeStudentFromGroup: Enrollment;\n}\nexport interface IRevertFinishedClassStatusInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n}\n\ninterface IRevertFinishedClassStatusMutation {\n    revertFinishedClassStatus: ClassRecordType;\n}\nexport interface IRevertLessonStatusInput {\n    sourceId: string;\n    sourceType: SourceType;\n    lessonId: string;\n}\n\ninterface IRevertLessonStatusMutation {\n    revertLessonStatus: Lesson;\n}\n\nexport interface Student {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    opened?: boolean; // front-end only field\n}\n\ninterface IClassroomQuery {\n    classroom: IClassroom;\n}\n\nexport interface IClassroom {\n    id?: string;\n    classInProgress?: ClassRecordType;\n    enrollments?: Enrollment[];\n    studyGroups?: StudyGroup[];\n    students?: Student[];\n    studentEnrollments?: Enrollment[];\n}\n\nexport interface IClassroomFiltersInput {\n    enrollmentStatus?: string;\n    studyGroupStatus?: string;\n}\n\ninterface IAddStudentToGroupMutation {\n    addStudentToGroup: Enrollment;\n}\ninterface IAddStudentToGroupInput {\n    id: string;\n    studyGroupId: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClassroomService {\n    private classInProgressSource = new BehaviorSubject<ClassRecord>(undefined);\n\n    public classInProgress$ = this.classInProgressSource.asObservable();\n\n    getGroupByIdQuery$: QueryRef<IFindGroupById>;\n    getEnrollmentQuery$: QueryRef<IEnrollment>;\n    classroomQuery$: QueryRef<IClassroomQuery>;\n\n    classroomFiltersInput: IClassroomFiltersInput = {\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    };\n\n    constructor(private apollo: Apollo) {}\n\n    getClassroom$(): Observable<IClassroom> {\n        this.classroomQuery$ = this.apollo.watchQuery({\n            query: gql`\n                query Classroom($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        ...classroomSummary\n                    }\n                }\n                ${CLASSROOM_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n\n        return this.classroomQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IClassroomQuery>) => {\n                const classInProgress = result.data.classroom.classInProgress;\n                if (!classInProgress) {\n                    this.classInProgressSource.next(null);\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        this.classInProgressSource.next({\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        });\n                    } else {\n                        this.classInProgressSource.next({\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        });\n                    }\n                }\n\n                return result.data.classroom;\n            }),\n            share(),\n        );\n    }\n\n    classroomRefetch(): void {\n        this.getClassroom$();\n        this.classroomQuery$.refetch();\n    }\n\n    setClassroomFiltersInput(filters: IClassroomFiltersInput = {}) {\n        this.classroomFiltersInput = { ...this.classroomFiltersInput, ...filters };\n    }\n\n    createEnrollmentInvitation(createEnrollmentInput: CreateEnrollmentInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICreateEnrollmentMutation>({\n                mutation: gql`\n                    mutation CreateEnrollment($enrollmentInput: EnrollmentInput, $invitedStudent: StudentInput) {\n                        createEnrollment(enrollmentInput: $enrollmentInput, invitedStudent: $invitedStudent) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    enrollmentInput: createEnrollmentInput.enrollmentInput,\n                    invitedStudent: createEnrollmentInput.invitedStudent,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateEnrollmentMutation>) => {\n                    return result.data.createEnrollment;\n                }),\n            );\n    }\n\n    getEnrollment(enrollmentId: string): Observable<Enrollment> {\n        this.getEnrollmentQuery$ = this.apollo.watchQuery({\n            query: gql`\n            {\n                enrollment(id: \"${enrollmentId}\") {\n                    ...enrollmentDetail\n                }\n            }\n            ${ENROLLMENT_DETAIL}\n            `,\n        });\n\n        return this.getEnrollmentQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IEnrollment>) => result.data.enrollment),\n        );\n    }\n\n    refetchEnrollment(): void {\n        if (this.getEnrollmentQuery$) {\n            this.getEnrollmentQuery$.refetch();\n        }\n    }\n\n    cancelEnrollment(id: string): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICancelEnrollmentMutation>({\n                mutation: gql`\n                    mutation CancelEnrollmentMutation {\n                        cancelEnrollment(id: \"${id}\") {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICancelEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.cancelEnrollment;\n                }),\n            );\n    }\n\n    changeEnrollmentSchedule(changeScheduleInput: IChangeScheduleInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<IChangeEnrollmentScheduleMutation>({\n                mutation: gql`\n                    mutation ChangeEnrollmentScheduleMutation($changeScheduleInput: ChangeScheduleInput) {\n                        changeEnrollmentSchedule(changeScheduleInput: $changeScheduleInput) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    changeScheduleInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeEnrollmentScheduleMutation>) => {\n                    return result.data.changeEnrollmentSchedule;\n                }),\n            );\n    }\n\n    transferEnrollment(id: string, events: Event[]) {\n        return this.apollo\n            .mutate<ITransferEnrollmentMutation>({\n                mutation: gql`\n                    mutation removeStudentFromGroup($id: id, $events: EventsInput) {\n                        removeStudentFromGroup(id: $id, events: $events) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    id,\n                    events,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ITransferEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.removeStudentFromGroup;\n                }),\n            );\n    }\n\n    startClass(startClassInput: IStartClassInput): Observable<ClassRecord> {\n        return this.apollo\n            .mutate<IStartClassMutation>({\n                mutation: gql`\n                    mutation StartClassMutation($startClassInput: StartClassInput) {\n                        startClass(startClassInput: $startClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { startClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IStartClassMutation>) => {\n                    const classInProgress = result.data.startClass;\n                    this.classInProgressSource.next(classInProgress);\n\n                    this.classroomRefetch();\n                    return classInProgress;\n                }),\n            );\n    }\n\n    finishClass(finishClassInput: IFinishClassInput): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IFinishClassMutation>({\n                mutation: gql`\n                    mutation FinishClassMutation($finishClassInput: FinishClassInput) {\n                        finishClass(finishClassInput: $finishClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { finishClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IFinishClassMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.finishClass;\n                }),\n            );\n    }\n\n    getGroupsQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query ClassroomQuery($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        id\n                        studyGroups {\n                            ...studyGroupSummary\n                        }\n                    }\n                }\n                ${STUDY_GROUP_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n    }\n\n    getGroupById(id: string): Observable<StudyGroup> {\n        this.getGroupByIdQuery$ = this.apollo.watchQuery<any>({\n            query: gql`\n                query findGroupById($id: String) {\n                    findGroupById(id: $id) {\n                        ...studyGroupDetails\n                    }\n                }\n                ${STUDY_GROUP_DETAILS}\n            `,\n            variables: {\n                id,\n            },\n        });\n\n        return this.getGroupByIdQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IFindGroupById>) => result.data.findGroupById),\n        );\n    }\n\n    refetchCurrentGroupById(groupId?: string): void {\n        if (groupId) {\n            this.getGroupById(groupId);\n        }\n\n        if (this.getGroupByIdQuery$) {\n            this.getGroupByIdQuery$.refetch();\n        }\n    }\n\n    createStudyGroup(createGroupInput: CreateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<ICreateStudyGroupMutation>({\n                mutation: gql`\n                    mutation CreateGroupMutation($createGroupInput: CreateStudyGroupInput) {\n                        createStudyGroup(createGroupInput: $createGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    createGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.createStudyGroup;\n                }),\n            );\n    }\n\n    updateStudyGroup(studyGroupInput: IUpdateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IUpdateStudyGroupMutation>({\n                mutation: gql`\n                    mutation UpdateStudyGroupMutation($studyGroupInput: UpdateStudyGroupInput) {\n                        updateStudyGroup(studyGroupInput: $studyGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    studyGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.studyGroup;\n                }),\n            );\n    }\n\n    removeStudyGroup(removeGroupInput: IRemoveGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IRemoveGroupMutation>({\n                mutation: gql`\n                    mutation RemoveStudyGroupMutation($removeGroupInput: RemoveStudyGroupInput) {\n                        removeStudyGroup(removeGroupInput: $removeGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    removeGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRemoveGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.group;\n                }),\n            );\n    }\n\n    addStudentToGroup(enrollmentInput: IAddStudentToGroupInput) {\n        return this.apollo\n            .mutate<IAddStudentToGroupMutation>({\n                mutation: gql`\n                    mutation AddStudentToGroupMutation($enrollmentInput: AddStudentToGroupInput) {\n                        addStudentToGroup(enrollmentInput: $enrollmentInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    enrollmentInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IAddStudentToGroupMutation>) => {\n                    this.classroomRefetch();\n                    this.refetchCurrentGroupById();\n                    return result.data.addStudentToGroup;\n                }),\n            );\n    }\n\n    revertFinishedClassStatus(\n        revertFinishedClassStatusInput: IRevertFinishedClassStatusInput,\n    ): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IRevertFinishedClassStatusMutation>({\n                mutation: gql`\n                    mutation revertFinishedClassStatusMutation(\n                        $revertFinishedClassStatusInput: RevertFinishedClassStatusInput\n                    ) {\n                        revertFinishedClassStatus(revertFinishedClassStatusInput: $revertFinishedClassStatusInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { revertFinishedClassStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertFinishedClassStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertFinishedClassStatus;\n                }),\n            );\n    }\n\n    revertLessonStatus(revertLessonStatusInput: IRevertLessonStatusInput): Observable<Lesson> {\n        return this.apollo\n            .mutate<IRevertLessonStatusMutation>({\n                mutation: gql`\n                    mutation revertLessonStatusMutation($revertLessonStatusInput: RevertLessonStatusInput) {\n                        revertLessonStatus(revertLessonStatusInput: $revertLessonStatusInput) {\n                            ...lessonSummary\n                        }\n                    }\n                    ${LESSON_SUMMARY}\n                `,\n                variables: { revertLessonStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertLessonStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertLessonStatus;\n                }),\n            );\n    }\n\n    activateEnrollment(enrollmentId: string): Observable<any> {\n        return this.apollo\n            .mutate<IActivateEnrollmentMutation>({\n                mutation: gql`\n                    mutation ActivateEnrollmentMutation($enrollmentId: ID) {\n                        activateEnrollment(enrollmentId: $enrollmentId) {\n                            id\n                        }\n                    }\n                `,\n                variables: { enrollmentId },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IActivateEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.updatedEnrollment;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "enrollments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Enrollment[]",
                    "optional": true,
                    "description": "",
                    "line": 139
                },
                {
                    "name": "familyName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 137
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 136
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 135
                },
                {
                    "name": "opened",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 140
                },
                {
                    "name": "primaryEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 138
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "StudyGroup",
            "id": "interface-StudyGroup-47fa1c701c3a333434316971dcea6bf3",
            "file": "src/app/@core/models/enrollment.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EventOccurrence } from './event-occurrence.model';\nimport { Event } from './event.model';\nimport { Invitation } from './invitation.model';\nimport { LessonRecordList, ClassRecordType } from './class-record.model';\nimport { Lesson } from './lesson.model';\nimport { Level } from './level.model';\nimport { UserProfile } from './user-profile.model';\n\nexport type SourceType = 'ENROLLMENT' | 'STUDY_GROUP';\n\nexport enum ENROLLMENT_STATUS {\n    ACTIVE = 'ACTIVE',\n    PENDING = 'PENDING',\n    CONFIRMED = 'CONFIRMED',\n    CANCELLED = 'CANCELLED',\n    DELETED = 'DELETED',\n}\n\nexport interface StudyGroup {\n    enrollments?: Enrollment[];\n    events?: Event[];\n    id?: string;\n    level?: Level;\n    name?: string;\n    studyGroupClassRecords?: ClassRecordType[];\n    lessons?: Lesson[];\n    studyGroupTeachers?: Event[];\n    nextLesson?: ClassRecordType | any;\n    lastLesson?: ClassRecordType;\n}\n\nexport interface Enrollment {\n    sourceType?: SourceType;\n    revertLessonStatus?: boolean;\n    id?: string;\n    levelId?: string;\n    teacherId?: string;\n    studentId?: string;\n    studyGroupId?: string;\n    studyGroup?: StudyGroup;\n    registrationDate?: string; // DateTime\n    activationDate?: string; // DateTime?\n    status?: ENROLLMENT_STATUS;\n    externalKey?: string;\n    level?: Level;\n    teacher?: UserProfile;\n    student?: UserProfile;\n    invitation?: Invitation;\n    lastLesson?: ClassRecordType;\n    classInProgress?: ClassRecordType;\n    events?: Event[];\n    eventsOrganised?: Event[];\n    nextLesson?: Lesson;\n    nextEventOccurrence?: EventOccurrence;\n    lessons?: Lesson[];\n    classRecords?: ClassRecordType[];\n    lessonTrackerList?: LessonRecordList[]; // front end only field\n    selected?: boolean; // front end only field\n}\n",
            "properties": [
                {
                    "name": "enrollments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Enrollment[]",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "events",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Event[]",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "lastLesson",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClassRecordType",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "lessons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Lesson[]",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "level",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Level",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "nextLesson",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClassRecordType | any",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "studyGroupClassRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClassRecordType[]",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "studyGroupTeachers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Event[]",
                    "optional": true,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "StudyGroupAttendeInput",
            "id": "interface-StudyGroupAttendeInput-393bbeee17eb6281c8a64cc8ff3beb12",
            "file": "src/app/@core/services/classroom.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\nimport {\n    ClassRecord,\n    ClassRecordType,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from '../models/class-record.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, SourceType, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\n\nimport { CreateStudyGroupInput } from 'app/classroom/pages/groups-page/groups-page.component';\nimport { ENROLLMENT_DETAIL } from 'app/@core/graphql/enrollment.graphql';\nimport { CLASSROOM_SUMMARY } from '../graphql/classroom.graphql';\nimport { CLASS_RECORD_SUMMARY } from '../graphql/class-record.graphql';\nimport { STUDY_GROUP_DETAILS, STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { LESSON_SUMMARY } from '../graphql/lesson.graphql';\nimport { Lesson } from '../models/lesson.model';\n\ninterface IStartClassMutation {\n    startClass: ClassRecord;\n}\n\nexport interface IStartClassInput {\n    lessonId: string;\n    levelId: string;\n    sourceId: string;\n    sourceType: SourceType;\n    teacherNotes?: string;\n}\n\ninterface ICreateEnrollmentMutation {\n    createEnrollment: Enrollment;\n}\n\ninterface IEnrollment {\n    enrollment: Enrollment;\n}\n\ninterface IGetEnrollments {\n    enrollments: Enrollment[];\n}\n\ninterface IFindGroupById {\n    findGroupById: StudyGroup;\n}\n\ninterface ICancelEnrollmentMutation {\n    cancelEnrollment: Enrollment;\n}\n\ninterface IChangeScheduleInput {\n    enrollmentId: string;\n    events: Event[];\n}\n\ninterface IChangeEnrollmentScheduleMutation {\n    changeEnrollmentSchedule: Enrollment;\n}\n\ninterface ICreateStudyGroupMutation {\n    createStudyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupMutation {\n    studyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupInput {\n    studyGroupId: string;\n    name: string;\n    events?: Event[];\n}\n\ninterface IRemoveGroupInput {\n    studyGroupId: string;\n}\n\ninterface IRemoveGroupMutation {\n    group: StudyGroup;\n}\n\ninterface StudyGroupAttendeInput {\n    studentId: string;\n    attended: boolean;\n}\ninterface IActivateEnrollmentMutation {\n    updatedEnrollment: Enrollment;\n}\n\nexport interface IFinishClassInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n    teacherNotes?: string;\n    status: string;\n    lessonStartedAt: string;\n    lessonEndedAt: string;\n    attendees?: StudyGroupAttendeInput[];\n}\n\ninterface IFinishClassMutation {\n    finishClass: ClassRecordType;\n}\n\ninterface ITransferEnrollmentMutation {\n    removeStudentFromGroup: Enrollment;\n}\nexport interface IRevertFinishedClassStatusInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n}\n\ninterface IRevertFinishedClassStatusMutation {\n    revertFinishedClassStatus: ClassRecordType;\n}\nexport interface IRevertLessonStatusInput {\n    sourceId: string;\n    sourceType: SourceType;\n    lessonId: string;\n}\n\ninterface IRevertLessonStatusMutation {\n    revertLessonStatus: Lesson;\n}\n\nexport interface Student {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    opened?: boolean; // front-end only field\n}\n\ninterface IClassroomQuery {\n    classroom: IClassroom;\n}\n\nexport interface IClassroom {\n    id?: string;\n    classInProgress?: ClassRecordType;\n    enrollments?: Enrollment[];\n    studyGroups?: StudyGroup[];\n    students?: Student[];\n    studentEnrollments?: Enrollment[];\n}\n\nexport interface IClassroomFiltersInput {\n    enrollmentStatus?: string;\n    studyGroupStatus?: string;\n}\n\ninterface IAddStudentToGroupMutation {\n    addStudentToGroup: Enrollment;\n}\ninterface IAddStudentToGroupInput {\n    id: string;\n    studyGroupId: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClassroomService {\n    private classInProgressSource = new BehaviorSubject<ClassRecord>(undefined);\n\n    public classInProgress$ = this.classInProgressSource.asObservable();\n\n    getGroupByIdQuery$: QueryRef<IFindGroupById>;\n    getEnrollmentQuery$: QueryRef<IEnrollment>;\n    classroomQuery$: QueryRef<IClassroomQuery>;\n\n    classroomFiltersInput: IClassroomFiltersInput = {\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    };\n\n    constructor(private apollo: Apollo) {}\n\n    getClassroom$(): Observable<IClassroom> {\n        this.classroomQuery$ = this.apollo.watchQuery({\n            query: gql`\n                query Classroom($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        ...classroomSummary\n                    }\n                }\n                ${CLASSROOM_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n\n        return this.classroomQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IClassroomQuery>) => {\n                const classInProgress = result.data.classroom.classInProgress;\n                if (!classInProgress) {\n                    this.classInProgressSource.next(null);\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        this.classInProgressSource.next({\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        });\n                    } else {\n                        this.classInProgressSource.next({\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        });\n                    }\n                }\n\n                return result.data.classroom;\n            }),\n            share(),\n        );\n    }\n\n    classroomRefetch(): void {\n        this.getClassroom$();\n        this.classroomQuery$.refetch();\n    }\n\n    setClassroomFiltersInput(filters: IClassroomFiltersInput = {}) {\n        this.classroomFiltersInput = { ...this.classroomFiltersInput, ...filters };\n    }\n\n    createEnrollmentInvitation(createEnrollmentInput: CreateEnrollmentInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICreateEnrollmentMutation>({\n                mutation: gql`\n                    mutation CreateEnrollment($enrollmentInput: EnrollmentInput, $invitedStudent: StudentInput) {\n                        createEnrollment(enrollmentInput: $enrollmentInput, invitedStudent: $invitedStudent) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    enrollmentInput: createEnrollmentInput.enrollmentInput,\n                    invitedStudent: createEnrollmentInput.invitedStudent,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateEnrollmentMutation>) => {\n                    return result.data.createEnrollment;\n                }),\n            );\n    }\n\n    getEnrollment(enrollmentId: string): Observable<Enrollment> {\n        this.getEnrollmentQuery$ = this.apollo.watchQuery({\n            query: gql`\n            {\n                enrollment(id: \"${enrollmentId}\") {\n                    ...enrollmentDetail\n                }\n            }\n            ${ENROLLMENT_DETAIL}\n            `,\n        });\n\n        return this.getEnrollmentQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IEnrollment>) => result.data.enrollment),\n        );\n    }\n\n    refetchEnrollment(): void {\n        if (this.getEnrollmentQuery$) {\n            this.getEnrollmentQuery$.refetch();\n        }\n    }\n\n    cancelEnrollment(id: string): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICancelEnrollmentMutation>({\n                mutation: gql`\n                    mutation CancelEnrollmentMutation {\n                        cancelEnrollment(id: \"${id}\") {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICancelEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.cancelEnrollment;\n                }),\n            );\n    }\n\n    changeEnrollmentSchedule(changeScheduleInput: IChangeScheduleInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<IChangeEnrollmentScheduleMutation>({\n                mutation: gql`\n                    mutation ChangeEnrollmentScheduleMutation($changeScheduleInput: ChangeScheduleInput) {\n                        changeEnrollmentSchedule(changeScheduleInput: $changeScheduleInput) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    changeScheduleInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeEnrollmentScheduleMutation>) => {\n                    return result.data.changeEnrollmentSchedule;\n                }),\n            );\n    }\n\n    transferEnrollment(id: string, events: Event[]) {\n        return this.apollo\n            .mutate<ITransferEnrollmentMutation>({\n                mutation: gql`\n                    mutation removeStudentFromGroup($id: id, $events: EventsInput) {\n                        removeStudentFromGroup(id: $id, events: $events) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    id,\n                    events,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ITransferEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.removeStudentFromGroup;\n                }),\n            );\n    }\n\n    startClass(startClassInput: IStartClassInput): Observable<ClassRecord> {\n        return this.apollo\n            .mutate<IStartClassMutation>({\n                mutation: gql`\n                    mutation StartClassMutation($startClassInput: StartClassInput) {\n                        startClass(startClassInput: $startClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { startClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IStartClassMutation>) => {\n                    const classInProgress = result.data.startClass;\n                    this.classInProgressSource.next(classInProgress);\n\n                    this.classroomRefetch();\n                    return classInProgress;\n                }),\n            );\n    }\n\n    finishClass(finishClassInput: IFinishClassInput): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IFinishClassMutation>({\n                mutation: gql`\n                    mutation FinishClassMutation($finishClassInput: FinishClassInput) {\n                        finishClass(finishClassInput: $finishClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { finishClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IFinishClassMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.finishClass;\n                }),\n            );\n    }\n\n    getGroupsQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query ClassroomQuery($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        id\n                        studyGroups {\n                            ...studyGroupSummary\n                        }\n                    }\n                }\n                ${STUDY_GROUP_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n    }\n\n    getGroupById(id: string): Observable<StudyGroup> {\n        this.getGroupByIdQuery$ = this.apollo.watchQuery<any>({\n            query: gql`\n                query findGroupById($id: String) {\n                    findGroupById(id: $id) {\n                        ...studyGroupDetails\n                    }\n                }\n                ${STUDY_GROUP_DETAILS}\n            `,\n            variables: {\n                id,\n            },\n        });\n\n        return this.getGroupByIdQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IFindGroupById>) => result.data.findGroupById),\n        );\n    }\n\n    refetchCurrentGroupById(groupId?: string): void {\n        if (groupId) {\n            this.getGroupById(groupId);\n        }\n\n        if (this.getGroupByIdQuery$) {\n            this.getGroupByIdQuery$.refetch();\n        }\n    }\n\n    createStudyGroup(createGroupInput: CreateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<ICreateStudyGroupMutation>({\n                mutation: gql`\n                    mutation CreateGroupMutation($createGroupInput: CreateStudyGroupInput) {\n                        createStudyGroup(createGroupInput: $createGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    createGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.createStudyGroup;\n                }),\n            );\n    }\n\n    updateStudyGroup(studyGroupInput: IUpdateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IUpdateStudyGroupMutation>({\n                mutation: gql`\n                    mutation UpdateStudyGroupMutation($studyGroupInput: UpdateStudyGroupInput) {\n                        updateStudyGroup(studyGroupInput: $studyGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    studyGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.studyGroup;\n                }),\n            );\n    }\n\n    removeStudyGroup(removeGroupInput: IRemoveGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IRemoveGroupMutation>({\n                mutation: gql`\n                    mutation RemoveStudyGroupMutation($removeGroupInput: RemoveStudyGroupInput) {\n                        removeStudyGroup(removeGroupInput: $removeGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    removeGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRemoveGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.group;\n                }),\n            );\n    }\n\n    addStudentToGroup(enrollmentInput: IAddStudentToGroupInput) {\n        return this.apollo\n            .mutate<IAddStudentToGroupMutation>({\n                mutation: gql`\n                    mutation AddStudentToGroupMutation($enrollmentInput: AddStudentToGroupInput) {\n                        addStudentToGroup(enrollmentInput: $enrollmentInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    enrollmentInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IAddStudentToGroupMutation>) => {\n                    this.classroomRefetch();\n                    this.refetchCurrentGroupById();\n                    return result.data.addStudentToGroup;\n                }),\n            );\n    }\n\n    revertFinishedClassStatus(\n        revertFinishedClassStatusInput: IRevertFinishedClassStatusInput,\n    ): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IRevertFinishedClassStatusMutation>({\n                mutation: gql`\n                    mutation revertFinishedClassStatusMutation(\n                        $revertFinishedClassStatusInput: RevertFinishedClassStatusInput\n                    ) {\n                        revertFinishedClassStatus(revertFinishedClassStatusInput: $revertFinishedClassStatusInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { revertFinishedClassStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertFinishedClassStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertFinishedClassStatus;\n                }),\n            );\n    }\n\n    revertLessonStatus(revertLessonStatusInput: IRevertLessonStatusInput): Observable<Lesson> {\n        return this.apollo\n            .mutate<IRevertLessonStatusMutation>({\n                mutation: gql`\n                    mutation revertLessonStatusMutation($revertLessonStatusInput: RevertLessonStatusInput) {\n                        revertLessonStatus(revertLessonStatusInput: $revertLessonStatusInput) {\n                            ...lessonSummary\n                        }\n                    }\n                    ${LESSON_SUMMARY}\n                `,\n                variables: { revertLessonStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertLessonStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertLessonStatus;\n                }),\n            );\n    }\n\n    activateEnrollment(enrollmentId: string): Observable<any> {\n        return this.apollo\n            .mutate<IActivateEnrollmentMutation>({\n                mutation: gql`\n                    mutation ActivateEnrollmentMutation($enrollmentId: ID) {\n                        activateEnrollment(enrollmentId: $enrollmentId) {\n                            id\n                        }\n                    }\n                `,\n                variables: { enrollmentId },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IActivateEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.updatedEnrollment;\n                }),\n            );\n    }\n}\n",
            "properties": [
                {
                    "name": "attended",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "studentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 90
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "StudyGroupClassRecord",
            "id": "interface-StudyGroupClassRecord-d95381fc1996794175d33172c7609136",
            "file": "src/app/@core/models/class-record.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Enrollment, SourceType, StudyGroup } from './enrollment.model';\nimport { Lesson } from './lesson.model';\n\ninterface ClassRecordInterface {\n    id?: string;\n    teacherNotes?: string;\n    status?: string;\n    startedAt?: string; // DateTime\n    completedAt?: string; // DateTime\n    lessonStartedAt?: string;\n    lessonEndedAt?: string;\n    lesson?: Lesson;\n    revertClassStatus?: boolean;\n}\n\nexport interface EnrollmentClassRecord extends ClassRecordInterface {\n    enrollmentId: string;\n    enrollment?: Enrollment;\n}\n\nexport interface StudyGroupClassRecord extends ClassRecordInterface {\n    studyGroupId: string;\n    studyGroup?: StudyGroup;\n    studyGroupClassAttendees?: any;\n}\n\nexport type ClassRecordType = EnrollmentClassRecord | StudyGroupClassRecord;\n\nexport interface ClassRecord {\n    sourceType: SourceType;\n    enrollmentClassRecord?: EnrollmentClassRecord;\n    studyGroupClassRecord?: StudyGroupClassRecord;\n}\n\nexport interface LessonRecordList extends Lesson {\n    classRecords?: ClassRecordType[];\n}\n\nexport interface ClassSession {\n    eventStart: string;\n    eventEnd: string;\n    lessonFinished: boolean;\n    attendees?: ClassSessionAttendee[];\n}\n\nexport interface ClassSessionAttendee {\n    studentId: string;\n    attended: boolean;\n}\n",
            "properties": [
                {
                    "name": "studyGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StudyGroup",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "studyGroupClassAttendees",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "studyGroupId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "ClassRecordInterface"
        },
        {
            "name": "Subscription",
            "id": "interface-Subscription-5e6a7c0c3c9d5c645ab6ea3eaf9dbe91",
            "file": "src/app/@core/models/subscription.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Enrollment } from './enrollment.model';\nimport { UserProfile } from './user-profile.model';\n\nexport interface Subscription {\n    id?: string;\n    status?: string;\n    customerId?: string;\n    paymentProviderId?: string;\n    paymentProviderCheckoutId?: string;\n    renewalDate?: string;\n    customer?: UserProfile;\n    subscrisptionItems?: SubscriptionItem[];\n    enrollments?: Enrollment[];\n}\n\nexport interface SubscriptionItem {\n    id?: string;\n    subscriptionId?: string;\n    priceId?: string;\n    quantity?: number;\n    active?: boolean;\n}\n",
            "properties": [
                {
                    "name": "customer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserProfile",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "customerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "enrollments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Enrollment[]",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "paymentProviderCheckoutId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "paymentProviderId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "renewalDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "subscrisptionItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubscriptionItem[]",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "SubscriptionItem",
            "id": "interface-SubscriptionItem-5e6a7c0c3c9d5c645ab6ea3eaf9dbe91",
            "file": "src/app/@core/models/subscription.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Enrollment } from './enrollment.model';\nimport { UserProfile } from './user-profile.model';\n\nexport interface Subscription {\n    id?: string;\n    status?: string;\n    customerId?: string;\n    paymentProviderId?: string;\n    paymentProviderCheckoutId?: string;\n    renewalDate?: string;\n    customer?: UserProfile;\n    subscrisptionItems?: SubscriptionItem[];\n    enrollments?: Enrollment[];\n}\n\nexport interface SubscriptionItem {\n    id?: string;\n    subscriptionId?: string;\n    priceId?: string;\n    quantity?: number;\n    active?: boolean;\n}\n",
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "priceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "subscriptionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "TokenPayload",
            "id": "interface-TokenPayload-a03067f3bd948db91f45118a7f37e206",
            "file": "src/app/main/user-account/user-account.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\n\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport { environment } from 'environments/environment';\nimport { TokenValidation } from './token-validation.interface';\n\ninterface TokenPayload {\n    registrationToken: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class UserAccountService {\n    constructor(private _httpClient: HttpClient) {}\n\n    private handleError(error: HttpErrorResponse): Observable<any> {\n        return throwError(error);\n    }\n\n    public validateRegistrationToken(registrationToken: string): Observable<TokenValidation> {\n        const url = `${environment.apiUrl}/auth/confirm-registration`;\n        const httpOptions = {\n            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\n        };\n\n        return this._httpClient.post<TokenPayload>(url, { registrationToken }, httpOptions).pipe(\n            map((response: any) => response),\n            catchError(this.handleError),\n        );\n    }\n}\n",
            "properties": [
                {
                    "name": "registrationToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "TokenValidation",
            "id": "interface-TokenValidation-a6a410fef7c3721659e6f9e3fd659f88",
            "file": "src/app/main/user-account/token-validation.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TokenValidation {\n    tokenValidated: boolean;\n    message?: string;\n    userFirstName?: string;\n}\n",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "tokenValidated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "userFirstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ToolbarSettings",
            "id": "interface-ToolbarSettings-dd4165acca5880a252b1e086ce41e62e",
            "file": "src/app/@core/models/toolbar-settings.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ToolbarSettings {\n    title: string;\n    searchEnabled: boolean;\n    searchPlaceholder: string;\n}\n",
            "properties": [
                {
                    "name": "searchEnabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "searchPlaceholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "UserAddress",
            "id": "interface-UserAddress-8ec268046b8aeb696640c5e22a25ee7b",
            "file": "src/app/@core/models/user-profile.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Address } from './address.model';\nimport { ClassRecord } from './class-record.model';\n\nexport interface UserAddress extends Address {\n    userId?: string;\n}\n\nexport interface UserIdentification {\n    id?: string;\n    countryISO?: string;\n    category?: string;\n    code?: string;\n    attachementUrl?: string;\n}\n\nexport interface UserPhoneNumber {\n    id?: string;\n    countryISO?: string;\n    category?: string;\n    code?: string;\n    rawFormat?: string;\n    nationalFormat?: string;\n    internationalFormat?: string;\n}\n\nexport interface UserAuthDetails {\n    id: string;\n    primaryEmail: string;\n    displayName: string;\n    firstName: string;\n    familyName: string;\n    profileComplete: boolean;\n    roles: string[];\n}\n\nexport interface UserProfile {\n    id?: string;\n    primaryEmail?: string;\n    firstName?: string;\n    familyName?: string;\n    displayName?: string;\n    profilePicUrl?: string;\n    dateOfBirth?: string; // DateTime\n    gender?: string;\n    profileComplete?: boolean;\n    userAddresses?: UserAddress[];\n    userIdentificationList?: UserIdentification[];\n    userPhoneNumbers?: UserPhoneNumber[];\n    classInProgress?: ClassRecord;\n}\n",
            "properties": [
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "Address"
        },
        {
            "name": "UserAuthDetails",
            "id": "interface-UserAuthDetails-8ec268046b8aeb696640c5e22a25ee7b",
            "file": "src/app/@core/models/user-profile.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Address } from './address.model';\nimport { ClassRecord } from './class-record.model';\n\nexport interface UserAddress extends Address {\n    userId?: string;\n}\n\nexport interface UserIdentification {\n    id?: string;\n    countryISO?: string;\n    category?: string;\n    code?: string;\n    attachementUrl?: string;\n}\n\nexport interface UserPhoneNumber {\n    id?: string;\n    countryISO?: string;\n    category?: string;\n    code?: string;\n    rawFormat?: string;\n    nationalFormat?: string;\n    internationalFormat?: string;\n}\n\nexport interface UserAuthDetails {\n    id: string;\n    primaryEmail: string;\n    displayName: string;\n    firstName: string;\n    familyName: string;\n    profileComplete: boolean;\n    roles: string[];\n}\n\nexport interface UserProfile {\n    id?: string;\n    primaryEmail?: string;\n    firstName?: string;\n    familyName?: string;\n    displayName?: string;\n    profilePicUrl?: string;\n    dateOfBirth?: string; // DateTime\n    gender?: string;\n    profileComplete?: boolean;\n    userAddresses?: UserAddress[];\n    userIdentificationList?: UserIdentification[];\n    userPhoneNumbers?: UserPhoneNumber[];\n    classInProgress?: ClassRecord;\n}\n",
            "properties": [
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "familyName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "primaryEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "profileComplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "UserIdentification",
            "id": "interface-UserIdentification-8ec268046b8aeb696640c5e22a25ee7b",
            "file": "src/app/@core/models/user-profile.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Address } from './address.model';\nimport { ClassRecord } from './class-record.model';\n\nexport interface UserAddress extends Address {\n    userId?: string;\n}\n\nexport interface UserIdentification {\n    id?: string;\n    countryISO?: string;\n    category?: string;\n    code?: string;\n    attachementUrl?: string;\n}\n\nexport interface UserPhoneNumber {\n    id?: string;\n    countryISO?: string;\n    category?: string;\n    code?: string;\n    rawFormat?: string;\n    nationalFormat?: string;\n    internationalFormat?: string;\n}\n\nexport interface UserAuthDetails {\n    id: string;\n    primaryEmail: string;\n    displayName: string;\n    firstName: string;\n    familyName: string;\n    profileComplete: boolean;\n    roles: string[];\n}\n\nexport interface UserProfile {\n    id?: string;\n    primaryEmail?: string;\n    firstName?: string;\n    familyName?: string;\n    displayName?: string;\n    profilePicUrl?: string;\n    dateOfBirth?: string; // DateTime\n    gender?: string;\n    profileComplete?: boolean;\n    userAddresses?: UserAddress[];\n    userIdentificationList?: UserIdentification[];\n    userPhoneNumbers?: UserPhoneNumber[];\n    classInProgress?: ClassRecord;\n}\n",
            "properties": [
                {
                    "name": "attachementUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "countryISO",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "UserPhoneNumber",
            "id": "interface-UserPhoneNumber-8ec268046b8aeb696640c5e22a25ee7b",
            "file": "src/app/@core/models/user-profile.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Address } from './address.model';\nimport { ClassRecord } from './class-record.model';\n\nexport interface UserAddress extends Address {\n    userId?: string;\n}\n\nexport interface UserIdentification {\n    id?: string;\n    countryISO?: string;\n    category?: string;\n    code?: string;\n    attachementUrl?: string;\n}\n\nexport interface UserPhoneNumber {\n    id?: string;\n    countryISO?: string;\n    category?: string;\n    code?: string;\n    rawFormat?: string;\n    nationalFormat?: string;\n    internationalFormat?: string;\n}\n\nexport interface UserAuthDetails {\n    id: string;\n    primaryEmail: string;\n    displayName: string;\n    firstName: string;\n    familyName: string;\n    profileComplete: boolean;\n    roles: string[];\n}\n\nexport interface UserProfile {\n    id?: string;\n    primaryEmail?: string;\n    firstName?: string;\n    familyName?: string;\n    displayName?: string;\n    profilePicUrl?: string;\n    dateOfBirth?: string; // DateTime\n    gender?: string;\n    profileComplete?: boolean;\n    userAddresses?: UserAddress[];\n    userIdentificationList?: UserIdentification[];\n    userPhoneNumbers?: UserPhoneNumber[];\n    classInProgress?: ClassRecord;\n}\n",
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "countryISO",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "internationalFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "nationalFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "rawFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "UserProfile",
            "id": "interface-UserProfile-8ec268046b8aeb696640c5e22a25ee7b",
            "file": "src/app/@core/models/user-profile.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Address } from './address.model';\nimport { ClassRecord } from './class-record.model';\n\nexport interface UserAddress extends Address {\n    userId?: string;\n}\n\nexport interface UserIdentification {\n    id?: string;\n    countryISO?: string;\n    category?: string;\n    code?: string;\n    attachementUrl?: string;\n}\n\nexport interface UserPhoneNumber {\n    id?: string;\n    countryISO?: string;\n    category?: string;\n    code?: string;\n    rawFormat?: string;\n    nationalFormat?: string;\n    internationalFormat?: string;\n}\n\nexport interface UserAuthDetails {\n    id: string;\n    primaryEmail: string;\n    displayName: string;\n    firstName: string;\n    familyName: string;\n    profileComplete: boolean;\n    roles: string[];\n}\n\nexport interface UserProfile {\n    id?: string;\n    primaryEmail?: string;\n    firstName?: string;\n    familyName?: string;\n    displayName?: string;\n    profilePicUrl?: string;\n    dateOfBirth?: string; // DateTime\n    gender?: string;\n    profileComplete?: boolean;\n    userAddresses?: UserAddress[];\n    userIdentificationList?: UserIdentification[];\n    userPhoneNumbers?: UserPhoneNumber[];\n    classInProgress?: ClassRecord;\n}\n",
            "properties": [
                {
                    "name": "classInProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClassRecord",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "dateOfBirth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "familyName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "gender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "primaryEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "profileComplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "profilePicUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "userAddresses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserAddress[]",
                    "optional": true,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "userIdentificationList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserIdentification[]",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "userPhoneNumbers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserPhoneNumber[]",
                    "optional": true,
                    "description": "",
                    "line": 48
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AudioService",
            "id": "injectable-AudioService-6c831a8d17a9bb1f85fae7739a1aa246",
            "file": "src/app/@shared/components/audio-control-card/audio.service.ts",
            "properties": [
                {
                    "name": "audioEvents",
                    "defaultValue": "[\n        'ended',\n        'error',\n        'play',\n        'playing',\n        'pause',\n        'timeupdate',\n        'canplay',\n        'loadedmetadata',\n        'loadstart',\n        'volumechange',\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "audioObj",
                    "defaultValue": "new Audio()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "state",
                    "defaultValue": "{\n        playing: false,\n        muted: false,\n        readableCurrentTime: '',\n        readableDuration: '',\n        duration: undefined,\n        currentTime: undefined,\n        canplay: false,\n        error: false,\n        volume: 100,\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StreamState",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "stateChange",
                    "defaultValue": "new BehaviorSubject(this.state)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<StreamState>",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "stop$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addEvents",
                    "args": [
                        {
                            "name": "obj",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "events",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "handler",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "events",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "handler",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeVolume",
                    "args": [
                        {
                            "name": "volume",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "volume",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatTime",
                    "args": [
                        {
                            "name": "time",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'mm:ss'"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "time",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'mm:ss'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getState",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<StreamState>",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pause",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "play",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "playStream",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeEvents",
                    "args": [
                        {
                            "name": "obj",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "events",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "handler",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "events",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "handler",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "seekTo",
                    "args": [
                        {
                            "name": "seconds",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "seconds",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "streamObservable",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleMuted",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateStateEvents",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, BehaviorSubject, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as moment from 'moment';\n\nexport interface StreamState {\n    playing: boolean;\n    muted: boolean;\n    readableCurrentTime: string;\n    readableDuration: string;\n    duration: number | undefined;\n    currentTime: number | undefined;\n    volume: number | undefined;\n    canplay: boolean;\n    error: boolean;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class AudioService {\n    private stop$ = new Subject();\n    private audioObj = new Audio();\n    audioEvents = [\n        'ended',\n        'error',\n        'play',\n        'playing',\n        'pause',\n        'timeupdate',\n        'canplay',\n        'loadedmetadata',\n        'loadstart',\n        'volumechange',\n    ];\n    private state: StreamState = {\n        playing: false,\n        muted: false,\n        readableCurrentTime: '',\n        readableDuration: '',\n        duration: undefined,\n        currentTime: undefined,\n        canplay: false,\n        error: false,\n        volume: 100,\n    };\n\n    private stateChange: BehaviorSubject<StreamState> = new BehaviorSubject(this.state);\n\n    private streamObservable(url: string) {\n        return new Observable((observer) => {\n            // Play audio\n            this.audioObj.src = url;\n            this.audioObj.load();\n            this.audioObj.play();\n\n            const handler = (event: Event) => {\n                this.updateStateEvents(event);\n                observer.next(event);\n            };\n\n            this.addEvents(this.audioObj, this.audioEvents, handler);\n            return () => {\n                // Stop Playing\n                this.audioObj.pause();\n                this.audioObj.currentTime = 0;\n                // remove event listeners\n                this.removeEvents(this.audioObj, this.audioEvents, handler);\n                // reset state\n                this.resetState();\n            };\n        });\n    }\n\n    private addEvents(obj, events, handler) {\n        events.forEach((event) => {\n            obj.addEventListener(event, handler);\n        });\n    }\n\n    private removeEvents(obj, events, handler) {\n        events.forEach((event) => {\n            obj.removeEventListener(event, handler);\n        });\n    }\n\n    playStream(url: string) {\n        return this.streamObservable(url).pipe(takeUntil(this.stop$));\n    }\n\n    play() {\n        this.audioObj.play();\n    }\n\n    pause() {\n        this.audioObj.pause();\n    }\n\n    toggleMuted() {\n        this.audioObj.muted = !this.audioObj.muted;\n        this.state = {\n            ...this.state,\n            muted: this.audioObj.muted,\n        };\n        this.stateChange.next(this.state);\n    }\n\n    stop() {\n        this.stop$.next();\n    }\n\n    seekTo(seconds: number) {\n        this.audioObj.currentTime = seconds;\n    }\n\n    changeVolume(volume: number) {\n        this.audioObj.volume = volume / 100;\n        this.state = {\n            ...this.state,\n            volume,\n        };\n        this.stateChange.next(this.state);\n\n        if (volume === 0 && !this.state.muted) {\n            this.toggleMuted();\n        } else if (volume > 0 && this.state.muted) {\n            this.toggleMuted();\n        }\n    }\n\n    formatTime(time: number, format: string = 'mm:ss') {\n        const momentTime = time * 1000;\n        return moment.utc(momentTime).format(format);\n    }\n\n    private updateStateEvents(event: Event): void {\n        switch (event.type) {\n            case 'canplay':\n                this.state.duration = this.audioObj.duration;\n                this.state.readableDuration = this.formatTime(this.state.duration);\n                this.state.canplay = true;\n                break;\n            case 'playing':\n                this.state.playing = true;\n                break;\n            case 'pause':\n                this.state.playing = false;\n                break;\n            case 'timeupdate':\n                this.state.currentTime = this.audioObj.currentTime;\n                this.state.readableCurrentTime = this.formatTime(this.state.currentTime);\n                break;\n            case 'volumechange':\n                break;\n            case 'error':\n                this.resetState();\n                this.state.error = true;\n                break;\n        }\n        this.stateChange.next(this.state);\n    }\n\n    private resetState() {\n        this.state = {\n            playing: false,\n            muted: false,\n            readableCurrentTime: '',\n            readableDuration: '',\n            duration: undefined,\n            currentTime: undefined,\n            canplay: false,\n            error: false,\n            volume: 100,\n        };\n    }\n\n    getState(): Observable<StreamState> {\n        return this.stateChange.asObservable();\n    }\n}\n",
            "type": "injectable"
        },
        {
            "name": "CalendarService",
            "id": "injectable-CalendarService-e7e5de89093583f20e2396ea110e10b5",
            "file": "src/app/@core/services/calendar.service.ts",
            "properties": [
                {
                    "name": "getMyEventsQuery$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methods": [
                {
                    "name": "changeSpecificEvent",
                    "args": [
                        {
                            "name": "changeSpecificEventInput",
                            "type": "IEventOccurrenceInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changeSpecificEventInput",
                            "type": "IEventOccurrenceInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMyCalendar",
                    "args": [
                        {
                            "name": "fromDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "toDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fromDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "toDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMyEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Event[]>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMyEventsRefetch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Apollo, gql } from 'apollo-angular';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Event } from 'app/@core/models/event.model';\nimport { EventOccurrence, IEventOccurrenceInput } from 'app/@core/models/event-occurrence.model';\nimport { EVENT_OCCURRENCE_SUMMARY, EVENT_SUMMARY } from '../graphql/events.graphql';\n\nexport interface IMyCalendar {\n    myCalendar: EventOccurrence[];\n}\n\ninterface IMyEvents {\n    myProfile: IEventsOrganised;\n}\n\ninterface IEventsOrganised {\n    eventsOrganised: Event[];\n}\n\ninterface IChangeSpecificEventBySourceMutation {\n    changeSpecificEvent: EventOccurrence;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CalendarService {\n    getMyEventsQuery$: any;\n\n    constructor(private apollo: Apollo) {}\n\n    getMyEvents(): Observable<Event[]> {\n        this.getMyEventsQuery$ = this.apollo.watchQuery({\n            query: gql`\n                {\n                    myProfile {\n                        id\n                        eventsOrganised {\n                            ...eventSummary\n                        }\n                    }\n                }\n                ${EVENT_SUMMARY}\n            `,\n        });\n\n        return this.getMyEventsQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IMyEvents>) => result.data.myProfile.eventsOrganised),\n        );\n    }\n\n    getMyEventsRefetch() {\n        if (this.getMyEventsQuery$) {\n            this.getMyEventsQuery$.refetch();\n        }\n    }\n\n    getMyCalendar(fromDate: Date, toDate: Date) /* : Observable<EventOccurrence[]> */ {\n        return this.apollo.watchQuery({\n            query: gql`\n          {\n            myCalendar(fromDate: \"${fromDate.toISOString()}\", toDate: \"${toDate.toISOString()}\") {\n                ...eventOccurrenceSummary\n              }\n          }\n          ${EVENT_OCCURRENCE_SUMMARY}`,\n        });\n    }\n\n    changeSpecificEvent(changeSpecificEventInput: IEventOccurrenceInput) {\n        return this.apollo\n            .mutate<IChangeSpecificEventBySourceMutation>({\n                mutation: gql`\n                    mutation changeSpecificEventBySourceMutation($changeSpecificEventInput: EventOccurrenceInput) {\n                        changeSpecificEvent(changeSpecificEventInput: $changeSpecificEventInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    changeSpecificEventInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeSpecificEventBySourceMutation>) => {\n                    return result.data.changeSpecificEvent;\n                }),\n            );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ClassroomService",
            "id": "injectable-ClassroomService-393bbeee17eb6281c8a64cc8ff3beb12",
            "file": "src/app/@core/services/classroom.service.ts",
            "properties": [
                {
                    "name": "classInProgress$",
                    "defaultValue": "this.classInProgressSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 175,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "classInProgressSource",
                    "defaultValue": "new BehaviorSubject<ClassRecord>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 173,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "classroomFiltersInput",
                    "defaultValue": "{\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IClassroomFiltersInput",
                    "optional": false,
                    "description": "",
                    "line": 181
                },
                {
                    "name": "classroomQuery$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryRef<IClassroomQuery>",
                    "optional": false,
                    "description": "",
                    "line": 179
                },
                {
                    "name": "getEnrollmentQuery$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryRef<IEnrollment>",
                    "optional": false,
                    "description": "",
                    "line": 178
                },
                {
                    "name": "getGroupByIdQuery$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryRef<IFindGroupById>",
                    "optional": false,
                    "description": "",
                    "line": 177
                }
            ],
            "methods": [
                {
                    "name": "activateEnrollment",
                    "args": [
                        {
                            "name": "enrollmentId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 583,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "enrollmentId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addStudentToGroup",
                    "args": [
                        {
                            "name": "enrollmentInput",
                            "type": "IAddStudentToGroupInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 514,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "enrollmentInput",
                            "type": "IAddStudentToGroupInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cancelEnrollment",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Enrollment>",
                    "typeParameters": [],
                    "line": 285,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeEnrollmentSchedule",
                    "args": [
                        {
                            "name": "changeScheduleInput",
                            "type": "IChangeScheduleInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Enrollment>",
                    "typeParameters": [],
                    "line": 305,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changeScheduleInput",
                            "type": "IChangeScheduleInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "classroomRefetch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 230,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createEnrollmentInvitation",
                    "args": [
                        {
                            "name": "createEnrollmentInput",
                            "type": "CreateEnrollmentInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Enrollment>",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "createEnrollmentInput",
                            "type": "CreateEnrollmentInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createStudyGroup",
                    "args": [
                        {
                            "name": "createGroupInput",
                            "type": "CreateStudyGroupInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StudyGroup>",
                    "typeParameters": [],
                    "line": 445,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "createGroupInput",
                            "type": "CreateStudyGroupInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "finishClass",
                    "args": [
                        {
                            "name": "finishClassInput",
                            "type": "IFinishClassInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClassRecordType>",
                    "typeParameters": [],
                    "line": 375,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "finishClassInput",
                            "type": "IFinishClassInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClassroom$",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IClassroom>",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getEnrollment",
                    "args": [
                        {
                            "name": "enrollmentId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Enrollment>",
                    "typeParameters": [],
                    "line": 262,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "enrollmentId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGroupById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StudyGroup>",
                    "typeParameters": [],
                    "line": 415,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGroupsQuery",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 396,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refetchCurrentGroupById",
                    "args": [
                        {
                            "name": "groupId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 435,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "groupId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refetchEnrollment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 279,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeStudyGroup",
                    "args": [
                        {
                            "name": "removeGroupInput",
                            "type": "IRemoveGroupInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StudyGroup>",
                    "typeParameters": [],
                    "line": 491,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "removeGroupInput",
                            "type": "IRemoveGroupInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "revertFinishedClassStatus",
                    "args": [
                        {
                            "name": "revertFinishedClassStatusInput",
                            "type": "IRevertFinishedClassStatusInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClassRecordType>",
                    "typeParameters": [],
                    "line": 537,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "revertFinishedClassStatusInput",
                            "type": "IRevertFinishedClassStatusInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "revertLessonStatus",
                    "args": [
                        {
                            "name": "revertLessonStatusInput",
                            "type": "IRevertLessonStatusInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Lesson>",
                    "typeParameters": [],
                    "line": 562,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "revertLessonStatusInput",
                            "type": "IRevertLessonStatusInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setClassroomFiltersInput",
                    "args": [
                        {
                            "name": "filters",
                            "type": "IClassroomFiltersInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 235,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "IClassroomFiltersInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startClass",
                    "args": [
                        {
                            "name": "startClassInput",
                            "type": "IStartClassInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClassRecord>",
                    "typeParameters": [],
                    "line": 351,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "startClassInput",
                            "type": "IStartClassInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transferEnrollment",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "events",
                            "type": "Event[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 327,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "events",
                            "type": "Event[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateStudyGroup",
                    "args": [
                        {
                            "name": "studyGroupInput",
                            "type": "IUpdateStudyGroupInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StudyGroup>",
                    "typeParameters": [],
                    "line": 468,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "studyGroupInput",
                            "type": "IUpdateStudyGroupInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\nimport {\n    ClassRecord,\n    ClassRecordType,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from '../models/class-record.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, SourceType, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\n\nimport { CreateStudyGroupInput } from 'app/classroom/pages/groups-page/groups-page.component';\nimport { ENROLLMENT_DETAIL } from 'app/@core/graphql/enrollment.graphql';\nimport { CLASSROOM_SUMMARY } from '../graphql/classroom.graphql';\nimport { CLASS_RECORD_SUMMARY } from '../graphql/class-record.graphql';\nimport { STUDY_GROUP_DETAILS, STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { LESSON_SUMMARY } from '../graphql/lesson.graphql';\nimport { Lesson } from '../models/lesson.model';\n\ninterface IStartClassMutation {\n    startClass: ClassRecord;\n}\n\nexport interface IStartClassInput {\n    lessonId: string;\n    levelId: string;\n    sourceId: string;\n    sourceType: SourceType;\n    teacherNotes?: string;\n}\n\ninterface ICreateEnrollmentMutation {\n    createEnrollment: Enrollment;\n}\n\ninterface IEnrollment {\n    enrollment: Enrollment;\n}\n\ninterface IGetEnrollments {\n    enrollments: Enrollment[];\n}\n\ninterface IFindGroupById {\n    findGroupById: StudyGroup;\n}\n\ninterface ICancelEnrollmentMutation {\n    cancelEnrollment: Enrollment;\n}\n\ninterface IChangeScheduleInput {\n    enrollmentId: string;\n    events: Event[];\n}\n\ninterface IChangeEnrollmentScheduleMutation {\n    changeEnrollmentSchedule: Enrollment;\n}\n\ninterface ICreateStudyGroupMutation {\n    createStudyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupMutation {\n    studyGroup: StudyGroup;\n}\n\ninterface IUpdateStudyGroupInput {\n    studyGroupId: string;\n    name: string;\n    events?: Event[];\n}\n\ninterface IRemoveGroupInput {\n    studyGroupId: string;\n}\n\ninterface IRemoveGroupMutation {\n    group: StudyGroup;\n}\n\ninterface StudyGroupAttendeInput {\n    studentId: string;\n    attended: boolean;\n}\ninterface IActivateEnrollmentMutation {\n    updatedEnrollment: Enrollment;\n}\n\nexport interface IFinishClassInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n    teacherNotes?: string;\n    status: string;\n    lessonStartedAt: string;\n    lessonEndedAt: string;\n    attendees?: StudyGroupAttendeInput[];\n}\n\ninterface IFinishClassMutation {\n    finishClass: ClassRecordType;\n}\n\ninterface ITransferEnrollmentMutation {\n    removeStudentFromGroup: Enrollment;\n}\nexport interface IRevertFinishedClassStatusInput {\n    classRecordId: string;\n    sourceType: SourceType;\n    sourceId: string;\n}\n\ninterface IRevertFinishedClassStatusMutation {\n    revertFinishedClassStatus: ClassRecordType;\n}\nexport interface IRevertLessonStatusInput {\n    sourceId: string;\n    sourceType: SourceType;\n    lessonId: string;\n}\n\ninterface IRevertLessonStatusMutation {\n    revertLessonStatus: Lesson;\n}\n\nexport interface Student {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    opened?: boolean; // front-end only field\n}\n\ninterface IClassroomQuery {\n    classroom: IClassroom;\n}\n\nexport interface IClassroom {\n    id?: string;\n    classInProgress?: ClassRecordType;\n    enrollments?: Enrollment[];\n    studyGroups?: StudyGroup[];\n    students?: Student[];\n    studentEnrollments?: Enrollment[];\n}\n\nexport interface IClassroomFiltersInput {\n    enrollmentStatus?: string;\n    studyGroupStatus?: string;\n}\n\ninterface IAddStudentToGroupMutation {\n    addStudentToGroup: Enrollment;\n}\ninterface IAddStudentToGroupInput {\n    id: string;\n    studyGroupId: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ClassroomService {\n    private classInProgressSource = new BehaviorSubject<ClassRecord>(undefined);\n\n    public classInProgress$ = this.classInProgressSource.asObservable();\n\n    getGroupByIdQuery$: QueryRef<IFindGroupById>;\n    getEnrollmentQuery$: QueryRef<IEnrollment>;\n    classroomQuery$: QueryRef<IClassroomQuery>;\n\n    classroomFiltersInput: IClassroomFiltersInput = {\n        enrollmentStatus: ENROLLMENT_STATUS.ACTIVE,\n        studyGroupStatus: ENROLLMENT_STATUS.ACTIVE,\n    };\n\n    constructor(private apollo: Apollo) {}\n\n    getClassroom$(): Observable<IClassroom> {\n        this.classroomQuery$ = this.apollo.watchQuery({\n            query: gql`\n                query Classroom($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        ...classroomSummary\n                    }\n                }\n                ${CLASSROOM_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n\n        return this.classroomQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IClassroomQuery>) => {\n                const classInProgress = result.data.classroom.classInProgress;\n                if (!classInProgress) {\n                    this.classInProgressSource.next(null);\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        this.classInProgressSource.next({\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        });\n                    } else {\n                        this.classInProgressSource.next({\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        });\n                    }\n                }\n\n                return result.data.classroom;\n            }),\n            share(),\n        );\n    }\n\n    classroomRefetch(): void {\n        this.getClassroom$();\n        this.classroomQuery$.refetch();\n    }\n\n    setClassroomFiltersInput(filters: IClassroomFiltersInput = {}) {\n        this.classroomFiltersInput = { ...this.classroomFiltersInput, ...filters };\n    }\n\n    createEnrollmentInvitation(createEnrollmentInput: CreateEnrollmentInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICreateEnrollmentMutation>({\n                mutation: gql`\n                    mutation CreateEnrollment($enrollmentInput: EnrollmentInput, $invitedStudent: StudentInput) {\n                        createEnrollment(enrollmentInput: $enrollmentInput, invitedStudent: $invitedStudent) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    enrollmentInput: createEnrollmentInput.enrollmentInput,\n                    invitedStudent: createEnrollmentInput.invitedStudent,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateEnrollmentMutation>) => {\n                    return result.data.createEnrollment;\n                }),\n            );\n    }\n\n    getEnrollment(enrollmentId: string): Observable<Enrollment> {\n        this.getEnrollmentQuery$ = this.apollo.watchQuery({\n            query: gql`\n            {\n                enrollment(id: \"${enrollmentId}\") {\n                    ...enrollmentDetail\n                }\n            }\n            ${ENROLLMENT_DETAIL}\n            `,\n        });\n\n        return this.getEnrollmentQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IEnrollment>) => result.data.enrollment),\n        );\n    }\n\n    refetchEnrollment(): void {\n        if (this.getEnrollmentQuery$) {\n            this.getEnrollmentQuery$.refetch();\n        }\n    }\n\n    cancelEnrollment(id: string): Observable<Enrollment> {\n        return this.apollo\n            .mutate<ICancelEnrollmentMutation>({\n                mutation: gql`\n                    mutation CancelEnrollmentMutation {\n                        cancelEnrollment(id: \"${id}\") {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICancelEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.cancelEnrollment;\n                }),\n            );\n    }\n\n    changeEnrollmentSchedule(changeScheduleInput: IChangeScheduleInput): Observable<Enrollment> {\n        return this.apollo\n            .mutate<IChangeEnrollmentScheduleMutation>({\n                mutation: gql`\n                    mutation ChangeEnrollmentScheduleMutation($changeScheduleInput: ChangeScheduleInput) {\n                        changeEnrollmentSchedule(changeScheduleInput: $changeScheduleInput) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    changeScheduleInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangeEnrollmentScheduleMutation>) => {\n                    return result.data.changeEnrollmentSchedule;\n                }),\n            );\n    }\n\n    transferEnrollment(id: string, events: Event[]) {\n        return this.apollo\n            .mutate<ITransferEnrollmentMutation>({\n                mutation: gql`\n                    mutation removeStudentFromGroup($id: id, $events: EventsInput) {\n                        removeStudentFromGroup(id: $id, events: $events) {\n                            ...enrollmentDetail\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                `,\n                variables: {\n                    id,\n                    events,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ITransferEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.removeStudentFromGroup;\n                }),\n            );\n    }\n\n    startClass(startClassInput: IStartClassInput): Observable<ClassRecord> {\n        return this.apollo\n            .mutate<IStartClassMutation>({\n                mutation: gql`\n                    mutation StartClassMutation($startClassInput: StartClassInput) {\n                        startClass(startClassInput: $startClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { startClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IStartClassMutation>) => {\n                    const classInProgress = result.data.startClass;\n                    this.classInProgressSource.next(classInProgress);\n\n                    this.classroomRefetch();\n                    return classInProgress;\n                }),\n            );\n    }\n\n    finishClass(finishClassInput: IFinishClassInput): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IFinishClassMutation>({\n                mutation: gql`\n                    mutation FinishClassMutation($finishClassInput: FinishClassInput) {\n                        finishClass(finishClassInput: $finishClassInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { finishClassInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IFinishClassMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.finishClass;\n                }),\n            );\n    }\n\n    getGroupsQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query ClassroomQuery($filters: ClassroomFiltersInput) {\n                    classroom(filters: $filters) {\n                        id\n                        studyGroups {\n                            ...studyGroupSummary\n                        }\n                    }\n                }\n                ${STUDY_GROUP_SUMMARY}\n            `,\n            variables: {\n                filters: this.classroomFiltersInput,\n            },\n        });\n    }\n\n    getGroupById(id: string): Observable<StudyGroup> {\n        this.getGroupByIdQuery$ = this.apollo.watchQuery<any>({\n            query: gql`\n                query findGroupById($id: String) {\n                    findGroupById(id: $id) {\n                        ...studyGroupDetails\n                    }\n                }\n                ${STUDY_GROUP_DETAILS}\n            `,\n            variables: {\n                id,\n            },\n        });\n\n        return this.getGroupByIdQuery$.valueChanges.pipe(\n            map((result: ApolloQueryResult<IFindGroupById>) => result.data.findGroupById),\n        );\n    }\n\n    refetchCurrentGroupById(groupId?: string): void {\n        if (groupId) {\n            this.getGroupById(groupId);\n        }\n\n        if (this.getGroupByIdQuery$) {\n            this.getGroupByIdQuery$.refetch();\n        }\n    }\n\n    createStudyGroup(createGroupInput: CreateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<ICreateStudyGroupMutation>({\n                mutation: gql`\n                    mutation CreateGroupMutation($createGroupInput: CreateStudyGroupInput) {\n                        createStudyGroup(createGroupInput: $createGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    createGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.createStudyGroup;\n                }),\n            );\n    }\n\n    updateStudyGroup(studyGroupInput: IUpdateStudyGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IUpdateStudyGroupMutation>({\n                mutation: gql`\n                    mutation UpdateStudyGroupMutation($studyGroupInput: UpdateStudyGroupInput) {\n                        updateStudyGroup(studyGroupInput: $studyGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    studyGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateStudyGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.studyGroup;\n                }),\n            );\n    }\n\n    removeStudyGroup(removeGroupInput: IRemoveGroupInput): Observable<StudyGroup> {\n        return this.apollo\n            .mutate<IRemoveGroupMutation>({\n                mutation: gql`\n                    mutation RemoveStudyGroupMutation($removeGroupInput: RemoveStudyGroupInput) {\n                        removeStudyGroup(removeGroupInput: $removeGroupInput) {\n                            id\n                            name\n                        }\n                    }\n                `,\n                variables: {\n                    removeGroupInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRemoveGroupMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.group;\n                }),\n            );\n    }\n\n    addStudentToGroup(enrollmentInput: IAddStudentToGroupInput) {\n        return this.apollo\n            .mutate<IAddStudentToGroupMutation>({\n                mutation: gql`\n                    mutation AddStudentToGroupMutation($enrollmentInput: AddStudentToGroupInput) {\n                        addStudentToGroup(enrollmentInput: $enrollmentInput) {\n                            id\n                        }\n                    }\n                `,\n                variables: {\n                    enrollmentInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IAddStudentToGroupMutation>) => {\n                    this.classroomRefetch();\n                    this.refetchCurrentGroupById();\n                    return result.data.addStudentToGroup;\n                }),\n            );\n    }\n\n    revertFinishedClassStatus(\n        revertFinishedClassStatusInput: IRevertFinishedClassStatusInput,\n    ): Observable<ClassRecordType> {\n        return this.apollo\n            .mutate<IRevertFinishedClassStatusMutation>({\n                mutation: gql`\n                    mutation revertFinishedClassStatusMutation(\n                        $revertFinishedClassStatusInput: RevertFinishedClassStatusInput\n                    ) {\n                        revertFinishedClassStatus(revertFinishedClassStatusInput: $revertFinishedClassStatusInput) {\n                            ...classRecordSummary\n                        }\n                    }\n                    ${CLASS_RECORD_SUMMARY}\n                `,\n                variables: { revertFinishedClassStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertFinishedClassStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertFinishedClassStatus;\n                }),\n            );\n    }\n\n    revertLessonStatus(revertLessonStatusInput: IRevertLessonStatusInput): Observable<Lesson> {\n        return this.apollo\n            .mutate<IRevertLessonStatusMutation>({\n                mutation: gql`\n                    mutation revertLessonStatusMutation($revertLessonStatusInput: RevertLessonStatusInput) {\n                        revertLessonStatus(revertLessonStatusInput: $revertLessonStatusInput) {\n                            ...lessonSummary\n                        }\n                    }\n                    ${LESSON_SUMMARY}\n                `,\n                variables: { revertLessonStatusInput },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IRevertLessonStatusMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.revertLessonStatus;\n                }),\n            );\n    }\n\n    activateEnrollment(enrollmentId: string): Observable<any> {\n        return this.apollo\n            .mutate<IActivateEnrollmentMutation>({\n                mutation: gql`\n                    mutation ActivateEnrollmentMutation($enrollmentId: ID) {\n                        activateEnrollment(enrollmentId: $enrollmentId) {\n                            id\n                        }\n                    }\n                `,\n                variables: { enrollmentId },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IActivateEnrollmentMutation>) => {\n                    this.classroomRefetch();\n                    return result.data.updatedEnrollment;\n                }),\n            );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 184,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CustomDate2Formatter",
            "id": "injectable-CustomDate2Formatter-d84a4892581a1b34a31a312292acbefb",
            "file": "src/app/calendar/calendar-mobile/custom-date-formatter-2.provider.ts",
            "properties": [],
            "methods": [
                {
                    "name": "monthViewColumnHeader",
                    "args": [
                        {
                            "type": "DateFormatterParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "type": "DateFormatterParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { CalendarDateFormatter, DateFormatterParams } from 'angular-calendar';\nimport { formatDate } from '@angular/common';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class CustomDate2Formatter extends CalendarDateFormatter {\n    // you can override any of the methods defined in the parent class\n\n    public monthViewColumnHeader({ date, locale }: DateFormatterParams): string {\n        return formatDate(date, 'EEE', locale);\n    }\n}\n",
            "extends": "CalendarDateFormatter",
            "type": "injectable"
        },
        {
            "name": "CustomDateFormatter",
            "id": "injectable-CustomDateFormatter-ca6500fe5f3011a3416fffb2835dca2e",
            "file": "src/app/calendar/calendar/custom-date-formatter.provider.ts",
            "properties": [],
            "methods": [
                {
                    "name": "weekViewColumnHeader",
                    "args": [
                        {
                            "type": "DateFormatterParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "type": "DateFormatterParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "weekViewHour",
                    "args": [
                        {
                            "type": "DateFormatterParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "type": "DateFormatterParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { CalendarDateFormatter, DateFormatterParams } from 'angular-calendar';\nimport { formatDate } from '@angular/common';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class CustomDateFormatter extends CalendarDateFormatter {\n    // you can override any of the methods defined in the parent class\n\n    public weekViewColumnHeader({ date, locale }: DateFormatterParams): string {\n        return formatDate(date, 'EEEE', locale);\n    }\n\n    public weekViewHour({ date, locale }: DateFormatterParams): string {\n        return formatDate(date, 'HH:mm', locale);\n    }\n}\n",
            "extends": "CalendarDateFormatter",
            "type": "injectable"
        },
        {
            "name": "DashboardService",
            "id": "injectable-DashboardService-5921675772b370cedd277a2e5dcff83a",
            "file": "src/app/@core/services/dashboard.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getStudentDashboard",
                    "args": [
                        {
                            "name": "filters",
                            "type": "IDashboardFilters",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{ subscriptionsStatus: 'ACTIVE', subscriptionsExpiringInDays: 100 }"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IStudentDashboard>",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "IDashboardFilters",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{ subscriptionsStatus: 'ACTIVE', subscriptionsExpiringInDays: 100 }",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTeacherDashboard",
                    "args": [
                        {
                            "name": "filters",
                            "type": "IDashboardFilters",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{ subscriptionsStatus: 'ACTIVE', subscriptionsExpiringInDays: 30 }"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ITeacherDashboard>",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "IDashboardFilters",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{ subscriptionsStatus: 'ACTIVE', subscriptionsExpiringInDays: 30 }",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql } from 'apollo-angular';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ENROLLMENT_DETAIL } from '../graphql/enrollment.graphql';\nimport { STUDY_GROUP_SUMMARY } from '../graphql/study-group.graphql';\nimport { Enrollment } from '../models/enrollment.model';\nimport { EventOccurrence } from '../models/event-occurrence.model';\nimport { Subscription } from '../models/subscription.model';\n\ninterface IStudent {\n    id?: string;\n    firstName?: string;\n    familyName?: string;\n    displayName?: string;\n    primaryEmail?: string;\n    enrollments?: Enrollment[];\n    subscriptions?: Subscription[];\n}\n\ninterface ITeacherDashboard {\n    nextEvents: EventOccurrence[];\n    students: IStudent[];\n}\n\ninterface ITeacherDashboardQuery {\n    teacherDashboard: ITeacherDashboard;\n}\n\ninterface IStudentDashboard {\n    nextEvent: EventOccurrence;\n    subscriptions: Subscription[];\n}\n\ninterface IStudentDashboardQuery {\n    studentDashboard: IStudentDashboard;\n}\n\nexport interface IDashboardFilters {\n    subscriptionsStatus?: string;\n    subscriptionsExpiringInDays?: number;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DashboardService {\n    constructor(private apollo: Apollo) {}\n\n    getTeacherDashboard(\n        filters: IDashboardFilters = { subscriptionsStatus: 'ACTIVE', subscriptionsExpiringInDays: 30 },\n    ): Observable<ITeacherDashboard> {\n        return this.apollo\n            .watchQuery<ITeacherDashboardQuery>({\n                query: gql`\n                    query TeacherDashboard($filters: DashboardFilters) {\n                        teacherDashboard(filters: $filters) {\n                            id\n                            nextEvents {\n                                id\n                                title\n                                description\n                                startDateTime\n                                enrollment {\n                                    id\n                                }\n                                studyGroup {\n                                    id\n                                }\n                            }\n                            students {\n                                id\n                                firstName\n                                familyName\n                                displayName\n                                enrollments {\n                                    id\n                                    studyGroup {\n                                        id\n                                    }\n                                }\n                                subscriptions {\n                                    id\n                                    renewalDate\n                                }\n                            }\n                        }\n                    }\n                `,\n                variables: {\n                    filters,\n                },\n            })\n            .valueChanges.pipe(\n                map((result: ApolloQueryResult<ITeacherDashboardQuery>) => result.data.teacherDashboard),\n            );\n    }\n\n    getStudentDashboard(\n        filters: IDashboardFilters = { subscriptionsStatus: 'ACTIVE', subscriptionsExpiringInDays: 100 },\n    ): Observable<IStudentDashboard> {\n        return this.apollo\n            .watchQuery<IStudentDashboardQuery>({\n                query: gql`\n                    query StudentDashboardQuery($filters: DashboardFilters) {\n                        studentDashboard(filters: $filters) {\n                            id\n                            nextEvent {\n                                id\n                                title\n                                description\n                                startDateTime\n                                enrollment {\n                                    ...enrollmentDetail\n                                }\n                                studyGroup {\n                                    ...studyGroupSummary\n                                }\n                            }\n                            subscriptions {\n                                id\n                                renewalDate\n                            }\n                        }\n                    }\n                    ${ENROLLMENT_DETAIL}\n                    ${STUDY_GROUP_SUMMARY}\n                `,\n                variables: {\n                    filters,\n                },\n            })\n            .valueChanges.pipe(\n                map((result: ApolloQueryResult<IStudentDashboardQuery>) => result.data.studentDashboard),\n            );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LayoutService",
            "id": "injectable-LayoutService-ee237dafd3a74aa0f631db09abd639d0",
            "file": "src/app/layout/services/layout.service.ts",
            "properties": [
                {
                    "name": "scroll$",
                    "defaultValue": "this.scrollSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "scrollSource",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "onScroll",
                    "args": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class LayoutService {\n    private scrollSource = new Subject<any>();\n    scroll$ = this.scrollSource.asObservable();\n\n    constructor() {}\n\n    onScroll(evt: any) {\n        this.scrollSource.next(evt);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "LiveChatService",
            "id": "injectable-LiveChatService-f0a6401a62c0e075340935fed6b3a1ab",
            "file": "src/app/@core/services/live-chat.service.ts",
            "properties": [
                {
                    "name": "currentRoute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "liveChatToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "zE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "zESettings",
                    "defaultValue": "{\n        webWidget: {\n            chat: { supress: false },\n            contactForm: { suppress: false },\n            helpCenter: { supress: true },\n            talk: { supress: true },\n            authenticate: {\n                chat: {\n                    jwtFn: (callback: Function) => {\n                        if (this.liveChatToken) {\n                            callback(this.liveChatToken);\n                        }\n                    },\n                },\n            },\n            offset: {\n                horizontal: '20px',\n                vertical: '20px',\n                mobile: {\n                    horizontal: '0px',\n                    vertical: '60px', // TODO: @Rodrigo check if we can calculate offset\n                },\n            },\n        },\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "<p>Live Chat Settings</p>\n<ul>\n<li>only chat and contact form enabled</li>\n<li>set authentication based on live chat token (from server)</li>\n<li>offset live chat icon (very important om mobile)</li>\n</ul>\n",
                    "line": 25,
                    "rawdescription": "\n\nLive Chat Settings\n - only chat and contact form enabled\n - set authentication based on live chat token (from server)\n - offset live chat icon (very important om mobile)\n",
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "enableChat",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "getLiveChatToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis function is executed from user service when jwt is set (user logged in)\n",
                    "description": "<p>This function is executed from user service when jwt is set (user logged in)</p>\n"
                },
                {
                    "name": "updateSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nupdate Live Chat settings (check zESettings)\nTODO: error when hard reloading page after toggling chat. Steps to reproduce:\n - login and stay on dashboard; hit refresh. No error occurrs.\n - Hard reset the page. Error occurs.\n",
                    "description": "<p>update Live Chat settings (check zESettings)\nTODO: error when hard reloading page after toggling chat. Steps to reproduce:</p>\n<ul>\n<li>login and stay on dashboard; hit refresh. No error occurrs.</li>\n<li>Hard reset the page. Error occurs.</li>\n</ul>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "watchRoute",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWatch route and toggle live chat depending on route\n",
                    "description": "<p>Watch route and toggle live chat depending on route</p>\n",
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\n\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql } from 'apollo-angular';\n\ninterface ILiveChatTokenResult {\n    liveChatToken: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class LiveChatService {\n    private zE: any;\n    private currentRoute: string;\n    private liveChatToken: string;\n\n    /**\n     * Live Chat Settings\n     *  - only chat and contact form enabled\n     *  - set authentication based on live chat token (from server)\n     *  - offset live chat icon (very important om mobile)\n     */\n    private zESettings = {\n        webWidget: {\n            chat: { supress: false },\n            contactForm: { suppress: false },\n            helpCenter: { supress: true },\n            talk: { supress: true },\n            authenticate: {\n                chat: {\n                    jwtFn: (callback: Function) => {\n                        if (this.liveChatToken) {\n                            callback(this.liveChatToken);\n                        }\n                    },\n                },\n            },\n            offset: {\n                horizontal: '20px',\n                vertical: '20px',\n                mobile: {\n                    horizontal: '0px',\n                    vertical: '60px', // TODO: @Rodrigo check if we can calculate offset\n                },\n            },\n        },\n    };\n\n    constructor(private router: Router, private apollo: Apollo) {\n        this.zE = window['zE'];\n        this.watchRoute();\n    }\n\n    private enableChat(): boolean {\n        return (\n            this.zE !== undefined && this.currentRoute !== undefined && ['/dashboard', '/'].includes(this.currentRoute)\n        );\n    }\n\n    /**\n     * Watch route and toggle live chat depending on route\n     */\n    private watchRoute(): void {\n        this.router.events.subscribe({\n            next: (event) => {\n                if (event instanceof NavigationEnd) {\n                    const { url } = event as NavigationEnd;\n\n                    if (this.currentRoute !== url) {\n                        this.currentRoute = url;\n                        if (this.currentRoute) {\n                            this.updateSettings();\n                        }\n                    }\n                }\n            },\n        });\n    }\n\n    /**\n     * This function is executed from user service when jwt is set (user logged in)\n     */\n    getLiveChatToken(): void {\n        this.apollo\n            .query({\n                query: gql`\n                    {\n                        liveChatToken\n                    }\n                `,\n            })\n            .subscribe((result: ApolloQueryResult<ILiveChatTokenResult>) => {\n                this.liveChatToken = result.data.liveChatToken;\n                this.updateSettings();\n            });\n    }\n\n    /**\n     * update Live Chat settings (check zESettings)\n     * TODO: error when hard reloading page after toggling chat. Steps to reproduce:\n     *  - login and stay on dashboard; hit refresh. No error occurrs.\n     *  - Hard reset the page. Error occurs.\n     */\n    private updateSettings(): void {\n        this.zE = window['zE'];\n        this.zE('webWidget', 'updateSettings', this.zESettings);\n\n        if (typeof this.zE.show !== 'function') {\n            return;\n        }\n\n        if (this.enableChat()) {\n            this.zE.show();\n        } else if (this.currentRoute) {\n            this.zE.hide();\n        }\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LMSService",
            "id": "injectable-LMSService-dc32ff151dd7201599a396387ce838a7",
            "file": "src/app/@core/services/lms.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getLesson",
                    "args": [
                        {
                            "name": "lessonId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Lesson>",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lessonId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProgram",
                    "args": [
                        {
                            "name": "programId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Program>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "programId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPrograms",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Program[]>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Apollo, gql } from 'apollo-angular';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Program } from 'app/@core/models/program.model';\nimport { Lesson } from 'app/@core/models/lesson.model';\nimport { PROGRAM_DETAILS, PROGRAM_SUMMARY } from '../graphql/program.graphql';\nimport { LESSON_DETAILS } from '../graphql/lesson.graphql';\n\ninterface IProgramResult {\n    program: Program;\n}\n\ninterface IProgramsResult {\n    programs: Program[];\n}\ninterface ILessonResult {\n    lesson: Lesson;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class LMSService {\n    constructor(private apollo: Apollo) {}\n\n    getPrograms(): Observable<Program[]> {\n        return this.apollo\n            .query({\n                query: gql`\n                    {\n                        programs {\n                            ...programSummary\n                        }\n                    }\n                    ${PROGRAM_SUMMARY}\n                `,\n            })\n            .pipe(map((result: ApolloQueryResult<IProgramsResult>) => result.data.programs));\n    }\n\n    getProgram(programId: string): Observable<Program> {\n        return this.apollo\n            .query({\n                query: gql`\n      {\n        program(id: \"${programId}\") {\n            ...programDetails\n        }\n      }\n      ${PROGRAM_DETAILS}`,\n            })\n            .pipe(map((result: ApolloQueryResult<IProgramResult>) => result.data.program));\n    }\n\n    getLesson(lessonId: string): Observable<Lesson> {\n        return this.apollo\n            .query({\n                query: gql`\n      {\n        lesson(id: \"${lessonId}\") {\n            ...lessonDetails\n        }\n      }\n      ${LESSON_DETAILS}`,\n            })\n            .pipe(map((result: ApolloQueryResult<ILessonResult>) => result.data.lesson));\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "OnboardingService",
            "id": "injectable-OnboardingService-c7e8a5344966a633607511eeea943a7b",
            "file": "src/app/@core/services/onboarding.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getFormQuery",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\nimport { gql } from 'apollo-angular';\nimport { ONBOARDING_DETAIL } from '../graphql/onboarding.graphql';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class OnboardingService {\n    constructor(private apollo: Apollo) {}\n    getFormQuery() {\n        return this.apollo.watchQuery({\n            query: gql`\n                query getFormQuery {\n                    getForm {\n                        ...onboardingDetail\n                    }\n                }\n                ${ONBOARDING_DETAIL}\n            `,\n        });\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PortalService",
            "id": "injectable-PortalService-e8e70a4b9cc0430eebc6a9f8d606169b",
            "file": "src/app/@shared/services/portal.service.ts",
            "properties": [
                {
                    "name": "targets",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | ViewContainerRef>",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addTarget",
                    "args": [
                        {
                            "name": "targetName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "viewContainer",
                            "type": "ViewContainerRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "targetName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "viewContainer",
                            "type": "ViewContainerRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "attach",
                    "args": [
                        {
                            "name": "targetName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "template",
                            "type": "TemplateRef<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "targetName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "template",
                            "type": "TemplateRef<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clear",
                    "args": [
                        {
                            "name": "targetName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "targetName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTarget",
                    "args": [
                        {
                            "name": "targetName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ViewContainerRef | null",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "targetName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, TemplateRef, ViewContainerRef } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class PortalService {\n    private targets: Map<string, ViewContainerRef>;\n\n    constructor() {\n        this.targets = new Map<string, ViewContainerRef>();\n    }\n\n    addTarget(targetName: string, viewContainer: ViewContainerRef): void {\n        this.targets.set(targetName, viewContainer);\n    }\n\n    attach(targetName: string, template: TemplateRef<any>): void {\n        this.getTarget(targetName)?.createEmbeddedView(template);\n    }\n\n    clear(targetName: string): void {\n        this.getTarget(targetName)?.clear();\n    }\n\n    private getTarget(targetName: string): ViewContainerRef | null {\n        return this.targets.has(targetName) ? this.targets.get(targetName) : null;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 5
            },
            "type": "injectable"
        },
        {
            "name": "PostalCodeService",
            "id": "injectable-PostalCodeService-5bd399b1ffda7c79f07c4b93923edb41",
            "file": "src/app/@core/services/postal-code.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAddress",
                    "args": [
                        {
                            "name": "postalCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "postalCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PostalCodeService {\n    constructor(private httpClient: HttpClient) {}\n\n    getAddress(postalCode: string): Observable<any> {\n        return this.httpClient.get(`https://viacep.com.br/ws/${postalCode}/json/`, {\n            headers: { skip: 'true' },\n            responseType: 'json',\n        });\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProgressBarService",
            "id": "injectable-ProgressBarService-415ba5caaf8e4c3d2c1a4ea86c7324e2",
            "file": "src/app/@core/components/progress-bar/progress-bar.service.ts",
            "properties": [
                {
                    "name": "_bufferValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<string>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "_init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitialize\n\n",
                    "description": "<p>Initialize</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1981,
                                "end": 1988,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "originalKeywordKind": 120,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHide the progress bar\n",
                    "description": "<p>Hide the progress bar</p>\n"
                },
                {
                    "name": "setBufferValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setMode",
                    "args": [
                        {
                            "name": "value",
                            "type": "\"determinate\" | \"indeterminate\" | \"buffer\" | \"query\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "\"determinate\" | \"indeterminate\" | \"buffer\" | \"query\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow the progress bar\n",
                    "description": "<p>Show the progress bar</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { NavigationCancel, NavigationEnd, NavigationError, NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ProgressBarService {\n    // Private\n    private _bufferValue: BehaviorSubject<number>;\n    private _mode: BehaviorSubject<string>;\n    private _value: BehaviorSubject<number>;\n    private _visible: BehaviorSubject<boolean>;\n\n    /**\n     * Constructor\n     *\n     * @param _router\n     */\n    constructor(private _router: Router) {\n        // Initialize the service\n        this._init();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Buffer value\n     */\n    get bufferValue(): Observable<any> {\n        return this._bufferValue.asObservable();\n    }\n\n    setBufferValue(value: number): void {\n        this._bufferValue.next(value);\n    }\n\n    /**\n     * Mode\n     */\n    get mode(): Observable<any> {\n        return this._mode.asObservable();\n    }\n\n    setMode(value: 'determinate' | 'indeterminate' | 'buffer' | 'query'): void {\n        this._mode.next(value);\n    }\n\n    /**\n     * Value\n     */\n    get value(): Observable<any> {\n        return this._value.asObservable();\n    }\n\n    setValue(value: number): void {\n        this._value.next(value);\n    }\n\n    /**\n     * Visible\n     */\n    get visible(): Observable<any> {\n        return this._visible.asObservable();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Private methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Initialize\n     *\n     * @private\n     */\n    private _init(): void {\n        // Initialize the behavior subjects\n        this._bufferValue = new BehaviorSubject(0);\n        this._mode = new BehaviorSubject('indeterminate');\n        this._value = new BehaviorSubject(0);\n        this._visible = new BehaviorSubject(false);\n\n        // Subscribe to the router events to show/hide the loading bar\n        this._router.events.pipe(filter((event) => event instanceof NavigationStart)).subscribe(() => {\n            this.show();\n        });\n\n        this._router.events\n            .pipe(\n                filter(\n                    (event) =>\n                        event instanceof NavigationEnd ||\n                        event instanceof NavigationError ||\n                        event instanceof NavigationCancel,\n                ),\n            )\n            .subscribe(() => {\n                this.hide();\n            });\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Show the progress bar\n     */\n    show(): void {\n        this._visible.next(true);\n    }\n\n    /**\n     * Hide the progress bar\n     */\n    hide(): void {\n        this._visible.next(false);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "rawdescription": "\n\nConstructor\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 574,
                            "end": 581,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "_router"
                        },
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 568,
                            "end": 573,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "accessors": {
                "bufferValue": {
                    "name": "bufferValue",
                    "getSignature": {
                        "name": "bufferValue",
                        "type": "",
                        "returnType": "Observable<any>",
                        "line": 33,
                        "rawdescription": "Buffer value",
                        "description": "<p>Buffer value</p>\n"
                    }
                },
                "mode": {
                    "name": "mode",
                    "getSignature": {
                        "name": "mode",
                        "type": "",
                        "returnType": "Observable<any>",
                        "line": 44,
                        "rawdescription": "Mode",
                        "description": "<p>Mode</p>\n"
                    }
                },
                "value": {
                    "name": "value",
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "Observable<any>",
                        "line": 55,
                        "rawdescription": "Value",
                        "description": "<p>Value</p>\n"
                    }
                },
                "visible": {
                    "name": "visible",
                    "getSignature": {
                        "name": "visible",
                        "type": "",
                        "returnType": "Observable<any>",
                        "line": 66,
                        "rawdescription": "Visible",
                        "description": "<p>Visible</p>\n"
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "SubscriptionService",
            "id": "injectable-SubscriptionService-e3f0e9e20e141f8709c0cbc8138630c1",
            "file": "src/app/@core/services/subscription.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createSubscriptionCheckout",
                    "args": [
                        {
                            "name": "subscriptionCheckoutInput",
                            "type": "ICreateSubscriptionCheckoutInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "subscriptionCheckoutInput",
                            "type": "ICreateSubscriptionCheckoutInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getInvoicePreview",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Invoice | null>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getProducts",
                    "args": [
                        {
                            "name": "productFilters",
                            "type": "IProductFilters",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productFilters",
                            "type": "IProductFilters",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubscriptionByCheckoutId",
                    "args": [
                        {
                            "name": "checkoutId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "checkoutId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubscriptionById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Apollo, gql } from 'apollo-angular';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Invoice } from '../models/invoice.model';\nimport { Product, IProductFilters } from '../models/product.model';\nimport { PRODUCT_DETAILS } from '../graphql/product.graphql';\nimport { SUBSCRIPTION_SUMMARY } from '../graphql/subscription.graphql';\nimport { INVOICE_DETAILS } from '../graphql/invoice.graphql';\nimport { Subscription } from '../models/subscription.model';\n\ninterface IGetInvoicePreview {\n    invoicePreview: Invoice | null;\n}\n\ninterface IGetProducts {\n    products: Product[];\n}\n\ninterface ICreateSubscriptionCheckoutMutation {\n    createSubscriptionCheckout: Subscription;\n}\n\ninterface ICheckoutItem {\n    priceId: string;\n    quantity: number;\n}\n\nexport interface ICreateSubscriptionCheckoutInput {\n    checkoutItems: ICheckoutItem[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SubscriptionService {\n    constructor(private apollo: Apollo) {}\n\n    getInvoicePreview(): Observable<Invoice | null> {\n        return this.apollo\n            .query<IGetInvoicePreview>({\n                query: gql`\n                    {\n                        invoicePreview {\n                            ...invoiceDetails\n                        }\n                    }\n                    ${INVOICE_DETAILS}\n                `,\n            })\n            .pipe(map((result: ApolloQueryResult<IGetInvoicePreview>) => result.data.invoicePreview));\n    }\n\n    getProducts(productFilters?: IProductFilters) {\n        return this.apollo\n            .query<IGetProducts>({\n                query: gql`\n                    query ProductsQuery($productFilters: ProductFilters) {\n                        products(productFilters: $productFilters) {\n                            ...productDetails\n                        }\n                    }\n                    ${PRODUCT_DETAILS}\n                `,\n                variables: {\n                    productFilters,\n                },\n            })\n            .pipe(map((result: ApolloQueryResult<IGetProducts>) => result.data.products));\n    }\n\n    createSubscriptionCheckout(subscriptionCheckoutInput: ICreateSubscriptionCheckoutInput) {\n        return this.apollo\n            .mutate<ICreateSubscriptionCheckoutMutation>({\n                mutation: gql`\n                    mutation createSubscriptionCheckoutMutation(\n                        $subscriptionCheckoutInput: CreateSubscriptionCheckoutInput\n                    ) {\n                        createSubscriptionCheckout(subscriptionCheckoutInput: $subscriptionCheckoutInput) {\n                            ...subscriptionSummary\n                        }\n                    }\n                    ${SUBSCRIPTION_SUMMARY}\n                `,\n                variables: {\n                    subscriptionCheckoutInput,\n                },\n            })\n            .pipe(\n                map((result: ApolloQueryResult<ICreateSubscriptionCheckoutMutation>) => {\n                    return result.data.createSubscriptionCheckout;\n                }),\n            );\n    }\n\n    getSubscriptionById(id: string) {\n        return this.apollo.watchQuery<any>({\n            query: gql`\n                query SubscriptionQuery($id: ID) {\n                    subscription(id: $id) {\n                        ...subscriptionSummary\n                    }\n                }\n                ${SUBSCRIPTION_SUMMARY}\n            `,\n            pollInterval: 5000,\n            variables: {\n                id,\n            },\n        });\n    }\n\n    getSubscriptionByCheckoutId(checkoutId: string) {\n        return this.apollo.watchQuery<any>({\n            query: gql`\n                query SubscriptionQueryByStripeCheckoutId($checkoutId: ID) {\n                    subscriptionByStripeCheckoutId(checkoutId: $checkoutId) {\n                        ...subscriptionSummary\n                    }\n                }\n                ${SUBSCRIPTION_SUMMARY}\n            `,\n            pollInterval: 5000,\n            variables: {\n                checkoutId,\n            },\n        });\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-712084a64c09350a44447af1fa9e1b4b",
            "file": "src/app/@core/services/theme.service.ts",
            "properties": [
                {
                    "name": "theme$",
                    "defaultValue": "this.themeSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "themeSource",
                    "defaultValue": "new BehaviorSubject<string>(localStorage.getItem('theme') || 'light-theme')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "changeTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateOverlay",
                    "args": [
                        {
                            "name": "theme",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { OverlayContainer } from '@angular/cdk/overlay';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ThemeService {\n    private themeSource = new BehaviorSubject<string>(localStorage.getItem('theme') || 'light-theme');\n    theme$ = this.themeSource.asObservable();\n\n    constructor(private overlayContainer: OverlayContainer) {\n        this.initTheme();\n    }\n\n    initTheme() {\n        const currentTheme = this.themeSource.getValue();\n        this.changeTheme(currentTheme);\n    }\n\n    changeTheme(theme: string) {\n        this.themeSource.next(theme);\n        this.updateOverlay(theme);\n        localStorage.setItem('theme', theme);\n    }\n\n    updateOverlay(theme: string) {\n        const classList = this.overlayContainer.getContainerElement().classList;\n        const toRemove = Array.from(classList).filter((item: string) => item.includes('-theme'));\n        if (toRemove.length) {\n            classList.remove(...toRemove);\n        }\n        classList.add(theme);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "overlayContainer",
                        "type": "OverlayContainer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "overlayContainer",
                        "type": "OverlayContainer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserAccountService",
            "id": "injectable-UserAccountService-a03067f3bd948db91f45118a7f37e206",
            "file": "src/app/main/user-account/user-account.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateRegistrationToken",
                    "args": [
                        {
                            "name": "registrationToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<TokenValidation>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "registrationToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\n\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport { environment } from 'environments/environment';\nimport { TokenValidation } from './token-validation.interface';\n\ninterface TokenPayload {\n    registrationToken: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class UserAccountService {\n    constructor(private _httpClient: HttpClient) {}\n\n    private handleError(error: HttpErrorResponse): Observable<any> {\n        return throwError(error);\n    }\n\n    public validateRegistrationToken(registrationToken: string): Observable<TokenValidation> {\n        const url = `${environment.apiUrl}/auth/confirm-registration`;\n        const httpOptions = {\n            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\n        };\n\n        return this._httpClient.post<TokenPayload>(url, { registrationToken }, httpOptions).pipe(\n            map((response: any) => response),\n            catchError(this.handleError),\n        );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "_httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-56d579829aba74f364a721cb116cbe5e",
            "file": "src/app/@core/services/user.service.ts",
            "properties": [
                {
                    "name": "loggedUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<UserAuthDetails>",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "loggedUserSubject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<UserAuthDetails>",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "studentInfo$",
                    "defaultValue": "this.studentInfoSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "studentInfoSubject",
                    "defaultValue": "new BehaviorSubject<CreatePasswordStudentInfo | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "changePassword",
                    "args": [
                        {
                            "name": "changePasswordInput",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changePasswordInput",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "forgotPassword",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStudentInfo",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 229,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<UserProfile>",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasRole",
                    "args": [
                        {
                            "name": "role",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "role",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login2",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserProfile>",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loginSuccess",
                    "args": [
                        {
                            "name": "result",
                            "type": "ILoginResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "ILoginResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "newUser",
                            "type": "INewUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newUser",
                            "type": "INewUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetPassword",
                    "args": [
                        {
                            "name": "resetPasswordToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "resetPasswordToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setStudentInfoForCreatePassword",
                    "args": [
                        {
                            "name": "studentInfo",
                            "type": "CreatePasswordStudentInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 225,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "studentInfo",
                            "type": "CreatePasswordStudentInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUserFromAuthToken",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<UserAuthDetails>",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateMyProfile",
                    "args": [
                        {
                            "name": "userProfile",
                            "type": "UserProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserProfile>",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userProfile",
                            "type": "UserProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateEmail",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Apollo, gql } from 'apollo-angular';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { environment } from 'environments/environment';\nimport { UserAuthDetails, UserProfile } from 'app/@core/models/user-profile.model';\nimport { UserSessionService } from 'app/@core/services/user-session.service';\nimport { USER_PROFILE } from '../graphql/user-profile.graphql';\nimport { CreatePasswordStudentInfo } from '../models/invitation.model';\nimport { LiveChatService } from './live-chat.service';\n\ninterface ILoginResult {\n    token: string;\n}\n\ninterface IUserResult {\n    myProfile: UserProfile;\n}\n\ninterface IUpdateMyProfileResult {\n    updateMyProfile: UserProfile;\n}\n\ninterface IChangePassword {\n    user: UserProfile;\n}\n\ninterface INewUser {\n    email: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n    cpf: string;\n    postalCode: string;\n    street: string;\n    streetNumber: string;\n    streetComplement: string;\n    district: string;\n    city: string;\n    state: string;\n    addressType?: string;\n    countryISO?: string;\n    category?: string;\n    earlyAccessCode?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n    private loggedUserSubject: BehaviorSubject<UserAuthDetails>;\n    public loggedUser: Observable<UserAuthDetails>;\n\n    private studentInfoSubject = new BehaviorSubject<CreatePasswordStudentInfo | null>(null);\n    studentInfo$ = this.studentInfoSubject.asObservable();\n\n    constructor(\n        private http: HttpClient,\n        private apollo: Apollo,\n        private _userSessionService: UserSessionService,\n        private liveChatService: LiveChatService,\n    ) {\n        this.loggedUserSubject = new BehaviorSubject<UserAuthDetails>(null);\n        this.loggedUser = this.loggedUserSubject.asObservable();\n\n        this.setUserFromAuthToken().subscribe();\n    }\n\n    setUserFromAuthToken(): Observable<UserAuthDetails> {\n        const jwt = this._userSessionService.getAuthToken();\n        if (!jwt) {\n            return of(undefined);\n        }\n\n        this.liveChatService.getLiveChatToken();\n        const jwtPayload = JSON.parse(atob(jwt.split('.')[1])) as UserAuthDetails;\n        if (!jwtPayload.roles) {\n            jwtPayload.roles = [];\n        }\n\n        this.loggedUserSubject.next(jwtPayload);\n\n        return of(jwtPayload);\n    }\n\n    getUserProfile(): Observable<UserProfile> {\n        if (!this._userSessionService.getAuthToken()) {\n            return;\n        }\n\n        return this.apollo\n            .query({\n                query: gql`\n                    {\n                        myProfile {\n                            ...userProfile\n                        }\n                    }\n                    ${USER_PROFILE}\n                `,\n            })\n            .pipe(map((result: ApolloQueryResult<IUserResult>) => result.data.myProfile));\n    }\n\n    updateMyProfile(userProfile: UserProfile): Observable<UserProfile> {\n        return this.apollo\n            .mutate<IUpdateMyProfileResult>({\n                variables: {\n                    userProfile,\n                },\n                mutation: gql`\n                    mutation updateMyProfile($userProfile: UserInput) {\n                        updateMyProfile(userProfile: $userProfile) {\n                            ...userProfile\n                        }\n                    }\n                    ${USER_PROFILE}\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IUpdateMyProfileResult>) => {\n                    const updatedUser = result.data.updateMyProfile;\n                    return updatedUser;\n                }),\n            );\n    }\n\n    changePassword(changePasswordInput: {\n        userEmail: string;\n        oldPassword: string;\n        newPassword: string;\n    }): Observable<any> {\n        return this.apollo\n            .mutate<IChangePassword>({\n                variables: {\n                    changePasswordInput,\n                },\n                mutation: gql`\n                    mutation changeMyPassword($changePasswordInput: ChangePasswordInput) {\n                        changeMyPassword(changePasswordInput: $changePasswordInput) {\n                            id\n                        }\n                    }\n                `,\n            })\n            .pipe(\n                map((result: ApolloQueryResult<IChangePassword>) => {\n                    const updatedUser = result.data.user;\n                    return updatedUser;\n                }),\n            );\n    }\n\n    register(newUser: INewUser): Observable<{ token: string }> {\n        return this.http.post<{ token: string }>(`${environment.apiUrl}/auth/register`, newUser);\n    }\n\n    login(email: string, password: string): Observable<{ token: string }> {\n        return this.http.post<any>(\n            `${environment.apiUrl}/auth/login`,\n            { email, password },\n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                responseType: 'json',\n            },\n        );\n    }\n\n    login2(email: string, password: string): Observable<UserProfile> {\n        return this.http.post<any>(`${environment.apiUrl}/auth/login`, { email, password });\n    }\n\n    loginSuccess(result: ILoginResult) {\n        this._userSessionService.setAuthToken(result.token);\n        return this.setUserFromAuthToken();\n    }\n\n    logout(): void {\n        this.loggedUserSubject.next(null);\n        this._userSessionService.removeAuthToken();\n    }\n\n    forgotPassword(email: string): Observable<any> {\n        return this.http.post<any>(\n            `${environment.apiUrl}/auth/forgot-password`,\n            { email },\n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                responseType: 'json',\n            },\n        );\n    }\n\n    resetPassword(resetPasswordToken: string, newPassword: string): Observable<any> {\n        return this.http.post<any>(\n            `${environment.apiUrl}/auth/reset-password`,\n            { resetPasswordToken, newPassword },\n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                responseType: 'json',\n            },\n        );\n    }\n\n    validateEmail(email: string): Observable<any> {\n        return this.http.post<any>(\n            `${environment.apiUrl}/auth/email-validation`,\n            { primaryEmail: email },\n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                responseType: 'json',\n            },\n        );\n    }\n\n    setStudentInfoForCreatePassword(studentInfo: CreatePasswordStudentInfo) {\n        this.studentInfoSubject.next(studentInfo);\n    }\n\n    getStudentInfo() {\n        return this.studentInfoSubject.getValue();\n    }\n\n    hasRole(role: string) {\n        const { roles } = this.loggedUserSubject.getValue();\n        return roles.includes(role);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_userSessionService",
                        "type": "UserSessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "liveChatService",
                        "type": "LiveChatService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 56,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_userSessionService",
                        "type": "UserSessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "liveChatService",
                        "type": "LiveChatService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserSessionService",
            "id": "injectable-UserSessionService-0f2442d1d78b875faf031dac267f187b",
            "file": "src/app/@core/services/user-session.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAuthToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeAuthToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setAuthToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Apollo } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\n\n// TODO: handle silent session refresh: 1- auto-login every x minutes. 2 - handle refresh token\n@Injectable({\n    providedIn: 'root',\n})\nexport class UserSessionService {\n    constructor(private router: Router, private apollo: Apollo) {}\n\n    getAuthToken(): string {\n        return localStorage.getItem('current-user');\n    }\n\n    setAuthToken(token: string): void {\n        localStorage.setItem('current-user', token);\n    }\n\n    removeAuthToken(): void {\n        localStorage.removeItem('current-user');\n\n        // stop apollo queries and reset cache\n        this.apollo.client.stop();\n        this.apollo.client.resetStore();\n\n        this.router.navigate(['/auth/login']);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apollo",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-0c23f306fe800c58971e9e20c092f8ba",
            "file": "src/app/@core/auth/guards/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | UrlTree",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "canActivateChild",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | UrlTree",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n    Router,\n    CanActivate,\n    CanActivateChild,\n    ActivatedRouteSnapshot,\n    RouterStateSnapshot,\n    UrlTree,\n} from '@angular/router';\nimport { UserSessionService } from 'app/@core/services/user-session.service';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { UserService } from '../../services/user.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard implements CanActivate, CanActivateChild {\n    constructor(\n        private router: Router,\n        private userService: UserService,\n        private userSessionService: UserSessionService,\n    ) {}\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | UrlTree {\n        return this.userService.loggedUser.pipe(\n            map((loggedUser) => {\n                if (!loggedUser && !this.userSessionService.getAuthToken()) {\n                    this.router.navigate(['/auth/login']);\n                    return false;\n                }\n\n                return true;\n            }),\n        );\n    }\n\n    canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | UrlTree {\n        return this.canActivate(route, state);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userSessionService",
                        "type": "UserSessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userSessionService",
                        "type": "UserSessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "NoAuthGuard",
            "id": "injectable-NoAuthGuard-5a48f5026f4848a48b86f05aa2fdb63a",
            "file": "src/app/@core/auth/guards/no-auth.guard.ts",
            "properties": [
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { UserService } from '../../services/user.service';\nimport { UserSessionService } from 'app/@core/services/user-session.service';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class NoAuthGuard implements CanActivate {\n    constructor(\n        private userService: UserService,\n        private userSessionService: UserSessionService,\n        public router: Router,\n    ) {}\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n        return this.userService.loggedUser.pipe(\n            map((loggedUser) => {\n                if (loggedUser && this.userSessionService.getAuthToken()) {\n                    if (loggedUser) {\n                        this.router.navigate(['/']);\n                    }\n\n                    return false;\n                }\n\n                return true;\n            }),\n        );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userSessionService",
                        "type": "UserSessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userSessionService",
                        "type": "UserSessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "ProfileGuard",
            "id": "injectable-ProfileGuard-f04da9cebaf7fda05556ef3b57363062",
            "file": "src/app/@core/auth/guards/profile.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | UrlTree",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { UserService } from '../../services/user.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ProfileGuard implements CanActivate {\n    constructor(private router: Router, private userService: UserService) {}\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | UrlTree {\n        return this.userService.loggedUser.pipe(\n            map((loggedUser) => {\n                if (!loggedUser?.profileComplete) {\n                    if (loggedUser) {\n                        this.router.navigate(['/profile/account']);\n                    }\n\n                    return false;\n                }\n\n                return true;\n            }),\n        );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "RolesGuard",
            "id": "injectable-RolesGuard-58317ca0693c060e5b8a1f97a609bc1a",
            "file": "src/app/@core/auth/guards/roles.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | UrlTree",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\nimport { UserService } from '../../services/user.service';\n\n@Injectable({ providedIn: 'root' })\nexport class RolesGuard implements CanActivate {\n    constructor(private router: Router, private userService: UserService) {}\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | UrlTree {\n        return this.userService.loggedUser.pipe(\n            take(1),\n            map((loggedUser) => {\n                if (!loggedUser) {\n                    this.router.navigate(['/auth/login']);\n                    return false;\n                }\n\n                const userRoles = loggedUser.roles;\n                const hasRole = route.data.roles.some((role) => userRoles.includes(role));\n\n                if (hasRole) {\n                    return true;\n                }\n\n                // this.router.navigate(['/']);\n                return false;\n            }),\n        );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "SubscriptionGuard",
            "id": "injectable-SubscriptionGuard-fcf9e4c54ca6ea53dd15d4d3080b20a8",
            "file": "src/app/@core/auth/guards/subscription.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | UrlTree",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\nimport { UserService } from '../../services/user.service';\n\n@Injectable({ providedIn: 'root' })\nexport class SubscriptionGuard implements CanActivate {\n    constructor(private router: Router, private userService: UserService) {}\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | UrlTree {\n        return this.userService.loggedUser.pipe(\n            take(1),\n            map((loggedUser) => {\n                if (!loggedUser) {\n                    this.router.navigate(['/auth/login']);\n                    return false;\n                }\n\n                if (loggedUser && loggedUser.roles.length === 0) {\n                    this.router.navigate(['/auth/select-plan'], { queryParams: { teacher: true } });\n                    return false;\n                }\n\n                return true;\n            }),\n        );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "TransferService",
            "id": "injectable-TransferService-002466a4255de197b5435b2b1a7470c9",
            "file": "src/app/main/invitation/transfer/transfer.service.ts",
            "properties": [
                {
                    "name": "invitationToken",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "invitationRequest",
                    "args": [
                        {
                            "name": "choice",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<any>>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "choice",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nResolver\n\n",
                    "description": "<p>Resolver</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 510,
                                "end": 515,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "route"
                            },
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 504,
                                "end": 509,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 530,
                                "end": 535,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "state"
                            },
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 524,
                                "end": 529,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 544,
                                "end": 551,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from 'environments/environment';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class TransferService implements Resolve<any> {\n    invitationToken = '';\n\n    constructor(private _httpClient: HttpClient) {}\n\n    /**\n     * Resolver\n     *\n     * @param route\n     * @param state\n     * @returns\n     */\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<any> | Promise<any> | any {\n        this.invitationToken = route.params.invitationToken;\n    }\n\n    invitationRequest(choice: string): Observable<HttpResponse<any>> {\n        return this._httpClient.post(\n            `${environment.apiUrl}/invitation/${choice}/transfer`,\n            {\n                invitationToken: this.invitationToken,\n            },\n            {\n                headers: { 'Content-Type': 'application/json' },\n                responseType: 'text',\n                observe: 'response',\n            },\n        );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "_httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "WelcomeService",
            "id": "injectable-WelcomeService-18b4c0fc13f7340613efac31505f51c3",
            "file": "src/app/main/invitation/welcome/welcome.service.ts",
            "properties": [
                {
                    "name": "invitationToken",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "invitationRequest",
                    "args": [
                        {
                            "name": "choice",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "invitationToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<any>>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "choice",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "invitationToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nResolver\n\n",
                    "description": "<p>Resolver</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 509,
                                "end": 514,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "route"
                            },
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 503,
                                "end": 508,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 529,
                                "end": 534,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "state"
                            },
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 523,
                                "end": 528,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 543,
                                "end": 550,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from 'environments/environment';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class WelcomeService implements Resolve<any> {\n    invitationToken = '';\n\n    constructor(private _httpClient: HttpClient) {}\n\n    /**\n     * Resolver\n     *\n     * @param route\n     * @param state\n     * @returns\n     */\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<any> | Promise<any> | any {\n        this.invitationToken = route.params.invitationToken;\n    }\n\n    invitationRequest(choice: string, invitationToken?: string): Observable<HttpResponse<any>> {\n        this.invitationToken = invitationToken;\n        return this._httpClient.post(\n            `${environment.apiUrl}/invitation/${choice}`,\n            {\n                invitationToken: this.invitationToken,\n            },\n            {\n                headers: { 'Content-Type': 'application/json' },\n                // responseType: 'text',\n                observe: 'response',\n            },\n        );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "_httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "AuthErrorHandler",
            "id": "injectable-AuthErrorHandler-60f9833b458c516f5a886d4f5f25361f",
            "file": "src/app/@core/auth/interceptors/auth-error-handler.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable, Injector } from '@angular/core';\n\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { UserSessionService } from '../../services/user-session.service';\n\n@Injectable()\nexport class AuthErrorHandler implements HttpInterceptor {\n    constructor(private userSessionService: UserSessionService, private injector: Injector) {}\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        return next.handle(request).pipe(\n            catchError((err) => {\n                if (err.status === 401) {\n                    this.userSessionService.removeAuthToken();\n                }\n\n                const error = err.error.message || err.statusText;\n                return throwError(error);\n            }),\n        );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userSessionService",
                        "type": "UserSessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "userSessionService",
                        "type": "UserSessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        },
        {
            "name": "HttpRequestInterceptor",
            "id": "injectable-HttpRequestInterceptor-352aa178c8366cd05ca95329bf4595df",
            "file": "src/app/@core/interceptors/http-request.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>This class is for intercepting http requests. When a request starts, we set the loadingSub property\nin the LoadingService to true. Once the request completes and we have a response, set the loadingSub\nproperty to false. If an error occurs while servicing the request, set the loadingSub property to false.</p>\n",
            "rawdescription": "\n\nThis class is for intercepting http requests. When a request starts, we set the loadingSub property\nin the LoadingService to true. Once the request completes and we have a response, set the loadingSub\nproperty to false. If an error occurs while servicing the request, set the loadingSub property to false.\n\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ProgressBarService } from 'app/@core/components/progress-bar/progress-bar.service';\nimport { throwError } from 'rxjs';\n\n/**\n * This class is for intercepting http requests. When a request starts, we set the loadingSub property\n * in the LoadingService to true. Once the request completes and we have a response, set the loadingSub\n * property to false. If an error occurs while servicing the request, set the loadingSub property to false.\n *\n * @class {HttpRequestInterceptor}\n */\n@Injectable()\nexport class HttpRequestInterceptor implements HttpInterceptor {\n    constructor(private progressBarService: ProgressBarService) {}\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        this.progressBarService.setMode('indeterminate');\n        this.progressBarService.show();\n        return next.handle(request).pipe(\n            catchError((err) => {\n                this.progressBarService.hide();\n                return throwError(err);\n            }),\n            map<HttpEvent<any>, any>((evt: HttpEvent<any>) => {\n                if (evt instanceof HttpResponse) {\n                    this.progressBarService.hide();\n                }\n                return evt;\n            }),\n        );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "progressBarService",
                        "type": "ProgressBarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "progressBarService",
                        "type": "ProgressBarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        },
        {
            "name": "JwtInterceptor",
            "id": "injectable-JwtInterceptor-39338fe5f40334a6ce08827fb4c1268d",
            "file": "src/app/@core/auth/interceptors/jwt.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { UserSessionService } from '../../services/user-session.service';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n    constructor(private userSessionService: UserSessionService) {}\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        const token = this.userSessionService.getAuthToken();\n        const skipIntercept = request.headers.has('skip');\n\n        if (skipIntercept) {\n            request = request.clone({\n                headers: request.headers.delete('skip'),\n            });\n\n            return next.handle(request);\n        }\n\n        if (token) {\n            request = request.clone({\n                setHeaders: {\n                    Authorization: `Bearer ${token}`,\n                },\n            });\n        }\n\n        return next.handle(request).pipe(\n            tap((event) => {\n                if (event instanceof HttpResponse) {\n                    const response = event as HttpResponse<any>;\n\n                    const token = response.headers.get('Token');\n                    if (token) {\n                        this.userSessionService.setAuthToken(token);\n                    }\n                }\n            }),\n        );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userSessionService",
                        "type": "UserSessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "userSessionService",
                        "type": "UserSessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "EventHasNoDaySelectedValidator",
            "id": "class-EventHasNoDaySelectedValidator-8a4310c31ca958b6653e2cc2e846c674",
            "file": "src/app/@shared/components/calendar/schedule-input/validators/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AsyncValidatorFn, AbstractControl, ValidationErrors } from '@angular/forms';\nimport { Observable, of } from 'rxjs';\nimport { delay, map } from 'rxjs/operators';\n\n/*  \n  Events validators must be an async validator because\n  of form values not being in sync with view\n*/\n\nexport class EventsWithSameDateValidator {\n    static validate(): AsyncValidatorFn {\n        return (control: AbstractControl): Observable<ValidationErrors> => {\n            const events = control.value;\n            return of(events).pipe(\n                delay(0),\n                map((events) => {\n                    const dateValues = events.map((event) => {\n                        return `${event.currentDays?.join(',')} ${event.startDateTime} ${event.endDateTime}`;\n                    });\n                    const hasSameDate = dateValues.some((dateChecker, index) => {\n                        return dateValues.indexOf(dateChecker, index + 1) !== -1;\n                    });\n                    return hasSameDate ? { hasSameDate: true } : null;\n                }),\n            );\n        };\n    }\n}\n\nexport class EventHasScheduleConflictValidator {\n    static validate(): AsyncValidatorFn {\n        return (control: AbstractControl): Observable<ValidationErrors> => {\n            const event = control.value;\n            return of(event).pipe(\n                delay(0),\n                map((event) => {\n                    const hasConflict = event.hasConflict;\n                    return hasConflict ? { hasConflict: true } : null;\n                }),\n            );\n        };\n    }\n}\n\nexport class EventHasNoDaySelectedValidator {\n    static validate(): AsyncValidatorFn {\n        return (control: AbstractControl): Observable<ValidationErrors> => {\n            const event = control.value;\n            return of(event).pipe(\n                delay(0),\n                map((event) => {\n                    const hasNoDaySelected = !event.currentDays?.length;\n                    return hasNoDaySelected ? { hasNoDaySelected: true } : null;\n                }),\n            );\n        };\n    }\n}\n\nexport class EventHasStartAndEndTimeConflictValidator {\n    static validate(): AsyncValidatorFn {\n        return (control: AbstractControl): Observable<ValidationErrors> => {\n            const event = control.value;\n            return of(event).pipe(\n                delay(0),\n                map((event) => {\n                    const hasStartAndEndTimeConflict =\n                        event.startDateTime === event.endDateTime || event.endDateTime < event.startDateTime;\n                    return hasStartAndEndTimeConflict ? { hasStartAndEndTimeConflict: true } : null;\n                }),\n            );\n        };\n    }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "AsyncValidatorFn",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EventHasScheduleConflictValidator",
            "id": "class-EventHasScheduleConflictValidator-8a4310c31ca958b6653e2cc2e846c674",
            "file": "src/app/@shared/components/calendar/schedule-input/validators/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AsyncValidatorFn, AbstractControl, ValidationErrors } from '@angular/forms';\nimport { Observable, of } from 'rxjs';\nimport { delay, map } from 'rxjs/operators';\n\n/*  \n  Events validators must be an async validator because\n  of form values not being in sync with view\n*/\n\nexport class EventsWithSameDateValidator {\n    static validate(): AsyncValidatorFn {\n        return (control: AbstractControl): Observable<ValidationErrors> => {\n            const events = control.value;\n            return of(events).pipe(\n                delay(0),\n                map((events) => {\n                    const dateValues = events.map((event) => {\n                        return `${event.currentDays?.join(',')} ${event.startDateTime} ${event.endDateTime}`;\n                    });\n                    const hasSameDate = dateValues.some((dateChecker, index) => {\n                        return dateValues.indexOf(dateChecker, index + 1) !== -1;\n                    });\n                    return hasSameDate ? { hasSameDate: true } : null;\n                }),\n            );\n        };\n    }\n}\n\nexport class EventHasScheduleConflictValidator {\n    static validate(): AsyncValidatorFn {\n        return (control: AbstractControl): Observable<ValidationErrors> => {\n            const event = control.value;\n            return of(event).pipe(\n                delay(0),\n                map((event) => {\n                    const hasConflict = event.hasConflict;\n                    return hasConflict ? { hasConflict: true } : null;\n                }),\n            );\n        };\n    }\n}\n\nexport class EventHasNoDaySelectedValidator {\n    static validate(): AsyncValidatorFn {\n        return (control: AbstractControl): Observable<ValidationErrors> => {\n            const event = control.value;\n            return of(event).pipe(\n                delay(0),\n                map((event) => {\n                    const hasNoDaySelected = !event.currentDays?.length;\n                    return hasNoDaySelected ? { hasNoDaySelected: true } : null;\n                }),\n            );\n        };\n    }\n}\n\nexport class EventHasStartAndEndTimeConflictValidator {\n    static validate(): AsyncValidatorFn {\n        return (control: AbstractControl): Observable<ValidationErrors> => {\n            const event = control.value;\n            return of(event).pipe(\n                delay(0),\n                map((event) => {\n                    const hasStartAndEndTimeConflict =\n                        event.startDateTime === event.endDateTime || event.endDateTime < event.startDateTime;\n                    return hasStartAndEndTimeConflict ? { hasStartAndEndTimeConflict: true } : null;\n                }),\n            );\n        };\n    }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "AsyncValidatorFn",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EventHasStartAndEndTimeConflictValidator",
            "id": "class-EventHasStartAndEndTimeConflictValidator-8a4310c31ca958b6653e2cc2e846c674",
            "file": "src/app/@shared/components/calendar/schedule-input/validators/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AsyncValidatorFn, AbstractControl, ValidationErrors } from '@angular/forms';\nimport { Observable, of } from 'rxjs';\nimport { delay, map } from 'rxjs/operators';\n\n/*  \n  Events validators must be an async validator because\n  of form values not being in sync with view\n*/\n\nexport class EventsWithSameDateValidator {\n    static validate(): AsyncValidatorFn {\n        return (control: AbstractControl): Observable<ValidationErrors> => {\n            const events = control.value;\n            return of(events).pipe(\n                delay(0),\n                map((events) => {\n                    const dateValues = events.map((event) => {\n                        return `${event.currentDays?.join(',')} ${event.startDateTime} ${event.endDateTime}`;\n                    });\n                    const hasSameDate = dateValues.some((dateChecker, index) => {\n                        return dateValues.indexOf(dateChecker, index + 1) !== -1;\n                    });\n                    return hasSameDate ? { hasSameDate: true } : null;\n                }),\n            );\n        };\n    }\n}\n\nexport class EventHasScheduleConflictValidator {\n    static validate(): AsyncValidatorFn {\n        return (control: AbstractControl): Observable<ValidationErrors> => {\n            const event = control.value;\n            return of(event).pipe(\n                delay(0),\n                map((event) => {\n                    const hasConflict = event.hasConflict;\n                    return hasConflict ? { hasConflict: true } : null;\n                }),\n            );\n        };\n    }\n}\n\nexport class EventHasNoDaySelectedValidator {\n    static validate(): AsyncValidatorFn {\n        return (control: AbstractControl): Observable<ValidationErrors> => {\n            const event = control.value;\n            return of(event).pipe(\n                delay(0),\n                map((event) => {\n                    const hasNoDaySelected = !event.currentDays?.length;\n                    return hasNoDaySelected ? { hasNoDaySelected: true } : null;\n                }),\n            );\n        };\n    }\n}\n\nexport class EventHasStartAndEndTimeConflictValidator {\n    static validate(): AsyncValidatorFn {\n        return (control: AbstractControl): Observable<ValidationErrors> => {\n            const event = control.value;\n            return of(event).pipe(\n                delay(0),\n                map((event) => {\n                    const hasStartAndEndTimeConflict =\n                        event.startDateTime === event.endDateTime || event.endDateTime < event.startDateTime;\n                    return hasStartAndEndTimeConflict ? { hasStartAndEndTimeConflict: true } : null;\n                }),\n            );\n        };\n    }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "AsyncValidatorFn",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EventsWithSameDateValidator",
            "id": "class-EventsWithSameDateValidator-8a4310c31ca958b6653e2cc2e846c674",
            "file": "src/app/@shared/components/calendar/schedule-input/validators/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AsyncValidatorFn, AbstractControl, ValidationErrors } from '@angular/forms';\nimport { Observable, of } from 'rxjs';\nimport { delay, map } from 'rxjs/operators';\n\n/*  \n  Events validators must be an async validator because\n  of form values not being in sync with view\n*/\n\nexport class EventsWithSameDateValidator {\n    static validate(): AsyncValidatorFn {\n        return (control: AbstractControl): Observable<ValidationErrors> => {\n            const events = control.value;\n            return of(events).pipe(\n                delay(0),\n                map((events) => {\n                    const dateValues = events.map((event) => {\n                        return `${event.currentDays?.join(',')} ${event.startDateTime} ${event.endDateTime}`;\n                    });\n                    const hasSameDate = dateValues.some((dateChecker, index) => {\n                        return dateValues.indexOf(dateChecker, index + 1) !== -1;\n                    });\n                    return hasSameDate ? { hasSameDate: true } : null;\n                }),\n            );\n        };\n    }\n}\n\nexport class EventHasScheduleConflictValidator {\n    static validate(): AsyncValidatorFn {\n        return (control: AbstractControl): Observable<ValidationErrors> => {\n            const event = control.value;\n            return of(event).pipe(\n                delay(0),\n                map((event) => {\n                    const hasConflict = event.hasConflict;\n                    return hasConflict ? { hasConflict: true } : null;\n                }),\n            );\n        };\n    }\n}\n\nexport class EventHasNoDaySelectedValidator {\n    static validate(): AsyncValidatorFn {\n        return (control: AbstractControl): Observable<ValidationErrors> => {\n            const event = control.value;\n            return of(event).pipe(\n                delay(0),\n                map((event) => {\n                    const hasNoDaySelected = !event.currentDays?.length;\n                    return hasNoDaySelected ? { hasNoDaySelected: true } : null;\n                }),\n            );\n        };\n    }\n}\n\nexport class EventHasStartAndEndTimeConflictValidator {\n    static validate(): AsyncValidatorFn {\n        return (control: AbstractControl): Observable<ValidationErrors> => {\n            const event = control.value;\n            return of(event).pipe(\n                delay(0),\n                map((event) => {\n                    const hasStartAndEndTimeConflict =\n                        event.startDateTime === event.endDateTime || event.endDateTime < event.startDateTime;\n                    return hasStartAndEndTimeConflict ? { hasStartAndEndTimeConflict: true } : null;\n                }),\n            );\n        };\n    }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "AsyncValidatorFn",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FusePage",
            "id": "class-FusePage-27ef89cc48a1e02ac0fb976439f2249c",
            "file": "e2e/src/app.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class FusePage\n{\n    navigateTo(): Promise<any>\n    {\n        return browser.get('/') as Promise<any>;\n    }\n\n    getParagraphText(): Promise<string>\n    {\n        return element(by.css('app #main')).getText() as Promise<string>;\n    }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getParagraphText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PasswordValidation",
            "id": "class-PasswordValidation-1e39eddfe981a4272f5442c4f3a9ef83",
            "file": "src/app/profile/pages/user-password-page/user-password-page.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms';\n\nimport { switchMap } from 'rxjs/operators';\n\nimport { UserService } from 'app/@core/services/user.service';\n\nexport class PasswordValidation {\n    static MatchPassword(ac: AbstractControl): void {\n        const password = ac.get('password').value;\n        const passwordConfirm = ac.get('passwordConfirm').value;\n        if (password !== passwordConfirm) {\n            return ac.get('passwordConfirm').setErrors({ matchPassword: true });\n        }\n\n        return;\n    }\n}\n\n@Component({\n    selector: 'app-user-password-page',\n    templateUrl: './user-password-page.component.html',\n    styleUrls: ['./user-password-page.component.scss'],\n})\nexport class UserPasswordPageComponent implements OnInit {\n    userPasswordForm: FormGroup;\n\n    constructor(private formBuilder: FormBuilder, private userService: UserService) {}\n\n    ngOnInit(): void {\n        this.createUserPasswordForm();\n    }\n\n    createUserPasswordForm(): void {\n        this.userPasswordForm = this.formBuilder.group(\n            {\n                oldPassword: [\n                    null,\n                    Validators.compose([\n                        Validators.required,\n                        Validators.minLength(8),\n                        Validators.maxLength(28),\n                        Validators.pattern(/^(?=.*[A-Z])(?=.*[\\W])(?=.*[0-9])(?=.*[a-z]).{8,64}$/),\n                    ]),\n                ],\n                password: [\n                    '',\n                    Validators.compose([\n                        Validators.required,\n                        Validators.minLength(8),\n                        Validators.maxLength(28),\n                        Validators.pattern(/^(?=.*[A-Z])(?=.*[\\W])(?=.*[0-9])(?=.*[a-z]).{8,64}$/),\n                    ]),\n                ],\n                passwordConfirm: ['', [Validators.required]],\n            },\n            { validator: PasswordValidation.MatchPassword },\n        );\n    }\n\n    onUpdate(): void {\n        const { oldPassword, password: newPassword } = this.userPasswordForm.value;\n\n        this.userService.loggedUser\n            .pipe(\n                switchMap((user) => {\n                    const changePasswordInput = {\n                        userEmail: user.primaryEmail,\n                        oldPassword,\n                        newPassword,\n                    };\n\n                    return this.userService.changePassword(changePasswordInput);\n                }),\n            )\n            .subscribe({\n                next: () => {\n                    // TODO: confirmation message?\n                },\n            });\n    }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "MatchPassword",
                    "args": [
                        {
                            "name": "ac",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "ac",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "AttachDirective",
            "id": "directive-AttachDirective-72bdca46f02345d5f6920ac4501c39d0",
            "file": "src/app/@shared/directives/attach.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { ApplicationRef } from '@angular/core';\nimport { Directive, Input, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { PortalService } from 'app/@shared/services/portal.service';\n\n@Directive({ selector: '[tpAttach]' })\nexport class AttachDirective implements OnInit, OnDestroy {\n    @Input('tpAttach') targetName: string;\n\n    attachTimeout: NodeJS.Timeout;\n\n    hasPreviousNavigation: boolean;\n\n    constructor(private portalService: PortalService, private templateRef: TemplateRef<any>, private router: Router) {\n        // a way to check if it's the first time that app loads\n        this.hasPreviousNavigation = Boolean(this.router.getCurrentNavigation()?.previousNavigation);\n    }\n\n    ngOnInit(): void {\n        this.attachWithTimeout();\n    }\n\n    private attach() {\n        this.portalService.attach(this.targetName, this.templateRef);\n    }\n\n    private attachWithTimeout() {\n        this.attachTimeout = setTimeout(() => {\n            this.attach();\n        }, 0);\n    }\n\n    ngOnDestroy(): void {\n        this.portalService.clear(this.targetName);\n\n        if (this.attachTimeout) {\n            clearTimeout(this.attachTimeout);\n        }\n    }\n}\n",
            "selector": "[tpAttach]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "tpAttach",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "attachTimeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeJS.Timeout",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "hasPreviousNavigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "attach",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "attachWithTimeout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "portalService",
                        "type": "PortalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "portalService",
                        "type": "PortalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "DisableControlDirective",
            "id": "directive-DisableControlDirective-85994ac85075c8fbef550ac46e622197",
            "file": "src/app/@shared/directives/disable-control.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { NgControl } from '@angular/forms';\nimport { Directive, Input, OnChanges } from '@angular/core';\n\n@Directive({\n    selector: '[disableControl]',\n})\nexport class DisableControlDirective implements OnChanges {\n    @Input() disableControl;\n\n    ngOnChanges(changes): void {\n        if (changes['disableControl']) {\n            const action = this.disableControl ? 'disable' : 'enable';\n            this.ngControl.control[action]();\n        }\n    }\n\n    constructor(private ngControl: NgControl) {}\n}\n",
            "selector": "[disableControl]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "disableControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TargetDirective",
            "id": "directive-TargetDirective-9cf54975001a8ba077a35053ce0f33e2",
            "file": "src/app/@shared/directives/target.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, OnInit, ViewContainerRef } from '@angular/core';\nimport { PortalService } from '../services/portal.service';\n\n@Directive({\n    selector: '[tpTarget]',\n})\nexport class TargetDirective implements OnInit {\n    @Input('tpTarget') targetName: string;\n\n    constructor(private portalService: PortalService, private viewContainer: ViewContainerRef) {\n        this.portalService.addTarget(this.targetName, this.viewContainer);\n    }\n\n    ngOnInit(): void {\n        this.portalService.addTarget(this.targetName, this.viewContainer);\n    }\n}\n",
            "selector": "[tpTarget]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "tpTarget",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "portalService",
                        "type": "PortalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "portalService",
                        "type": "PortalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "ActiveEnrollmentsPageComponent",
            "id": "component-ActiveEnrollmentsPageComponent-38742479ab25fa2ef2ceec2d0770830d",
            "file": "src/app/enrolled/pages/active-enrollments-page/active-enrollments-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-active-enrollments-page",
            "styleUrls": [
                "./active-enrollments-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./active-enrollments-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-active-enrollments-page',\n    templateUrl: './active-enrollments-page.component.html',\n    styleUrls: ['./active-enrollments-page.component.scss'],\n})\nexport class ActiveEnrollmentsPageComponent {\n    constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./active-enrollments-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "templateData": ""
        },
        {
            "name": "AddressInputComponent",
            "id": "component-AddressInputComponent-7c5f12a454b0407016af1c60372b9060",
            "file": "src/app/@shared/components/forms/address-input/address-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-address-input",
            "styleUrls": [
                "./address-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./address-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "Address"
                },
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formAddress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "getAddress",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\nimport { Address } from 'app/@core/models/address.model';\nimport { PostalCodeService } from 'app/@core/services/postal-code.service';\n\n// Brazilian Post Code API object\ninterface PostalCode {\n    logradouro: string;\n    complemento: string;\n    bairro: string;\n    localidade: string;\n    uf: string;\n    erro: boolean;\n}\n\n@Component({\n    selector: 'app-address-input',\n    templateUrl: './address-input.component.html',\n    styleUrls: ['./address-input.component.scss'],\n})\nexport class AddressInputComponent implements OnChanges {\n    @Input() address: Address;\n\n    @Input() column: boolean;\n\n    formAddress: FormGroup;\n\n    constructor(private formBuilder: FormBuilder, private postalCodeService: PostalCodeService) {}\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes['address']) {\n            this.formAddress = this.formBuilder.group({\n                postalCode: [this.address.postalCode, Validators.required],\n                street: [this.address.street, Validators.required],\n                streetNumber: [\n                    this.address.streetNumber,\n                    Validators.compose([Validators.required, Validators.pattern('^[0-9]*$')]),\n                ],\n                streetComplement: [this.address.streetComplement],\n                district: [this.address.district, Validators.required],\n                city: [{ value: this.address.city, disabled: true }, Validators.required],\n                state: [{ value: this.address.state, disabled: true }, Validators.required],\n            });\n        }\n    }\n\n    getAddress(): void {\n        const postalCode = this.formAddress.controls['postalCode'].value;\n        if (postalCode?.length === 8) {\n            this.postalCodeService.getAddress(postalCode).subscribe((data: PostalCode) => {\n                if (!data.erro) {\n                    this.formAddress.patchValue({\n                        street: `${data.logradouro}`,\n                        streetComplement: `${data.complemento}`,\n                        district: `${data.bairro}`,\n                        city: `${data.localidade}`,\n                        state: `${data.uf}`,\n                    });\n                } else {\n                    this.formAddress.patchValue({\n                        postalCode: '',\n                        street: '',\n                        streetComplement: '',\n                        district: '',\n                        city: '',\n                        state: '',\n                    });\n\n                    alert('Postal Code not found\\nPlease enter a valid Postal Code.');\n                }\n            });\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./address-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postalCodeService",
                        "type": "PostalCodeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postalCodeService",
                        "type": "PostalCodeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<form\n  fxLayout.xs=\"column\"\n  fxLayoutGap.xs=\"12px\"\n  [fxLayout.gt-xs]=\"column ? 'column' : 'row wrap'\"\n  [fxFlexAlign.gt-xs]=\"column ? 'start stretch' : ''\"\n  fxLayoutGap.gt-xs=\"24px\"\n  [formGroup]=\"formAddress\"\n>\n  <mat-form-field appearance=\"outline\" fxFlex=\"30\">\n    <mat-label>Postal Code</mat-label>\n    <input\n      matInput\n      formControlName=\"postalCode\"\n      mask=\"00000-000\"\n      [showMaskTyped]=\"true\"\n      [validation]=\"true\"\n      placeHolderCharacter=\" \"\n      (blur)=\"getAddress()\"\n    />\n\n    <mat-error> Postal Code is required </mat-error>\n  </mat-form-field>\n\n  <mat-form-field appearance=\"outline\" fxFlex=\"30\">\n    <mat-label>Street</mat-label>\n    <input matInput formControlName=\"street\" />\n\n    <mat-error>Street is required</mat-error>\n  </mat-form-field>\n\n  <mat-form-field appearance=\"outline\" fxFlex=\"30\">\n    <mat-label>Number</mat-label>\n    <input matInput formControlName=\"streetNumber\" />\n\n    <mat-error>Number is required</mat-error>\n  </mat-form-field>\n  <mat-form-field appearance=\"outline\" fxFlex=\"30\">\n    <mat-label>Complement</mat-label>\n    <input matInput formControlName=\"streetComplement\" />\n  </mat-form-field>\n\n  <mat-form-field appearance=\"outline\" fxFlex=\"30\">\n    <mat-label>District</mat-label>\n    <input matInput formControlName=\"district\" />\n\n    <mat-error>District is required</mat-error>\n  </mat-form-field>\n\n  <mat-form-field appearance=\"outline\" fxFlex=\"30\">\n    <mat-label>City</mat-label>\n    <input matInput formControlName=\"city\" />\n\n    <mat-error>City is required</mat-error>\n  </mat-form-field>\n\n  <mat-form-field appearance=\"outline\" fxFlex=\"30\">\n    <mat-label>State</mat-label>\n    <input matInput formControlName=\"state\" mask=\"SS\" [validation]=\"true\" />\n\n    <mat-error>State is required</mat-error>\n  </mat-form-field>\n</form>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-29930ddf2426b988d4830ce125ad7d16",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "theme$",
                    "defaultValue": "this.themeService.theme$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ThemeService } from './@core/services/theme.service';\nimport { UserService } from './@core/services/user.service';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n    theme$ = this.themeService.theme$;\n\n    /* Injected userService here to load the user \n     in the proper way to be used in the route guards */\n    constructor(private userService: UserService, private themeService: ThemeService) {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".theme-wrapper {\n    height: 100%;\n    width: 100%;\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div [class]=\"'theme-wrapper mat-app-background ' + (theme$ | async)\">\n  <app-progress-bar></app-progress-bar>\n\n  <router-outlet></router-outlet>\n</div>\n"
        },
        {
            "name": "AppShellComponent",
            "id": "component-AppShellComponent-1e23187be3b641a53377d42da389c7a6",
            "file": "src/app/app-shell/app-shell.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shell",
            "styleUrls": [],
            "styles": [],
            "template": "<app-layout></app-layout>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-shell',\n    template: ` <app-layout></app-layout> `,\n})\nexport class AppShellComponent {\n    constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            }
        },
        {
            "name": "ArchiveEnrollmentsPageComponent",
            "id": "component-ArchiveEnrollmentsPageComponent-65f6b06d1bbd2d31db1eef6547a883d5",
            "file": "src/app/enrolled/pages/archive-enrollments-page/archive-enrollments-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-archive-enrollments-page",
            "styleUrls": [
                "./archive-enrollments-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./archive-enrollments-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-archive-enrollments-page',\n    templateUrl: './archive-enrollments-page.component.html',\n    styleUrls: ['./archive-enrollments-page.component.scss'],\n})\nexport class ArchiveEnrollmentsPageComponent {\n    constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./archive-enrollments-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "templateData": ""
        },
        {
            "name": "AudioControlCardComponent",
            "id": "component-AudioControlCardComponent-fda9e7ab035b253b61286bebc53d17bf",
            "file": "src/app/@shared/components/audio-control-card/audio-control-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-audio-control-card",
            "styleUrls": [
                "./audio-control-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./audio-control-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "audioList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "MediaAssociation[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "audioProgressBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatProgressBar",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'audioProgressBar'"
                        }
                    ]
                },
                {
                    "name": "currentAudio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "currentFile",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "files",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "showVolume",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StreamState",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "clickOut",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isFirstPlaying",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isLastPlaying",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "next",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangeCurrentAudio",
                    "args": [
                        {
                            "type": "MatSelectChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "MatSelectChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChangeVolume",
                    "args": [
                        {
                            "name": "volume",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "volume",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onKeydownHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:keydown.escape', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSliderChangeEnd",
                    "args": [
                        {
                            "name": "change",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "change",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openFile",
                    "args": [
                        {
                            "name": "url",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pause",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "play",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "playStream",
                    "args": [
                        {
                            "name": "url",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "previous",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "stop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleMuted",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleVolume",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40
                },
                {
                    "name": "document:keydown.escape",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    ElementRef,\n    HostListener,\n    Input,\n    OnChanges,\n    OnDestroy,\n    SimpleChanges,\n    ViewChild,\n} from '@angular/core';\nimport { MediaObserver } from '@angular/flex-layout';\nimport { MatProgressBar } from '@angular/material/progress-bar';\nimport { MatSelectChange } from '@angular/material/select';\nimport { MediaAssociation } from 'app/@core/models/lesson-material.model';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { AudioService, StreamState } from './audio.service';\n\n@Component({\n    selector: 'app-audio-control-card',\n    templateUrl: './audio-control-card.component.html',\n    styleUrls: ['./audio-control-card.component.scss'],\n})\nexport class AudioControlCardComponent implements OnChanges, OnDestroy {\n    files: Array<any> = [];\n    state: StreamState;\n    currentFile: any = {};\n\n    @Input() audioList: MediaAssociation[];\n\n    @ViewChild('audioProgressBar') audioProgressBar: MatProgressBar;\n\n    currentAudio: any;\n\n    showVolume = false;\n\n    private destroy$ = new Subject<void>();\n\n    @HostListener('document:click', ['$event'])\n    clickOut(event) {\n        if (!this.elementRef.nativeElement.contains(event.target) && this.showVolume) {\n            this.showVolume = false;\n        }\n    }\n\n    @HostListener('document:keydown.escape', ['$event'])\n    onKeydownHandler(event: KeyboardEvent) {\n        if (this.showVolume) {\n            this.showVolume = false;\n        }\n    }\n\n    constructor(\n        private audioService: AudioService,\n        private elementRef: ElementRef,\n        private mediaObserver: MediaObserver,\n    ) {\n        // listen to stream state\n        this.audioService\n            .getState()\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((state) => {\n                this.state = state;\n            });\n    }\n\n    ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        const audioList = changes['audioList'];\n        if (audioList.currentValue) {\n            this.currentAudio = this.audioList[0];\n            this.openFile(audioList.currentValue[0].media.rootUri, 0);\n        }\n    }\n\n    onChangeCurrentAudio({ value }: MatSelectChange) {\n        this.currentAudio = value;\n        this.openFile(value.media.rootUri, value.media.order - 1);\n    }\n\n    playStream(url) {\n        this.audioService\n            .playStream(url)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((events) => {\n                // listening for fun here\n            });\n    }\n\n    openFile(url, index) {\n        this.currentFile = { index, url };\n        this.audioService.stop();\n        this.playStream(url);\n        this.pause();\n    }\n\n    pause() {\n        this.audioService.pause();\n    }\n\n    play() {\n        this.audioService.play();\n    }\n\n    stop() {\n        this.audioService.stop();\n    }\n\n    toggleMuted() {\n        if (this.showVolume) {\n            this.audioService.toggleMuted();\n        }\n    }\n\n    toggleVolume() {\n        this.showVolume = !this.showVolume;\n    }\n\n    next() {\n        const index = this.currentFile.index + 1;\n        const file = this.files[index];\n        this.openFile(file, index);\n    }\n\n    previous() {\n        const index = this.currentFile.index - 1;\n        const file = this.files[index];\n        this.openFile(file, index);\n    }\n\n    isFirstPlaying() {\n        return this.currentFile.index === 0;\n    }\n\n    isLastPlaying() {\n        return this.currentFile.index === this.files.length - 1;\n    }\n\n    onSliderChangeEnd(change) {\n        this.audioService.seekTo(change.value);\n    }\n\n    onChangeVolume(volume: number) {\n        this.audioService.changeVolume(volume);\n    }\n\n    get isMobile() {\n        return this.mediaObserver.isActive('xs');\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/flex-layout/mq' as mq;\n\n:host {\n    position: fixed;\n    bottom: 64px;\n    left: 0;\n    right: 0;\n    @include mq.layout-bp(gt-xs) {\n        bottom: 0;\n    }\n}\n\n.audio-card {\n    padding: 0 16px !important;\n    border-radius: 14px 14px 0px 0px;\n    position: relative;\n\n    &__select {\n        margin-left: 12px;\n        width: 70px;\n\n        ::ng-deep .mat-select-arrow {\n            border: none;\n        }\n\n        ::ng-deep .mat-form-field-wrapper {\n            padding-bottom: 15px;\n        }\n\n        ::ng-deep .mat-form-field-underline {\n            display: none;\n        }\n    }\n\n    &__volume {\n        position: absolute;\n        top: -165px;\n        right: 15px;\n        border-radius: 35px;\n        padding: 10px 0;\n    }\n}\n\n.icon-size {\n    font-size: 30px;\n    height: 30px;\n    width: 30px;\n    line-height: 30px;\n}\n\n.select-icon {\n    position: absolute;\n    top: 20px;\n    right: 0;\n    cursor: pointer;\n    font-size: 20px;\n    height: 20px;\n    width: 20px;\n    line-height: 20px;\n}\n",
                    "styleUrl": "./audio-control-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "audioService",
                        "type": "AudioService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "audioService",
                        "type": "AudioService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges",
                "OnDestroy"
            ],
            "accessors": {
                "isMobile": {
                    "name": "isMobile",
                    "getSignature": {
                        "name": "isMobile",
                        "type": "",
                        "returnType": "",
                        "line": 151
                    }
                }
            },
            "templateData": "<div fxLayout=\"column\" fxLayoutAlign=\"start stretch\">\n  <mat-card class=\"audio-card mat-elevation-z4\">\n    <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"12px\">\n        <button\n          mat-icon-button\n          color=\"primary\"\n          (click)=\"play()\"\n          [disabled]=\"state?.error\"\n          *ngIf=\"!state?.playing\"\n        >\n          <mat-icon class=\"icon-size\">play_circle_filled</mat-icon>\n        </button>\n\n        <button mat-icon-button color=\"primary\" (click)=\"pause()\" *ngIf=\"state?.playing\">\n          <mat-icon class=\"icon-size\">pause_circle_filled</mat-icon>\n        </button>\n\n        <div class=\"mat-caption\" fxLayout=\"row\" fxLayoutAlign=\"start start\" fxLayoutGap=\"1px\">\n          <span>{{ state?.readableCurrentTime }}</span>\n          <span>/</span>\n          <span>{{ state?.readableDuration || '00:00' }}</span>\n        </div>\n\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"position: relative\">\n          <mat-form-field class=\"audio-card__select\">\n            <mat-select\n              #select\n              color=\"primary\"\n              class=\"mat-caption\"\n              [value]=\"currentAudio\"\n              (selectionChange)=\"onChangeCurrentAudio($event)\"\n            >\n              <mat-option *ngFor=\"let audio of audioList\" [value]=\"audio\">\n                <span>Audio {{ audio.order }}</span>\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n          <mat-icon (click)=\"select.open()\" color=\"primary\" class=\"select-icon\">\n            expand_less\n          </mat-icon>\n        </div>\n      </div>\n\n      <mat-slider\n        color=\"accent\"\n        min=\"0\"\n        [max]=\"state?.duration\"\n        step=\"1\"\n        [value]=\"state?.currentTime\"\n        (input)=\"onSliderChangeEnd($event)\"\n        [disabled]=\"state?.error || currentFile.index === undefined\"\n        style=\"width: 100%; padding: 0\"\n      ></mat-slider>\n\n      <button mat-icon-button color=\"primary\" (click)=\"toggleVolume()\">\n        <mat-icon>\n          {{ state?.muted ? 'volume_off' : state?.volume > 50 ? 'volume_up' : 'volume_down' }}\n        </mat-icon>\n      </button>\n\n      <mat-card class=\"audio-card__volume mat-elevation-z6\" *ngIf=\"showVolume\">\n        <mat-slider\n          color=\"primary\"\n          vertical\n          thumbLabel\n          [value]=\"state?.volume\"\n          (valueChange)=\"onChangeVolume($event)\"\n        ></mat-slider>\n      </mat-card>\n    </div>\n  </mat-card>\n</div>\n"
        },
        {
            "name": "AudioToolbarComponent",
            "id": "component-AudioToolbarComponent-770d63dc1377f6d74c9cd677348b07f4",
            "file": "src/app/lms/lesson/audio-toolbar/audio-toolbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-audio-toolbar",
            "styleUrls": [
                "./audio-toolbar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./audio-toolbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "audioList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "MediaAssociation[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentAudio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MediaAssociation",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges } from '@angular/core';\nimport { MediaAssociation } from 'app/@core/models/lesson-material.model';\n\n@Component({\n    selector: 'app-audio-toolbar',\n    templateUrl: './audio-toolbar.component.html',\n    styleUrls: ['./audio-toolbar.component.scss'],\n})\nexport class AudioToolbarComponent implements OnChanges {\n    @Input() audioList: MediaAssociation[];\n    currentAudio: MediaAssociation;\n\n    constructor() {}\n\n    ngOnChanges(): void {\n        if (this.audioList?.length > 0) {\n            this.currentAudio = this.audioList[0];\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n\n.audio-toolbar {\n    background: white;\n    height: 60px;\n    padding: 8px;\n    .audio-wrapper {\n        padding-right: 32px;\n        max-width: 800px;\n        min-width: 600px;\n        height: 100%;\n        \n        .audio-control {\n            height: 44px;\n        }\n    }\n\n}\n\n// .mat-form-field {\n//     font-size: 10px;\n//     min-width: 150px;\n//     padding-bottom: 0px;\n// }\n\n// ::ng-deep .mat-form-field-wrapper{\n//     padding-bottom: 0px !important;\n//  }",
                    "styleUrl": "./audio-toolbar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"audio-toolbar\" fxLayout=\"row\" fxLayoutAlign=\"end center\">\n    <div class=\"audio-wrapper grey-50-bg\" fxLayout=\"row\" fxLayoutGap=\"12px\" fxLayoutAlign=\"start center\">\n        <mat-icon class=\"s-32 primary-500-fg\" fxFlex=\"1 1 none\">play_lesson</mat-icon>\n        <div class=\"audio-select\"  fxLayout=\"column\" fxLayoutAlign=\"center\">\n            <mat-form-field appearance=\"outline\" fxFlex=\"3 1 auto\">\n                <mat-select [(value)]=\"currentAudio\">\n                    <mat-option *ngFor=\"let audio of audioList\" [value]=\"audio\"> Audio {{ audio.order }} </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n        <audio\n            controls\n            controlsList=\"nodownload\"\n            class=\"audio-control\"\n            fxFlex=\"2 1 auto\"\n            [src]=\"currentAudio.media.rootUri\"\n        ></audio>\n    </div>\n</div>\n"
        },
        {
            "name": "AuthLayoutComponent",
            "id": "component-AuthLayoutComponent-608f26521e7a7cd073d8d52925f880b7",
            "file": "src/app/@shared/components/auth-layout/auth-layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-auth-layout",
            "styleUrls": [
                "./auth-layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./auth-layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "imageOptions",
                    "defaultValue": "{\n        src: '../../../../assets/images/backgrounds/auth-image.png',\n        width: 569,\n        height: 532,\n        alt: 'auth normal user',\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "{ src: string; width: number; height: number; alt: string; }"
                },
                {
                    "name": "maxWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "noBorder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Input } from '@angular/core';\nimport { Component } from '@angular/core';\nimport { MediaObserver } from '@angular/flex-layout';\n\n@Component({\n    selector: 'app-auth-layout',\n    templateUrl: './auth-layout.component.html',\n    styleUrls: ['./auth-layout.component.scss'],\n})\nexport class AuthLayoutComponent {\n    @Input() noBorder: boolean;\n    @Input() maxWidth: string;\n\n    @Input() imageOptions = {\n        src: '../../../../assets/images/backgrounds/auth-image.png',\n        width: 569,\n        height: 532,\n        alt: 'auth normal user',\n    };\n\n    constructor(private mediaObserver: MediaObserver) {}\n\n    get isMobile() {\n        return this.mediaObserver.isActive('xs');\n    }\n\n    get isGreaterThanMedium() {\n        return this.mediaObserver.isActive('gt-sm');\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/flex-layout/mq' as mq;\n\n.auth-layout__wrapper {\n    height: 100%;\n    position: relative;\n}\n\n.auth-layout__header {\n    padding-top: 42px !important;\n\n    @include mq.layout-bp(gt-xs) {\n        padding-top: 80px !important;\n    }\n}\n\n.auth-layout__content {\n    border: 1px solid rgba(0, 0, 0, 0.12);\n    z-index: 10;\n    border-radius: 14px;\n    max-width: 348px;\n    overflow-y: auto;\n    padding: 24px 18px;\n    margin: 24px auto;\n\n    &--no-border {\n        border: none;\n    }\n\n    @include mq.layout-bp(gt-xs) {\n        margin-top: 52px;\n        margin-left: 150px;\n        max-height: 65vh;\n    }\n}\n\n.auth-layout__image {\n    position: absolute;\n    bottom: 0;\n    right: -40px;\n    pointer-events: none;\n    z-index: 0;\n}\n",
                    "styleUrl": "./auth-layout.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "isMobile": {
                    "name": "isMobile",
                    "getSignature": {
                        "name": "isMobile",
                        "type": "",
                        "returnType": "",
                        "line": 23
                    }
                },
                "isGreaterThanMedium": {
                    "name": "isGreaterThanMedium",
                    "getSignature": {
                        "name": "isGreaterThanMedium",
                        "type": "",
                        "returnType": "",
                        "line": 27
                    }
                }
            },
            "templateData": "<div class=\"container auth-layout__wrapper\">\n    <h1\n      class=\"auth-layout__header\"\n      [style.text-align]=\"isMobile ? 'center' : 'left'\"\n      [class.mat-display-3]=\"isMobile\"\n      [class.mat-display-4]=\"!isMobile\"\n    >\n      Welcome <br *ngIf=\"isMobile\" />\n      to <span class=\"text-primary\">eslo.</span>\n    </h1>\n\n    <div\n      class=\"auth-layout__content\"\n      [class.auth-layout__content--no-border]=\"noBorder\"\n      [style.maxWidth]=\"maxWidth\"\n    >\n      <ng-content></ng-content>\n    </div>\n\n  <img\n    *ngIf=\"isGreaterThanMedium\"\n    class=\"auth-layout__image\"\n    [src]=\"imageOptions.src\"\n    [alt]=\"imageOptions.alt\"\n    [width]=\"imageOptions.width\"\n    [height]=\"imageOptions.height\"\n  />\n</div>\n"
        },
        {
            "name": "AvailabilityPageComponent",
            "id": "component-AvailabilityPageComponent-92d7bbcdf50bd71342de6c1d77cdd740",
            "file": "src/app/calendar/pages/availability-page/availability-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-availability-page",
            "styleUrls": [
                "./availability-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./availability-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-availability-page',\n    templateUrl: './availability-page.component.html',\n    styleUrls: ['./availability-page.component.scss'],\n})\nexport class AvailabilityPageComponent {\n    constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".availability__container {\n    padding-top: 40px;\n}\n",
                    "styleUrl": "./availability-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "templateData": "<div class=\"availability__container\">\n  <app-weekly-availability></app-weekly-availability>\n</div>\n"
        },
        {
            "name": "AvatarComponent",
            "id": "component-AvatarComponent-98c21760120c6b6a7080230732b4762f",
            "file": "src/app/@shared/components/avatar/avatar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-avatar",
            "styleUrls": [
                "./avatar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./avatar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "\"primary\" | \"accent\""
                },
                {
                    "name": "fontSize",
                    "defaultValue": "'15px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'app-avatar',\n    templateUrl: './avatar.component.html',\n    styleUrls: ['./avatar.component.scss'],\n})\nexport class AvatarComponent {\n    @Input() text: string;\n    @Input() color: 'primary' | 'accent' = 'primary';\n    @Input() fontSize = '15px';\n\n    constructor() {}\n\n    get isPrimary(): boolean {\n        return this.color === 'primary';\n    }\n\n    get isAccent(): boolean {\n        return this.color === 'accent';\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n@mixin avatar-theme($theme) {\n    $primary: mat.get-color-from-palette(map-get($theme, primary), 300);\n    $accent: mat.get-color-from-palette(map-get($theme, accent), 300);\n\n    .avatar {\n        border-radius: 50%;\n        min-width: 40px;\n        min-height: 40px;\n\n        &__content {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            border-radius: 50%;\n            background-color: $accent;\n            color: #ffffff;\n            text-align: center;\n            line-height: 40px;\n            margin: 0;\n            text-transform: uppercase;\n            transition: 0.3s;\n            opacity: 1;\n\n            &--primary {\n                background-color: $primary;\n            }\n\n            &--accent {\n                background-color: $accent;\n            }\n        }\n    }\n}\n",
                    "styleUrl": "./avatar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "accessors": {
                "isPrimary": {
                    "name": "isPrimary",
                    "getSignature": {
                        "name": "isPrimary",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 15
                    }
                },
                "isAccent": {
                    "name": "isAccent",
                    "getSignature": {
                        "name": "isAccent",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 19
                    }
                }
            },
            "templateData": "<div class=\"avatar\">\n  <div\n    class=\"avatar__content mat-subheading-1\"\n    [class.avatar__content--primary]=\"isPrimary\"\n    [class.avatar__content--accent]=\"isAccent\"\n    [style.fontSize]=\"fontSize\"\n  >\n    <span> {{ text }}</span>\n  </div>\n</div>\n"
        },
        {
            "name": "BackButtonComponent",
            "id": "component-BackButtonComponent-5e1d59f2874a8abad678eec3ca37bebe",
            "file": "src/app/@shared/components/back-button/back-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-back-button",
            "styleUrls": [
                "./back-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./back-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "goBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Location } from '@angular/common';\n\n@Component({\n    selector: 'app-back-button',\n    templateUrl: './back-button.component.html',\n    styleUrls: ['./back-button.component.scss'],\n})\nexport class BackButtonComponent {\n    constructor(private location: Location) {}\n\n    goBack() {\n        this.location.back();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./back-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<button mat-icon-button (click)=\"goBack()\">\n    <mat-icon color=\"primary\">arrow_back</mat-icon>\n</button>\n"
        },
        {
            "name": "CalendarComponent",
            "id": "component-CalendarComponent-34d3dc8992e3f1c8d5fe60dc122085cb",
            "file": "src/app/calendar/calendar/calendar.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: CalendarDateFormatter, useClass: CustomDateFormatter,\n}"
                }
            ],
            "selector": "app-calendar",
            "styleUrls": [
                "./calendar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./calendar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CalendarEventAction[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "activeDayIsOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "events",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CalendarEvent[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "myCalendarQuery$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "refresh",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "selectedDay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "view",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"month\" | \"week\" | \"day\"",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "viewDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methodsClass": [
                {
                    "name": "beforeMonthViewRender",
                    "args": [
                        {
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nBefore View Renderer\n\n",
                    "description": "<p>Before View Renderer</p>\n",
                    "jsdoctags": [
                        {
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dayClicked",
                    "args": [
                        {
                            "name": "day",
                            "type": "CalendarMonthViewDay",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDay clicked\n\n",
                    "description": "<p>Day clicked</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4482,
                                "end": 4485,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "day"
                            },
                            "type": "CalendarMonthViewDay",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4476,
                                "end": 4481,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "deleteEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "CalendarEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CalendarEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "CalendarEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEdit Event\n\n",
                    "description": "<p>Edit Event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5325,
                                "end": 5330,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "event"
                            },
                            "type": "CalendarEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5319,
                                "end": 5324,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openAvailabilityDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { IMyCalendar } from '../../@core/services/calendar.service';\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\n\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { startOfDay, isSameDay, isSameMonth } from 'date-fns';\nimport { CalendarEventAction, CalendarEvent, CalendarMonthViewDay } from 'angular-calendar';\nimport { FormGroup } from '@angular/forms';\n\nimport { Subject } from 'rxjs';\n\nimport { CalendarService } from 'app/@core/services/calendar.service';\nimport { EventOccurrence } from 'app/@core/models/event-occurrence.model';\n\nimport { EditEventInstanceComponent } from '../edit-event-instance/edit-event-instance.component';\n\nimport { CalendarDateFormatter } from 'angular-calendar';\nimport { CustomDateFormatter } from './custom-date-formatter.provider';\nimport { EditEventDialogComponent } from '../components/edit-event-dialog/edit-event-dialog.component';\nimport { WeeklyAvailabilityComponent } from 'app/@shared/components/calendar/weekly-availability/weekly-availability.component';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { map, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-calendar',\n    templateUrl: './calendar.component.html',\n    styleUrls: ['./calendar.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [\n        {\n            provide: CalendarDateFormatter,\n            useClass: CustomDateFormatter,\n        },\n    ],\n})\nexport class CalendarComponent implements OnInit {\n    actions: CalendarEventAction[];\n    activeDayIsOpen: boolean;\n    events: CalendarEvent[];\n    refresh: Subject<any> = new Subject();\n    selectedDay: any;\n    view: 'month' | 'week' | 'day';\n    viewDate: Date;\n\n    myCalendarQuery$: any;\n\n    constructor(private calendarService: CalendarService, private dialog: MatDialog) {\n        // Set the defaults\n        this.view = 'week';\n        this.viewDate = new Date();\n        this.activeDayIsOpen = true;\n        this.selectedDay = { date: startOfDay(new Date()) };\n\n        this.actions = [];\n    }\n\n    ngOnInit(): void {\n        const fromDate = new Date();\n        fromDate.setFullYear(fromDate.getFullYear() - 1);\n\n        const toDate = new Date();\n        toDate.setFullYear(toDate.getFullYear() + 1);\n\n        this.myCalendarQuery$ = this.calendarService.getMyCalendar(fromDate, toDate);\n\n        this.myCalendarQuery$.valueChanges\n            .pipe(map((result: ApolloQueryResult<IMyCalendar>) => result.data.myCalendar))\n            .subscribe((events: EventOccurrence[]) => {\n                this.events = events.map((event: EventOccurrence) => {\n                    const startDate = new Date(parseInt(event.startDateTime, 10));\n                    const startDateTxt = Intl.DateTimeFormat('default', {\n                        hour: 'numeric',\n                        minute: 'numeric',\n                    }).format(startDate);\n\n                    const endDate = new Date(parseInt(event.endDateTime, 10));\n                    const endDateTxt = Intl.DateTimeFormat('default', {\n                        hour: 'numeric',\n                        minute: 'numeric',\n                    }).format(endDate);\n\n                    const title = `${event.title} (${startDateTxt} - ${endDateTxt})`;\n                    const isActive = event.status === 'CONFIRMED';\n                    return {\n                        id: event.id,\n                        title: isActive ? title : `(Pending) - ${title}`,\n                        actions: this.actions,\n                        start: startDate,\n                        end: endDate,\n                        cssClass: !isActive ? 'notActive' : '',\n                        meta: {\n                            ...event,\n                        },\n                        // color: !isActive ? { primary: '#969696' } : {},\n                    };\n                });\n            });\n    }\n\n    /**\n     * Before View Renderer\n     *\n     * @param header\n     * @param body\n     */\n    beforeMonthViewRender({ header, body }): void {\n        /**\n         * Get the selected day\n         */\n        const _selectedDay = body.find((_day) => _day.date.getTime() === this.selectedDay.date.getTime());\n\n        if (_selectedDay) {\n            /**\n             * Set selected day style\n             *\n             * @type {string}\n             */\n            _selectedDay.cssClass = 'cal-selected';\n        }\n    }\n\n    /**\n     * Day clicked\n     *\n     * @param day\n     */\n    dayClicked(day: CalendarMonthViewDay): void {\n        const date: Date = day.date;\n        const events: CalendarEvent[] = day.events;\n\n        if (isSameMonth(date, this.viewDate)) {\n            if ((isSameDay(this.viewDate, date) && this.activeDayIsOpen === true) || events.length === 0) {\n                this.activeDayIsOpen = false;\n            } else {\n                this.activeDayIsOpen = true;\n                this.viewDate = date;\n            }\n        }\n        this.selectedDay = day;\n        this.refresh.next();\n    }\n\n    openAvailabilityDialog(): void {\n        this.dialog.open(WeeklyAvailabilityComponent, {\n            // minWidth: '400px',\n            // height: 'auto',\n            panelClass: 'dialog-border-radius',\n        });\n    }\n\n    /**\n     * Edit Event\n     *\n     * @param action\n     * @param event\n     */\n    editEvent(event: CalendarEvent): void {\n        const dialogRef2: MatDialogRef<EditEventDialogComponent> = this.dialog.open(EditEventDialogComponent, {\n            width: '360px',\n            // panelClass: 'edit-event-dialog',\n            panelClass: 'dialog-border-radius',\n            data: { event },\n        });\n\n        dialogRef2\n            .afterClosed()\n            .pipe(take(1))\n            .subscribe({\n                next: (refresh) => {\n                    if (refresh && this.myCalendarQuery$) {\n                        this.myCalendarQuery$.refetch();\n                    }\n                },\n            });\n\n        return;\n        if (event.actions.length === 0) {\n            return;\n        }\n\n        const eventIndex = this.events.indexOf(event);\n        const dialogRef: MatDialogRef<EditEventInstanceComponent> = this.dialog.open(EditEventInstanceComponent, {\n            panelClass: 'event-form-dialog',\n            data: { event: event },\n        });\n\n        dialogRef.afterClosed().subscribe((response) => {\n            if (!response) {\n                return;\n            }\n\n            const actionType: string = response[0];\n            const formData: FormGroup = response[1];\n            switch (actionType) {\n                /**\n                 * Save\n                 */\n                case 'save':\n                    // this.events[eventIndex] = Object.assign(this.events[eventIndex], formData.getRawValue());\n                    this.refresh.next(true);\n\n                    break;\n                /**\n                 * Delete\n                 */\n                case 'delete':\n                    this.deleteEvent(event);\n                    break;\n            }\n        });\n    }\n\n    // saveEvent(event: CalendarEvent)\n    deleteEvent(event: CalendarEvent): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n@mixin calendar-theme($theme) {\n    $primaryColor: map-get($theme, primary);\n    $primary: mat.get-color-from-palette($primaryColor);\n    $primary-50: mat.get-color-from-palette($primaryColor, 50);\n\n    .calendar-container {\n        margin-top: 32px;\n    }\n\n    .calendar-change-month {\n        padding: 0 80px;\n    }\n\n    .cal-week-view {\n        border-top: none !important;\n\n        .cal-today {\n            background-color: $primary-50 !important;\n        }\n\n        .cal-header {\n            text-transform: uppercase;\n            color: rgba(0, 0, 0, 0.6);\n\n            b {\n                font-weight: 400;\n            }\n        }\n        .cal-day-headers {\n            margin-right: 15px;\n            margin-bottom: 12px;\n            border-top: 1px solid rgba(0, 0, 0, 0.12);\n            border-radius: 14px;\n        }\n\n        .cal-day-headers .cal-header.cal-weekend span {\n            color: rgba(0, 0, 0, 0.6);\n        }\n\n        .cal-time-events {\n            max-height: 78vh;\n            overflow-y: auto;\n            border-top: 1px solid rgba(0, 0, 0, 0.1);\n            border-radius: 14px;\n        }\n\n        .cal-day-columns {\n            height: 100%;\n        }\n\n        .cal-hour:not(:last-child) .cal-hour-segment,\n        .cal-hour:last-child :not(:last-child) .cal-hour-segment {\n            border-bottom: none;\n        }\n\n        .cal-hour:not(:last-child) .cal-hour-segment,\n        .cal-hour:last-child :not(:last-child) .cal-hour-segment {\n            border-bottom: none;\n        }\n\n        .cal-hour .cal-hour-segment {\n            border: 1px solid #e0e0e0;\n        }\n\n        .cal-hour-odd {\n            background-color: unset !important;\n        }\n\n        .cal-event-container:not(.notActive) .cal-event {\n            background-color: $primary;\n            color: map-get($primaryColor, default-contrast);\n            border-radius: 0 !important;\n            border: none;\n            opacity: 0.9;\n            font-size: 14px;\n        }\n\n        .cal-event-container .cal-event {\n            background-color: $primary-50;\n            color: map-get($primaryColor, 50, default-contrast);\n            opacity: 0.7;\n            border-radius: 0 !important;\n            border: none;\n            font-size: 14px;\n        }\n\n        .cal-time {\n            font-family: 'Comfortaa', sans-serif;\n            font-weight: 400;\n            font-size: 13px;\n        }\n    }\n}\n",
                    "styleUrl": "./calendar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "calendarService",
                        "type": "CalendarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "calendarService",
                        "type": "CalendarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-template tpAttach=\"topBarCenter\">\n  <div class=\"header-bottom\" fxLayoutAlign=\"center center\" fxLayout=\"row\">\n    <button\n      mat-icon-button\n      class=\"arrow\"\n      mwlCalendarPreviousView\n      matTooltip=\"Last week\"\n      [view]=\"view\"\n      [(viewDate)]=\"viewDate\"\n      (viewDateChange)=\"selectedDay = { date: $event }\"\n      aria-label=\"Previous\"\n    >\n      <mat-icon>chevron_left</mat-icon>\n    </button>\n\n    <button\n      mat-icon-button\n      class=\"arrow\"\n      mwlCalendarNextView\n      matTooltip=\"Next week\"\n      [view]=\"view\"\n      [(viewDate)]=\"viewDate\"\n      (viewDateChange)=\"selectedDay = { date: $event }\"\n      aria-label=\"Next\"\n    >\n      <mat-icon>chevron_right</mat-icon>\n    </button>\n\n    <div class=\"mat-subheading-1 calendar-change-month\">\n      {{ viewDate | calendarDate: view + 'ViewTitle':'en' | uppercase }}\n    </div>\n  </div>\n</ng-template>\n\n<ng-template tpAttach=\"topBarEnd\">\n  <button\n    mat-icon-button\n    color=\"primary\"\n    (mwlClick)=\"openAvailabilityDialog()\"\n    aria-label=\"Check Availability\"\n    matTooltip=\"Check Availability\"\n    class=\"button\"\n  >\n    <mat-icon>date_range</mat-icon>\n  </button>\n  <button\n    mat-icon-button\n    color=\"primary\"\n    mwlCalendarToday\n    [(viewDate)]=\"viewDate\"\n    (viewDateChange)=\"selectedDay = { date: $event }\"\n    aria-label=\"Today\"\n    matTooltip=\"Today\"\n    class=\"button\"\n  >\n    <mat-icon>today</mat-icon>\n  </button>\n</ng-template>\n\n<div class=\"calendar-container\">\n  <ng-template\n    #eventTemplate\n    let-weekEvent=\"weekEvent\"\n    let-locale=\"locale\"\n    let-eventClicked=\"eventClicked\"\n    let-tooltipPlacement=\"tooltipPlacement\"\n    let-tooltipTemplate=\"tooltipTemplate\"\n    let-tooltipAppendToBody=\"tooltipAppendToBody\"\n    let-tooltipDisabled=\"tooltipDisabled\"\n  >\n    <div class=\"cal-event\" (mwlClick)=\"eventClicked.emit({ event: weekEvent.event })\">\n      <p>{{ weekEvent.event.title | formatEventTitle }}</p>\n    </div>\n  </ng-template>\n\n  <mwl-calendar-week-view\n    class=\"calendar\"\n    [viewDate]=\"viewDate\"\n    [events]=\"events\"\n    [refresh]=\"refresh\"\n    (eventClicked)=\"editEvent($event.event)\"\n    [eventTemplate]=\"eventTemplate\"\n    [dayStartHour]=\"7\"\n    [dayEndHour]=\"22\"\n  >\n  </mwl-calendar-week-view>\n</div>\n"
        },
        {
            "name": "CalendarMobileComponent",
            "id": "component-CalendarMobileComponent-c3b5da72ea8b53f27c250aee73982863",
            "file": "src/app/calendar/calendar-mobile/calendar-mobile.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: CalendarDateFormatter, useClass: CustomDate2Formatter,\n}"
                }
            ],
            "selector": "app-calendar-mobile",
            "styleUrls": [
                "./calendar-mobile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./calendar-mobile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CalendarEventAction[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "activeDayIsOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "events",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CalendarEvent[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "myCalendarQuery$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "refresh",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "selectedDay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "view",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"month\" | \"week\" | \"day\"",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "viewDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methodsClass": [
                {
                    "name": "beforeMonthViewRender",
                    "args": [
                        {
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nBefore View Renderer\n\n",
                    "description": "<p>Before View Renderer</p>\n",
                    "jsdoctags": [
                        {
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dayClicked",
                    "args": [
                        {
                            "name": "day",
                            "type": "CalendarMonthViewDay",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDay clicked\n\n",
                    "description": "<p>Day clicked</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4888,
                                "end": 4891,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "day"
                            },
                            "type": "CalendarMonthViewDay",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4882,
                                "end": 4887,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "deleteEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "CalendarEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CalendarEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "CalendarEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEdit Event\n\n",
                    "description": "<p>Edit Event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5674,
                                "end": 5679,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "event"
                            },
                            "type": "CalendarEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5668,
                                "end": 5673,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEditEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "CalendarEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CalendarEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openAvailabilityDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewEncapsulation } from '@angular/core';\n\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { startOfDay, isSameDay, isSameMonth } from 'date-fns';\nimport { CalendarEventAction, CalendarEvent, CalendarMonthViewDay } from 'angular-calendar';\nimport { FormGroup } from '@angular/forms';\n\nimport { Subject } from 'rxjs';\n\nimport { CalendarService, IMyCalendar } from 'app/@core/services/calendar.service';\nimport { EventOccurrence } from 'app/@core/models/event-occurrence.model';\nimport { WeeklyAvailabilityComponent } from 'app/@shared/components/calendar/weekly-availability/weekly-availability.component';\n\nimport { EditEventInstanceComponent } from '../edit-event-instance/edit-event-instance.component';\n\nimport { CalendarDateFormatter } from 'angular-calendar';\nimport { CustomDate2Formatter } from './custom-date-formatter-2.provider';\nimport { MatBottomSheet, MatBottomSheetRef } from '@angular/material/bottom-sheet';\nimport { EditEventBottomSheetComponent } from '../components/edit-event-bottom-sheet/edit-event-bottom-sheet.component';\nimport { map, take } from 'rxjs/operators';\nimport { ApolloQueryResult } from '@apollo/client/core';\n\n@Component({\n    selector: 'app-calendar-mobile',\n    templateUrl: './calendar-mobile.component.html',\n    styleUrls: ['./calendar-mobile.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [\n        {\n            provide: CalendarDateFormatter,\n            useClass: CustomDate2Formatter,\n        },\n    ],\n})\nexport class CalendarMobileComponent implements OnInit {\n    actions: CalendarEventAction[];\n    activeDayIsOpen: boolean;\n    events: CalendarEvent[];\n    refresh: Subject<any> = new Subject();\n    selectedDay: any;\n    view: 'month' | 'week' | 'day';\n    viewDate: Date;\n\n    myCalendarQuery$: any;\n\n    constructor(\n        private calendarService: CalendarService,\n        private dialog: MatDialog,\n        private bottomSheet: MatBottomSheet,\n    ) {\n        // Set the defaults\n        this.view = 'month';\n        this.viewDate = new Date();\n        // this.activeDayIsOpen = true;\n        this.selectedDay = { date: startOfDay(new Date()) };\n\n        this.actions = [\n            // {\n            //     label: '<i class=\"material-icons s-16\">edit</i>',\n            //     onClick: ({ event }: { event: CalendarEvent }): void => {\n            //         this.editEvent(event);\n            //     },\n            // },\n        ];\n    }\n\n    ngOnInit(): void {\n        const fromDate = new Date();\n        fromDate.setFullYear(fromDate.getFullYear() - 1);\n\n        const toDate = new Date();\n        toDate.setFullYear(toDate.getFullYear() + 1);\n\n        this.myCalendarQuery$ = this.calendarService.getMyCalendar(fromDate, toDate);\n\n        this.myCalendarQuery$.valueChanges\n            .pipe(map((result: ApolloQueryResult<IMyCalendar>) => result.data.myCalendar))\n            .subscribe((events: EventOccurrence[]) => {\n                this.events = events.map((event: EventOccurrence) => {\n                    const startDate = new Date(parseInt(event.startDateTime, 10));\n                    const startDateTxt = Intl.DateTimeFormat('default', {\n                        hour: 'numeric',\n                        minute: 'numeric',\n                    }).format(startDate);\n\n                    const endDate = new Date(parseInt(event.endDateTime, 10));\n                    const endDateTxt = Intl.DateTimeFormat('default', {\n                        hour: 'numeric',\n                        minute: 'numeric',\n                    }).format(endDate);\n\n                    const title = `${event.title} (${startDateTxt} - ${endDateTxt})`;\n                    const isActive = event.status === 'CONFIRMED';\n                    return {\n                        id: event.id,\n                        title: isActive ? title : `(Pending) - ${title}`,\n                        actions: this.actions,\n                        start: startDate,\n                        end: endDate,\n                        cssClass: !isActive ? 'notActive' : '',\n                        meta: {\n                            ...event,\n                        },\n                        // color: !isActive ? { primary: '#969696' } : {},\n                    };\n                });\n            });\n    }\n\n    /**\n     * Before View Renderer\n     *\n     * @param header\n     * @param body\n     */\n    beforeMonthViewRender({ header, body }): void {\n        /**\n         * Get the selected day\n         */\n        const _selectedDay = body.find((_day) => _day.date.getTime() === this.selectedDay.date.getTime());\n\n        if (_selectedDay) {\n            /**\n             * Set selected day style\n             *\n             * @type {string}\n             */\n            _selectedDay.cssClass = 'cal-selected';\n        }\n    }\n\n    /**\n     * Day clicked\n     *\n     * @param day\n     */\n    dayClicked(day: CalendarMonthViewDay): void {\n        const date: Date = day.date;\n        const events: CalendarEvent[] = day.events;\n\n        if (isSameMonth(date, this.viewDate)) {\n            if ((isSameDay(this.viewDate, date) && this.activeDayIsOpen === true) || events.length === 0) {\n                this.activeDayIsOpen = false;\n            } else {\n                this.activeDayIsOpen = true;\n                this.viewDate = date;\n            }\n        }\n        this.selectedDay = day;\n        this.refresh.next();\n    }\n\n    openAvailabilityDialog(): void {\n        this.dialog.open(WeeklyAvailabilityComponent, {\n            width: '390px',\n            height: 'auto',\n        });\n    }\n\n    /**\n     * Edit Event\n     *\n     * @param action\n     * @param event\n     */\n    editEvent(event: CalendarEvent): void {\n        if (event.actions.length === 0) {\n            return;\n        }\n\n        const eventIndex = this.events.indexOf(event);\n        const dialogRef: MatDialogRef<EditEventInstanceComponent> = this.dialog.open(EditEventInstanceComponent, {\n            panelClass: 'event-form-dialog',\n            data: { event: event },\n        });\n\n        dialogRef.afterClosed().subscribe((response) => {\n            if (!response) {\n                return;\n            }\n\n            const actionType: string = response[0];\n            const formData: FormGroup = response[1];\n            switch (actionType) {\n                /**\n                 * Save\n                 */\n                case 'save':\n                    // this.events[eventIndex] = Object.assign(this.events[eventIndex], formData.getRawValue());\n                    this.refresh.next(true);\n\n                    break;\n                /**\n                 * Delete\n                 */\n                case 'delete':\n                    this.deleteEvent(event);\n                    break;\n            }\n        });\n    }\n\n    // saveEvent(event: CalendarEvent)\n    deleteEvent(event: CalendarEvent): void {}\n\n    onEditEvent(event: CalendarEvent): void {\n        const bottomSheetRef: MatBottomSheetRef<EditEventBottomSheetComponent> = this.bottomSheet.open(\n            EditEventBottomSheetComponent,\n            {\n                panelClass: 'fullscreen-bottom-sheet',\n                data: { event },\n            },\n        );\n\n        bottomSheetRef\n            .afterDismissed()\n            .pipe(take(1))\n            .subscribe({\n                next: (refresh) => {\n                    if (refresh && this.myCalendarQuery$) {\n                        this.myCalendarQuery$.refetch();\n                    }\n                },\n            });\n\n        return;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n@mixin calendar-mobile-theme($theme) {\n    $primary-50: mat.get-color-from-palette(map-get($theme, primary), 50);\n    $accentColor: map-get($theme, accent);\n    $accent-100: mat.get-color-from-palette($accentColor, 100);\n    $accent-500: mat.get-color-from-palette($accentColor, 500);\n\n    .event-detail {\n        padding: 10px 10px 0 10px;\n    }\n\n    .calendar-change-month {\n        padding: 0 80px;\n    }\n\n    .cal-month-view {\n        .cal-header {\n            color: rgba(0, 0, 0, 0.6);\n            font-weight: 300;\n        }\n\n        .cal-today {\n            background-color: unset !important;\n        }\n\n        .cal-day-headers .cal-header.cal-weekend span {\n            color: rgba(0, 0, 0, 0.6);\n        }\n\n        .cal-days {\n            border: none !important;\n        }\n\n        .cal-cell-row {\n            border: none !important;\n\n            &:hover {\n                background-color: unset !important;\n            }\n        }\n\n        .cal-has-events {\n            font-weight: 700 !important;\n        }\n\n        .cal-day-cell {\n            border: none !important;\n\n            &.cal-in-month.cal-has-events {\n                .cal-day-number {\n                    font-weight: 700 !important;\n                    opacity: 1 !important;\n                }\n            }\n\n            &.cal-weekend .cal-day-number {\n                color: unset !important;\n            }\n\n            &.cal-today .cal-day-number {\n                font-size: 1.2em !important;\n            }\n\n            .cal-cell-top {\n                .cal-day-number {\n                    margin: 0 !important;\n                    font-size: 14px;\n                }\n            }\n\n            &:hover {\n                background-color: unset !important;\n            }\n        }\n\n        .cal-cell.cal-day-cell.cal-future.cal-in-month.cal-has-events.cal-open .cal-cell-top .cal-day-number {\n            display: block !important;\n            background-color: $accent-500 !important;\n            color: map-get($accentColor, default-contrast) !important;\n            width: 40px !important;\n            height: 40px !important;\n            display: flex !important;\n            justify-content: center !important;\n            align-items: center !important;\n            border-radius: 50% !important;\n            opacity: 1 !important;\n        }\n\n        .cal-day-cell {\n            min-height: 0px;\n            display: flex;\n            justify-content: center;\n            align-content: center;\n        }\n\n        .cal-day-badge {\n            display: none !important;\n        }\n\n        .cal-event {\n            display: none !important;\n        }\n\n        .cal-cell {\n            float: left;\n            flex: 1;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            align-content: center;\n        }\n    }\n}\n",
                    "styleUrl": "./calendar-mobile.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "calendarService",
                        "type": "CalendarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bottomSheet",
                        "type": "MatBottomSheet",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "calendarService",
                        "type": "CalendarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bottomSheet",
                        "type": "MatBottomSheet",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-template tpAttach=\"topBarEnd\">\n  <button\n    mat-icon-button\n    color=\"primary\"\n    mwlCalendarToday\n    [(viewDate)]=\"viewDate\"\n    (viewDateChange)=\"selectedDay = { date: $event }\"\n    aria-label=\"Today\"\n    matTooltip=\"Today\"\n    class=\"button\"\n  >\n    <mat-icon>today</mat-icon>\n  </button>\n</ng-template>\n\n<div class=\"header-bottom\" fxLayoutAlign=\"center center\" fxLayout=\"row\">\n  <button\n    mat-icon-button\n    class=\"arrow\"\n    mwlCalendarPreviousView\n    [view]=\"view\"\n    [(viewDate)]=\"viewDate\"\n    (viewDateChange)=\"selectedDay = { date: $event }\"\n    aria-label=\"Previous\"\n  >\n    <mat-icon>chevron_left</mat-icon>\n  </button>\n\n  <div class=\"mat-subheading-1 calendar-change-month\">\n    {{ viewDate | calendarDate: view + 'ViewTitle':'en' | uppercase }}\n  </div>\n\n  <button\n    mat-icon-button\n    class=\"arrow\"\n    mwlCalendarNextView\n    [view]=\"view\"\n    [(viewDate)]=\"viewDate\"\n    (viewDateChange)=\"selectedDay = { date: $event }\"\n    aria-label=\"Next\"\n  >\n    <mat-icon>chevron_right</mat-icon>\n  </button>\n</div>\n<mat-divider></mat-divider>\n<div class=\"calendar-container\">\n  <ng-template #customCellTemplate let-day=\"day\" let-locale=\"locale\">\n    <div class=\"cal-cell-top\" fxLayout fxLayoutAlign=\"center center\">\n      <span class=\"cal-day-number\">{{ day.date | calendarDate: 'monthViewDayNumber':locale }}</span>\n    </div>\n  </ng-template>\n\n  <ng-template\n    #openDayEventsTemplate\n    let-date=\"date\"\n    let-events=\"events\"\n    let-locale=\"locale\"\n    let-isOpen=\"isOpen\"\n  >\n    <ng-container *ngIf=\"isOpen\">\n      <ng-container *ngFor=\"let event of events\">\n        <div fxLayout fxLayoutAlign=\"space-between center\" class=\"event-detail\" (click)=\"onEditEvent(event)\">\n          <p>{{ event.title | formatEventTitle }}</p>\n          <p>{{ event.start | formatEventTime | date: 'hh:mm aa' }}</p>\n        </div>\n        <mat-divider> </mat-divider>\n      </ng-container>\n    </ng-container>\n  </ng-template>\n\n  <mwl-calendar-month-view\n    [viewDate]=\"viewDate\"\n    [refresh]=\"refresh\"\n    [activeDayIsOpen]=\"activeDayIsOpen\"\n    [events]=\"events\"\n    [cellTemplate]=\"customCellTemplate\"\n    [openDayEventsTemplate]=\"openDayEventsTemplate\"\n    (dayClicked)=\"dayClicked($event.day)\"\n  >\n  </mwl-calendar-month-view>\n</div>\n"
        },
        {
            "name": "CalendarPageComponent",
            "id": "component-CalendarPageComponent-ecb58102fa1cd84eaa80cfb2b8c5fa3e",
            "file": "src/app/calendar/pages/calendar-page/calendar-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-calendar-page",
            "styleUrls": [
                "./calendar-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./calendar-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "navigationTabsConfig",
                    "defaultValue": "{\n        links: [\n            { path: 'month', icon: 'event_note' },\n            { path: 'availability', icon: 'group' },\n        ],\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INavigationTabsConfig",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy } from '@angular/core';\nimport { MediaObserver } from '@angular/flex-layout';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { INavigationTabsConfig } from 'app/@shared/components/navigation-tabs/navigation-tabs.component';\nimport { Subject } from 'rxjs';\nimport { takeUntil, filter } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-calendar-page',\n    templateUrl: './calendar-page.component.html',\n    styleUrls: ['./calendar-page.component.scss'],\n})\nexport class CalendarPageComponent implements OnDestroy {\n    navigationTabsConfig: INavigationTabsConfig = {\n        links: [\n            { path: 'month', icon: 'event_note' },\n            { path: 'availability', icon: 'group' },\n        ],\n    };\n\n    private destroy$ = new Subject<void>();\n\n    constructor(private mediaObserver: MediaObserver, private router: Router) {\n        this.router.events\n            .pipe(\n                takeUntil(this.destroy$),\n                filter((evt) => evt instanceof NavigationEnd),\n            )\n            .subscribe({\n                next: ({ url }: NavigationEnd) => {\n                    if (url === '/calendar' && this.isMobile) {\n                        this.router.navigate(['/calendar/month']);\n                    }\n                },\n            });\n    }\n\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    get isMobile() {\n        return this.mediaObserver.isActive('xs');\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n@mixin navigation-tabs-theme($theme) {\n  $primary: mat.get-color-from-palette(map-get($theme, primary));\n  $accent: mat.get-color-from-palette(map-get($theme, accent));\n\n  .navigation-tabs {\n      border: none;\n\n      &__link {\n          color: $primary;\n          height: 100%;\n\n          &--active {\n              color: $accent;\n          }\n\n          &__content {\n              display: flex;\n              flex-direction: column;\n              justify-content: center;\n              align-items: center;\n\n              mat-icon {\n                  margin-top: 10px;\n              }\n          }\n      }\n  }\n}",
                    "styleUrl": "./calendar-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ],
            "accessors": {
                "isMobile": {
                    "name": "isMobile",
                    "getSignature": {
                        "name": "isMobile",
                        "type": "",
                        "returnType": "",
                        "line": 43
                    }
                }
            },
            "templateData": "<ng-template tpAttach=\"topBarStart\">\n  <app-eslo-letter-logo></app-eslo-letter-logo>\n  <app-top-bar-title text=\"Calendar\"></app-top-bar-title>\n</ng-template>\n\n<div *ngIf=\"isMobile\">\n  <ng-template tpAttach=\"topBarCenter\">\n    <app-navigation-tabs [navigationTabsConfig]=\"navigationTabsConfig\"></app-navigation-tabs>\n  </ng-template>\n  <router-outlet></router-outlet>\n</div>\n\n<div *ngIf=\"!isMobile\">\n  <app-calendar></app-calendar>\n</div>\n"
        },
        {
            "name": "ClassListComponent",
            "id": "component-ClassListComponent-26047e6ab2d182c82c02d607af38ab57",
            "file": "src/app/classroom/pages/class-list/class-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-class-list",
            "styleUrls": [
                "./class-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./class-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_unsubscribeAll",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<InvitationFormComponent>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "enrollmentStatus",
                    "defaultValue": "this.classroomService.classroomFiltersInput.enrollmentStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "filterOptions",
                    "defaultValue": "[\n        { label: ENROLLMENT_STATUS.ACTIVE, value: ENROLLMENT_STATUS.ACTIVE },\n        { label: ENROLLMENT_STATUS.PENDING, value: ENROLLMENT_STATUS.PENDING },\n        { label: ENROLLMENT_STATUS.CANCELLED, value: ENROLLMENT_STATUS.CANCELLED },\n        { label: ENROLLMENT_STATUS.CONFIRMED, value: ENROLLMENT_STATUS.CONFIRMED },\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "navigationTabsConfig",
                    "defaultValue": "{\n        links: [\n            { path: '../students', label: 'students', icon: 'person' },\n            { path: '../groups', label: 'groups', icon: 'groups' },\n        ],\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INavigationTabsConfig",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "students$",
                    "defaultValue": "this.classroomService.getClassroom$().pipe(map(({ students }) => students))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "createInvitation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNew invitation\n",
                    "description": "<p>New invitation</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFilterSelectChange",
                    "args": [
                        {
                            "name": "status",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy } from '@angular/core';\nimport { MatDialogRef, MatDialog } from '@angular/material/dialog';\n\nimport { map, take } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\nimport { InvitationFormComponent } from '../../components/invitation-form/invitation-form.component';\nimport { ClassroomService } from 'app/@core/services/classroom.service';\nimport { Event } from 'app/@core/models/event.model';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, ENROLLMENT_STATUS } from 'app/@core/models/enrollment.model';\nimport { INavigationTabsConfig } from 'app/@shared/components/navigation-tabs/navigation-tabs.component';\nimport {\n    InvitationDialogComponent,\n    ITab,\n} from 'app/classroom/components/invitation-dialog/invitation-dialog.component';\n\n@Component({\n    selector: 'app-class-list',\n    templateUrl: './class-list.component.html',\n    styleUrls: ['./class-list.component.scss'],\n})\nexport class ClassListComponent implements OnDestroy {\n    dialogRef: MatDialogRef<InvitationFormComponent>;\n\n    navigationTabsConfig: INavigationTabsConfig = {\n        links: [\n            { path: '../students', label: 'students', icon: 'person' },\n            { path: '../groups', label: 'groups', icon: 'groups' },\n        ],\n    };\n\n    students$ = this.classroomService.getClassroom$().pipe(map(({ students }) => students));\n\n    filterOptions = [\n        { label: ENROLLMENT_STATUS.ACTIVE, value: ENROLLMENT_STATUS.ACTIVE },\n        { label: ENROLLMENT_STATUS.PENDING, value: ENROLLMENT_STATUS.PENDING },\n        { label: ENROLLMENT_STATUS.CANCELLED, value: ENROLLMENT_STATUS.CANCELLED },\n        { label: ENROLLMENT_STATUS.CONFIRMED, value: ENROLLMENT_STATUS.CONFIRMED },\n    ];\n\n    enrollmentStatus = this.classroomService.classroomFiltersInput.enrollmentStatus;\n\n    private _unsubscribeAll: Subject<any>;\n\n    constructor(private matDialog: MatDialog, private classroomService: ClassroomService) {\n        this._unsubscribeAll = new Subject();\n    }\n\n    ngOnDestroy(): void {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next();\n        this._unsubscribeAll.complete();\n    }\n\n    onFilterSelectChange(status: string) {\n        this.classroomService.setClassroomFiltersInput({\n            enrollmentStatus: status,\n        });\n        this.classroomService.classroomRefetch();\n    }\n\n    /**\n     * New invitation\n     */\n    createInvitation(): void {\n        const dialogRef = this.matDialog.open(InvitationDialogComponent, {\n            panelClass: 'invitation-dialog--material',\n            autoFocus: false,\n            disableClose: true,\n            data: {\n                type: 'student',\n                tabs: [\n                    {\n                        title: 'info',\n                        active: false,\n                        completed: false,\n                        icon: 'account_circle',\n                    },\n                    {\n                        title: 'course',\n                        active: false,\n                        completed: false,\n                        icon: 'school',\n                    },\n                    {\n                        title: 'schedule',\n                        active: false,\n                        completed: false,\n                        icon: 'date_range',\n                    },\n                ] as ITab[],\n            },\n        });\n\n        dialogRef.afterClosed().subscribe((response: any) => {\n            if (!response) {\n                return;\n            }\n\n            const { studentForm, courseForm, eventsForm } = response;\n\n            let browserTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n            if (!browserTimeZone) {\n                // default to SP if not found\n                browserTimeZone = 'America/Sao_Paulo';\n            }\n\n            const enrollmentInvitation: CreateEnrollmentInput = {\n                invitedStudent: {\n                    email: studentForm.studentInfo.email,\n                    firstName: studentForm.studentInfo.firstName,\n                    surname: studentForm.studentInfo.lastName,\n                },\n                enrollmentInput: {},\n            };\n\n            if (studentForm?.selectedGroup) {\n                enrollmentInvitation.enrollmentInput.studyGroupId = studentForm?.selectedGroup?.id;\n            } else {\n                enrollmentInvitation.enrollmentInput.oneOnOne = {\n                    levelId: courseForm.level.id,\n                    events: eventsForm.events.map((event: Event) => ({\n                        title: `${studentForm.studentInfo.firstName} ${\n                            studentForm.studentInfo.lastName ? studentForm.studentInfo.lastName : ''\n                        } (1 on 1)`,\n                        description: courseForm.level.name,\n                        sourceType: 'ENROLLMENT',\n                        availabilityType: 'BUSY',\n                        status: 'TENTATIVE',\n                        recurrence: event.recurrence,\n                        startDateTime: new Date(parseInt(event.startDateTime, 10)).toISOString(),\n                        startTimeZone: browserTimeZone,\n                        endDateTime: new Date(parseInt(event.endDateTime, 10)).toISOString(),\n                        endTimeZone: browserTimeZone,\n                    })),\n                };\n            }\n\n            this.classroomService\n                .createEnrollmentInvitation(enrollmentInvitation)\n                .pipe(take(1))\n                .subscribe((pendingEnrollment: Enrollment) => {\n                    if (pendingEnrollment) {\n                        this.classroomService.classroomRefetch();\n                    }\n                });\n        });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/flex-layout/mq' as mq;\n\n.class-list__content {\n    padding: 12px 16px;\n\n    @include mq.layout-bp(gt-xs) {\n        padding: 32px 0 0 32px;\n    }\n}\n",
                    "styleUrl": "./class-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "classroomService",
                        "type": "ClassroomService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "classroomService",
                        "type": "ClassroomService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<ng-template tpAttach=\"topBarStart\">\n  <app-eslo-letter-logo></app-eslo-letter-logo>\n  <app-top-bar-title text=\"Classes\"></app-top-bar-title>\n</ng-template>\n\n<ng-template tpAttach=\"topBarCenter\">\n  <app-navigation-tabs [navigationTabsConfig]=\"navigationTabsConfig\"></app-navigation-tabs>\n</ng-template>\n\n<ng-template tpAttach=\"floatActionButton\">\n  <button mat-fab class=\"accent-200\" (click)=\"createInvitation()\">\n    <mat-icon>person_add</mat-icon>\n  </button>\n</ng-template>\n\n<div class=\"class-list__content\">\n  <app-filters-list\n    [options]=\"filterOptions\"\n    [value]=\"enrollmentStatus\"\n    (selectChangeEvent)=\"onFilterSelectChange($event)\"\n  ></app-filters-list>\n\n  <ng-container *ngIf=\"students$ | async as students\">\n    <ng-container *ngIf=\"students.length\">\n      <app-student-list  [students]=\"students\"></app-student-list>\n    </ng-container>\n    <ng-container *ngIf=\"!students.length\">\n      <app-empty-list></app-empty-list>\n    </ng-container>\n  </ng-container>\n</div>\n"
        },
        {
            "name": "ClassRecordListComponent",
            "id": "component-ClassRecordListComponent-fdc64d5817bc7fc8b688e979efa983c3",
            "file": "src/app/@shared/components/class-record-list/class-record-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-class-record-list",
            "styleUrls": [
                "./class-record-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./class-record-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "classInProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "ClassRecord"
                },
                {
                    "name": "enrollment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "Enrollment"
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "StudyGroup"
                },
                {
                    "name": "isGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "lessonTrackerList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "LessonRecordList[]"
                },
                {
                    "name": "student",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "goToLessonEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter"
                },
                {
                    "name": "openAttendeesEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter"
                },
                {
                    "name": "openStudentBookEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter"
                },
                {
                    "name": "resumeClassEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                },
                {
                    "name": "revertClassEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                },
                {
                    "name": "revertLessonEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter"
                },
                {
                    "name": "startClassEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getLastClass",
                    "args": [
                        {
                            "name": "lesson",
                            "type": "LessonRecordList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ClassRecordType",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lesson",
                            "type": "LessonRecordList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goToLesson",
                    "args": [
                        {
                            "name": "lessonRecordItem",
                            "type": "LessonRecordList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lessonRecordItem",
                            "type": "LessonRecordList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goToStudentBook",
                    "args": [
                        {
                            "name": "lessonRecordItem",
                            "type": "LessonRecordList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lessonRecordItem",
                            "type": "LessonRecordList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isLastLesson",
                    "args": [
                        {
                            "name": "classRecordItem",
                            "type": "LessonRecordList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "classRecordItem",
                            "type": "LessonRecordList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isLessonInProgress",
                    "args": [
                        {
                            "name": "lessonRecordItem",
                            "type": "LessonRecordList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "lessonRecordItem",
                            "type": "LessonRecordList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onOpenAttendees",
                    "args": [
                        {
                            "name": "track",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "track",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onResumeClass",
                    "args": [
                        {
                            "name": "classRecordItem",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "classRecordItem",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRevertLesson",
                    "args": [
                        {
                            "name": "classRecordItem",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "classRecordItem",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onStartClass",
                    "args": [
                        {
                            "name": "classRecordItem",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "classRecordItem",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { MediaObserver } from '@angular/flex-layout';\nimport { Enrollment, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { ClassRecord, LessonRecordList, ClassRecordType } from 'app/@core/models/class-record.model';\n\n@Component({\n    selector: 'app-class-record-list',\n    templateUrl: './class-record-list.component.html',\n    styleUrls: ['./class-record-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ClassRecordListComponent {\n    @Input() lessonTrackerList: LessonRecordList[];\n    @Input() enrollment: Enrollment;\n    @Input() classInProgress: ClassRecord;\n\n    @Input() isGroup: boolean;\n    @Input() group: StudyGroup;\n\n    @Input() student: boolean;\n\n    @Output() startClassEvent = new EventEmitter();\n    @Output() resumeClassEvent = new EventEmitter();\n    @Output() revertClassEvent = new EventEmitter();\n    @Output() revertLessonEvent = new EventEmitter();\n    @Output() openAttendeesEvent = new EventEmitter();\n    @Output() openStudentBookEvent = new EventEmitter();\n    @Output() goToLessonEvent = new EventEmitter();\n\n    constructor(private mediaObserver: MediaObserver) {}\n\n    onStartClass(classRecordItem: any) {\n        this.startClassEvent.emit(classRecordItem);\n    }\n\n    onResumeClass(classRecordItem: any) {\n        this.resumeClassEvent.emit(classRecordItem);\n    }\n\n    onRevertLesson(classRecordItem: any) {\n        this.revertLessonEvent.emit(classRecordItem);\n    }\n\n    onOpenAttendees(track: any) {\n        this.openAttendeesEvent.emit(track.studyGroupClassAttendees);\n    }\n\n    getLastClass(lesson: LessonRecordList): ClassRecordType {\n        if (!lesson.classRecords || lesson.classRecords.length === 0) {\n            return undefined;\n        }\n\n        let lastClass: ClassRecordType;\n        lesson.classRecords.forEach((classLectured: ClassRecordType) => {\n            const currentStartedDate = new Date(parseInt(classLectured.startedAt, 10)).getDate();\n            if (!lastClass || parseInt(classLectured.startedAt, 10) > parseInt(lastClass.startedAt, 10)) {\n                lastClass = classLectured;\n            }\n        });\n\n        return lastClass;\n    }\n\n    public isLastLesson(classRecordItem: LessonRecordList): boolean {\n        return this.isGroup\n            ? classRecordItem?.id === this.group?.lastLesson?.lesson?.id\n            : classRecordItem?.id === this.enrollment?.lastLesson?.lesson?.id &&\n                  this.enrollment.sourceType === 'ENROLLMENT' &&\n                  this.enrollment?.revertLessonStatus;\n    }\n\n    get isMobile(): boolean {\n        return this.mediaObserver.isActive('xs');\n    }\n\n    public isLessonInProgress(lessonRecordItem: LessonRecordList): boolean {\n        if (!this.classInProgress) {\n            return false;\n        }\n\n        if (this.classInProgress.sourceType === 'ENROLLMENT') {\n            return !this.isGroup && this.classInProgress.enrollmentClassRecord?.lesson?.id === lessonRecordItem.id;\n        } else {\n            return this.isGroup && this.classInProgress.studyGroupClassRecord?.lesson?.id === lessonRecordItem.id;\n        }\n    }\n\n    goToStudentBook(lessonRecordItem: LessonRecordList) {\n        this.openStudentBookEvent.emit(lessonRecordItem);\n    }\n\n    goToLesson(lessonRecordItem: LessonRecordList) {\n        this.goToLessonEvent.emit(lessonRecordItem);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n@use '~@angular/flex-layout/mq' as mq;\n\n@mixin class-record-list-theme($theme) {\n    $primary-50: mat.get-color-from-palette(map-get($theme, primary), 50);\n\n    .class-record-list__container {\n        max-width: 100%;\n\n        &__class-record {\n            padding: 12px 0 0 16px;\n            cursor: pointer;\n\n            &--lesson-done {\n                background-color: $primary-50;\n            }\n\n            &__info {\n                .mat-body-2 {\n                    color: rgba(0, 0, 0, 0.87);\n                }\n\n                &--tracks {\n                    padding: 10px 24px 16px 0;\n\n                    @include mq.layout-bp(gt-xs) {\n                        padding: 10px 24px 16px 30px;\n                    }\n                }\n            }\n\n            &__button {\n                margin-right: 19px;\n                min-width: 30px;\n                width: 30px;\n                height: 30px;\n\n                @include mq.layout-bp(gt-xs) {\n                    min-width: 60px;\n                    width: 60px;\n                    height: 62px;\n                }\n\n                mat-icon {\n                    font-size: 30px;\n\n                    @include mq.layout-bp(gt-xs) {\n                        font-size: 42px;\n                    }\n                }\n\n                svg {\n                    width: 30px;\n                    height: 30px;\n\n                    @include mq.layout-bp(gt-xs) {\n                        height: 42px;\n                        width: 40px;\n                    }\n                }\n            }\n        }\n    }\n\n    .border-bottom {\n        border-bottom: 1px solid rgba(0, 0, 0, 0.12) !important;\n    }\n\n    .date-mobile {\n        font-size: 11px !important;\n        font-weight: 400 !important;\n        line-height: 20px !important;\n    }\n    .button-mobile {\n        font-size: 12px !important;\n        padding: 0 !important;\n    }\n\n    .pb-15 {\n        padding-bottom: 15px;\n    }\n\n    .border-top {\n        border-radius: 14px 14px 0 0;\n    }\n\n    .pulse-css {\n        animation: pulse 2s ease-in infinite;\n    }\n\n    @keyframes pulse {\n        from {\n            opacity: 1;\n        }\n        50% {\n            opacity: 0.4;\n        }\n        to {\n            opacity: 1;\n        }\n    }\n}\n",
                    "styleUrl": "./class-record-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "isMobile": {
                    "name": "isMobile",
                    "getSignature": {
                        "name": "isMobile",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 72
                    }
                }
            },
            "templateData": "<div class=\"class-record-list__container\">\n  <div *ngFor=\"let lessonRecordItem of lessonTrackerList; let first = first\">\n    <div\n      fxLayout=\"row\"\n      fxLayoutAlign=\"start start\"\n      fxLayoutGap=\"16px\"\n      class=\"class-record-list__container__class-record\"\n      [class.class-record-list__container__class-record--lesson-done]=\"\n        lessonRecordItem | isLastClassLessonDone\n      \"\n      [class.border-top]=\"first && !isMobile\"\n      (click)=\"student ? goToStudentBook(lessonRecordItem) : goToLesson(lessonRecordItem)\"\n    >\n      <div style=\"padding-top: 10px\">\n        <p class=\"mat-headline\">{{ lessonRecordItem?.levelOrder }}</p>\n      </div>\n      <div fxLayout=\"column\" fxLayoutAlign=\"start stretch\" fxFlex=\"100%\">\n        <div\n          fxLayout=\"row\"\n          fxLayoutAlign=\"space-between center\"\n          fxFlex=\"100%\"\n          style=\"padding-bottom: 15px\"\n        >\n          <div\n            fxLayout=\"column\"\n            fxLayoutAlign=\"start start\"\n            class=\"class-record-list__container__class-record__info\"\n          >\n            <span class=\"mat-subheading-1\">{{ lessonRecordItem?.title }}</span>\n            <span class=\"mat-body-2 text-black-opacity-06\">\n              {{ lessonRecordItem?.category | titlecase }} -\n              {{ lessonRecordItem?.subject | titlecase }}\n            </span>\n          </div>\n\n          <div *ngIf=\"!student\">\n            <div fxLayout=\"row\" fxLayoutAlign=\"start start\" fxLayoutGap=\"10px\">\n              <!-- start class button -->\n              <button\n                *ngIf=\"\n                  !classInProgress &&\n                  (isGroup\n                    ? group?.nextLesson?.id === lessonRecordItem.id || (first && !group.nextLesson)\n                    : (enrollment?.nextLesson?.id === lessonRecordItem.id &&\n                        enrollment.sourceType === 'ENROLLMENT') ||\n                      (first && !enrollment?.nextLesson))\n                \"\n                mat-icon-button\n                color=\"primary\"\n                class=\"class-record-list__container__class-record__button\"\n                (click)=\"onStartClass(lessonRecordItem); $event.stopPropagation()\"\n              >\n                <!-- bug in mat-icon with 'play_lesson', so must be a inline svg -->\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  enable-background=\"new 0 0 24 24\"\n                  viewBox=\"0 0 24 24\"\n                  fill=\"currentColor\"\n                >\n                  <g><path d=\"M0,0h24v24H0V0z\" fill=\"none\" /></g>\n                  <g>\n                    <g>\n                      <path\n                        d=\"M18,11c0.34,0,0.67,0.03,1,0.08V4c0-1.1-0.9-2-2-2H5C3.9,2,3,2.9,3,4v16c0,1.1,0.9,2,2,2h7.26C11.47,20.87,11,19.49,11,18 C11,14.13,14.13,11,18,11z M7,11V4h5v7L9.5,9.5L7,11z\"\n                      />\n                      <path\n                        d=\"M18,13c-2.76,0-5,2.24-5,5s2.24,5,5,5s5-2.24,5-5S20.76,13,18,13z M16.75,20.5v-5l4,2.5L16.75,20.5z\"\n                      />\n                    </g>\n                  </g>\n                </svg>\n              </button>\n              <!-- resume class button -->\n              <button\n                *ngIf=\"isLessonInProgress(lessonRecordItem)\"\n                mat-icon-button\n                color=\"accent\"\n                class=\"class-record-list__container__class-record__button pulse-css\"\n                (click)=\"onResumeClass(lessonRecordItem); $event.stopPropagation()\"\n              >\n                <!-- bug in mat-icon with 'play_lesson', so must be a inline svg -->\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  enable-background=\"new 0 0 24 24\"\n                  viewBox=\"0 0 24 24\"\n                  fill=\"currentColor\"\n                >\n                  <g><path d=\"M0,0h24v24H0V0z\" fill=\"none\" /></g>\n                  <g>\n                    <g>\n                      <path\n                        d=\"M18,11c0.34,0,0.67,0.03,1,0.08V4c0-1.1-0.9-2-2-2H5C3.9,2,3,2.9,3,4v16c0,1.1,0.9,2,2,2h7.26C11.47,20.87,11,19.49,11,18 C11,14.13,14.13,11,18,11z M7,11V4h5v7L9.5,9.5L7,11z\"\n                      />\n                      <path\n                        d=\"M18,13c-2.76,0-5,2.24-5,5s2.24,5,5,5s5-2.24,5-5S20.76,13,18,13z M16.75,20.5v-5l4,2.5L16.75,20.5z\"\n                      />\n                    </g>\n                  </g>\n                </svg>\n              </button>\n              <!-- revert lesson button -->\n              <button\n                *ngIf=\"!isLessonInProgress(lessonRecordItem) && isLastLesson(lessonRecordItem)\"\n                mat-icon-button\n                color=\"primary\"\n                class=\"class-record-list__container__class-record__button\"\n                (click)=\"onRevertLesson(lessonRecordItem); $event.stopPropagation()\"\n              >\n                <mat-icon [inline]=\"true\">replay</mat-icon>\n              </button>\n            </div>\n          </div>\n        </div>\n        <!-- CLASSES -->\n        <div *ngIf=\"lessonRecordItem?.classRecords?.length\">\n          <div fxLayout=\"column\" fxLayoutAlign=\"start stretch\">\n            <div\n              *ngFor=\"let track of lessonRecordItem?.classRecords; let last = last; let i = index\"\n              fxLayout=\"row\"\n              fxLayoutAlign=\"space-between center\"\n              fxFlex=\"100%\"\n              [class.border-bottom]=\"last\"\n            >\n              <div\n                fxLayout=\"row\"\n                fxLayoutAlign=\"start center\"\n                fxLayoutGap.gt-xs=\"25px\"\n                fxLayoutGap.xs=\"10px\"\n                class=\"class-record-list__container__class-record__info--tracks\"\n              >\n                <span class=\"mat-overline\">\n                  CLASS {{ lessonRecordItem?.classRecords.length - i }}\n                </span>\n                <span\n                  class=\"mat-button text-black-opacity-06\"\n                  [class.date-mobile]=\"isMobile\"\n                  [innerHTML]=\"track?.lessonStartedAt | utcToDate | safe: 'html'\"\n                >\n                </span>\n                <span\n                  class=\"mat-button text-black-opacity-06\"\n                  [class.date-mobile]=\"isMobile\"\n                  [innerHTML]=\"track?.lessonEndedAt | utcToDate | safe: 'html'\"\n                >\n                </span>\n                <button\n                  *ngIf=\"isGroup\"\n                  mat-button\n                  color=\"primary\"\n                  [class.button-mobile]=\"isMobile\"\n                  (click)=\"onOpenAttendees(track); $event.stopPropagation()\"\n                >\n                  attendees\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <!-- -- CLASSES -->\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "ClassRecordTimerComponent",
            "id": "component-ClassRecordTimerComponent-462d935f34c84fae4012e33bd964d2d7",
            "file": "src/app/@shared/components/class-record-timer/class-record-timer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-class-record-timer",
            "styleUrls": [
                "./class-record-timer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./class-record-timer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "classInProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "ClassRecord"
                }
            ],
            "outputsClass": [
                {
                    "name": "bookmarkEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                },
                {
                    "name": "doneEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "cardElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'cardElement', {static: true}"
                        }
                    ]
                },
                {
                    "name": "classDuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "isLessonOvertime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "initTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDone",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDragReleased",
                    "args": [
                        {
                            "name": "evt",
                            "type": "CdkDragRelease",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "CdkDragRelease",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onOpenScriptStandAlone",
                    "args": [
                        {
                            "name": "lessonId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lessonId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CdkDragRelease } from '@angular/cdk/drag-drop';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    ViewChild,\n} from '@angular/core';\nimport { ClassRecord } from 'app/@core/models/class-record.model';\nimport { Subject, timer } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-class-record-timer',\n    templateUrl: './class-record-timer.component.html',\n    styleUrls: ['./class-record-timer.component.scss'],\n})\nexport class ClassRecordTimerComponent implements OnInit, OnDestroy {\n    @Output() doneEvent = new EventEmitter();\n    @Output() bookmarkEvent = new EventEmitter();\n\n    @Input() classInProgress: ClassRecord;\n\n    @ViewChild('cardElement', { static: true }) cardElement: ElementRef;\n\n    isLessonOvertime: boolean;\n    classDuration: string;\n\n    private destroy$ = new Subject<void>();\n\n    constructor(@Inject(Window) private window: Window) {}\n\n    ngOnInit() {\n        this.initTimer();\n    }\n\n    ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    initTimer() {\n        timer(0, 1000)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((val) => {\n                if (!this.classInProgress) {\n                    return;\n                }\n\n                let dateDiff: number;\n                try {\n                    let startedAt: string;\n                    if (this.classInProgress.sourceType === 'ENROLLMENT') {\n                        startedAt = this.classInProgress.enrollmentClassRecord.startedAt;\n                    } else {\n                        startedAt = this.classInProgress.studyGroupClassRecord.startedAt;\n                    }\n\n                    dateDiff = new Date().getTime() - parseInt(startedAt, 10);\n                } finally {\n                    if (!dateDiff || dateDiff < 0) {\n                        dateDiff = val * 1000;\n                    }\n\n                    const lessonDuration = 60 * 60 * 1000; // (1 hour)\n                    this.isLessonOvertime = dateDiff > lessonDuration;\n                    this.classDuration = new Date(dateDiff).toISOString().substr(11, 8);\n                }\n            });\n    }\n\n    onDone() {\n        this.doneEvent.emit();\n    }\n\n    onDragReleased(evt: CdkDragRelease) {\n        const rect = this.cardElement.nativeElement.getBoundingClientRect();\n        localStorage.setItem('classInProgressPosition', JSON.stringify(rect));\n    }\n\n    onOpenScriptStandAlone(lessonId: string) {\n        const url = `script/${lessonId}`;\n        this.window.open(url, '_blank');\n    }\n\n    get isGroup(): boolean {\n        return this.classInProgress.sourceType === 'STUDY_GROUP';\n    }\n\n    get lessonId() {\n        return this.isGroup\n            ? this.classInProgress.studyGroupClassRecord.lesson.id\n            : this.classInProgress.enrollmentClassRecord.lesson.id;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n@mixin class-record-timer-theme($theme) {\n    $primary: mat.get-color-from-palette(map-get($theme, primary), 50);\n    $primary-700: mat.get-color-from-palette(map-get($theme, primary), 700);\n    $accent: mat.get-color-from-palette(map-get($theme, accent), 300);\n\n    .class-record-card {\n        background-color: $primary;\n        width: 230px;\n        padding: 0;\n        height: 48px;\n        border-radius: 14px;\n        position: relative;\n        pointer-events: all;\n        z-index: 10;\n\n        &__timer {\n            width: 40px;\n        }\n\n        &__drag-handle {\n            color: $primary-700;\n            position: absolute;\n            left: -4px;\n            top: 13px;\n            cursor: move;\n        }\n    }\n}\n",
                    "styleUrl": "./class-record-timer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "window",
                        "type": "Window",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "window",
                        "type": "Window",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "isGroup": {
                    "name": "isGroup",
                    "getSignature": {
                        "name": "isGroup",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 90
                    }
                },
                "lessonId": {
                    "name": "lessonId",
                    "getSignature": {
                        "name": "lessonId",
                        "type": "",
                        "returnType": "",
                        "line": 94
                    }
                }
            },
            "templateData": "<mat-card\n  cdkDrag\n  cdkDragBoundary=\".mat-typography\"\n  (cdkDragReleased)=\"onDragReleased($event)\"\n  fxLayout\n  fxLayoutAlign=\"center center\"\n  class=\"class-record-card mat-elevation-z4\"\n>\n  <div fxLayout fxLayoutAlign=\"end center\" fxLayoutGap=\"12px\">\n    <div #cardElement fxLayout fxLayoutAlign=\"center center\" fxLayoutGap=\"9px\">\n      <mat-icon class=\"class-record-card__drag-handle\" cdkDragHandle>drag_indicator</mat-icon>\n      <div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"3px\">\n        <mat-icon color=\"accent\">hourglass_empty</mat-icon>\n        <span class=\"class-record-card__timer mat-caption\">{{ classDuration }}</span>\n      </div>\n    </div>\n    <div fxLayout fxLayoutAlign=\"center center\">\n      <button\n        mat-icon-button\n        color=\"primary\"\n        [routerLink]=\"\n          isGroup\n            ? '/classroom/groups/' + classInProgress?.studyGroupClassRecord?.studyGroupId + '/schedule'\n            : '/classroom/enrollments/' + classInProgress?.enrollmentClassRecord?.enrollmentId\n        \"\n      >\n        <mat-icon>bookmark_outline</mat-icon>\n      </button>\n      <button\n        mat-icon-button\n        color=\"primary\"\n        (click)=\"onOpenScriptStandAlone(lessonId)\"\n      >\n        <mat-icon>description</mat-icon>\n      </button>\n      <button mat-icon-button color=\"primary\" (click)=\"onDone()\">\n        <mat-icon>done_outline</mat-icon>\n      </button>\n    </div>\n  </div>\n</mat-card>\n"
        },
        {
            "name": "ConfirmEmailPageComponent",
            "id": "component-ConfirmEmailPageComponent-8540113b566f5a00aa950c51de2d72f4",
            "file": "src/app/authentication/pages/confirm-email-page/confirm-email-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-confirm-email-page",
            "styleUrls": [
                "./confirm-email-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./confirm-email-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-confirm-email-page',\n    templateUrl: './confirm-email-page.component.html',\n    styleUrls: ['./confirm-email-page.component.scss'],\n})\nexport class ConfirmEmailPageComponent {\n    constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-icon {\n  font-size: 40px;\n  width: 40px;\n  height: 40px;\n}",
                    "styleUrl": "./confirm-email-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "templateData": "<app-auth-layout>\n  <div fxLayout=\"column\" fxLayoutAlign=\"center center\" fxLayoutGap=\"16px\">\n    <mat-icon color=\"primary\">email</mat-icon>\n\n    <p class=\"mat-title\">Check your inbox!</p>\n\n    <p>An e-mail has been sent to you.</p>\n\n    <a mat-stroked-button color=\"primary\" [routerLink]=\"'/auth/login'\">Go back to login page</a>\n  </div>\n</app-auth-layout>\n"
        },
        {
            "name": "ConfirmRegistrationComponent",
            "id": "component-ConfirmRegistrationComponent-ace89d0779576b54af993f0456e23603",
            "file": "src/app/main/user-account/confirm-registration/confirm-registration.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-confirm-registration",
            "styleUrls": [
                "./confirm-registration.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./confirm-registration.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tokenVerified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TokenValidation",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "loginRedirect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "validateToken",
                    "args": [
                        {
                            "name": "registrationToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "registrationToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { TokenValidation } from '../token-validation.interface';\nimport { UserAccountService } from '../user-account.service';\n\n@Component({\n    selector: 'app-confirm-registration',\n    templateUrl: './confirm-registration.component.html',\n    styleUrls: ['./confirm-registration.component.scss'],\n})\nexport class ConfirmRegistrationComponent {\n    public tokenVerified: TokenValidation;\n\n    constructor(\n        private userAccountService: UserAccountService,\n        private activatedRoute: ActivatedRoute,\n        private router: Router,\n    ) {\n        this.activatedRoute.params.subscribe((params) => this.validateToken(params['registrationToken']));\n    }\n\n    private validateToken(registrationToken: string): void {\n        this.userAccountService.validateRegistrationToken(registrationToken).subscribe(\n            (tokenVerified) => {\n                this.tokenVerified = tokenVerified;\n            },\n            (error: string) => {\n                this.tokenVerified = {\n                    tokenValidated: false,\n                    message: error,\n                };\n            },\n        );\n    }\n\n    public loginRedirect(): void {\n        this.router.navigate(['auth', 'login']);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-icon {\n    font-size: 40px;\n    width: 40px;\n    height: 40px;\n  }\n\n.logo {\n    margin: 0 auto 32px auto;\n    width: 50%;\n}\n\n.title {\n    font-size: 20px;\n    margin-top: 16px;\n}\n\n.subtitle {\n    margin: 16px auto;\n    max-width: 300px;\n    font-size: 15px;\n}\n\n.message {\n    font-weight: 600;\n    text-align: center;\n    margin-top: 40px;\n}\n",
                    "styleUrl": "./confirm-registration.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userAccountService",
                        "type": "UserAccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "userAccountService",
                        "type": "UserAccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-auth-layout>\n  <div fxLayout=\"column\" fxLayoutAlign=\"center center\" fxLayoutGap=\"16px\">\n    <!-- Validating -->\n    <ng-container *ngIf=\"!tokenVerified\">\n      <mat-spinner></mat-spinner>\n\n      <div class=\"title mat-h1\">Verifying account...</div>\n    </ng-container>\n    <ng-container *ngIf=\"tokenVerified\">\n      <!-- Account succeffully verified -->\n      <ng-container *ngIf=\"tokenVerified.tokenValidated\">\n        <mat-icon color=\"primary\">verified_user</mat-icon>\n\n        <div class=\"mat-title\">Account verified</div>\n\n        <div class=\"mat-subheading-1 text-center\">\n          <p>Your account has been activated.</p>\n        </div>\n\n        <a fxFlexAlign=\"center\" mat-stroked-button color=\"primary\" [routerLink]=\"'/auth/login'\">\n          Go back to login\n        </a>\n      </ng-container>\n      <!-- Account verification failed -->\n      <ng-container *ngIf=\"tokenVerified.tokenValidated === false\">\n        <mat-icon color=\"warn\">error</mat-icon>\n\n        <div class=\"mat-title\">Failed to validate</div>\n\n        <div class=\"mat-subheading-1 text-center\">\n          <p>Invalid token or email has already been confirmed.</p>\n        </div>\n\n        <a fxFlexAlign=\"center\" mat-stroked-button color=\"primary\" [routerLink]=\"'/auth/login'\">\n          Go back to login\n        </a>\n      </ng-container>\n    </ng-container>\n  </div>\n</app-auth-layout>\n\n<!-- \n\n<div class=\"confirm-user\">\n    <div *ngIf=\"!tokenVerified\" class=\"validating\">\n        <p>validating token</p>\n    </div>\n    <div *ngIf=\"tokenVerified\" class=\"validated\">\n        <div *ngIf=\"tokenVerified.tokenValidated\" class=\"sucess\">\n            <p>Token validated</p>\n        </div>\n        <div *ngIf=\"tokenVerified.tokenValidated === false\" class=\"failed\">\n            <p>User already registered or the confirmation link is invalid</p>\n        </div>\n        <div class=\"login-redirect\">\n            <button mat-raised-button color=\"primary\"\n                class=\"submit-button\" aria-label=\"Go to Login\" (click)=\"loginRedirect()\">\n            Go to Login\n            </button>\n        </div>\n    </div>\n</div> -->\n"
        },
        {
            "name": "CourseDetailComponent",
            "id": "component-CourseDetailComponent-61f5a4241e7927a2ad29708d1d322839",
            "file": "src/app/lms/course/course-detail/course-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-course-detail",
            "styleUrls": [
                "./course-detail.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./course-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_unsubscribeAll",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "categories",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "currentCategory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "currentLevel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Level",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "filteredLessons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "levels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Level[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "program",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Program",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "searchTerm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "consolidateLessonFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFilter lessons according to selected category and level.\nAlso filters based on search term.\n",
                    "description": "<p>Filter lessons according to selected category and level.\nAlso filters based on search term.</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "filterLessonsByCategory",
                    "args": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFilter lessons by category\n\n",
                    "description": "<p>Filter lessons by category</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3833,
                                "end": 3841,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "category"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3827,
                                "end": 3832,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "filterLessonsByLevel",
                    "args": [
                        {
                            "name": "tabIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tabIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterLessonsByTerm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFilter lessons by term\n",
                    "description": "<p>Filter lessons by term</p>\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "loadProgram",
                    "args": [
                        {
                            "name": "programId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "programId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOn destroy\n",
                    "description": "<p>On destroy</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { LMSService } from 'app/@core/services/lms.service';\n\nimport { Program } from 'app/@core/models/program.model';\nimport { Level } from 'app/@core/models/level.model';\n\n@Component({\n    selector: 'app-course-detail',\n    templateUrl: './course-detail.component.html',\n    styleUrls: ['./course-detail.component.scss'],\n})\nexport class CourseDetailComponent implements OnDestroy {\n    program: Program;\n    levels: Level[];\n    categories: string[];\n    filteredLessons: any[];\n    currentCategory: string;\n    currentLevel: Level;\n    searchTerm: string;\n\n    // Private\n    private _unsubscribeAll: Subject<any>;\n\n    /**\n     * Constructor\n     *\n     * @param _academyLessonsService\n     */\n    constructor(private activatedRoute: ActivatedRoute, private lmsService: LMSService) {\n        // Set the defaults\n        this.currentCategory = 'all';\n        this.searchTerm = '';\n\n        this.categories = ['all', 'GRAMMAR', 'LISTENING', 'SPEAKING', 'READING'];\n\n        // Set the private defaults\n        this._unsubscribeAll = new Subject();\n\n        this.activatedRoute.params\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe((params) => this.loadProgram(params['programId']));\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next();\n        this._unsubscribeAll.complete();\n    }\n\n    private loadProgram(programId: string): void {\n        this.lmsService\n            .getProgram(programId)\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe((program: Program) => {\n                this.program = program;\n                this.levels = [].concat(...this.program.modules.map((module) => module.levels));\n\n                // select first level by default\n                if (!this.currentLevel) {\n                    // Assumes modules and levels are ordered by program/module order\n                    if (this.program.modules && this.program.modules[0]?.levels) {\n                        // this.currentLevel = this.program.modules[0].levels[0];\n                        this.filterLessonsByLevel(0);\n                    }\n                }\n            });\n    }\n\n    /**\n     * Filter lessons according to selected category and level.\n     * Also filters based on search term.\n     */\n    private consolidateLessonFilter(): void {\n        if (!this.currentLevel) {\n            return;\n        }\n\n        const searchTerm = this.searchTerm.toLowerCase();\n\n        this.filteredLessons = this.currentLevel.lessons.filter(\n            (lesson) =>\n                (lesson.category === this.currentCategory || this.currentCategory === 'all') &&\n                (lesson.title.toLowerCase().includes(searchTerm) ||\n                    lesson.subject.toLowerCase().includes(searchTerm) ||\n                    searchTerm === ''),\n        );\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    filterLessonsByLevel(tabIndex: number): void {\n        if (!this.levels) {\n            return;\n        }\n\n        this.currentLevel = this.levels[tabIndex];\n        this.consolidateLessonFilter();\n    }\n\n    /**\n     * Filter lessons by category\n     *\n     * @param category\n     */\n    public filterLessonsByCategory(category: string): void {\n        this.currentCategory = category;\n        this.consolidateLessonFilter();\n    }\n\n    /**\n     * Filter lessons by term\n     */\n    public filterLessonsByTerm(): void {\n        this.consolidateLessonFilter();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#academy-lessons {\n    .content {\n        .lesson-selector {\n            min-width: 300px;\n        }\n\n        .column-category-icons {\n            display: flex;\n            padding: 5px;\n        }\n\n        .row-category-icons::after {\n            // content: '';\n            // clear: both;\n            // display: table;\n        }\n\n        .filters {\n            display: flex;\n            // width: 80%;\n            margin: 18px 28px 12px 12px;\n            padding: 0 12px;\n\n            .category-icon {\n                opacity: 0.3;\n                width: 40px;\n                height: 40px;\n                &.selected {\n                    opacity: 1;\n                }\n            }\n        }\n\n        .lessons {\n            padding: 0px 32px;\n\n            margin: 0 auto;\n\n            .lesson {\n                padding: 16px;\n            }\n        }\n\n        .no-lessons {\n            font-size: 24px;\n            margin: 24px 0;\n            text-align: center;\n        }\n    }\n}\n",
                    "styleUrl": "./course-detail.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "lmsService",
                        "type": "LMSService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "rawdescription": "\n\nConstructor\n\n",
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lmsService",
                        "type": "LMSService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<ng-template tpAttach=\"topBarStart\">\n    <app-eslo-letter-logo></app-eslo-letter-logo>\n    <app-top-bar-title text=\"Courses\"></app-top-bar-title>\n</ng-template>\n\n<div *ngIf=\"program\" id=\"academy-lessons\" class=\"page-layout fullwidth tabbed left-sidebar inner-sidebar\">\n    <div class=\"content\">\n        <!-- CONTENT -->\n        <div *ngIf=\"levels\" id=\"lesson-content\" class=\"content\">\n            <mat-tab-group (selectedIndexChange)=\"filterLessonsByLevel($event)\">\n                <ng-container *ngFor=\"let level of levels\">\n                    <mat-tab [label]=\"level.name\"> </mat-tab>\n                </ng-container>\n            </mat-tab-group>\n        </div>\n        <div class=\"center\" fusePerfectScrollbar>\n            <div fxLayout=\"column\" fxLayoutAlign=\"center\">\n                <div class=\"filters\" fxLayout=\"row\" fxLayoutAlign=\"end end\">\n                        <div class=\"column-category-icons\" *ngFor=\"let category of categories\">\n                            <button\n                                (click)=\"filterLessonsByCategory(category)\"\n                                mat-icon-button\n                                #tooltip=\"matTooltip\"\n                                matTooltip=\"Show {{ category }} lessons\"\n                            >\n                                <img\n                                    src=\"assets/icons/skill-icons/{{ category }}.png\"\n                                    class=\"category-icon\"\n                                    [ngClass]=\"{ selected: category === currentCategory || currentCategory === 'all' }\"\n                                />\n                            </button>\n                    </div>\n                </div>\n\n                <div class=\"lessons\" *ngIf=\"filteredLessons?.length > 0\" fxLayout=\"row wrap\" fxLayoutAlign=\"center\">\n                    <div class=\"lesson\" *ngFor=\"let lesson of filteredLessons\" [ngClass]=\"lesson.category\">\n                        <app-lesson-card [lesson]=\"lesson\"> </app-lesson-card>\n                    </div>\n                </div>\n                <div class=\"no-lessons\" *ngIf=\"!filteredLessons || filteredLessons.length === 0\">No lessons found!</div>\n            </div>\n        </div>\n    </div>\n    <!-- / CONTENT -->\n</div>\n"
        },
        {
            "name": "CourseDetailPageComponent",
            "id": "component-CourseDetailPageComponent-e4ecb97c95775673596361ad79965657",
            "file": "src/app/lms/pages/course-detail-page/course-detail-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-course-detail-page",
            "styleUrls": [
                "./course-detail-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./course-detail-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "course$",
                    "defaultValue": "this.lmsService.getProgram(this.route.snapshot.params.courseId).pipe(\n        tap({\n            next: (program) => {\n                this.levels = [].concat(...program.modules.map((module) => module.levels));\n\n                this.navigationTabsConfig.links = this.levels.map((level) => {\n                    const [levelCode, _] = level.name.split(' - ');\n                    return {\n                        path: './',\n                        queryParams: {\n                            level: levelCode,\n                        },\n                        textIcon: levelCode,\n                        label: level.label,\n                    };\n                });\n            },\n        }),\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "currentLevel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "levels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "navigationTabsConfig",
                    "defaultValue": "{\n        links: [],\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INavigationTabsConfig",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "checkCurrentLevel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "goToLesson",
                    "args": [
                        {
                            "name": "lesson",
                            "type": "Lesson",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lesson",
                            "type": "Lesson",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Lesson } from 'app/@core/models/lesson.model';\nimport { LMSService } from 'app/@core/services/lms.service';\nimport { INavigationTabsConfig } from 'app/@shared/components/navigation-tabs/navigation-tabs.component';\nimport { combineLatest, Subject } from 'rxjs';\nimport { takeUntil, tap } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-course-detail-page',\n    templateUrl: './course-detail-page.component.html',\n    styleUrls: ['./course-detail-page.component.scss'],\n})\nexport class CourseDetailPageComponent implements OnInit, OnDestroy {\n    navigationTabsConfig: INavigationTabsConfig = {\n        links: [],\n    };\n\n    levels: any[];\n\n    currentLevel: any;\n\n    course$ = this.lmsService.getProgram(this.route.snapshot.params.courseId).pipe(\n        tap({\n            next: (program) => {\n                this.levels = [].concat(...program.modules.map((module) => module.levels));\n\n                this.navigationTabsConfig.links = this.levels.map((level) => {\n                    const [levelCode, _] = level.name.split(' - ');\n                    return {\n                        path: './',\n                        queryParams: {\n                            level: levelCode,\n                        },\n                        textIcon: levelCode,\n                        label: level.label,\n                    };\n                });\n            },\n        }),\n    );\n\n    private destroy$ = new Subject<void>();\n\n    constructor(private route: ActivatedRoute, private lmsService: LMSService, private router: Router) {}\n\n    ngOnInit() {\n        this.checkCurrentLevel();\n    }\n\n    ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    checkCurrentLevel() {\n        /* 'combineLatest' is used to wait for course to be loaded\n         to filter the levels array */\n        combineLatest([this.route.queryParamMap, this.course$])\n            .pipe(takeUntil(this.destroy$))\n            .subscribe({\n                next: ([queryParamMap, _]) => {\n                    const levelQuery = queryParamMap.get('level');\n                    this.currentLevel = this.levels.find((level) => {\n                        const levelCode = level?.code.split('-').pop();\n                        return levelCode === levelQuery;\n                    });\n\n                    // set the first level if doesn't have any query param\n                    if (!this.currentLevel) {\n                        const firstLevelLink = [...this.navigationTabsConfig.links].shift();\n                        this.router.navigate([], {\n                            relativeTo: this.route,\n                            queryParams: firstLevelLink.queryParams,\n                            queryParamsHandling: 'merge',\n                        });\n                    }\n                },\n            });\n    }\n\n    goToLesson(lesson: Lesson): void {\n        this.router.navigate(['lms', 'lessons', lesson.id, 'script']);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./course-detail-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "lmsService",
                        "type": "LMSService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lmsService",
                        "type": "LMSService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-container *ngIf=\"course$ | async as course\">\n  <ng-template tpAttach=\"topBarStart\">\n    <app-back-button></app-back-button>\n    <app-top-bar-title [text]=\"course.label\"></app-top-bar-title>\n  </ng-template>\n</ng-container>\n\n<ng-template tpAttach=\"topBarCenter\">\n  <app-navigation-tabs [navigationTabsConfig]=\"navigationTabsConfig\"></app-navigation-tabs>\n</ng-template>\n\n<div *ngIf=\"currentLevel\">\n  <app-lessons-list\n    [lessons]=\"currentLevel?.lessons\"\n    (goToLessonEvent)=\"goToLesson($event)\"\n  ></app-lessons-list>\n</div>\n\n"
        },
        {
            "name": "CoursesListComponent",
            "id": "component-CoursesListComponent-a994a3c520f4e9e3563f70ba33f2a26b",
            "file": "src/app/lms/components/courses-list/courses-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-courses-list",
            "styleUrls": [
                "./courses-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./courses-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "courses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Program[] | any"
                }
            ],
            "outputsClass": [
                {
                    "name": "courseDetailEvent",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onCourseDetail",
                    "args": [
                        {
                            "name": "courseId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "courseId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Program } from 'app/@core/models/program.model';\n\n@Component({\n    selector: 'app-courses-list',\n    templateUrl: './courses-list.component.html',\n    styleUrls: ['./courses-list.component.scss'],\n})\nexport class CoursesListComponent {\n    @Input() courses: Program[] | any;\n\n    @Output() courseDetailEvent = new EventEmitter<string>();\n\n    constructor() {}\n\n    onCourseDetail(courseId: string) {\n        this.courseDetailEvent.emit(courseId);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/flex-layout/mq' as mq;\n\n.courses__container {\n    padding: 24px 8px;\n\n    @include mq.layout-bp(gt-xs) {\n        padding: 32px 24px;\n    }\n}\n\n.courses__card {\n    border-radius: 14px;\n    cursor: pointer;\n\n    mat-icon {\n        font-size: 30px;\n        width: 26px;\n        height: 33px;\n    }\n}\n\n.p-t-25 {\n    padding-top: 25px;\n}\n\n.m-0 {\n    margin: 0;\n}\n",
                    "styleUrl": "./courses-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "templateData": "<section\n  class=\"courses__container\"\n  gdColumns.xs=\"repeat(auto-fill, minmax(300px, 1fr))\"\n  gdColumns.gt-xs=\"repeat(auto-fill, minmax(320px, 1fr))\"\n  gdGap.xs=\"24px\"\n  gdGap.gt-xs=\"46px\"\n  gdAlignColumns=\"start stretch\"\n  gdAuto\n>\n  <div *ngFor=\"let course of courses\">\n    <mat-card class=\"courses__card mat-elevation-z2\" (click)=\"onCourseDetail(course?.id)\">\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"16px\">\n        <mat-icon color=\"primary\">{{ course?.icon }}</mat-icon>\n        <div fxLayout=\"column\" fxLayoutAlign=\"start start\">\n          <span class=\"mat-title m-0\">{{ course?.label }}</span>\n          <span class=\"mat-body-2\">{{ course?.modules | programLevelRange }}</span>\n        </div>\n      </div>\n      <p class=\"mat-body-2 p-t-25 text-black-opacity-06\">\n        {{ course?.description }}\n      </p>\n    </mat-card>\n  </div>\n</section>\n"
        },
        {
            "name": "CoursesPageComponent",
            "id": "component-CoursesPageComponent-b6a019249297df7af215a281f3652d83",
            "file": "src/app/lms/pages/courses-page/courses-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-courses-page",
            "styleUrls": [
                "./courses-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./courses-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "courses$",
                    "defaultValue": "this.lmsService.getPrograms()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "onCourseDetail",
                    "args": [
                        {
                            "name": "courseId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "courseId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { LMSService } from 'app/@core/services/lms.service';\n\n@Component({\n    selector: 'app-courses-page',\n    templateUrl: './courses-page.component.html',\n    styleUrls: ['./courses-page.component.scss'],\n})\nexport class CoursesPageComponent {\n    courses$ = this.lmsService.getPrograms();\n\n    constructor(private lmsService: LMSService, private router: Router, private route: ActivatedRoute) {}\n\n    onCourseDetail(courseId: string) {\n        this.router.navigate([courseId], { relativeTo: this.route });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./courses-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "lmsService",
                        "type": "LMSService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "lmsService",
                        "type": "LMSService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<ng-template tpAttach=\"topBarStart\">\n  <app-eslo-letter-logo></app-eslo-letter-logo>\n  <app-top-bar-title text=\"Courses\"></app-top-bar-title>\n</ng-template>\n\n<app-courses-list\n  [courses]=\"courses$ | async\"\n  (courseDetailEvent)=\"onCourseDetail($event)\"\n></app-courses-list>\n"
        },
        {
            "name": "CreateAccountFormComponent",
            "id": "component-CreateAccountFormComponent-6469fee69c5eb8ba5467f6b842c3c210",
            "file": "src/app/authentication/components/create-account-form/create-account-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-account-form",
            "styleUrls": [
                "./create-account-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./create-account-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "defaultEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "validateEmailEvent",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "createAccountForm",
                    "defaultValue": "this.fb.group({\n        email: this.fb.control('', [Validators.required, Validators.email]),\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onValidateEmail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { UserService } from 'app/@core/services/user.service';\n\n@Component({\n    selector: 'app-create-account-form',\n    templateUrl: './create-account-form.component.html',\n    styleUrls: ['./create-account-form.component.scss'],\n})\nexport class CreateAccountFormComponent implements OnChanges {\n    @Input() defaultEmail: string;\n\n    @Output() validateEmailEvent = new EventEmitter<string>();\n\n    createAccountForm = this.fb.group({\n        email: this.fb.control('', [Validators.required, Validators.email]),\n    });\n\n    constructor(private fb: FormBuilder, private userService: UserService) {}\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes?.defaultEmail?.currentValue) {\n            const email = decodeURI(changes?.defaultEmail?.currentValue);\n            this.createAccountForm.patchValue({ email });\n            this.onValidateEmail();\n        }\n    }\n\n    onValidateEmail() {\n        if (this.emailControl.invalid) {\n            return;\n        }\n        this.validateEmailEvent.emit(this.emailControl.value);\n    }\n\n    get emailControl() {\n        return this.createAccountForm.get('email') as FormControl;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./create-account-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "emailControl": {
                    "name": "emailControl",
                    "getSignature": {
                        "name": "emailControl",
                        "type": "",
                        "returnType": "",
                        "line": 36
                    }
                }
            },
            "templateData": "<form [formGroup]=\"createAccountForm\">\n  <div fxLayout=\"column\" fxLayoutAlign=\"start center\" fxLayoutGap=\"26px\">\n    <span class=\"mat-title\">Create your account</span>\n    <mat-form-field appearance=\"outline\" fxFlexAlign=\"stretch\">\n      <mat-label>Email</mat-label>\n      <input matInput formControlName=\"email\" [disableControl]=\"defaultEmail\" />\n    </mat-form-field>\n\n    <button\n      mat-flat-button\n      color=\"primary\"\n      type=\"button\"\n      [disabled]=\"emailControl?.invalid\"\n      (click)=\"onValidateEmail()\"\n    >\n      continue\n    </button>\n    <a mat-stroked-button color=\"primary\" [routerLink]=\"'/auth/login'\"> Go back to login </a>\n  </div>\n</form>\n"
        },
        {
            "name": "CreateAccountPageComponent",
            "id": "component-CreateAccountPageComponent-9b508b4ecf3fa51009f1d0dab2f4c250",
            "file": "src/app/authentication/pages/create-account-page/create-account-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-account-page",
            "styleUrls": [
                "./create-account-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./create-account-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onValidateEmail",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { UserService } from 'app/@core/services/user.service';\n\n@Component({\n    selector: 'app-create-account-page',\n    templateUrl: './create-account-page.component.html',\n    styleUrls: ['./create-account-page.component.scss'],\n})\nexport class CreateAccountPageComponent implements OnInit {\n    email: string;\n\n    constructor(private route: ActivatedRoute, private userService: UserService, private router: Router) {}\n\n    ngOnInit() {\n        this.email = this.route.snapshot.queryParams?.email;\n    }\n\n    onValidateEmail(email: string) {\n        this.userService.validateEmail(email).subscribe({\n            next: (res) => {\n                if (res?.message === `E-mail ${email} is already registered.`) {\n                    this.router.navigate(['/auth/login'], { queryParams: { email } });\n                }\n            },\n            error: (err) => {\n                this.router.navigate(['/auth/register'], { queryParams: { email } });\n            },\n        });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./create-account-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-auth-layout>\n  <app-create-account-form [defaultEmail]=\"email\" (validateEmailEvent)=\"onValidateEmail($event)\"></app-create-account-form>\n</app-auth-layout>\n"
        },
        {
            "name": "CustomStepperComponent",
            "id": "component-CustomStepperComponent-772ed661e9a8a111f8c509d9735cf5e2",
            "file": "src/app/@shared/components/custom-stepper/custom-stepper.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: CdkStepper, useExisting: CustomStepperComponent }",
                    "type": "component"
                }
            ],
            "selector": "app-custom-stepper",
            "styleUrls": [
                "./custom-stepper.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./custom-stepper.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "hasAudio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "hasWarmUp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleKeyboardEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:keydown ', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectStepByIndex",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:keydown ",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CdkStepper } from '@angular/cdk/stepper';\nimport { Component, HostListener, Input } from '@angular/core';\n\n@Component({\n    selector: 'app-custom-stepper',\n    templateUrl: './custom-stepper.component.html',\n    styleUrls: ['./custom-stepper.component.scss'],\n    providers: [{ provide: CdkStepper, useExisting: CustomStepperComponent }],\n})\nexport class CustomStepperComponent extends CdkStepper {\n    @Input() hasWarmUp: boolean;\n    @Input() hasAudio: boolean;\n\n    @HostListener('document:keydown ', ['$event'])\n    handleKeyboardEvent(event: KeyboardEvent) {\n        if (event.key === 'ArrowUp') {\n            this.previous();\n        }\n        if (event.key === 'ArrowDown') {\n            this.next();\n        }\n    }\n\n    selectStepByIndex(index: number): void {\n        this.selectedIndex = index;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n@use '~@angular/flex-layout/mq' as mq;\n@use '../../../../styles/abstracts/variables' as vars;\n\n.stepper__navigation {\n    position: fixed;\n    top: 120px;\n    bottom: 56px;\n    padding: 5px;\n\n    &--has-audio {\n        bottom: 125px;\n    }\n\n    @include mq.layout-bp(gt-xs) {\n        position: fixed;\n        top: 100px;\n        bottom: 0;\n\n        &--has-audio {\n            bottom: 65px;\n        }\n    }\n}\n\n@mixin custom-stepper-theme($theme) {\n    $primary: mat.get-color-from-palette(map-get($theme, primary), 500);\n    $accent: mat.get-color-from-palette(map-get($theme, accent), 300);\n\n    .custom-stepper__step-number {\n        cursor: pointer;\n        border-radius: 50%;\n        width: 30px;\n        height: 30px;\n        padding: 5px;\n\n        border: 2px solid vars.$text-black-fade;\n        color: vars.$text-black-fade;\n        text-align: center;\n\n        &--active {\n            border: 2px solid $primary;\n            color: $primary;\n        }\n    }\n\n    .custom-stepper__content {\n        width: 100vw;\n        overflow-y: auto;\n        overflow-x: hidden;\n    }\n\n    .custom-stepper__counter {\n        color: $primary;\n    }\n}\n",
                    "styleUrl": "./custom-stepper.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "CdkStepper",
            "templateData": "<section fxLayout=\"row\">\n  <div\n    fxLayout=\"column\"\n    fxLayoutAlign=\"space-between center\"\n    class=\"stepper__navigation\"\n    [class.stepper__navigation--has-audio]=\"hasAudio\"\n  >\n    <div fxLayout=\"column\" fxLayoutAlign=\"center center\" fxLayoutGap=\"15px\">\n      <div\n        class=\"custom-stepper__step-number\"\n        [class.custom-stepper__step-number--active]=\"selectedIndex === i\"\n        *ngFor=\"let step of steps; let i = index; let first = first\"\n        (click)=\"selectStepByIndex(i)\"\n        fxLayout\n        fxLayoutAlign=\"center center\"\n      >\n        <ng-container *ngIf=\"hasWarmUp\">\n          <mat-icon *ngIf=\"first\">whatshot</mat-icon>\n          <span *ngIf=\"!first\">{{ i }}</span>\n        </ng-container>\n        <ng-container *ngIf=\"!hasWarmUp\">\n          <span>{{ i + 1 }}</span>\n        </ng-container>\n      </div>\n    </div>\n  </div>\n\n  <div fxLayout fxLayoutAlign=\"center center\" class=\"custom-stepper__content\" >\n    <div [ngTemplateOutlet]=\"selected ? selected.content : null\"></div>\n  </div>\n</section>\n"
        },
        {
            "name": "DashboardPageComponent",
            "id": "component-DashboardPageComponent-b81caefb38d46baeeb112f6faf123fb5",
            "file": "src/app/dashboard/pages/dashboard-page/dashboard-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard-page",
            "styleUrls": [
                "./dashboard-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ENROLLMENT_CARD_TYPES",
                    "defaultValue": "ENROLLMENT_CARD_TYPES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "hasAdminRole",
                    "defaultValue": "this.userService.hasRole('admin')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "hasStudentRole",
                    "defaultValue": "this.userService.hasRole('student')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "hasTeacherRole",
                    "defaultValue": "this.userService.hasRole('teacher')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "pendingEnrollments$",
                    "defaultValue": "this.classroomService\n        .getClassroom$()\n        .pipe(\n            map(({ studentEnrollments }) =>\n                studentEnrollments.filter((enrollment) => enrollment.status === ENROLLMENT_STATUS.PENDING),\n            ),\n        )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "studentDashboard$",
                    "defaultValue": "this.dashboardService.getStudentDashboard().pipe(\n        map(({ nextEvent }) => {\n            return { nextEvent };\n        }),\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "teacherDashboard$",
                    "defaultValue": "this.dashboardService.getTeacherDashboard().pipe(\n        map((teacherDashboard) => {\n            const nextEvents = teacherDashboard.nextEvents\n                .map((scheduleItem) => {\n                    const startDateTime = parseInt(scheduleItem.startDateTime, 10);\n                    const startDate = new Date(startDateTime);\n                    const time = Intl.DateTimeFormat('pt-br', {\n                        hour: 'numeric',\n                        minute: 'numeric',\n                    }).format(startDate);\n\n                    const enrollmentSource = {\n                        id: scheduleItem?.enrollment?.id || scheduleItem?.studyGroup?.id,\n                        type: scheduleItem?.enrollment?.id ? 'ENROLLMENT' : 'STUDY_GROUP',\n                    };\n\n                    return {\n                        name: scheduleItem.title,\n                        time,\n                        startDateTime,\n                        enrollmentSource,\n                    };\n                })\n                .sort((a, b) => a.startDateTime - b.startDateTime);\n\n            const subscriptionsRenewals = teacherDashboard.students.reduce((acc, currentStudent) => {\n                const subscriptions = currentStudent.subscriptions.map((subscription) => {\n                    const today = new Date();\n                    const renewalDate = new Date(subscription.renewalDate);\n                    const time = `${differenceInDays(renewalDate, today)} days`;\n                    return {\n                        name: `${currentStudent.firstName} ${currentStudent.familyName}`,\n                        time,\n                        enrollments: currentStudent.enrollments,\n                    };\n                });\n\n                return [...acc, ...subscriptions];\n            }, []);\n\n            return { nextEvents, subscriptionsRenewals };\n        }),\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methodsClass": [
                {
                    "name": "onAcceptEnrollment",
                    "args": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onGoTo",
                    "args": [
                        {
                            "name": "content",
                            "type": "ITeacherCardContent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "ITeacherCardContent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Enrollment, ENROLLMENT_STATUS } from 'app/@core/models/enrollment.model';\nimport { ClassroomService } from 'app/@core/services/classroom.service';\nimport { DashboardService } from 'app/@core/services/dashboard.service';\nimport { UserService } from 'app/@core/services/user.service';\nimport { differenceInDays } from 'date-fns';\nimport { map, take } from 'rxjs/operators';\n\nimport { ENROLLMENT_CARD_TYPES } from './../../../@shared/components/enrollment-card/enrollment-card.component';\n\nexport interface ITeacherCardContent {\n    name: string;\n    time: string;\n    startDateTime?: number;\n    enrollmentSource?: {\n        id: string;\n        type: string;\n    };\n    enrollments?: Enrollment[];\n}\n\n@Component({\n    selector: 'app-dashboard-page',\n    templateUrl: './dashboard-page.component.html',\n    styleUrls: ['./dashboard-page.component.scss'],\n})\nexport class DashboardPageComponent {\n    ENROLLMENT_CARD_TYPES = ENROLLMENT_CARD_TYPES;\n\n    hasAdminRole = this.userService.hasRole('admin');\n    hasTeacherRole = this.userService.hasRole('teacher');\n    hasStudentRole = this.userService.hasRole('student');\n\n    pendingEnrollments$ = this.classroomService\n        .getClassroom$()\n        .pipe(\n            map(({ studentEnrollments }) =>\n                studentEnrollments.filter((enrollment) => enrollment.status === ENROLLMENT_STATUS.PENDING),\n            ),\n        );\n\n    teacherDashboard$ = this.dashboardService.getTeacherDashboard().pipe(\n        map((teacherDashboard) => {\n            const nextEvents = teacherDashboard.nextEvents\n                .map((scheduleItem) => {\n                    const startDateTime = parseInt(scheduleItem.startDateTime, 10);\n                    const startDate = new Date(startDateTime);\n                    const time = Intl.DateTimeFormat('pt-br', {\n                        hour: 'numeric',\n                        minute: 'numeric',\n                    }).format(startDate);\n\n                    const enrollmentSource = {\n                        id: scheduleItem?.enrollment?.id || scheduleItem?.studyGroup?.id,\n                        type: scheduleItem?.enrollment?.id ? 'ENROLLMENT' : 'STUDY_GROUP',\n                    };\n\n                    return {\n                        name: scheduleItem.title,\n                        time,\n                        startDateTime,\n                        enrollmentSource,\n                    };\n                })\n                .sort((a, b) => a.startDateTime - b.startDateTime);\n\n            const subscriptionsRenewals = teacherDashboard.students.reduce((acc, currentStudent) => {\n                const subscriptions = currentStudent.subscriptions.map((subscription) => {\n                    const today = new Date();\n                    const renewalDate = new Date(subscription.renewalDate);\n                    const time = `${differenceInDays(renewalDate, today)} days`;\n                    return {\n                        name: `${currentStudent.firstName} ${currentStudent.familyName}`,\n                        time,\n                        enrollments: currentStudent.enrollments,\n                    };\n                });\n\n                return [...acc, ...subscriptions];\n            }, []);\n\n            return { nextEvents, subscriptionsRenewals };\n        }),\n    );\n\n    studentDashboard$ = this.dashboardService.getStudentDashboard().pipe(\n        map(({ nextEvent }) => {\n            return { nextEvent };\n        }),\n    );\n\n    constructor(\n        private classroomService: ClassroomService,\n        private userService: UserService,\n        private dashboardService: DashboardService,\n        private router: Router,\n    ) {}\n\n    onAcceptEnrollment({ action, enrollment }: { action: string; enrollment }) {\n        if (action === 'decline') {\n            this.classroomService.cancelEnrollment(enrollment.id).pipe(take(1)).subscribe();\n            return;\n        }\n\n        this.classroomService.activateEnrollment(enrollment.id).pipe(take(1)).subscribe();\n    }\n\n    onGoTo(content: ITeacherCardContent) {\n        if (content?.enrollments) {\n            const { name } = content;\n\n            this.router.navigate(['/classroom/students'], { fragment: name.replace(/ /g, '') });\n        }\n\n        if (content?.enrollmentSource) {\n            const { id, type } = content?.enrollmentSource;\n            const isGroup = type === 'STUDY_GROUP';\n            const path = isGroup ? 'groups' : 'enrollments';\n            const schedulePath = isGroup ? 'schedule' : '';\n\n            this.router.navigate(['/classroom', path, id, schedulePath]);\n            return;\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dashboard-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "classroomService",
                        "type": "ClassroomService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dashboardService",
                        "type": "DashboardService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 91,
                "jsdoctags": [
                    {
                        "name": "classroomService",
                        "type": "ClassroomService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dashboardService",
                        "type": "DashboardService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<ng-template tpAttach=\"topBarStart\">\n  <app-top-bar-title text=\"Panel\"></app-top-bar-title>\n</ng-template>\n\n<!-- TEACHER DASHBOARD -->\n<div\n  fxLayout=\"column\"\n  fxLayoutAlign.gt-xs=\"center center\"\n  fxLayoutAlign.xs=\"center stretch\"\n  fxLayoutGap=\"24px\"\n  style=\"padding: 32px 8px\"\n  *ngIf=\"hasAdminRole || hasTeacherRole\"\n>\n  <ng-container *ngIf=\"teacherDashboard$ | async as teacherDashboard\">\n    <!-- TODAY CLASSES AND LICENSES EXPIRING -->\n    <div fxLayout.gt-sm=\"row\" fxLayout=\"column\" fxLayoutGap=\"32px\">\n      <div>\n        <app-teacher-dashboard-card\n          icon=\"schedule\"\n          title=\"Today classes\"\n          emptyMessage=\"There are no classes today\"\n          [contentList]=\"teacherDashboard?.nextEvents\"\n          (goToEvent)=\"onGoTo($event)\"\n        >\n        </app-teacher-dashboard-card>\n      </div>\n\n      <div>\n        <app-teacher-dashboard-card\n          icon=\"hourglass_bottom\"\n          title=\"Subscription Renewals\"\n          emptyMessage=\"No subscription Renewals\"\n          [contentList]=\"teacherDashboard?.subscriptionsRenewals\"\n          (goToEvent)=\"onGoTo($event)\"\n        >\n        </app-teacher-dashboard-card>\n      </div>\n    </div>\n\n    <!-- TURNED IN HOMEWORKS AND OVERDUE TASKS -->\n    <!-- <div fxLayout.gt-sm=\"row\" fxLayout=\"column\" fxLayoutGap=\"32px\">\n    <div>\n      <app-teacher-dashboard-card\n        icon=\"assignment_turned_in\"\n        title=\"Turned In\"\n        emptyMessage=\"No turned in homeworks\"\n      >\n      </app-teacher-dashboard-card>\n    </div>\n\n    <div>\n      <app-teacher-dashboard-card\n        icon=\"assignment_late\"\n        title=\"Overdue tasks\"\n        emptyMessage=\"No overdue tasks\"\n      >\n      </app-teacher-dashboard-card>\n    </div>\n  </div> -->\n  </ng-container>\n</div>\n\n<!-- STUDENT DASHBOARD -->\n<div\n  fxLayout=\"column\"\n  fxLayoutAlign.gt-xs=\"center center\"\n  fxLayoutAlign.xs=\"center stretch\"\n  fxLayoutGap=\"24px\"\n  style=\"padding: 32px 8px\"\n  *ngIf=\"hasAdminRole || hasStudentRole\"\n>\n  <ng-container *ngIf=\"studentDashboard$ | async as studentDashboard\">\n    <!-- PENDING ENROLLMENTS AND SUBSCRIPTION RENEWAL -->\n    <div *ngIf=\"pendingEnrollments$ | async as pendingEnrollments\">\n      <div fxLayout.gt-sm=\"row\" fxLayout=\"column\" fxLayoutGap=\"32px\">\n        <div *ngIf=\"pendingEnrollments.length > 0\">\n          <p class=\"mat-title text-center\">Pending Enrollments</p>\n          <div *ngFor=\"let enrollment of pendingEnrollments; let i = index\">\n            <app-enrollment-card\n              [enrollment]=\"enrollment\"\n              (acceptEnrollmentEvent)=\"onAcceptEnrollment($event)\"\n            ></app-enrollment-card>\n          </div>\n        </div>\n      </div>\n\n      <!-- <div>\n        <p class=\"mat-title text-center\">Subscriptions Renewal</p>\n        <app-enrollment-card\n          [type]=\"ENROLLMENT_CARD_TYPES.SUBSCRIPTION_RENEWAL\"\n        ></app-enrollment-card>\n      </div> -->\n    </div>\n\n    <!-- CURRENT HOMEWORK AND NEXT CLASS -->\n    <div fxLayout.gt-sm=\"row\" fxLayout=\"column\" fxLayoutGap=\"32px\">\n      <!-- <div>\n        <p class=\"mat-title text-center\">Current Homework</p>\n        <app-enrollment-card\n          [enrollment]=\"nextClassEnrollment\"\n          [type]=\"ENROLLMENT_CARD_TYPES.CURRENT_HOMEWORK\"\n        ></app-enrollment-card>\n      </div> -->\n\n      <div *ngIf=\"studentDashboard?.nextEvent\">\n        <p class=\"mat-title text-center\">Next Class</p>\n        <app-enrollment-card\n          [enrollment]=\"studentDashboard?.nextEvent?.enrollment\"\n          [studyGroup]=\"studentDashboard?.nextEvent?.studyGroup\"\n          [nextEvent]=\"studentDashboard?.nextEvent\"\n          [type]=\"ENROLLMENT_CARD_TYPES.NEXT_CLASS\"\n        ></app-enrollment-card>\n      </div>\n    </div>\n  </ng-container>\n</div>\n"
        },
        {
            "name": "EditEventBottomSheetComponent",
            "id": "component-EditEventBottomSheetComponent-c7d2d8be3800de59c567ddf65a70b29d",
            "file": "src/app/calendar/components/edit-event-bottom-sheet/edit-event-bottom-sheet.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-event-bottom-sheet",
            "styleUrls": [
                "./edit-event-bottom-sheet.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-event-bottom-sheet.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "today",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "onClose",
                    "args": [
                        {
                            "name": "refresh",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "refresh",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onToday",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onWeeklyAvailability",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CalendarEvent } from 'angular-calendar';\nimport { Component, Inject } from '@angular/core';\nimport { MatBottomSheetRef, MAT_BOTTOM_SHEET_DATA } from '@angular/material/bottom-sheet';\nimport { MatDialog } from '@angular/material/dialog';\nimport { WeeklyAvailabilityComponent } from 'app/@shared/components/calendar/weekly-availability/weekly-availability.component';\n\n@Component({\n    selector: 'app-edit-event-bottom-sheet',\n    templateUrl: './edit-event-bottom-sheet.component.html',\n    styleUrls: ['./edit-event-bottom-sheet.component.scss'],\n})\nexport class EditEventBottomSheetComponent {\n    today: Date;\n\n    constructor(\n        @Inject(MAT_BOTTOM_SHEET_DATA) private data: { event: CalendarEvent },\n        private bottomSheetRef: MatBottomSheetRef<EditEventBottomSheetComponent>,\n        private dialog: MatDialog,\n    ) {}\n\n    onClose(refresh?: boolean): void {\n        this.bottomSheetRef.dismiss(refresh);\n    }\n\n    onWeeklyAvailability() {\n        this.dialog.open(WeeklyAvailabilityComponent, {\n            panelClass: 'dialog-w-100',\n            position: {\n                left: '10px',\n            },\n        });\n    }\n\n    onToday() {\n        this.today = new Date();\n    }\n\n    get event() {\n        return this.data?.event;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n@use '~@angular/flex-layout/mq' as mq;\n\n@mixin edit-event-bottom-sheet-theme($theme) {\n    $primary-600: mat.get-color-from-palette(map-get($theme, primary), 600);\n    $accent: mat.get-color-from-palette(map-get($theme, accent), 200);\n    $background: mat.get-color-from-palette(map-get($theme, background), card);\n\n    .edit-event-bottom-sheet {\n        &__container {\n            background-color: $primary-600;\n            height: 100%;\n\n            &__buttons {\n                padding: 10px 10px 0 10px;\n            }\n\n            &__content {\n                background-color: $background;\n                height: 100%;\n                border-radius: 25px 25px 0 0;\n                margin-top: 20px;\n                padding: 16px;\n                padding-bottom: 30px;\n\n                &__form {\n                    display: grid;\n                    grid-template-columns: 1fr 1fr 1fr;\n                    grid-gap: 85px;\n                    justify-items: center;\n\n                    &__events {\n                        margin-top: 20px;\n                        overflow-y: auto;\n                        overflow-x: hidden !important;\n                        max-height: 400px !important;\n                    }\n\n                    &__add-schedule {\n                        margin-top: 24px;\n\n                        &--has-event {\n                            margin-right: 40px;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    .link {\n        color: $accent;\n        text-decoration: none;\n        cursor: pointer;\n    }\n\n    .white:not(:disabled) {\n        color: $background;\n        .mat-checkbox-frame {\n            border-color: $background !important;\n        }\n    }\n\n    .h-calc {\n        height: calc(100% - 100px);\n    }\n\n    .h-100 {\n        height: 100%;\n    }\n\n    .w-100 {\n        width: 100%;\n    }\n}\n",
                    "styleUrl": "./edit-event-bottom-sheet.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bottomSheetRef",
                        "type": "MatBottomSheetRef<EditEventBottomSheetComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bottomSheetRef",
                        "type": "MatBottomSheetRef<EditEventBottomSheetComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "event": {
                    "name": "event",
                    "getSignature": {
                        "name": "event",
                        "type": "",
                        "returnType": "",
                        "line": 38
                    }
                }
            },
            "templateData": "<div class=\"edit-event-bottom-sheet__container\">\n  <div\n    class=\"edit-event-bottom-sheet__container__buttons\"\n    fxLayout=\"row\"\n    fxLayoutAlign=\"space-between center\"\n  >\n    <button mat-icon-button class=\"white\" (click)=\"onClose()\">\n      <mat-icon>close</mat-icon>\n    </button>\n\n    <div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"10px\">\n      <button mat-icon-button class=\"white\" (click)=\"onWeeklyAvailability()\">\n        <mat-icon>date_range</mat-icon>\n      </button>\n\n      <button mat-icon-button class=\"white\" (click)=\"onToday()\">\n        <mat-icon>today</mat-icon>\n      </button>\n    </div>\n  </div>\n\n  <div class=\"edit-event-bottom-sheet__container__content mat-elevation-z4\">\n    <app-edit-event [event]=\"event\" [today]=\"today\" (closeEvent)=\"onClose(true)\"></app-edit-event>\n  </div>\n</div>\n"
        },
        {
            "name": "EditEventComponent",
            "id": "component-EditEventComponent-644e664234ce0eb1e2500b727ad54535",
            "file": "src/app/calendar/components/edit-event/edit-event.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-event",
            "styleUrls": [
                "./edit-event.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-event.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "CalendarEvent"
                },
                {
                    "name": "today",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "Date"
                }
            ],
            "outputsClass": [
                {
                    "name": "closeEvent",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "calendar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatCalendar<Date>",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatCalendar, {static: false}"
                        }
                    ]
                },
                {
                    "name": "eventEnd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "eventStart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "lessonFinished",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "minutes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "selectedDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "selectedMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onConfirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelect",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTimeEnd",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTimeStart",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DatePipe } from '@angular/common';\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild } from '@angular/core';\nimport { DateAdapter } from '@angular/material/core';\nimport { MatCalendar } from '@angular/material/datepicker';\nimport { MatDialog } from '@angular/material/dialog';\nimport { CalendarEvent } from 'angular-calendar';\nimport { EventOccurrence, IEventOccurrenceInput } from 'app/@core/models/event-occurrence.model';\nimport { CalendarService } from 'app/@core/services/calendar.service';\nimport {\n    ModalConfirmationComponent,\n    ModalConfirmationDataOptions,\n} from 'app/@shared/components/modal-confirmation/modal-confirmation.component';\nimport { EMPTY } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-edit-event',\n    templateUrl: './edit-event.component.html',\n    styleUrls: ['./edit-event.component.scss'],\n})\nexport class EditEventComponent implements OnInit, OnChanges {\n    eventStart: string;\n    eventEnd: string;\n\n    lessonFinished = false;\n    minutes: number;\n\n    selectedDate: any;\n\n    @Input() event!: CalendarEvent;\n\n    @Input() today!: Date;\n    selectedMonth: Date;\n\n    @Output() closeEvent = new EventEmitter<any>();\n\n    @ViewChild(MatCalendar, { static: false }) calendar: MatCalendar<Date>;\n\n    constructor(\n        private datePipe: DatePipe,\n        private calendarService: CalendarService,\n        private dialog: MatDialog,\n        private dateAdapter: DateAdapter<any>,\n    ) {}\n\n    ngOnInit() {\n        const { start, end } = this.event;\n        this.eventStart = this.datePipe.transform(start, 'HH:mm');\n        this.eventEnd = this.datePipe.transform(end, 'HH:mm');\n\n        this.selectedDate = start;\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        const { today: todayChanges } = changes;\n\n        if (todayChanges?.currentValue) {\n            // this.selectedDate = todayChanges.currentValue;\n            this.calendar.activeDate = this.dateAdapter.today();\n        }\n    }\n\n    onSelect(event) {\n        this.selectedDate = event;\n    }\n\n    updateTimeStart(value: string): void {\n        this.eventStart = value;\n    }\n\n    updateTimeEnd(value: string): void {\n        this.eventEnd = value;\n    }\n\n    onConfirm() {\n        const {\n            meta: {\n                sourceId,\n                sourceType,\n                availabilityType,\n                description,\n                id,\n                recurringEventId,\n                sendNotifications,\n                startDateTime: originalStartDateTimeUnparsed,\n                startTimeZone: originalStartTimeZone,\n                title,\n                visibility,\n            },\n        } = this.event;\n\n        const originalStartDateTime = new Date(+originalStartDateTimeUnparsed).toISOString();\n\n        const selectedDate = this.selectedDate instanceof Date ? this.selectedDate : this.selectedDate.toDate();\n\n        const [startHour, startMinute] = this.eventStart.split(':');\n        const newStartDate = new Date(selectedDate);\n        newStartDate.setHours(+startHour, +startMinute);\n        const startDateTime = newStartDate.toISOString();\n\n        const [endHour, endMinute] = this.eventEnd.split(':');\n        const newEndDate = new Date(selectedDate);\n        newEndDate.setHours(+endHour, +endMinute);\n        const endDateTime = newEndDate.toISOString();\n\n        let browserTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n        if (!browserTimeZone) {\n            // default to SP if not found\n            browserTimeZone = 'America/Sao_Paulo';\n        }\n\n        const changeSpecificEventInput: IEventOccurrenceInput = {\n            status: 'CONFIRMED',\n            id,\n            recurringEventId,\n            originalStartDateTime,\n            originalStartTimeZone,\n            sourceType,\n            sourceId,\n            title,\n            description,\n            availabilityType,\n            visibility,\n            sendNotifications,\n            startDateTime,\n            startTimeZone: browserTimeZone,\n            endDateTime,\n            endTimeZone: browserTimeZone,\n        };\n\n        const dialogRef = this.dialog.open<ModalConfirmationComponent, ModalConfirmationDataOptions>(\n            ModalConfirmationComponent,\n            {\n                restoreFocus: false,\n                disableClose: true,\n                data: {\n                    title: 'Update event',\n                    message: 'Are you sure you want to change this event?',\n                },\n            },\n        );\n\n        dialogRef\n            .afterClosed()\n            .pipe(\n                take(1),\n                switchMap((confirm: boolean) => {\n                    if (!confirm) {\n                        return EMPTY;\n                    }\n\n                    return this.calendarService.changeSpecificEvent(changeSpecificEventInput);\n                }),\n            )\n            .subscribe({\n                next: (changeSpecificEvent: EventOccurrence) => {\n                    this.closeEvent.emit();\n                },\n            });\n    }\n\n    onDelete() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mb-16 {\n    margin-bottom: 16px !important;\n}\n\n.pb-20 {\n    padding-bottom: 20px;\n}\n\n.text-fade-color {\n    color: rgba(0, 0, 0, 0.6);\n}\n\n.time-field {\n    display: flex;\n    align-content: center;\n    justify-content: center;\n    border: 1px solid rgba(0, 0, 0, 0.12);\n    border-radius: 13px;\n    padding: 0 3px 0 10px;\n    position: relative;\n\n    &__input {\n        border: none;\n        outline: none;\n        color: rgba(0, 0, 0, 0.6);\n        font-size: 15px;\n        font-family: 'Comfortaa';\n\n        &::-webkit-calendar-picker-indicator {\n            display: none;\n        }\n    }\n\n    &__hint {\n        position: absolute;\n        top: 40px;\n        left: 0;\n    }\n}\n\n.session-finished {\n    cursor: pointer;\n    padding: 16px 10px;\n\n    &__label {\n        font-size: 14px;\n        user-select: none;\n    }\n}\n",
                    "styleUrl": "./edit-event.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "calendarService",
                        "type": "CalendarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dateAdapter",
                        "type": "DateAdapter<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "calendarService",
                        "type": "CalendarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dateAdapter",
                        "type": "DateAdapter<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<p class=\"mat-subheading-1 mb-16\">Edit event</p>\n<p class=\"mat-subheading-1 text-fade-color\">{{ event?.title }}</p>\n\n<mat-calendar\n  class=\"custom-mat-calendar\"\n  [selected]=\"selectedDate\"\n  (selectedChange)=\"onSelect($event)\"\n  [startAt]=\"selectedDate\"\n></mat-calendar>\n\n<div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"10px\" style=\"margin-bottom: 32px\">\n  <div class=\"time-field\">\n    <input\n      placeholder=\"Time\"\n      type=\"time\"\n      [ngModel]=\"eventStart\"\n      (ngModelChange)=\"updateTimeStart($event)\"\n      [step]=\"60 * 15\"\n      class=\"time-field__input\"\n    />\n    <button mat-icon-button color=\"primary\">\n      <mat-icon>schedule</mat-icon>\n    </button>\n  </div>\n\n  <div class=\"time-field\">\n    <input\n      placeholder=\"Time\"\n      type=\"time\"\n      [ngModel]=\"eventEnd\"\n      (ngModelChange)=\"updateTimeEnd($event)\"\n      [step]=\"60 * 15\"\n      class=\"time-field__input\"\n    />\n    <button mat-icon-button color=\"primary\">\n      <mat-icon>schedule</mat-icon>\n    </button>\n    <span class=\"time-field__hint mat-caption\" *ngIf=\"minutes > 0\">\n      {{ minutes | minutesToHours }}\n    </span>\n    <span class=\"time-field__hint mat-caption\" *ngIf=\"minutes < 0\">\n      End time is less than the start time\n    </span>\n  </div>\n</div>\n\n<div fxLayout fxLayoutAlign=\"space-between center\">\n  <button mat-button color=\"warn\" (click)=\"onDelete()\">delete event</button>\n  <button mat-button color=\"primary\" (click)=\"onConfirm()\">confirm</button>\n</div>\n"
        },
        {
            "name": "EditEventDialogComponent",
            "id": "component-EditEventDialogComponent-4664cd62a888b3e57724f4c3f356363a",
            "file": "src/app/calendar/components/edit-event-dialog/edit-event-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-event-dialog",
            "styleUrls": [
                "./edit-event-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-event-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClose",
                    "args": [
                        {
                            "name": "refresh",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "refresh",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { CalendarEvent } from 'angular-calendar';\n\n@Component({\n    selector: 'app-edit-event-dialog',\n    templateUrl: './edit-event-dialog.component.html',\n    styleUrls: ['./edit-event-dialog.component.scss'],\n})\nexport class EditEventDialogComponent {\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private data: { event: CalendarEvent },\n        private dialogRef: MatDialogRef<EditEventDialogComponent>,\n    ) {}\n\n    onClose(refresh?: boolean): void {\n        this.dialogRef.close(refresh);\n    }\n\n    get event() {\n        return this.data?.event;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./edit-event-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditEventDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditEventDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "event": {
                    "name": "event",
                    "getSignature": {
                        "name": "event",
                        "type": "",
                        "returnType": "",
                        "line": 20
                    }
                }
            },
            "templateData": "<app-edit-event [event]=\"event\" (closeEvent)=\"onClose(true)\"></app-edit-event>\n"
        },
        {
            "name": "EditEventInstanceComponent",
            "id": "component-EditEventInstanceComponent-d5f498f7b03bea2453c860f9152bb239",
            "file": "src/app/calendar/edit-event-instance/edit-event-instance.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-event-instance",
            "styleUrls": [
                "./edit-event-instance.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-event-instance.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "endDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CalendarEvent",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "eventForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "matDialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<EditEventInstanceComponent>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "startDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "createEventForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "initEventValues",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DatePipe } from '@angular/common';\nimport { Component, Inject } from '@angular/core';\nimport { FormGroup, FormControl, ValidationErrors, ValidatorFn } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { CalendarEvent } from 'angular-calendar';\n\n@Component({\n    selector: 'app-edit-event-instance',\n    templateUrl: './edit-event-instance.component.html',\n    styleUrls: ['./edit-event-instance.component.scss'],\n})\nexport class EditEventInstanceComponent {\n    event: CalendarEvent;\n    eventForm: FormGroup;\n    startDate: string;\n    endDate: string;\n\n    constructor(\n        public matDialogRef: MatDialogRef<EditEventInstanceComponent>,\n        private datePipe: DatePipe,\n        @Inject(MAT_DIALOG_DATA) private _data: any,\n    ) {\n        this.event = this._data.event;\n        this.initEventValues();\n        this.eventForm = this.createEventForm();\n    }\n\n    private initEventValues(): void {\n        // Format date and time\n        this.startDate = this.datePipe.transform(this.event.start, 'yyyy-MM-ddTHH:mm:ss');\n        this.endDate = this.datePipe.transform(this.event.end, 'yyyy-MM-ddTHH:mm:ss');\n    }\n\n    private createEventForm(): FormGroup {\n        return new FormGroup(\n            {\n                startDate: new FormControl(this.startDate),\n                endDate: new FormControl(this.endDate),\n            },\n            [ValidateEventTimes],\n        );\n    }\n}\n\n/**\n * Event validation\n *\n * @param eventFormGroup\n * @returns\n */\nconst ValidateEventTimes: ValidatorFn = (eventFormGroup: FormGroup): ValidationErrors | null => {\n    let validEventTime = true;\n    if (!eventFormGroup?.controls) {\n        validEventTime = false;\n    } else {\n        const startDateControl = eventFormGroup.get('startDate');\n        const startDateValue = new Date(startDateControl.value);\n\n        const endDateControl = eventFormGroup.get('endDate');\n        const endDateValue = new Date(endDateControl.value);\n\n        if (endDateValue <= startDateValue) {\n            validEventTime = false;\n        }\n    }\n\n    if (validEventTime) {\n        return null;\n    } else {\n        return { invalidEventTime: true };\n    }\n};\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-dialog-content {\n    margin: 0;\n}\n",
                    "styleUrl": "./edit-event-instance.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "matDialogRef",
                        "type": "MatDialogRef<EditEventInstanceComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "matDialogRef",
                        "type": "MatDialogRef<EditEventInstanceComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div *ngIf=\"event\">\n    <mat-toolbar class=\"mat-primary m-0\">\n        <mat-toolbar-row fxFlex fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n            <span class=\"title dialog-title\">{{event.title}}</span>\n            <button mat-icon-button (click)=\"matDialogRef.close()\" aria-label=\"Close dialog\">\n                <mat-icon>close</mat-icon>\n            </button>\n        </mat-toolbar-row>\n    </mat-toolbar>\n\n    <div mat-dialog-content class=\"pt-16 pb-16\" fusePerfectScrollbar>\n        <form name=\"eventForm\" [formGroup]=\"eventForm\" fxLayout=\"column\" fxFlex>\n            <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n                <mat-form-field appearance=\"outline\" class=\"pb-8 pr-sm-8\" fxFlex=\"50%\">\n                    <mat-label>Start</mat-label>\n                    <input matInput type=\"datetime-local\" [value]=\"startDate\" formControlName=\"startDate\">\n                </mat-form-field>\n                <mat-form-field appearance=\"outline\" class=\"pb-8 pr-sm-8\" fxFlex=\"50%\">\n                    <mat-label>End</mat-label>\n                    <input matInput type=\"datetime-local\" [value]=\"endDate\" formControlName=\"endDate\">\n                </mat-form-field>   \n            </div>\n            <div fxFlex fxLayout=\"row\">\n                <div fxFlex=\"50%\" fxLayout=\"column\" fxLayoutAlign=\"start center\">\n                    <button\n                        mat-button\n                        color=\"primary\"\n                        aria-label=\"RESCHEDULE\"\n                        [disabled]=\"eventForm.invalid\"\n                        (click)=\"matDialogRef.close(['save', eventForm])\"\n                    >\n                        RESCHEDULE\n                    </button>\n\n                    <span class=\"warn-500-fg mat-caption\" *ngIf=\"eventForm.invalid\">Invalid start/end times</span>\n                </div>\n\n\n                <div fxFlex=\"50%\" fxLayout=\"column\" fxLayoutAlign=\"start center\">\n                    <button\n                        mat-button\n                        color=\"warn\"\n                        aria-label=\"MARK ABSENT\"\n                        (click)=\"matDialogRef.close(['delete', undefined])\"\n                    >\n                        DELETE EVENT\n    \n                    </button>\n\n                    <span class=\"secondary-text mat-small\"><b>(Remove event from calendar)</b></span>\n                </div>\n            </div>\n        </form>\n\n    </div>\n</div>\n"
        },
        {
            "name": "EmptyListComponent",
            "id": "component-EmptyListComponent-733d296c7342f97c9c01c42b952906c5",
            "file": "src/app/classroom/components/empty-list/empty-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-empty-list",
            "styleUrls": [
                "./empty-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./empty-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-empty-list',\n    templateUrl: './empty-list.component.html',\n    styleUrls: ['./empty-list.component.scss'],\n})\nexport class EmptyListComponent {\n    constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n@use '~@angular/flex-layout/mq' as mq;\n\n\n@mixin empty-list-theme($theme) {\n    $primary: mat.get-color-from-palette(map-get($theme, primary));\n\n    .empty-list {\n    \n        margin-top: 130px;\n\n        &__content {\n            text-align: center;\n            padding: 16px;\n\n            @include mq.layout-bp(gt-xs) {\n                padding: 0;\n            }\n\n            &__title {\n                color: $primary;\n                font-size: 19px;\n                line-height: 24px;\n                letter-spacing: 0.15px;\n            }\n\n            &__button {\n                border-radius: 28px;\n                &:first-child {\n                    margin-right: 6px;\n                }\n\n                @include mq.layout-bp(gt-xs) {\n                    &:first-child {\n                        margin-right: 30px;\n                    }\n                }\n            }\n        }\n    }\n}\n",
                    "styleUrl": "./empty-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "templateData": "<div class=\"empty-list\" fxLayout fxLayoutAlign=\"center center\">\n  <div\n    class=\"empty-list__content\"\n    fxLayout=\"column\"\n    fxLayoutAlign=\"center center\"\n    fxLayoutGap=\"30px\"\n  >\n    <p class=\"empty-list__content__title\">Nothing more exciting <br/> than a clean slate, amirite?</p>\n    <img src=\"/assets/icons/empty-list.svg\" alt=\"empty list\" />\n  </div>\n</div>\n"
        },
        {
            "name": "EnrolledPageComponent",
            "id": "component-EnrolledPageComponent-661dfae63dc9b5f8b469b60d8a4b92aa",
            "file": "src/app/enrolled/pages/enrolled-page/enrolled-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-enrolled-page",
            "styleUrls": [
                "./enrolled-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./enrolled-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allStudentEnrollments$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Enrollment[]>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "navigationTabsConfig",
                    "defaultValue": "{\n        links: [\n            { path: 'active', icon: 'local_library' },\n            { path: 'archive', icon: 'archive' },\n        ],\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INavigationTabsConfig",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "routeStatus$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "studentEnrollmentsByStatus$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Enrollment[]>",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "goToEnrollment",
                    "args": [
                        {
                            "name": "enrollmentId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "enrollmentId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAcceptEnrollment",
                    "args": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\nimport { Enrollment, ENROLLMENT_STATUS } from 'app/@core/models/enrollment.model';\nimport { ClassroomService } from 'app/@core/services/classroom.service';\nimport { INavigationTabsConfig } from 'app/@shared/components/navigation-tabs/navigation-tabs.component';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, startWith, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-enrolled-page',\n    templateUrl: './enrolled-page.component.html',\n    styleUrls: ['./enrolled-page.component.scss'],\n})\nexport class EnrolledPageComponent implements OnInit {\n    navigationTabsConfig: INavigationTabsConfig = {\n        links: [\n            { path: 'active', icon: 'local_library' },\n            { path: 'archive', icon: 'archive' },\n        ],\n    };\n\n    allStudentEnrollments$: Observable<Enrollment[]>;\n    routeStatus$: Observable<string>;\n    studentEnrollmentsByStatus$: Observable<Enrollment[]>;\n\n    constructor(private classroomService: ClassroomService, private router: Router, private route: ActivatedRoute) {}\n\n    ngOnInit(): void {\n        this.routeStatus$ = this.router.events.pipe(\n            filter((evt) => evt instanceof NavigationEnd),\n            map(({ url }: NavigationEnd) => url.split('/').pop()),\n        );\n\n        this.allStudentEnrollments$ = this.classroomService\n            .getClassroom$()\n            .pipe(map((classroom) => classroom.studentEnrollments));\n\n        this.studentEnrollmentsByStatus$ = combineLatest([\n            this.routeStatus$.pipe(startWith(this.router.url.split('/').pop())),\n            this.allStudentEnrollments$,\n        ]).pipe(\n            map(([routeStatus, allEnrollments]) => {\n                const statuses =\n                    routeStatus === 'active'\n                        ? [ENROLLMENT_STATUS.ACTIVE, ENROLLMENT_STATUS.PENDING]\n                        : [ENROLLMENT_STATUS.CANCELLED, ENROLLMENT_STATUS.DELETED];\n\n                const filteredEnrollments = allEnrollments.filter((enrollment) => {\n                    return statuses.includes(enrollment.status);\n                });\n\n                return filteredEnrollments;\n            }),\n        );\n    }\n\n    goToEnrollment(enrollmentId: string): void {\n        this.router.navigate(['enrollment', enrollmentId], { relativeTo: this.route });\n    }\n\n    onAcceptEnrollment({ action, enrollment }: { action: string; enrollment: Enrollment }): void {\n        if (action === 'decline') {\n            this.classroomService.cancelEnrollment(enrollment.id).pipe(take(1)).subscribe();\n            return;\n        }\n\n        this.classroomService.activateEnrollment(enrollment.id).pipe(take(1)).subscribe();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./enrolled-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "classroomService",
                        "type": "ClassroomService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "classroomService",
                        "type": "ClassroomService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-template tpAttach=\"topBarStart\">\n  <app-eslo-letter-logo></app-eslo-letter-logo>\n  <app-top-bar-title text=\"Enrolled\"></app-top-bar-title>\n</ng-template>\n\n<ng-template tpAttach=\"topBarCenter\">\n  <app-navigation-tabs [navigationTabsConfig]=\"navigationTabsConfig\"></app-navigation-tabs>\n</ng-template>\n\n<div *ngIf=\"studentEnrollmentsByStatus$ | async as studentEnrollments\">\n  <app-student-enrollment-list\n    [enrollments]=\"studentEnrollments\"\n    (goToEnrollmentEvent)=\"goToEnrollment($event)\"\n    (acceptEnrollmentEvent)=\"onAcceptEnrollment($event)\"\n  ></app-student-enrollment-list>\n\n  <app-student-empty-enrollments\n    *ngIf=\"(routeStatus$ | async) === 'active' && studentEnrollments.length === 0\"\n    text=\"There are no active courses.\"\n  ></app-student-empty-enrollments>\n\n  <app-student-empty-enrollments\n    *ngIf=\"(routeStatus$ | async) === 'archive' && studentEnrollments.length === 0\"\n  ></app-student-empty-enrollments>\n</div>\n"
        },
        {
            "name": "EnrollmentCardComponent",
            "id": "component-EnrollmentCardComponent-11fad59370883205f60c14e067d1223f",
            "file": "src/app/@shared/components/enrollment-card/enrollment-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-enrollment-card",
            "styleUrls": [
                "./enrollment-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./enrollment-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "enrollment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "Enrollment"
                },
                {
                    "name": "nextEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventOccurrence"
                },
                {
                    "name": "studyGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "StudyGroup"
                },
                {
                    "name": "type",
                    "defaultValue": "ENROLLMENT_CARD_TYPES.ENROLLMENT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "ENROLLMENT_CARD_TYPES"
                }
            ],
            "outputsClass": [
                {
                    "name": "acceptEnrollmentEvent",
                    "defaultValue": "new EventEmitter<{ action: string; enrollment: Enrollment }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "ENROLLMENT_CARD_TYPES",
                    "defaultValue": "ENROLLMENT_CARD_TYPES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "ENROLLMENT_STATUS",
                    "defaultValue": "ENROLLMENT_STATUS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "hover",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "strokeColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onAcceptEnrollment",
                    "args": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { Enrollment, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { EventOccurrence } from 'app/@core/models/event-occurrence.model';\n\nimport { ENROLLMENT_STATUS } from './../../../@core/models/enrollment.model';\n\nexport enum ENROLLMENT_CARD_TYPES {\n    ENROLLMENT = 'ENROLLMENT',\n    SUBSCRIPTION_RENEWAL = 'SUBSCRIPTION_RENEWAL',\n    NEXT_CLASS = 'NEXT_CLASS',\n    CURRENT_HOMEWORK = 'CURRENT_HOMEWORK',\n}\n\n@Component({\n    selector: 'app-enrollment-card',\n    templateUrl: './enrollment-card.component.html',\n    styleUrls: ['./enrollment-card.component.scss'],\n})\nexport class EnrollmentCardComponent implements OnChanges {\n    @Input() enrollment: Enrollment;\n    @Input() studyGroup: StudyGroup;\n    @Input() nextEvent: EventOccurrence;\n    @Output() acceptEnrollmentEvent = new EventEmitter<{ action: string; enrollment: Enrollment }>();\n\n    @Input() type: ENROLLMENT_CARD_TYPES = ENROLLMENT_CARD_TYPES.ENROLLMENT;\n\n    ENROLLMENT_STATUS = ENROLLMENT_STATUS;\n    ENROLLMENT_CARD_TYPES = ENROLLMENT_CARD_TYPES;\n\n    color: string;\n    strokeColor: string;\n\n    hover = false;\n\n    constructor() {}\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes['enrollment']) {\n            const { currentValue } = changes['enrollment'];\n\n            if (currentValue) {\n                if (\n                    this.type === ENROLLMENT_CARD_TYPES.CURRENT_HOMEWORK ||\n                    this.type === ENROLLMENT_CARD_TYPES.NEXT_CLASS\n                ) {\n                    this.color = '#FFFFFF';\n                    this.strokeColor = '#F5F5F5';\n                    return;\n                }\n\n                this.color = this.enrollment.level.layoutSettings.primaryColour;\n                this.strokeColor = this.enrollment.level.layoutSettings.secondaryColour;\n            }\n        }\n    }\n\n    onAcceptEnrollment(action: string) {\n        this.acceptEnrollmentEvent.emit({ action, enrollment: this.enrollment });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/flex-layout/mq' as mq;\n\n.enrollment-card {\n    padding: 1.75rem 1rem 0.75rem 1rem;\n    position: relative;\n    z-index: 0;\n    height: 11.75rem;\n    border-radius: 14px;\n\n    @include mq.layout-bp(gt-xs) {\n        min-width: 21.5rem;\n    }\n\n    &__background {\n        width: 100%;\n        height: 100%;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        position: absolute;\n        top: 0;\n        left: 0;\n        z-index: -1;\n        overflow: hidden;\n    }\n}\n\nmat-icon {\n    font-size: 33px;\n    width: 26px;\n    height: 33px;\n}\n",
                    "styleUrl": "./enrollment-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 33
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<mat-card\n  class=\"enrollment-card mat-elevation-z2\"\n  [style.backgroundColor]=\"color\"\n  (mouseenter)=\"hover = true\"\n  (mouseleave)=\"hover = false\"\n  [class.mat-elevation-z8]=\"hover\"\n>\n  <div fxLayout=\"column\" fxLayoutAlign=\"space-between stretch\" style=\"height: 100%\">\n    <div\n      fxLayout=\"row\"\n      fxLayoutAlign=\"space-between center\"\n      *ngIf=\"\n        type === ENROLLMENT_CARD_TYPES.ENROLLMENT ||\n        type === ENROLLMENT_CARD_TYPES.SUBSCRIPTION_RENEWAL\n      \"\n    >\n      <div fxLayout=\"column\" fxLayoutAlign=\"start start\">\n        <span class=\"mat-overline\">{{ enrollment?.level?.module?.program?.name | uppercase }}</span>\n        <span class=\"mat-title\">{{ enrollment?.level?.label }}</span>\n      </div>\n      <mat-icon>{{ enrollment?.level?.module?.program?.icon }}</mat-icon>\n    </div>\n\n    <div\n      fxLayout=\"row\"\n      fxLayoutAlign=\"space-between center\"\n      *ngIf=\"\n        type === ENROLLMENT_CARD_TYPES.CURRENT_HOMEWORK || type === ENROLLMENT_CARD_TYPES.NEXT_CLASS\n      \"\n    >\n      <div fxLayout=\"column\" fxLayoutAlign=\"start start\">\n        <!-- <span class=\"mat-overline\">{{\n          enrollment?.level?.module?.program?.name + ' - ' + enrollment?.level?.label | uppercase\n        }}</span> -->\n        <span class=\"mat-overline\">{{\n          (enrollment?.level?.module?.program?.label || studyGroup?.level?.module?.program?.label) +\n            ' - ' +\n            (enrollment?.level?.label || studyGroup?.level?.label) | uppercase\n        }}</span>\n        <span\n          *ngIf=\"type === ENROLLMENT_CARD_TYPES.CURRENT_HOMEWORK\"\n          class=\"mat-title\"\n          style=\"max-width: 236px\"\n        >\n          current homework\n        </span>\n        <span\n          *ngIf=\"type === ENROLLMENT_CARD_TYPES.NEXT_CLASS\"\n          class=\"mat-title\"\n          style=\"max-width: 236px\"\n        >\n          {{ enrollment?.nextLesson?.title || studyGroup?.nextLesson?.title }}\n        </span>\n      </div>\n      <mat-icon>{{\n        enrollment?.level?.module?.program?.icon || studyGroup?.level?.module?.program?.icon\n      }}</mat-icon>\n    </div>\n\n    <div\n      *ngIf=\"\n        (type !== ENROLLMENT_CARD_TYPES.CURRENT_HOMEWORK &&\n          (enrollment?.status === ENROLLMENT_STATUS.ACTIVE ||\n            enrollment?.status === ENROLLMENT_STATUS.CANCELLED)) ||\n        studyGroup\n      \"\n      fxLayout=\"row\"\n      fxLayoutAlign=\"space-between center\"\n    >\n      <span\n        class=\"mat-overline\"\n        [fxFlexAlign]=\"type === ENROLLMENT_CARD_TYPES.NEXT_CLASS ? 'end' : ''\"\n      >\n        {{\n          enrollment?.classRecords || studyGroup?.studyGroupClassRecords | parseCompletedLessons\n        }}\n        /\n        {{ enrollment?.lessons?.length || studyGroup?.lessons?.length }}\n      </span>\n      <span *ngIf=\"type === ENROLLMENT_CARD_TYPES.ENROLLMENT\" class=\"mat-overline\">\n        {{ enrollment?.level?.code.split('-').pop() || studyGroup?.level?.code.split('-').pop() }}\n      </span>\n      <div\n        *ngIf=\"type === ENROLLMENT_CARD_TYPES.NEXT_CLASS\"\n        [innerHTML]=\"nextEvent?.startDateTime | formatNextClassDate | safe: 'html'\"\n        fxLayout=\"column\"\n        fxLayoutAlign=\"center center\"\n      ></div>\n      <span *ngIf=\"type === ENROLLMENT_CARD_TYPES.SUBSCRIPTION_RENEWAL\" class=\"mat-overline\">\n        expired date\n      </span>\n    </div>\n\n    <div\n      *ngIf=\"type === ENROLLMENT_CARD_TYPES.CURRENT_HOMEWORK\"\n      fxLayout=\"row\"\n      fxLayoutAlign=\"space-between center\"\n    >\n      <span class=\"mat-overline\">due date</span>\n      <span class=\"mat-overline\">homework</span>\n      <span class=\"mat-overline\">p. practice</span>\n      <mat-icon color=\"primary\">assignment_late</mat-icon>\n    </div>\n\n    <div\n      *ngIf=\"\n        type === ENROLLMENT_CARD_TYPES.ENROLLMENT &&\n        enrollment?.status === ENROLLMENT_STATUS.PENDING\n      \"\n      fxLayout=\"column\"\n      fxLayoutAlign=\"stretch center\"\n      fxLayoutGap=\"16px\"\n    >\n      <div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"32px\">\n        <button\n          mat-flat-button\n          [style.color]=\"strokeColor\"\n          (click)=\"onAcceptEnrollment('activate')\"\n        >\n          activate\n        </button>\n        <button mat-stroked-button (click)=\"onAcceptEnrollment('decline')\">decline</button>\n      </div>\n      <span class=\"mat-subheading-2\"\n        >Teacher {{ enrollment?.teacher?.firstName | titlecase }}\n        {{ enrollment?.teacher?.familyName | titlecase }}</span\n      >\n    </div>\n  </div>\n\n  <div class=\"enrollment-card__background\">\n    <app-svg-icon\n      *ngIf=\"enrollment?.level?.layoutSettings?.svgImageUrl as svg\"\n      [svg]=\"svg\"\n      [fill]=\"color\"\n      [stroke]=\"strokeColor\"\n      style=\"transform: rotate(-8deg); width: 12.5rem; height: 12.5rem\"\n    ></app-svg-icon>\n  </div>\n</mat-card>\n"
        },
        {
            "name": "EnrollmentDetailPageComponent",
            "id": "component-EnrollmentDetailPageComponent-778f74085ef2bab11c2f912daca4b1d6",
            "file": "src/app/classroom/pages/enrollment-detail-page/enrollment-detail-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-enrollment-detail-page",
            "styleUrls": [
                "./enrollment-detail-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./enrollment-detail-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "classInProgress$",
                    "defaultValue": "this.classroomService.classInProgress$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "enrollment$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Enrollment>",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "getEnrollment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onGoToLesson",
                    "args": [
                        {
                            "name": "lesson",
                            "type": "LessonRecordList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lesson",
                            "type": "LessonRecordList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onResumeClass",
                    "args": [
                        {
                            "name": "lesson",
                            "type": "Lesson",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lesson",
                            "type": "Lesson",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRevertClass",
                    "args": [
                        {
                            "name": "classRecordItem",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "enrollment",
                            "type": "Enrollment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isGroup",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "classRecordItem",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "enrollment",
                            "type": "Enrollment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isGroup",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRevertLesson",
                    "args": [
                        {
                            "name": "classRecordItem",
                            "type": "ClassRecordType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "enrollment",
                            "type": "Enrollment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "classRecordItem",
                            "type": "ClassRecordType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "enrollment",
                            "type": "Enrollment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onStartClass",
                    "args": [
                        {
                            "name": "enrollment",
                            "type": "Enrollment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lesson",
                            "type": "Lesson",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "enrollment",
                            "type": "Enrollment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lesson",
                            "type": "Lesson",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    IRevertFinishedClassStatusInput,\n    IClassroom,\n    IRevertLessonStatusInput,\n} from './../../../@core/services/classroom.service';\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Enrollment } from 'app/@core/models/enrollment.model';\nimport { Lesson } from 'app/@core/models/lesson.model';\nimport { ClassroomService, IStartClassInput } from 'app/@core/services/classroom.service';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    ModalConfirmationComponent,\n    ModalConfirmationDataOptions,\n} from 'app/@shared/components/modal-confirmation/modal-confirmation.component';\nimport { EMPTY, Observable } from 'rxjs';\nimport { ClassRecordType, LessonRecordList } from 'app/@core/models/class-record.model';\n\n@Component({\n    selector: 'app-enrollment-detail-page',\n    templateUrl: './enrollment-detail-page.component.html',\n    styleUrls: ['./enrollment-detail-page.component.scss'],\n})\nexport class EnrollmentDetailPageComponent implements OnInit {\n    enrollment$: Observable<Enrollment>;\n    classInProgress$ = this.classroomService.classInProgress$;\n\n    constructor(\n        private route: ActivatedRoute,\n        private classroomService: ClassroomService,\n        private router: Router,\n        private dialog: MatDialog,\n    ) {}\n\n    ngOnInit(): void {\n        this.getEnrollment();\n    }\n\n    getEnrollment() {\n        this.enrollment$ = this.classroomService.getEnrollment(this.route.snapshot.params.enrollmentId).pipe(\n            map((enrollment) => {\n                const mappedEnrollment: Enrollment = {\n                    ...enrollment,\n                    revertLessonStatus: enrollment.classRecords\n                        .filter((record) => record.lesson.id === enrollment.lastLesson.id)\n                        .every((record) => record.revertClassStatus),\n                    lessonTrackerList: enrollment.lessons.map((lesson: any) => {\n                        return {\n                            ...lesson,\n                            classRecords: enrollment.classRecords.filter((record) => {\n                                return record.lesson.id === lesson.id;\n                            }),\n                        };\n                    }),\n                };\n\n                return mappedEnrollment;\n            }),\n        );\n    }\n\n    onGoToLesson(lesson: LessonRecordList) {\n        this.router.navigate(['lms', 'lessons', lesson.id, 'script']);\n    }\n\n    onStartClass(enrollment: Enrollment, lesson: Lesson): void {\n        const isGroup = enrollment.sourceType === 'STUDY_GROUP';\n        const startClassInput: IStartClassInput = {\n            levelId: enrollment.level.id,\n            lessonId: lesson.id,\n            sourceId: isGroup ? enrollment?.studyGroup?.id : enrollment.id,\n            sourceType: enrollment.sourceType,\n            teacherNotes: '',\n        };\n        this.classroomService.startClass(startClassInput).subscribe((updatedEnrollment: Enrollment) => {\n            if (updatedEnrollment) {\n                this.classroomService.classroomRefetch();\n\n                this.router.navigate(['lms', 'lessons', lesson.id, 'class']);\n            }\n        });\n    }\n\n    onResumeClass(lesson: Lesson) {\n        this.router.navigate(['lms', 'lessons', lesson.id, 'class']);\n    }\n\n    onRevertClass(classRecordItem: any, enrollment: Enrollment, isGroup: boolean) {\n        const tracks = classRecordItem?.classRecord;\n        const revertTrack = [...tracks].pop();\n        const dialogRef = this.dialog.open<ModalConfirmationComponent, ModalConfirmationDataOptions>(\n            ModalConfirmationComponent,\n            {\n                restoreFocus: false,\n                disableClose: true,\n                data: {\n                    title: 'Revert class',\n                    message: 'Are you sure?',\n                },\n            },\n        );\n\n        dialogRef\n            .afterClosed()\n            .pipe(\n                take(1),\n                switchMap((confirm: boolean) => {\n                    if (!confirm) {\n                        return EMPTY;\n                    }\n                    const sourceType = isGroup ? 'STUDY_GROUP' : 'ENROLLMENT';\n                    const revertFinishedClassStatusInput: IRevertFinishedClassStatusInput = {\n                        classRecordId: revertTrack.id,\n                        sourceId: enrollment.id,\n                        sourceType,\n                    };\n                    return this.classroomService.revertFinishedClassStatus(revertFinishedClassStatusInput);\n                }),\n            )\n            .subscribe({\n                next: (classroom: IClassroom) => {\n                    if (classroom) {\n                        this.classroomService.classroomRefetch();\n                    }\n                },\n            });\n    }\n\n    onRevertLesson(classRecordItem: ClassRecordType, enrollment: Enrollment) {\n        const dialogRef = this.dialog.open<ModalConfirmationComponent, ModalConfirmationDataOptions>(\n            ModalConfirmationComponent,\n            {\n                restoreFocus: false,\n                disableClose: true,\n                data: {\n                    title: 'Revert lesson',\n                    message: 'Are you sure?',\n                },\n            },\n        );\n\n        dialogRef\n            .afterClosed()\n            .pipe(\n                take(1),\n                switchMap((confirm: boolean) => {\n                    if (!confirm) {\n                        return EMPTY;\n                    }\n                    const revertLessonStatusInput: IRevertLessonStatusInput = {\n                        lessonId: classRecordItem.id,\n                        sourceId: enrollment.id,\n                        sourceType: 'ENROLLMENT',\n                    };\n                    return this.classroomService.revertLessonStatus(revertLessonStatusInput);\n                }),\n            )\n            .subscribe({\n                next: (revertLessonStatus: any) => {\n                    if (revertLessonStatus) {\n                        this.classroomService.classroomRefetch();\n\n                        // update enrollment\n                        this.getEnrollment();\n                        setTimeout(() => {\n                            this.classroomService.refetchEnrollment();\n                        });\n                    }\n                },\n            });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/flex-layout/mq' as mq;\n\n.container {\n    @include mq.layout-bp(gt-xs) {\n        padding: 32px 0 0 32px;\n    }\n}\n",
                    "styleUrl": "./enrollment-detail-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "classroomService",
                        "type": "ClassroomService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "classroomService",
                        "type": "ClassroomService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"enrollment$ | async as enrollment\">\n  <ng-template tpAttach=\"topBarStart\">\n    <app-back-button></app-back-button>\n    <app-top-bar-title\n      *ngIf=\"enrollment?.student?.firstName\"\n      [text]=\"enrollment?.student?.firstName + ' ' + enrollment?.student?.familyName | titlecase\"\n    ></app-top-bar-title>\n  </ng-template>\n\n  <div class=\"container\">\n    <app-class-record-list\n      [student]=\"false\"\n      [enrollment]=\"enrollment\"\n      [classInProgress]=\"classInProgress$ | async\"\n      [lessonTrackerList]=\"enrollment?.lessonTrackerList\"\n      (startClassEvent)=\"onStartClass(enrollment, $event)\"\n      (resumeClassEvent)=\"onResumeClass($event)\"\n      (revertLessonEvent)=\"onRevertLesson($event, enrollment)\"\n      (goToLessonEvent)=\"onGoToLesson($event)\"\n    ></app-class-record-list>\n  </div>\n</div>\n"
        },
        {
            "name": "EsloLetterLogoComponent",
            "id": "component-EsloLetterLogoComponent-944607f6235615d1975ef2512a31f6be",
            "file": "src/app/@shared/components/eslo-letter-logo/eslo-letter-logo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-eslo-letter-logo",
            "styleUrls": [
                "./eslo-letter-logo.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "eslo-letter-logo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-eslo-letter-logo',\n    templateUrl: 'eslo-letter-logo.component.html',\n    styleUrls: ['./eslo-letter-logo.component.scss'],\n})\nexport class EsloLetterLogoComponent {\n    constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n@mixin eslo-letter-logo-theme($theme) {\n    $primary: mat.get-color-from-palette(map-get($theme, primary));\n    .eslo-letter-logo {\n        fill: $primary;\n    }\n}\n",
                    "styleUrl": "./eslo-letter-logo.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "templateData": "<svg class=\"eslo-letter-logo\" width=\"20\" height=\"16\" viewBox=\"0 0 20 16\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path\n      d=\"M7.57858 15.6901C6.09896 15.6901 4.79075 15.3615 3.65396 14.7042C2.51718 14.0282 1.62399 13.0986 0.974396 11.9155C0.324804 10.7324 7.62939e-06 9.38028 7.62939e-06 7.85916C7.62939e-06 6.31925 0.30676 4.96714 0.920263 3.80282C1.53377 2.61972 2.37282 1.69014 3.43743 1.01408C4.52009 0.338028 5.76514 0 7.17259 0C8.56199 0 9.76193 0.328639 10.7724 0.985916C11.7829 1.62441 12.5588 2.51643 13.1001 3.66197C13.6595 4.80751 13.9392 6.11268 13.9392 7.57747C13.9392 7.89671 13.8399 8.15963 13.6414 8.3662C13.443 8.55399 13.1903 8.64789 12.8836 8.64789H1.56986V6.70423H12.9919L11.8551 7.5493C11.8551 6.51643 11.6656 5.58685 11.2867 4.76056C10.9077 3.93427 10.3664 3.28639 9.66269 2.8169C8.97701 2.34742 8.14698 2.11268 7.17259 2.11268C6.14407 2.11268 5.25088 2.3662 4.49302 2.87324C3.73516 3.3615 3.14873 4.03756 2.73371 4.90141C2.31869 5.76526 2.11118 6.75117 2.11118 7.85916C2.11118 8.96714 2.34576 9.95305 2.81491 10.8169C3.28406 11.662 3.92463 12.338 4.73662 12.8451C5.56665 13.3333 6.51397 13.5775 7.57858 13.5775C8.19209 13.5775 8.81461 13.4648 9.44616 13.2394C10.0958 13.0141 10.61 12.7324 10.9889 12.3944C11.2055 12.2066 11.4491 12.1127 11.7197 12.1127C12.0084 12.0939 12.252 12.169 12.4505 12.338C12.7031 12.5822 12.8295 12.8545 12.8295 13.1549C12.8475 13.4366 12.7392 13.6808 12.5047 13.8873C11.8912 14.4131 11.1243 14.8451 10.204 15.1831C9.30181 15.5211 8.42666 15.6901 7.57858 15.6901Z\"\n  />\n  <path\n      d=\"M18.349 16C17.8798 16 17.4828 15.831 17.158 15.493C16.8332 15.1549 16.6708 14.7418 16.6708 14.2535C16.6708 13.7653 16.8332 13.3521 17.158 13.0141C17.5009 12.6761 17.8979 12.507 18.349 12.507C18.8001 12.507 19.188 12.6854 19.5128 13.0423C19.8376 13.3803 20 13.784 20 14.2535C20 14.723 19.8376 15.1362 19.5128 15.493C19.2061 15.831 18.8181 16 18.349 16Z\"\n  />\n</svg>"
        },
        {
            "name": "EsloLogoComponent",
            "id": "component-EsloLogoComponent-264b76f62b11c746820aeb75f9c04ae0",
            "file": "src/app/@shared/components/eslo-logo/eslo-logo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-eslo-logo",
            "styleUrls": [
                "./eslo-logo.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "eslo-logo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-eslo-logo',\n    templateUrl: 'eslo-logo.component.html',\n    styleUrls: ['./eslo-logo.component.scss'],\n})\nexport class EsloLogoComponent {\n    constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./eslo-logo.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "templateData": "<svg class=\"fill-primary\" width=\"43\" height=\"16\" viewBox=\"0 0 43 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path\n    d=\"M5.422 15.095C4.396 15.095 3.484 14.8733 2.686 14.43C1.90067 13.974 1.28 13.347 0.824 12.549C0.380667 11.751 0.159 10.839 0.159 9.813C0.159 8.77433 0.368 7.86233 0.786 7.077C1.21667 6.279 1.80567 5.652 2.553 5.196C3.30033 4.74 4.16167 4.512 5.137 4.512C6.09967 4.512 6.93567 4.73367 7.645 5.177C8.367 5.60767 8.92433 6.20933 9.317 6.982C9.70967 7.75467 9.906 8.635 9.906 9.623C9.906 9.82567 9.84267 9.99033 9.716 10.117C9.58933 10.231 9.42467 10.288 9.222 10.288H1.546C1.622 10.972 1.831 11.58 2.173 12.112C2.515 12.6313 2.96467 13.043 3.522 13.347C4.07933 13.6383 4.71267 13.784 5.422 13.784C5.878 13.784 6.334 13.708 6.79 13.556C7.25867 13.3913 7.63233 13.1887 7.911 12.948C8.05033 12.834 8.20867 12.777 8.386 12.777C8.56333 12.7643 8.71533 12.8087 8.842 12.91C9.00667 13.062 9.089 13.2267 9.089 13.404C9.10167 13.5813 9.032 13.7333 8.88 13.86C8.462 14.2147 7.93 14.5123 7.284 14.753C6.638 14.981 6.01733 15.095 5.422 15.095ZM5.137 5.823C4.16167 5.823 3.35733 6.127 2.724 6.735C2.09067 7.33033 1.71067 8.10933 1.584 9.072H8.538C8.43667 8.10933 8.082 7.33033 7.474 6.735C6.87867 6.127 6.09967 5.823 5.137 5.823ZM16.1599 15.095C15.4126 15.095 14.6716 14.9683 13.9369 14.715C13.2022 14.4617 12.6069 14.0817 12.1509 13.575C12.0116 13.423 11.9546 13.252 11.9799 13.062C12.0052 12.872 12.1002 12.7073 12.2649 12.568C12.4422 12.4413 12.6259 12.3907 12.8159 12.416C13.0059 12.4413 13.1642 12.5237 13.2909 12.663C13.5949 13.0177 13.9939 13.29 14.4879 13.48C14.9946 13.67 15.5519 13.765 16.1599 13.765C17.0972 13.765 17.7749 13.6067 18.1929 13.29C18.6109 12.9607 18.8262 12.568 18.8389 12.112C18.8389 11.656 18.6236 11.2823 18.1929 10.991C17.7622 10.687 17.0529 10.4527 16.0649 10.288C14.7856 10.0853 13.8482 9.73067 13.2529 9.224C12.6576 8.71733 12.3599 8.11567 12.3599 7.419C12.3599 6.773 12.5309 6.23467 12.8729 5.804C13.2149 5.37333 13.6709 5.05033 14.2409 4.835C14.8109 4.61967 15.4379 4.512 16.1219 4.512C16.9706 4.512 17.6989 4.65767 18.3069 4.949C18.9276 5.24033 19.4279 5.633 19.8079 6.127C19.9346 6.29167 19.9852 6.46267 19.9599 6.64C19.9346 6.81733 19.8332 6.963 19.6559 7.077C19.5039 7.16567 19.3266 7.19733 19.1239 7.172C18.9339 7.134 18.7692 7.039 18.6299 6.887C18.0092 6.17767 17.1606 5.823 16.0839 5.823C15.3872 5.823 14.8299 5.96867 14.4119 6.26C13.9939 6.53867 13.7849 6.89333 13.7849 7.324C13.7849 7.75467 13.9686 8.10933 14.3359 8.388C14.7159 8.66667 15.4252 8.89467 16.4639 9.072C17.4139 9.224 18.1612 9.452 18.7059 9.756C19.2632 10.0473 19.6559 10.3957 19.8839 10.801C20.1246 11.1937 20.2449 11.6243 20.2449 12.093C20.2449 12.6883 20.0676 13.214 19.7129 13.67C19.3709 14.1133 18.8896 14.4617 18.2689 14.715C17.6609 14.9683 16.9579 15.095 16.1599 15.095ZM25.1651 15C24.4051 15 23.7781 14.696 23.2841 14.088C22.7901 13.4673 22.5431 12.6757 22.5431 11.713V0.882999C22.5431 0.667666 22.6064 0.496666 22.7331 0.369999C22.8724 0.230666 23.0498 0.161 23.2651 0.161C23.4804 0.161 23.6514 0.230666 23.7781 0.369999C23.9174 0.496666 23.9871 0.667666 23.9871 0.882999V11.713C23.9871 12.2577 24.0948 12.701 24.3101 13.043C24.5381 13.385 24.8231 13.556 25.1651 13.556H25.6401C25.8301 13.556 25.9821 13.6257 26.0961 13.765C26.2101 13.8917 26.2671 14.0627 26.2671 14.278C26.2671 14.4933 26.1848 14.6707 26.0201 14.81C25.8681 14.9367 25.6654 15 25.4121 15H25.1651ZM32.5912 15.095C31.5779 15.095 30.6722 14.867 29.8742 14.411C29.0762 13.955 28.4492 13.328 27.9932 12.53C27.5372 11.732 27.3092 10.8263 27.3092 9.813C27.3092 8.787 27.5372 7.875 27.9932 7.077C28.4492 6.279 29.0762 5.652 29.8742 5.196C30.6722 4.74 31.5779 4.512 32.5912 4.512C33.6045 4.512 34.5039 4.74 35.2892 5.196C36.0872 5.652 36.7142 6.279 37.1702 7.077C37.6262 7.875 37.8605 8.787 37.8732 9.813C37.8732 10.8263 37.6389 11.732 37.1702 12.53C36.7142 13.328 36.0872 13.955 35.2892 14.411C34.5039 14.867 33.6045 15.095 32.5912 15.095ZM32.5912 13.765C33.3259 13.765 33.9845 13.594 34.5672 13.252C35.1499 12.91 35.6059 12.4413 35.9352 11.846C36.2645 11.2507 36.4292 10.573 36.4292 9.813C36.4292 9.053 36.2645 8.37533 35.9352 7.78C35.6059 7.172 35.1499 6.697 34.5672 6.355C33.9845 6.013 33.3259 5.842 32.5912 5.842C31.8565 5.842 31.1979 6.013 30.6152 6.355C30.0325 6.697 29.5702 7.172 29.2282 7.78C28.8989 8.37533 28.7342 9.053 28.7342 9.813C28.7342 10.573 28.8989 11.2507 29.2282 11.846C29.5702 12.4413 30.0325 12.91 30.6152 13.252C31.1979 13.594 31.8565 13.765 32.5912 13.765ZM41.2106 15.304C40.9066 15.304 40.6469 15.1963 40.4316 14.981C40.2163 14.7657 40.1086 14.506 40.1086 14.202C40.1086 13.8853 40.2163 13.6193 40.4316 13.404C40.6596 13.1887 40.9193 13.081 41.2106 13.081C41.5146 13.081 41.7743 13.195 41.9896 13.423C42.2049 13.6383 42.3126 13.898 42.3126 14.202C42.3126 14.4933 42.2049 14.753 41.9896 14.981C41.7869 15.1963 41.5273 15.304 41.2106 15.304Z\"\n  />\n</svg>\n"
        },
        {
            "name": "FiltersListComponent",
            "id": "component-FiltersListComponent-e25778aeff6935dc4be4c205e695499b",
            "file": "src/app/classroom/components/filters-list/filters-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-filters-list",
            "styleUrls": [
                "./filters-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./filters-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "any[]"
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "selectChangeEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "selectedOption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectionChange",
                    "args": [
                        {
                            "type": "MatSelectChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "MatSelectChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, SimpleChanges, OnChanges } from '@angular/core';\nimport { Output } from '@angular/core';\nimport { Input } from '@angular/core';\nimport { MatSelectChange } from '@angular/material/select';\n\n@Component({\n    selector: 'app-filters-list',\n    templateUrl: './filters-list.component.html',\n    styleUrls: ['./filters-list.component.scss'],\n})\nexport class FiltersListComponent implements OnChanges {\n    @Input() options: any[];\n    @Input() value: string;\n\n    selectedOption: any;\n\n    @Output() selectChangeEvent = new EventEmitter();\n\n    constructor() {}\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['options']) {\n            const { currentValue } = changes['options'];\n\n            if (currentValue.length) {\n                this.selectedOption = this.options[0];\n            }\n        }\n\n        if (changes['value']) {\n            const { currentValue } = changes['value'];\n\n            if (currentValue) {\n                this.selectedOption = this.options.find((option) => option.value === currentValue);\n            }\n        }\n    }\n\n    onSelectionChange({ value }: MatSelectChange) {\n        this.selectChangeEvent.emit(value.value);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "::ng-deep .custom-form-field .mat-form-field-infix {\n    border-top: 0.4em solid transparent;\n}\n\n::ng-deep .custom-select .mat-select-arrow-wrapper {\n    padding-top: 8px;\n}\n\n::ng-deep .custom-select .mat-select-value  {\n    padding-left: 10px;\n}\n\n::ng-deep .custom-select .mat-select-arrow {\n    border-left: 14px solid transparent !important;\n    border-right: none !important;\n    border-top: 10px solid transparent !important;\n    border-image-source: url('/assets/icons/select-dropdown.svg') !important;\n    border-image-repeat: stretch !important;\n}",
                    "styleUrl": "./filters-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<mat-form-field\n  appearance=\"outline\"\n  fxFlex.xs=\"100\"\n  class=\"rounded-form-field-select custom-form-field\"\n>\n  <mat-select\n    [(ngModel)]=\"selectedOption\"\n    (selectionChange)=\"onSelectionChange($event)\"\n    class=\"custom-select mat-button-text mat-button-text--size-14\"\n  >\n    <mat-option\n      *ngFor=\"let option of options\"\n      [value]=\"option\"\n      class=\"mat-button-text mat-button-text--size-14\"\n    >\n      {{ option.label | titlecase }}\n    </mat-option>\n  </mat-select>\n</mat-form-field>\n"
        },
        {
            "name": "ForgotPasswordFormComponent",
            "id": "component-ForgotPasswordFormComponent-900f57e25ac44b104ab3aa355f2a84a4",
            "file": "src/app/authentication/components/forgot-password-form/forgot-password-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-forgot-password-form",
            "styleUrls": [
                "./forgot-password-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./forgot-password-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "sendEmailEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "forgotPasswordForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOn init\n",
                    "description": "<p>On init</p>\n"
                },
                {
                    "name": "onSendEmail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, AbstractControl } from '@angular/forms';\n\n@Component({\n    selector: 'app-forgot-password-form',\n    templateUrl: './forgot-password-form.component.html',\n    styleUrls: ['./forgot-password-form.component.scss'],\n})\nexport class ForgotPasswordFormComponent implements OnInit {\n    forgotPasswordForm: FormGroup;\n\n    @Output() sendEmailEvent = new EventEmitter();\n\n    /**\n     * Constructor\n     *\n     * @param _fuseConfigService\n     * @param _formBuilder\n     */\n    constructor(private _formBuilder: FormBuilder) {}\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void {\n        this.forgotPasswordForm = this._formBuilder.group({\n            email: ['', [Validators.required, Validators.email]],\n        });\n    }\n\n    onSendEmail(): void {\n        const email = this.emailControl.value;\n\n        this.sendEmailEvent.emit(email);\n    }\n\n    get emailControl(): AbstractControl {\n        return this.forgotPasswordForm.get('email');\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./forgot-password-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "rawdescription": "\n\nConstructor\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 564,
                            "end": 576,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "_formBuilder"
                        },
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 558,
                            "end": 563,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "emailControl": {
                    "name": "emailControl",
                    "getSignature": {
                        "name": "emailControl",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 41
                    }
                }
            },
            "templateData": "<div fxLayout=\"column\" fxLayoutAlign=\"start stretch\" fxLayoutGap=\"16px\">\n  <p class=\"mat-title text-center\">Recover your password</p>\n  <form\n    name=\"forgoPasswordForm\"\n    [formGroup]=\"forgotPasswordForm\"\n    novalidate\n    fxLayout=\"column\"\n    fxLayoutAlign=\"start stretch\"\n    (ngSubmit)=\"onSendEmail()\"\n  >\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Email</mat-label>\n      <input matInput formControlName=\"email\" />\n      <mat-error *ngIf=\"forgotPasswordForm.get('email').hasError('required')\">\n        Email is required\n      </mat-error>\n      <mat-error *ngIf=\"forgotPasswordForm.get('email').hasError('email')\">\n        Please enter a valid email address\n      </mat-error>\n    </mat-form-field>\n    <button\n      fxFlexAlign=\"center\"\n      mat-flat-button\n      color=\"primary\"\n      type=\"submit\"\n      aria-label=\"SEND\"\n      [disabled]=\"forgotPasswordForm.invalid\"\n    >\n      SEND\n    </button>\n  </form>\n\n  <a fxFlexAlign=\"center\" mat-stroked-button color=\"primary\" [routerLink]=\"'/auth/login'\">\n    Go back to login\n  </a>\n</div>\n"
        },
        {
            "name": "ForgotPasswordPageComponent",
            "id": "component-ForgotPasswordPageComponent-765651fefaa945acbe3133471ff55507",
            "file": "src/app/authentication/pages/forgot-password-page/forgot-password-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-forgot-password-page",
            "styleUrls": [
                "./forgot-password-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./forgot-password-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "forgotPasswordFailed",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "onSendEmail",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { UserService } from './../../../@core/services/user.service';\nimport { Router } from '@angular/router';\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-forgot-password-page',\n    templateUrl: './forgot-password-page.component.html',\n    styleUrls: ['./forgot-password-page.component.scss'],\n})\nexport class ForgotPasswordPageComponent {\n    forgotPasswordFailed = '';\n\n    constructor(private userService: UserService, private router: Router) {}\n\n    onSendEmail(email: string): void {\n        this.userService.forgotPassword(email).subscribe({\n            next: (res) => {\n                // TODO: treat errors and toasts\n                if (res) {\n                    this.router.navigate(['/auth/confirm-email']);\n                }\n            },\n            error: (error) => {\n                this.forgotPasswordFailed = 'error';\n            },\n        });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./forgot-password-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-auth-layout>\n  <app-forgot-password-form (sendEmailEvent)=\"onSendEmail($event)\"></app-forgot-password-form>\n</app-auth-layout>\n"
        },
        {
            "name": "GroupAttendeesComponent",
            "id": "component-GroupAttendeesComponent-644a7c4adfb0c9c1ceb07d599a84f97e",
            "file": "src/app/classroom/components/group-attendees/group-attendees.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-group-attendees",
            "styleUrls": [
                "./group-attendees.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./group-attendees.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "studyGroupClassAttendees",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, Input } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n    selector: 'app-group-attendees',\n    templateUrl: './group-attendees.component.html',\n    styleUrls: ['./group-attendees.component.scss'],\n})\nexport class GroupAttendeesComponent {\n    @Input() studyGroupClassAttendees: any[];\n\n    constructor(@Inject(MAT_DIALOG_DATA) private data: { attendees: any[] }) {}\n\n    get attendees() {\n        return this.data.attendees;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".p-b-15 {\n  padding-bottom: 15px;\n}",
                    "styleUrl": "./group-attendees.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "attendees": {
                    "name": "attendees",
                    "getSignature": {
                        "name": "attendees",
                        "type": "",
                        "returnType": "",
                        "line": 14
                    }
                }
            },
            "templateData": "<p class=\"mat-subheading-1 text-center\">Attendees</p>\n<mat-dialog-content>\n  <mat-selection-list #attendeesList>\n    <mat-list-option\n      *ngFor=\"let attendee of attendees\"\n      [value]=\"attendee\"\n      [selected]=\"attendee.attended\"\n    >\n      <!-- Only inline css works with mat-list-option -->\n      <span\n        style=\"font-size: 14px; font-family: 'Work Sans'; line-height: 20px; letter-spacing: 0.25px\"\n      >\n        {{\n          attendee?.student?.student.firstName + ' ' + attendee?.student?.student?.familyName\n            | titlecase\n        }}\n      </span>\n    </mat-list-option>\n  </mat-selection-list>\n</mat-dialog-content>\n\n<mat-dialog-actions fxLayout fxLayoutAlign=\"end center\" class=\"p-b-15\">\n  <button mat-button color=\"primary\">confirm</button>\n</mat-dialog-actions>\n"
        },
        {
            "name": "GroupEmptyMembersComponent",
            "id": "component-GroupEmptyMembersComponent-57a64432b5fa44949feeabe89d70a99b",
            "file": "src/app/classroom/components/group-empty-members/group-empty-members.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-group-empty-members",
            "styleUrls": [
                "./group-empty-members.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./group-empty-members.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "addExistingMembersEvent",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter"
                },
                {
                    "name": "addNewMemberEvent",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "EventEmitter"
                },
                {
                    "name": "removeGroupEvent",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "addExistingMembers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "addNewMember",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeGroup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output } from '@angular/core';\n\n@Component({\n    selector: 'app-group-empty-members',\n    templateUrl: './group-empty-members.component.html',\n    styleUrls: ['./group-empty-members.component.scss'],\n})\nexport class GroupEmptyMembersComponent {\n    @Output() addNewMemberEvent = new EventEmitter<any>();\n    @Output() addExistingMembersEvent = new EventEmitter<any>();\n    @Output() removeGroupEvent = new EventEmitter<any>();\n\n    constructor() {}\n\n    addNewMember() {\n        this.addNewMemberEvent.emit();\n    }\n\n    addExistingMembers() {\n        this.addExistingMembersEvent.emit();\n    }\n\n    removeGroup() {\n        this.removeGroupEvent.emit();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n@use '~@angular/flex-layout/mq' as mq;\n\n@mixin group-empty-members-theme($theme) {\n    $primary: mat.get-color-from-palette(map-get($theme, primary));\n\n    .empty-members {\n        padding: 20vh 0 0 0;\n\n        &__content {\n            width: 328px;\n            padding: 20vh 16px 16px 16px;\n\n            @include mq.layout-bp(gt-xs) {\n                width: 354px;\n                padding: 0;\n            }\n\n            &__title {\n                color: $primary;\n                font-size: 19px;\n                line-height: 24px;\n                letter-spacing: 0.15px;\n            }\n\n            &__button {\n\n               \n                mat-icon {\n                    width: 18px;\n                    height: 18px;\n                    font-size: 18px;\n                }\n\n              \n            }\n        }\n    }\n}\n",
                    "styleUrl": "./group-empty-members.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "templateData": "<div class=\"empty-members\" fxLayout fxLayoutAlign=\"center center\">\n  <div\n    class=\"empty-members__content\"\n    fxLayout=\"column\"\n    fxLayoutAlign=\"center center\"\n    fxLayoutGap=\"30px\"\n  >\n    <p class=\"empty-members__content__title\">Oops, looks like it’s empty.</p>\n    <img src=\"/assets/icons/group-empty-members.svg\" alt=\"group empty members\" />\n  </div>\n</div>\n"
        },
        {
            "name": "GroupInfoComponent",
            "id": "component-GroupInfoComponent-a2f316c0371e65a1280cb27b5f760e3d",
            "file": "src/app/classroom/components/group-info/group-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-group-info",
            "styleUrls": [
                "./group-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./group-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "groupLevelControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "FormControl"
                },
                {
                    "name": "groupNameControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "FormControl"
                },
                {
                    "name": "groupProgramControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "FormControl"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n    selector: 'app-group-info',\n    templateUrl: './group-info.component.html',\n    styleUrls: ['./group-info.component.scss'],\n})\nexport class GroupInfoComponent {\n    @Input() groupNameControl: FormControl;\n    @Input() groupProgramControl: FormControl;\n    @Input() groupLevelControl: FormControl;\n\n    constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./group-info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "templateData": "<div fxLayout=\"column\" fxLayoutAlign=\"stretch\">\n  <mat-form-field appearance=\"outline\">\n    <mat-label>Group name</mat-label>\n    <input matInput [formControl]=\"groupNameControl\" />\n    <mat-hint *ngIf=\"groupProgramControl.value && groupLevelControl.value\">\n      Name suggestion: {{ groupProgramControl.value.name }} - {{ groupLevelControl.value.name }}\n    </mat-hint>\n  </mat-form-field>\n</div>\n"
        },
        {
            "name": "GroupMembersListComponent",
            "id": "component-GroupMembersListComponent-4901a808f34a3ef8052eabd17381043b",
            "file": "src/app/classroom/components/group-members-list/group-members-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-group-members-list",
            "styleUrls": [
                "./group-members-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./group-members-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "enrollments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Enrollment[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "enrollmentDetailEvent",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                },
                {
                    "name": "enrollmentEditEvent",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onEnrollmentDetail",
                    "args": [
                        {
                            "name": "enrollmentId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "enrollmentId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEnrollmentEdit",
                    "args": [
                        {
                            "name": "enrollmentId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "enrollmentId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Enrollment } from 'app/@core/models/enrollment.model';\n\n@Component({\n    selector: 'app-group-members-list',\n    templateUrl: './group-members-list.component.html',\n    styleUrls: ['./group-members-list.component.scss'],\n})\nexport class GroupMembersListComponent {\n    @Input() enrollments: Enrollment[];\n\n    @Output() enrollmentDetailEvent = new EventEmitter<string>();\n    @Output() enrollmentEditEvent = new EventEmitter<string>();\n\n    constructor() {}\n\n    onEnrollmentDetail(enrollmentId: string): void {\n        this.enrollmentDetailEvent.emit(enrollmentId);\n    }\n\n    onEnrollmentEdit(enrollmentId: string): void {\n        this.enrollmentEditEvent.emit(enrollmentId);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".group-members-list__container {\n    padding: 24px 0 0 16px;\n\n    &__enrollment {\n        cursor: pointer;\n\n        &__info {\n            padding: 16px 16px 16px 0;\n\n            .mat-body-2 {\n                color: rgba(0, 0, 0, 0.6);\n            }\n        }\n\n        &__edit-button {\n            margin-right: 19px;\n        }\n    }\n}\n",
                    "styleUrl": "./group-members-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "templateData": "<div class=\"group-members-list__container\">\n  <div *ngFor=\"let enrollment of enrollments\" class=\"group-members-list__container__enrollment\">\n    <div\n      fxLayout=\"row\"\n      fxLayoutAlign=\"start center\"\n      fxLayoutGap=\"16px\"\n      (click)=\"onEnrollmentDetail(enrollment.id)\"\n    >\n      <app-avatar [text]=\"enrollment.student.firstName[0]\" fontSize=\"19px\"></app-avatar>\n      <div\n        fxLayout=\"row\"\n        fxLayoutAlign=\"space-between center\"\n        fxFlex=\"100%\"\n        style=\"border-bottom: 1px solid rgba(0, 0, 0, 0.12)\"\n      >\n        <div\n          fxLayout=\"column\"\n          fxLayoutAlign=\"start start\"\n          class=\"group-members-list__container__enrollment__info\"\n        >\n          <span class=\"mat-subheading-1\"\n            >{{ enrollment.student.firstName | titlecase }}\n            {{ enrollment.student.familyName | titlecase }}\n          </span>\n          <span class=\"mat-body-2\"\n            >{{ enrollment?.level?.module?.program?.label }} - {{ enrollment?.level?.label }}</span\n          >\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "GroupMembersPageComponent",
            "id": "component-GroupMembersPageComponent-18deae26a7d3a28baa8ad95b8cdefae5",
            "file": "src/app/classroom/pages/group-members-page/group-members-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-group-members-page",
            "styleUrls": [
                "./group-members-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./group-members-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "group$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "navigationTabsConfig",
                    "defaultValue": "{\n        links: [\n            { path: '../schedule', label: 'schedule', icon: 'event_note' },\n            { path: '../members', label: 'members', icon: 'group' },\n        ],\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INavigationTabsConfig",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "addExistingMembers",
                    "args": [
                        {
                            "name": "group",
                            "type": "StudyGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "StudyGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addNewMember",
                    "args": [
                        {
                            "name": "group",
                            "type": "StudyGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nadd new member using invitation\n",
                    "description": "<p>add new member using invitation</p>\n",
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "StudyGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGroupById",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEnrollmentDetail",
                    "args": [
                        {
                            "name": "enrollmentId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 259,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "enrollmentId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEnrollmentEdit",
                    "args": [
                        {
                            "name": "enrollmentId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "enrollmentId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRemoveGroup",
                    "args": [
                        {
                            "name": "studyGroupId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 226,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "studyGroupId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { SelectMembersDialogComponent } from './../../components/select-members-dialog/select-members-dialog.component';\nimport { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { CreateEnrollmentInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Enrollment, ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\nimport { ClassroomService, Student } from 'app/@core/services/classroom.service';\nimport {\n    ModalConfirmationComponent,\n    ModalConfirmationDataOptions,\n} from 'app/@shared/components/modal-confirmation/modal-confirmation.component';\nimport { INavigationTabsConfig } from 'app/@shared/components/navigation-tabs/navigation-tabs.component';\nimport {\n    InvitationDialogComponent,\n    ITab,\n} from 'app/classroom/components/invitation-dialog/invitation-dialog.component';\nimport { EMPTY, forkJoin, Observable } from 'rxjs';\nimport { map, switchMap, take, takeUntil, tap } from 'rxjs/operators';\nimport { MatSnackBar, MatSnackBarRef } from '@angular/material/snack-bar';\n\n@Component({\n    selector: 'app-group-members-page',\n    templateUrl: './group-members-page.component.html',\n    styleUrls: ['./group-members-page.component.scss'],\n})\nexport class GroupMembersPageComponent implements OnInit {\n    navigationTabsConfig: INavigationTabsConfig = {\n        links: [\n            { path: '../schedule', label: 'schedule', icon: 'event_note' },\n            { path: '../members', label: 'members', icon: 'group' },\n        ],\n    };\n\n    group$: Observable<any>;\n\n    constructor(\n        private route: ActivatedRoute,\n        private matDialog: MatDialog,\n        private classroomService: ClassroomService,\n        private router: Router,\n        private matSnackBar: MatSnackBar,\n    ) {}\n\n    ngOnInit(): void {\n        this.getGroupById();\n    }\n\n    getGroupById(): void {\n        const groupId = this.route.snapshot.params.groupId;\n\n        this.group$ = this.classroomService.getGroupById(groupId).pipe(\n            map((group) => {\n                const activeEnrollments = group.enrollments.filter(\n                    (enrollment) => enrollment.status === ENROLLMENT_STATUS.ACTIVE,\n                );\n\n                return { ...group, enrollments: activeEnrollments };\n            }),\n        );\n    }\n\n    /**\n     * add new member using invitation\n     */\n    addNewMember(group: StudyGroup): void {\n        const dialogRef = this.matDialog.open(InvitationDialogComponent, {\n            panelClass: 'invitation-dialog--material',\n            autoFocus: false,\n            disableClose: true,\n            data: {\n                type: 'student',\n                selectedGroup: group,\n                tabs: [\n                    {\n                        title: 'info',\n                        active: false,\n                        completed: false,\n                        icon: 'account_circle',\n                    },\n                    {\n                        title: 'course',\n                        active: false,\n                        completed: false,\n                        icon: 'school',\n                    },\n                    {\n                        title: 'schedule',\n                        active: false,\n                        completed: false,\n                        icon: 'date_range',\n                    },\n                ] as ITab[],\n            },\n        });\n\n        dialogRef.afterClosed().subscribe((response: any) => {\n            if (!response) {\n                return;\n            }\n\n            const { studentForm, courseForm, eventsForm } = response;\n\n            let browserTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n            if (!browserTimeZone) {\n                // default to SP if not found\n                browserTimeZone = 'America/Sao_Paulo';\n            }\n\n            const enrollmentInvitation: CreateEnrollmentInput = {\n                invitedStudent: {\n                    email: studentForm.studentInfo.email,\n                    firstName: studentForm.studentInfo.firstName,\n                    surname: studentForm.studentInfo.lastName,\n                },\n                enrollmentInput: {},\n            };\n\n            if (studentForm?.selectedGroup) {\n                enrollmentInvitation.enrollmentInput.studyGroupId = studentForm?.selectedGroup?.id;\n            } else {\n                enrollmentInvitation.enrollmentInput.oneOnOne = {\n                    levelId: courseForm.level.id,\n                    events: eventsForm.events.map((event: Event) => ({\n                        title: `${studentForm.studentInfo.firstName} ${\n                            studentForm.studentInfo.lastName ? studentForm.studentInfo.lastName : ''\n                        } (1 on 1)`,\n                        description: courseForm.level.name,\n                        sourceType: 'ENROLLMENT',\n                        availabilityType: 'BUSY',\n                        status: 'TENTATIVE',\n                        recurrence: event.recurrence,\n                        startDateTime: new Date(parseInt(event.startDateTime, 10)).toISOString(),\n                        startTimeZone: browserTimeZone,\n                        endDateTime: new Date(parseInt(event.endDateTime, 10)).toISOString(),\n                        endTimeZone: browserTimeZone,\n                    })),\n                };\n            }\n\n            this.classroomService\n                .createEnrollmentInvitation(enrollmentInvitation)\n                .pipe(take(1))\n                .subscribe((pendingEnrollment: Enrollment) => {\n                    if (pendingEnrollment) {\n                        this.classroomService.classroomRefetch();\n                    }\n                });\n        });\n    }\n\n    addExistingMembers(group: StudyGroup) {\n        let toastRef: MatSnackBarRef<any>;\n\n        this.classroomService\n            .getClassroom$()\n            .pipe(\n                take(1),\n                map(({ students }) => {\n                    const enrollments = students.reduce((acc, currStudent) => {\n                        const enrollments = currStudent.enrollments\n                            .filter((enrollment) => {\n                                const validEnrollment =\n                                    enrollment?.studyGroup?.id !== group.id &&\n                                    enrollment.level.code === group.level.code &&\n                                    enrollment.status === ENROLLMENT_STATUS.ACTIVE;\n                                return validEnrollment;\n                            })\n                            .map((enrollment) => ({ ...enrollment, selected: false }));\n\n                        return [...acc, ...enrollments];\n                    }, []);\n\n                    return enrollments;\n                }),\n                switchMap((enrollments) => {\n                    const dialogRef = this.matDialog.open(SelectMembersDialogComponent, {\n                        autoFocus: false,\n                        disableClose: true,\n                        panelClass: 'dialog-border-radius--padding',\n                        data: {\n                            enrollments,\n                        },\n                    });\n\n                    return dialogRef.afterClosed();\n                }),\n                switchMap((selectedEnrollments: Enrollment[]) => {\n                    if (!selectedEnrollments || selectedEnrollments.length === 0) {\n                        return EMPTY;\n                    }\n\n                    const requests = selectedEnrollments.map(({ id }) =>\n                        this.classroomService.addStudentToGroup({ id, studyGroupId: group.id }),\n                    );\n\n                    toastRef = this.matSnackBar.open('Adding members...', '', {\n                        duration: 0,\n                        panelClass: ['snackbar-panel', 'snackbar-panel--one-line'],\n                    });\n\n                    return forkJoin(requests);\n                }),\n            )\n            .subscribe({\n                next: (response) => {\n                    this.matSnackBar.open('All students added successfully', 'Ok', {\n                        duration: 0,\n                        panelClass: ['snackbar-panel', 'snackbar-panel--one-line'],\n                    });\n                },\n                error: (err) => {\n                    this.matSnackBar.open('Error while adding members', 'Ok', {\n                        duration: 0,\n                        panelClass: ['snackbar-panel', 'snackbar-panel--one-line'],\n                    });\n                },\n                complete: () => {\n                    if (toastRef) {\n                        toastRef.dismiss();\n                    }\n                },\n            });\n    }\n\n    onRemoveGroup(studyGroupId: string): void {\n        const dialogRef = this.matDialog.open<ModalConfirmationComponent, ModalConfirmationDataOptions>(\n            ModalConfirmationComponent,\n            {\n                restoreFocus: false,\n                disableClose: true,\n                data: {\n                    title: 'Remove group',\n                    message: 'Are you sure you want to remove this group?',\n                },\n            },\n        );\n\n        dialogRef\n            .afterClosed()\n            .pipe(\n                take(1),\n                switchMap((confirm: boolean) => {\n                    if (!confirm) {\n                        return EMPTY;\n                    }\n\n                    return this.classroomService.removeStudyGroup({ studyGroupId });\n                }),\n            )\n            .subscribe({\n                next: (group: any) => {\n                    this.classroomService.getGroupsQuery().refetch();\n                    this.router.navigate(['../../'], { relativeTo: this.route });\n                },\n            });\n    }\n\n    onEnrollmentDetail(enrollmentId: string): void {\n        this.router.navigate(['classroom', 'enrollments', enrollmentId]);\n    }\n\n    onEnrollmentEdit(enrollmentId: string): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./group-members-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "classroomService",
                        "type": "ClassroomService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "matSnackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "classroomService",
                        "type": "ClassroomService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matSnackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"group$ | async as group\">\n  <ng-template tpAttach=\"topBarStart\">\n    <app-back-button></app-back-button>\n    <app-top-bar-title [text]=\"group.name\"></app-top-bar-title>\n  </ng-template>\n\n  <ng-template tpAttach=\"topBarCenter\">\n    <app-navigation-tabs [navigationTabsConfig]=\"navigationTabsConfig\"></app-navigation-tabs>\n  </ng-template>\n\n  <ng-container *ngIf=\"group.enrollments.length === 0\">\n    <app-group-empty-members\n      (removeGroupEvent)=\"onRemoveGroup(group.id)\"\n      (addNewMemberEvent)=\"addNewMember(group)\"\n      (addExistingMembersEvent)=\"addExistingMembers(group)\"\n    ></app-group-empty-members>\n  </ng-container>\n\n  <ng-container *ngIf=\"group.enrollments.length > 0\">\n    <app-group-members-list\n      [enrollments]=\"group.enrollments\"\n      (enrollmentDetailEvent)=\"onEnrollmentDetail($event)\"\n      (enrollmentEditEvent)=\"onEnrollmentEdit($event)\"\n    ></app-group-members-list>\n  </ng-container>\n\n  <div fxLayout=\"column\" fxLayoutAlign=\"center center\" fxLayoutGap=\"20px\" style=\"margin-top: 40px\">\n    <div fxLayout fxLayoutAlign=\"center center\" fxLayoutGap=\"30px\">\n      <button\n        mat-flat-button\n        color=\"primary\"\n        (click)=\"addNewMember(group)\"\n        class=\"empty-members__content__button\"\n      >\n        <mat-icon>person_add</mat-icon>\n        add new\n      </button>\n      <button\n        mat-flat-button\n        color=\"primary\"\n        (click)=\"addExistingMembers(group)\"\n        class=\"empty-members__content__button\"\n      >\n        <mat-icon>person_add</mat-icon>\n        add existing\n      </button>\n    </div>\n    <button\n      *ngIf=\"group.enrollments.length === 0\"\n      mat-button\n      color=\"warn\"\n      (click)=\"onRemoveGroup(group.id)\"\n      class=\"empty-members__content__button\"\n    >\n      delete group\n    </button>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "GroupProgramComponent",
            "id": "component-GroupProgramComponent-dc96bf9b97bd8d95eedcee3d360e2136",
            "file": "src/app/classroom/components/group-program/group-program.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-group-program",
            "styleUrls": [
                "./group-program.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./group-program.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "groupLevelControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "FormControl"
                },
                {
                    "name": "groupProgramControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "FormControl"
                },
                {
                    "name": "isEditing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "levels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Level[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "levelsA",
                    "defaultValue": "[{ name: '' }, { name: 'A1' }, { name: 'A2' }, { name: 'B1' }, { name: 'B2' }, { name: 'C1' }]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "localPrograms",
                    "defaultValue": "[\n        { name: 'business', icon: 'work', levels: ['B1', 'B2'] },\n        { name: 'extensive', icon: 'backpack', levels: ['A1', 'A2', 'B1', 'B2', 'C1'] },\n        { name: 'ielts', icon: 'grading', levels: ['A2', 'B1', 'B2'] },\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "programs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Program[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "selectedProgramIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "selectedTabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "checkHasSelectedLevel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getLevels",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPrograms",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "listenGroupProgramControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLevelSelectedIndexChange",
                    "args": [
                        {
                            "name": "levelIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "levelIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectProgram",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Level } from 'app/@core/models/level.model';\nimport { Program } from 'app/@core/models/program.model';\nimport { LMSService } from 'app/@core/services/lms.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-group-program',\n    templateUrl: './group-program.component.html',\n    styleUrls: ['./group-program.component.scss'],\n})\nexport class GroupProgramComponent implements OnInit, OnDestroy {\n    @Input() groupProgramControl: FormControl;\n    @Input() groupLevelControl: FormControl;\n    @Input() isEditing: boolean;\n\n    selectedProgramIndex: number;\n    localPrograms = [\n        { name: 'business', icon: 'work', levels: ['B1', 'B2'] },\n        { name: 'extensive', icon: 'backpack', levels: ['A1', 'A2', 'B1', 'B2', 'C1'] },\n        { name: 'ielts', icon: 'grading', levels: ['A2', 'B1', 'B2'] },\n    ];\n\n    programs: Program[];\n    levels: Level[];\n\n    selectedTabIndex = 0;\n    levelsA = [{ name: '' }, { name: 'A1' }, { name: 'A2' }, { name: 'B1' }, { name: 'B2' }, { name: 'C1' }];\n\n    private destroy$ = new Subject<void>();\n\n    constructor(private lmsService: LMSService) {}\n\n    ngOnInit() {\n        this.getPrograms();\n        this.listenGroupProgramControl();\n    }\n\n    checkHasSelectedLevel() {\n        if (!this.groupLevelControl.value) {\n            return;\n        }\n        const { code } = this.groupLevelControl.value;\n        const [programCode, type, levelCode] = code.split('-');\n        const selectedProgramIndex = this.programs.findIndex((program) => program.code === programCode);\n        this.onSelectProgram(selectedProgramIndex);\n\n        const selectedLevelIndex = this.levels.findIndex((level) => level?.code.split('-').pop() === levelCode);\n        this.selectedTabIndex = selectedLevelIndex;\n        this.onLevelSelectedIndexChange(selectedLevelIndex);\n    }\n\n    ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    getPrograms() {\n        this.lmsService.getPrograms().subscribe({\n            next: (programs) => {\n                this.programs = programs;\n\n                this.checkHasSelectedLevel();\n            },\n        });\n    }\n\n    listenGroupProgramControl() {\n        this.groupProgramControl.valueChanges.pipe(takeUntil(this.destroy$)).subscribe({\n            next: (value) => {\n                if (!value) {\n                    return;\n                }\n                this.getLevels();\n            },\n        });\n    }\n\n    getLevels(): void {\n        const program = this.groupProgramControl.value;\n        /* first value it's null to show the correct tabs\n           because in css the first one is hidden */\n        this.levels = [null].concat(...program.modules.map((module) => module.levels));\n    }\n\n    onSelectProgram(index: number): void {\n        if (this.selectedProgramIndex === index) {\n            return;\n        }\n        this.selectedProgramIndex = index;\n        const selectedProgram = this.programs[this.selectedProgramIndex];\n        this.groupProgramControl.setValue(selectedProgram);\n        this.selectedTabIndex = 0;\n    }\n\n    onLevelSelectedIndexChange(levelIndex: number): void {\n        const selectedLevel = this.levels[levelIndex];\n        this.groupLevelControl.setValue(selectedLevel);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n@mixin group-program-theme($theme) {\n    $primary: mat.get-color-from-palette(map-get($theme, primary));\n    $primary-50: mat.get-color-from-palette(map-get($theme, primary), 50);\n\n    $accent: mat.get-color-from-palette(map-get($theme, accent));\n\n    .group-program {\n        &__program {\n            position: relative;\n            display: flex;\n            flex-direction: column;\n            justify-content: flex-end;\n            align-items: center;\n            border: 1px solid rgba(0, 0, 0, 0.12);\n            color: $primary;\n            width: 100px;\n            height: 100px;\n            border-radius: 14px;\n            cursor: pointer;\n            padding-bottom: 10px;\n\n            &__name {\n                text-align: center;\n                font-weight: 600;\n                text-transform: uppercase;\n                font-size: 13px;\n                line-height: 16px;\n                letter-spacing: 1.25px;\n                margin-top: 10px;\n            }\n\n            &__selected-icon {\n                position: absolute;\n                top: 10px;\n                right: 10px;\n            }\n\n            mat-icon:not(.group-program__program__selected-icon) {\n                font-size: 30px;\n                width: 30px;\n                height: 30px;\n            }\n\n            &--active {\n                color: $accent;\n                border: 1px solid $primary;\n                background-color: $primary-50;\n            }\n\n            &--disabled {\n                cursor: auto;\n                color: gray;\n                border: 1px solid gray;\n                background-color: lightgray;\n            }\n        }\n\n        &__level-tab-group {\n            margin-top: 24px;\n            display: flex;\n            align-items: center;\n\n            .mat-tab-header {\n                border-bottom: none;\n            }\n\n            .mat-tab-label {\n                width: 66px !important;\n                min-width: 66px !important;\n            }\n\n            .mat-tab-label-active {\n                color: $primary;\n                opacity: 1 !important;\n\n                &.mat-tab-disabled {\n                    color: lightgray;\n                    opacity: 1 !important;\n                }\n            }\n\n            // disable fist tab to make it possible to show none active tab\n            // https://stackoverflow.com/questions/53817845/set-no-tab-as-default-active-tab-on-mat-tab\n            .mat-tab-labels > .mat-tab-label:first-child {\n                display: none;\n            }\n        }\n    }\n}\n",
                    "styleUrl": "./group-program.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "lmsService",
                        "type": "LMSService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "lmsService",
                        "type": "LMSService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div fxLayout fxLayoutAlign=\"center center\" fxLayoutGap=\"15px\">\n  <div\n    *ngFor=\"let program of programs; let i = index\"\n    class=\"group-program__program\"\n    [class.group-program__program--active]=\"selectedProgramIndex === i\"\n    [class.group-program__program--disabled]=\"isEditing\"\n    (click)=\"onSelectProgram(i)\"\n  >\n    <mat-icon class=\"group-program__program__selected-icon\" *ngIf=\"selectedProgramIndex === i\">\n      check_circle\n    </mat-icon>\n    <mat-icon>{{ program.icon }}</mat-icon>\n    <span class=\"group-program__program__name\">{{ program.label }}</span>\n  </div>\n</div>\n\n<div *ngIf=\"!selectedProgramIndex\" style=\"width: 330px; height: 1px\"></div>\n\n<mat-tab-group\n  class=\"group-program__level-tab-group\"\n  [(selectedIndex)]=\"selectedTabIndex\"\n  (selectedIndexChange)=\"onLevelSelectedIndexChange($event)\"\n>\n  <mat-tab\n    *ngFor=\"let level of levels\"\n    [label]=\"level?.name | slice: 0:2\"\n    [disabled]=\"isEditing\"\n  ></mat-tab>\n  <!-- [disabled]=\"!courses[selectedCourseIndex]?.levels.includes(level.name)\" -->\n</mat-tab-group>\n"
        },
        {
            "name": "GroupSchedulePageComponent",
            "id": "component-GroupSchedulePageComponent-fcdcfa74a3fcb8df3cc8581401882383",
            "file": "src/app/classroom/pages/group-schedule-page/group-schedule-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-group-schedule-page",
            "styleUrls": [
                "./group-schedule-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./group-schedule-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "classInProgress$",
                    "defaultValue": "this.classroomService.classInProgress$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "getGroupTimeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "group$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "navigationTabsConfig",
                    "defaultValue": "{\n        links: [\n            { path: '../schedule', label: 'schedule', icon: 'event_note' },\n            { path: '../members', label: 'members', icon: 'group' },\n        ],\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INavigationTabsConfig",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "getGroupById",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onGoToLesson",
                    "args": [
                        {
                            "name": "lesson",
                            "type": "LessonRecordList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lesson",
                            "type": "LessonRecordList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onOpenAttendees",
                    "args": [
                        {
                            "name": "attendees",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "attendees",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onResumeClass",
                    "args": [
                        {
                            "name": "lesson",
                            "type": "Lesson",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lesson",
                            "type": "Lesson",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRevertClass",
                    "args": [
                        {
                            "name": "classRecordItem",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "group",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isGroup",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "classRecordItem",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "group",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isGroup",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRevertLesson",
                    "args": [
                        {
                            "name": "classRecordItem",
                            "type": "ClassRecordType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "group",
                            "type": "StudyGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "classRecordItem",
                            "type": "ClassRecordType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "group",
                            "type": "StudyGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onStartClass",
                    "args": [
                        {
                            "name": "group",
                            "type": "StudyGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lesson",
                            "type": "Lesson",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "StudyGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lesson",
                            "type": "Lesson",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Enrollment, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { ClassRecord, ClassRecordType, LessonRecordList } from 'app/@core/models/class-record.model';\nimport { Lesson } from 'app/@core/models/lesson.model';\nimport {\n    ClassroomService,\n    IClassroom,\n    IRevertFinishedClassStatusInput,\n    IRevertLessonStatusInput,\n    IStartClassInput,\n} from 'app/@core/services/classroom.service';\nimport {\n    ModalConfirmationComponent,\n    ModalConfirmationDataOptions,\n} from 'app/@shared/components/modal-confirmation/modal-confirmation.component';\nimport { INavigationTabsConfig } from 'app/@shared/components/navigation-tabs/navigation-tabs.component';\nimport { GroupAttendeesComponent } from 'app/classroom/components/group-attendees/group-attendees.component';\nimport { EMPTY, Observable, Subject } from 'rxjs';\nimport { map, switchMap, take, takeUntil, tap } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-group-schedule-page',\n    templateUrl: './group-schedule-page.component.html',\n    styleUrls: ['./group-schedule-page.component.scss'],\n})\nexport class GroupSchedulePageComponent implements OnInit, OnDestroy {\n    navigationTabsConfig: INavigationTabsConfig = {\n        links: [\n            { path: '../schedule', label: 'schedule', icon: 'event_note' },\n            { path: '../members', label: 'members', icon: 'group' },\n        ],\n    };\n\n    group$: Observable<any>;\n    classInProgress$ = this.classroomService.classInProgress$;\n\n    getGroupTimeout: any;\n\n    private destroy$ = new Subject<void>();\n\n    constructor(\n        private route: ActivatedRoute,\n        private classroomService: ClassroomService,\n        private router: Router,\n        private dialog: MatDialog,\n    ) {}\n\n    ngOnInit() {\n        this.getGroupById();\n    }\n\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n\n        if (this.getGroupTimeout) {\n            clearTimeout(this.getGroupTimeout);\n        }\n    }\n\n    getGroupById() {\n        const groupId = this.route.snapshot.params.groupId;\n\n        this.group$ = this.classroomService.getGroupById(groupId).pipe(\n            takeUntil(this.destroy$),\n            map((group: any) => {\n                return {\n                    ...group,\n                    revertLessonStatus: group.studyGroupClassRecords\n                        .filter((record) => record.lesson.id === group.lastLesson.id)\n                        .every((record) => record.revertClassStatus),\n                    lessonTrackerList: group.lessons.map((lessonTrack: ClassRecordType) => {\n                        return {\n                            ...lessonTrack,\n                            classRecords:\n                                group.studyGroupClassRecords.filter((record) => {\n                                    return record.lesson.id === lessonTrack.id;\n                                }) || [],\n                        };\n                    }),\n                };\n            }),\n        );\n    }\n\n    onGoToLesson(lesson: LessonRecordList) {\n        this.router.navigate(['lms', 'lessons', lesson.id, 'script']);\n    }\n\n    onStartClass(group: StudyGroup, lesson: Lesson): void {\n        const startClassInput: IStartClassInput = {\n            levelId: group.level.id,\n            lessonId: lesson.id,\n            sourceId: group.id,\n            sourceType: 'STUDY_GROUP',\n            teacherNotes: '',\n        };\n        this.classroomService.startClass(startClassInput).subscribe((updatedEnrollment: Enrollment) => {\n            if (updatedEnrollment) {\n                this.classroomService.classroomRefetch();\n                this.router.navigate(['lms', 'lessons', lesson.id, 'class']);\n            }\n        });\n    }\n\n    onResumeClass(lesson: Lesson) {\n        this.router.navigate(['lms', 'lessons', lesson.id, 'class']);\n    }\n\n    onRevertClass(classRecordItem: any, group: any, isGroup: boolean) {\n        const tracks = classRecordItem?.studyGroupLessonRecord;\n        const revertTrack = [...tracks].pop();\n        const dialogRef = this.dialog.open<ModalConfirmationComponent, ModalConfirmationDataOptions>(\n            ModalConfirmationComponent,\n            {\n                restoreFocus: false,\n                disableClose: true,\n                data: {\n                    title: 'Revert class',\n                    message: 'Are you sure?',\n                },\n            },\n        );\n\n        dialogRef\n            .afterClosed()\n            .pipe(\n                take(1),\n                switchMap((confirm: boolean) => {\n                    if (!confirm) {\n                        return EMPTY;\n                    }\n                    const sourceType = isGroup ? 'STUDY_GROUP' : 'ENROLLMENT';\n                    const revertFinishedClassStatusInput: IRevertFinishedClassStatusInput = {\n                        classRecordId: revertTrack.id,\n                        sourceId: group.id,\n                        sourceType,\n                    };\n\n                    return this.classroomService.revertFinishedClassStatus(revertFinishedClassStatusInput);\n                }),\n            )\n            .subscribe({\n                next: (classroom: IClassroom) => {\n                    if (classroom) {\n                        this.classroomService.classroomRefetch();\n                    }\n                },\n            });\n    }\n\n    onRevertLesson(classRecordItem: ClassRecordType, group: StudyGroup) {\n        const dialogRef = this.dialog.open<ModalConfirmationComponent, ModalConfirmationDataOptions>(\n            ModalConfirmationComponent,\n            {\n                restoreFocus: false,\n                disableClose: true,\n                data: {\n                    title: 'Revert lesson',\n                    message: 'Are you sure?',\n                },\n            },\n        );\n\n        dialogRef\n            .afterClosed()\n            .pipe(\n                take(1),\n                switchMap((confirm: boolean) => {\n                    if (!confirm) {\n                        return EMPTY;\n                    }\n                    const revertLessonStatusInput: IRevertLessonStatusInput = {\n                        lessonId: classRecordItem.id,\n                        sourceId: group.id,\n                        sourceType: 'STUDY_GROUP',\n                    };\n                    return this.classroomService.revertLessonStatus(revertLessonStatusInput);\n                }),\n            )\n            .subscribe({\n                next: (revertLessonStatus: any) => {\n                    if (revertLessonStatus) {\n                        this.classroomService.classroomRefetch();\n\n                        // refetch group\n                        this.getGroupById();\n                        this.getGroupTimeout = setTimeout(() => {\n                            this.classroomService.refetchCurrentGroupById();\n                        });\n                    }\n                },\n            });\n    }\n\n    onOpenAttendees(attendees: any) {\n        this.dialog.open(GroupAttendeesComponent, {\n            width: '280px',\n            panelClass: 'dialog-border-radius',\n            data: {\n                attendees,\n            },\n        });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/flex-layout/mq' as mq;\n\n.container {\n    @include mq.layout-bp(gt-xs) {\n        padding: 32px 0 0 32px;\n    }\n}",
                    "styleUrl": "./group-schedule-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "classroomService",
                        "type": "ClassroomService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "classroomService",
                        "type": "ClassroomService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-container *ngIf=\"group$ | async as group\">\n  <ng-template tpAttach=\"topBarStart\">\n    <app-back-button></app-back-button>\n    <app-top-bar-title [text]=\"group.name\"></app-top-bar-title>\n  </ng-template>\n\n  <ng-template tpAttach=\"topBarCenter\">\n    <app-navigation-tabs [navigationTabsConfig]=\"navigationTabsConfig\"></app-navigation-tabs>\n  </ng-template>\n\n  <div class=\"container\">\n    <app-class-record-list\n      [isGroup]=\"true\"\n      [group]=\"group\"\n      [classInProgress]=\"classInProgress$ | async\"\n      [lessonTrackerList]=\"group?.lessonTrackerList\"\n      (startClassEvent)=\"onStartClass(group, $event)\"\n      (resumeClassEvent)=\"onResumeClass($event)\"\n      (revertLessonEvent)=\"onRevertLesson($event, group)\"\n      (openAttendeesEvent)=\"onOpenAttendees($event)\"\n      (goToLessonEvent)=\"onGoToLesson($event)\"\n    ></app-class-record-list>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "GroupsListComponent",
            "id": "component-GroupsListComponent-baa1e0d7e10879dcce47aa9bac8a0d35",
            "file": "src/app/classroom/components/groups-list/groups-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-groups-list",
            "styleUrls": [
                "./groups-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./groups-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "groups",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "groupDetailEvent",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter"
                },
                {
                    "name": "groupEditEvent",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onGroupDetail",
                    "args": [
                        {
                            "name": "groupId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "groupId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onGroupEdit",
                    "args": [
                        {
                            "name": "groupId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "groupId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'app-groups-list',\n    templateUrl: './groups-list.component.html',\n    styleUrls: ['./groups-list.component.scss'],\n})\nexport class GroupsListComponent {\n    @Input() groups: any[];\n\n    @Output() groupDetailEvent = new EventEmitter<string>();\n    @Output() groupEditEvent = new EventEmitter<string>();\n\n    constructor() {}\n\n    onGroupDetail(groupId: string) {\n        this.groupDetailEvent.emit(groupId);\n    }\n\n    onGroupEdit(groupId: string) {\n        this.groupEditEvent.emit(groupId);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".group-list__container {\n    padding: 24px 0 0 16px;\n\n    &__group {\n        cursor: pointer;\n\n        &__info {\n            padding: 16px 16px 16px 0;\n\n            .mat-body-2 {\n                color: rgba(0, 0, 0, 0.6);\n            }\n        }\n\n        &__edit-button {\n            margin-right: 19px;\n        }\n    }\n}\n",
                    "styleUrl": "./groups-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "templateData": "<div class=\"group-list__container\">\n  <div *ngFor=\"let group of groups\" class=\"group-list__container__group\">\n    <div\n      fxLayout=\"row\"\n      fxLayoutAlign=\"start center\"\n      fxLayoutGap=\"16px\"\n      (click)=\"onGroupDetail(group.id)\"\n    >\n      <app-avatar [text]=\"group.name[0]\" fontSize=\"19px\"></app-avatar>\n      <div\n        fxLayout=\"row\"\n        fxLayoutAlign=\"space-between center\"\n        fxFlex=\"100%\"\n        style=\"border-bottom: 1px solid rgba(0, 0, 0, 0.12)\"\n      >\n        <div\n          fxLayout=\"column\"\n          fxLayoutAlign=\"start start\"\n          class=\"group-list__container__group__info\"\n        >\n          <span class=\"mat-subheading-1\">{{ group.name }}</span>\n          <span class=\"mat-body-2\">\n            {{ group?.level?.module?.program?.label }} - {{ group?.level?.label }}\n          </span>\n        </div>\n        <button\n          mat-icon-button\n          (click)=\"onGroupEdit(group.id); $event.stopPropagation()\"\n          color=\"primary\"\n          class=\"group-list__container__group__edit-button\"\n        >\n          <mat-icon>edit</mat-icon>\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "GroupsPageComponent",
            "id": "component-GroupsPageComponent-b8b27060a66267208fd58de6dd0ce28c",
            "file": "src/app/classroom/pages/groups-page/groups-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-groups-page",
            "styleUrls": [
                "./groups-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./groups-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "filterOptions",
                    "defaultValue": "[\n        { label: ENROLLMENT_STATUS.ACTIVE, value: ENROLLMENT_STATUS.ACTIVE },\n        { label: ENROLLMENT_STATUS.DELETED, value: ENROLLMENT_STATUS.DELETED },\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "groups$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any[]>",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "navigationTabsConfig",
                    "defaultValue": "{\n        links: [\n            { path: '../students', label: 'students', icon: 'person' },\n            { path: '../groups', label: 'groups', icon: 'groups' } /* TODO: find the right icon 'groups' */,\n        ],\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INavigationTabsConfig",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "studyGroupStatus",
                    "defaultValue": "this.classroomService.classroomFiltersInput.studyGroupStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "getGroups",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAddGroup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFilterSelectChange",
                    "args": [
                        {
                            "name": "status",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onGroupDetail",
                    "args": [
                        {
                            "name": "groupId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "groupId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onGroupEdit",
                    "args": [
                        {
                            "name": "groupId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "groupId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Event } from 'app/@core/models/event.model';\nimport { ClassroomService } from 'app/@core/services/classroom.service';\nimport { ENROLLMENT_STATUS, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { INavigationTabsConfig } from 'app/@shared/components/navigation-tabs/navigation-tabs.component';\nimport { Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport {\n    InvitationDialogComponent,\n    ITab,\n} from 'app/classroom/components/invitation-dialog/invitation-dialog.component';\nimport { MatDialog } from '@angular/material/dialog';\n\nexport interface CreateStudyGroupInput {\n    name: string;\n    levelId: string;\n    events: Event[];\n}\n@Component({\n    selector: 'app-groups-page',\n    templateUrl: './groups-page.component.html',\n    styleUrls: ['./groups-page.component.scss'],\n})\nexport class GroupsPageComponent implements OnInit {\n    navigationTabsConfig: INavigationTabsConfig = {\n        links: [\n            { path: '../students', label: 'students', icon: 'person' },\n            { path: '../groups', label: 'groups', icon: 'groups' } /* TODO: find the right icon 'groups' */,\n        ],\n    };\n    groups$: Observable<any[]>;\n\n    filterOptions = [\n        { label: ENROLLMENT_STATUS.ACTIVE, value: ENROLLMENT_STATUS.ACTIVE },\n        { label: ENROLLMENT_STATUS.DELETED, value: ENROLLMENT_STATUS.DELETED },\n    ];\n\n    studyGroupStatus = this.classroomService.classroomFiltersInput.studyGroupStatus;\n\n    constructor(\n        private matDialog: MatDialog,\n        private classroomService: ClassroomService,\n        private router: Router,\n        private route: ActivatedRoute,\n    ) {}\n\n    ngOnInit(): void {\n        this.getGroups();\n    }\n\n    onFilterSelectChange(status: string) {\n        this.classroomService.setClassroomFiltersInput({\n            studyGroupStatus: status,\n        });\n        this.classroomService.getGroupsQuery().refetch();\n    }\n\n    getGroups() {\n        this.groups$ = this.classroomService\n            .getGroupsQuery()\n            .valueChanges.pipe(map((result: any) => result.data.classroom.studyGroups));\n    }\n\n    onAddGroup() {\n        const dialogRef = this.matDialog.open(InvitationDialogComponent, {\n            panelClass: 'invitation-dialog--material',\n            autoFocus: false,\n            disableClose: true,\n            data: {\n                type: 'group',\n                tabs: [\n                    {\n                        title: 'info',\n                        active: false,\n                        completed: false,\n                        icon: 'account_circle',\n                    },\n                    {\n                        title: 'course',\n                        active: false,\n                        completed: false,\n                        icon: 'school',\n                    },\n                    {\n                        title: 'schedule',\n                        active: false,\n                        completed: false,\n                        icon: 'date_range',\n                    },\n                ] as ITab[],\n            },\n        });\n\n        dialogRef\n            .afterClosed()\n            .pipe(take(1))\n            .subscribe({\n                next: (response) => {\n                    if (!response) {\n                        return;\n                    }\n\n                    const { groupForm, courseForm, eventsForm } = response;\n\n                    let browserTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n                    if (!browserTimeZone) {\n                        // default to SP if not found\n                        browserTimeZone = 'America/Sao_Paulo';\n                    }\n\n                    const newGroup: CreateStudyGroupInput = {\n                        name: groupForm.name,\n                        levelId: courseForm.level.id,\n                        events: eventsForm.events.map((event: Event) => ({\n                            title: groupForm.name,\n                            description: courseForm.level.name,\n                            sourceType: 'STUDY_GROUP',\n                            availabilityType: 'BUSY',\n                            recurrence: event.recurrence,\n                            startDateTime: new Date(parseInt(event.startDateTime, 10)).toISOString(),\n                            startTimeZone: browserTimeZone,\n                            endDateTime: new Date(parseInt(event.endDateTime, 10)).toISOString(),\n                            endTimeZone: browserTimeZone,\n                        })),\n                    };\n\n                    this.classroomService.createStudyGroup(newGroup).subscribe((addedGroup: any) => {\n                        this.classroomService.getGroupsQuery().refetch();\n                    });\n                },\n            });\n    }\n\n    onGroupDetail(groupId: string) {\n        this.router.navigate([groupId, 'schedule'], { relativeTo: this.route });\n    }\n\n    onGroupEdit(groupId: string) {\n        this.classroomService\n            .getGroupById(groupId)\n            .pipe(take(1))\n            .subscribe({\n                next: (group) => {\n                    const dialogRef = this.matDialog.open(InvitationDialogComponent, {\n                        panelClass: 'invitation-dialog--material--editing',\n                        autoFocus: false,\n                        disableClose: true,\n                        data: {\n                            group,\n                            type: 'group',\n                            tabs: [\n                                {\n                                    title: 'info',\n                                    active: false,\n                                    completed: false,\n                                    icon: 'account_circle',\n                                },\n                                {\n                                    title: 'course',\n                                    active: false,\n                                    completed: false,\n                                    icon: 'school',\n                                },\n                                {\n                                    title: 'schedule',\n                                    active: false,\n                                    completed: false,\n                                    icon: 'date_range',\n                                },\n                            ] as ITab[],\n                        },\n                    });\n\n                    dialogRef\n                        .afterClosed()\n                        .pipe(take(1))\n                        .subscribe({\n                            next: (group: StudyGroup) => {\n                                if (!group) {\n                                    return;\n                                }\n                                this.classroomService.classroomRefetch();\n                            },\n                        });\n                },\n            });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n@use '~@angular/flex-layout/mq' as mq;\n\n.groups-page__content {\n    padding: 12px 16px;\n\n    @include mq.layout-bp(gt-xs) {\n        padding: 32px 0 0 32px;\n    }\n}\n",
                    "styleUrl": "./groups-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "classroomService",
                        "type": "ClassroomService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "classroomService",
                        "type": "ClassroomService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-template tpAttach=\"topBarStart\">\n  <app-eslo-letter-logo></app-eslo-letter-logo>\n  <app-top-bar-title text=\"Classes\"></app-top-bar-title>\n</ng-template>\n\n<ng-template tpAttach=\"topBarCenter\">\n  <app-navigation-tabs [navigationTabsConfig]=\"navigationTabsConfig\"></app-navigation-tabs>\n</ng-template>\n\n<ng-template tpAttach=\"floatActionButton\">\n  <button mat-fab class=\"accent-200\" (click)=\"onAddGroup()\">\n    <mat-icon>group_add</mat-icon>\n  </button>\n</ng-template>\n\n<div class=\"groups-page__content\">\n  <app-filters-list\n    [options]=\"filterOptions\"\n    [value]=\"studyGroupStatus\"\n    (selectChangeEvent)=\"onFilterSelectChange($event)\"\n  ></app-filters-list>\n\n  <ng-container *ngIf=\"(groups$ | async) === null\">\n    <app-empty-list\n     \n    ></app-empty-list>\n  </ng-container>\n\n  <ng-container *ngIf=\"groups$ | async as groups\">\n    <ng-container *ngIf=\"groups.length\">\n      <app-groups-list\n        [groups]=\"groups\"\n        (groupDetailEvent)=\"onGroupDetail($event)\"\n        (groupEditEvent)=\"onGroupEdit($event)\"\n      ></app-groups-list>\n    </ng-container>\n    <ng-container *ngIf=\"!groups.length\">\n      <app-empty-list></app-empty-list>\n    </ng-container>\n  </ng-container>\n</div>\n"
        },
        {
            "name": "InvitationDialogComponent",
            "id": "component-InvitationDialogComponent-2ea6cd6a97ca27431ee1c481f4636b9e",
            "file": "src/app/classroom/components/invitation-dialog/invitation-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-invitation-dialog",
            "styleUrls": [
                "./invitation-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./invitation-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "courseForm",
                    "defaultValue": "new FormGroup({\n        sourceType: new FormControl('', [Validators.required]),\n        program: new FormControl('', [Validators.required]),\n        level: new FormControl('', [Validators.required]),\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "courseTabCompleted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "eventsForm",
                    "defaultValue": "new FormGroup({\n        events: new FormArray([], [Validators.required], [EventsWithSameDateValidator.validate()]),\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "formProgress",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "groupForm",
                    "defaultValue": "new FormGroup({\n        name: new FormControl('', [Validators.required]),\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "groups$",
                    "defaultValue": "of([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "resetEventsFormTimeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReturnType<>",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "scheduleTabCompleted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "studentForm",
                    "defaultValue": "new FormGroup({\n        studentInfo: new FormGroup({\n            firstName: new FormControl('', [Validators.required]),\n            lastName: new FormControl('', [Validators.required]),\n            email: new FormControl('', [Validators.required, Validators.email]),\n        }),\n        // sourceType: new FormControl('', [Validators.required]),\n        selectedGroup: new FormControl(''),\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "studentInfoTabCompleted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                }
            ],
            "methodsClass": [
                {
                    "name": "addEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 341,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "backStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 405,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "calculateFormProgress",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 255,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "checkEditingEnrollment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "checkEditingGroup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "checkSelectedGroup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 246,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleKeyDown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:keydown.escape', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "listenSourceTypeChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "nextStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 413,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCancelEnrollment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 602,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangeSchedule",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 465,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 422,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onTransferEnrollment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 537,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onUpdateGroup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 636,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeEvent",
                    "args": [
                        {
                            "name": "eventIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 383,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectTab",
                    "args": [
                        {
                            "name": "tab",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 397,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateEvent",
                    "args": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 371,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:keydown.escape",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostListener, Inject, OnDestroy, OnInit } from '@angular/core';\nimport { MediaObserver } from '@angular/flex-layout';\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef, MatDialog } from '@angular/material/dialog';\nimport { Enrollment, StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Event } from 'app/@core/models/event.model';\nimport { ClassroomService } from 'app/@core/services/classroom.service';\nimport {\n    EventHasNoDaySelectedValidator,\n    EventHasScheduleConflictValidator,\n    EventHasStartAndEndTimeConflictValidator,\n    EventsWithSameDateValidator,\n} from 'app/@shared/components/calendar/schedule-input/validators';\nimport {\n    ModalConfirmationComponent,\n    ModalConfirmationDataOptions,\n} from 'app/@shared/components/modal-confirmation/modal-confirmation.component';\nimport { combineLatest, EMPTY, of, Subject } from 'rxjs';\nimport { debounceTime, map, skip, startWith, switchMap, take, takeUntil } from 'rxjs/operators';\n\nexport interface ITab {\n    title?: string;\n    active?: boolean;\n    icon?: string;\n    completed?: boolean;\n}\n\n@Component({\n    selector: 'app-invitation-dialog',\n    templateUrl: './invitation-dialog.component.html',\n    styleUrls: ['./invitation-dialog.component.scss'],\n})\nexport class InvitationDialogComponent implements OnInit, OnDestroy {\n    private destroy$ = new Subject<void>();\n    private resetEventsFormTimeout: ReturnType<typeof setTimeout>;\n\n    studentForm = new FormGroup({\n        studentInfo: new FormGroup({\n            firstName: new FormControl('', [Validators.required]),\n            lastName: new FormControl('', [Validators.required]),\n            email: new FormControl('', [Validators.required, Validators.email]),\n        }),\n        // sourceType: new FormControl('', [Validators.required]),\n        selectedGroup: new FormControl(''),\n    });\n\n    groupForm = new FormGroup({\n        name: new FormControl('', [Validators.required]),\n    });\n\n    courseForm = new FormGroup({\n        sourceType: new FormControl('', [Validators.required]),\n        program: new FormControl('', [Validators.required]),\n        level: new FormControl('', [Validators.required]),\n    });\n\n    eventsForm = new FormGroup({\n        events: new FormArray([], [Validators.required], [EventsWithSameDateValidator.validate()]),\n    });\n\n    formProgress = 0;\n    studentInfoTabCompleted = false;\n    courseTabCompleted = false;\n    scheduleTabCompleted = false;\n\n    groups$ = of([]);\n\n    @HostListener('document:keydown.escape', ['$event'])\n    handleKeyDown(event: KeyboardEvent) {\n        this.dialogRef.close();\n    }\n\n    constructor(\n        private mediaObserver: MediaObserver,\n        private dialog: MatDialog,\n        private dialogRef: MatDialogRef<InvitationDialogComponent>,\n        private formBuilder: FormBuilder,\n        private classroomService: ClassroomService,\n        @Inject(MAT_DIALOG_DATA)\n        public data: {\n            tabs: ITab[];\n            enrollment: Enrollment;\n            type: string;\n            group: StudyGroup;\n            selectedGroup: StudyGroup;\n        },\n    ) {}\n\n    ngOnInit() {\n        this.tabs[0].active = true;\n\n        if (this.type === 'student') {\n            this.checkEditingEnrollment();\n            this.listenSourceTypeChange();\n\n            if (!this.editingEnrollment) {\n                this.checkSelectedGroup();\n                this.calculateFormProgress();\n                this.addEvent();\n            }\n        }\n\n        if (this.type === 'group') {\n            this.checkEditingGroup();\n            this.sourceTypeControl.setValidators([]);\n            this.sourceTypeControl.updateValueAndValidity();\n\n            if (!this.editingGroup) {\n                this.calculateFormProgress();\n                this.addEvent();\n            }\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n\n        if (this.resetEventsFormTimeout) {\n            clearTimeout(this.resetEventsFormTimeout);\n        }\n    }\n\n    listenSourceTypeChange() {\n        this.sourceTypeControl.valueChanges.pipe(takeUntil(this.destroy$)).subscribe({\n            next: (sourceType) => {\n                if (sourceType === 'group') {\n                    this.groups$ = this.classroomService\n                        .getGroupsQuery()\n                        .valueChanges.pipe(map((result: any) => result.data.classroom.studyGroups));\n\n                    this.programControl.setValidators([]);\n                    this.programControl.updateValueAndValidity();\n                    this.levelControl.setValidators([]);\n                    this.levelControl.updateValueAndValidity();\n                    this.selectedGroupControl.setValidators([Validators.required]);\n                    this.selectedGroupControl.updateValueAndValidity();\n\n                    this.resetEventsFormTimeout = setTimeout(() => {\n                        this.events.setValidators([]);\n                        this.events.setAsyncValidators([]);\n                        this.events.clear();\n                        this.events.updateValueAndValidity();\n                    }, 0);\n                }\n\n                if (sourceType === 'oneOnOne') {\n                    this.programControl.setValidators([Validators.required]);\n                    this.programControl.updateValueAndValidity();\n                    this.levelControl.setValidators([Validators.required]);\n                    this.levelControl.updateValueAndValidity();\n                    this.events.setValidators([Validators.required]);\n                    this.events.setAsyncValidators([EventsWithSameDateValidator.validate()]);\n                    this.events.updateValueAndValidity();\n                    this.selectedGroupControl.setValidators([]);\n                    this.selectedGroupControl.reset();\n                    this.selectedGroupControl.updateValueAndValidity();\n\n                    if (!this.editingEnrollment && !this.events.length) {\n                        this.addEvent();\n                    }\n                }\n            },\n        });\n    }\n\n    checkEditingEnrollment() {\n        if (!this.editingEnrollment) {\n            return;\n        }\n\n        const {\n            student: { familyName: lastName, firstName, primaryEmail: email },\n            level,\n            sourceType,\n            studyGroup,\n            events,\n        } = this.editingEnrollment;\n\n        this.studentInfoForm.patchValue({\n            firstName,\n            lastName,\n            email,\n        });\n\n        this.courseForm.get('level').patchValue(level);\n        // this.studentForm.get('termsAndConditions').patchValue(true);\n\n        const hasGroup = sourceType === 'STUDY_GROUP';\n        const sourceTypeValue = hasGroup ? 'group' : 'oneOnOne';\n        this.sourceTypeControl.patchValue(sourceTypeValue);\n\n        if (hasGroup) {\n            this.selectedGroupControl.patchValue(studyGroup);\n        }\n\n        events.forEach((event) => {\n            const formEvent: Event = {\n                ...event,\n            };\n            this.events.push(\n                this.formBuilder.control(\n                    formEvent,\n                    [],\n                    [\n                        EventHasScheduleConflictValidator.validate(),\n                        EventHasNoDaySelectedValidator.validate(),\n                        EventHasStartAndEndTimeConflictValidator.validate(),\n                    ],\n                ),\n            );\n        });\n    }\n\n    checkEditingGroup() {\n        if (!this.editingGroup) {\n            return;\n        }\n\n        const { name, level, events } = this.editingGroup;\n\n        this.groupForm.patchValue({\n            name,\n        });\n\n        this.courseForm.get('level').patchValue(level);\n\n        events.forEach((event) => {\n            const formEvent: Event = {\n                ...event,\n            };\n            this.events.push(\n                this.formBuilder.control(\n                    formEvent,\n                    [],\n                    [\n                        EventHasScheduleConflictValidator.validate(),\n                        EventHasNoDaySelectedValidator.validate(),\n                        EventHasStartAndEndTimeConflictValidator.validate(),\n                    ],\n                ),\n            );\n        });\n    }\n\n    checkSelectedGroup() {\n        if (!this.selectedGroup) {\n            return;\n        }\n\n        this.sourceTypeControl.patchValue('group');\n        this.selectedGroupControl.patchValue(this.selectedGroup);\n    }\n\n    calculateFormProgress() {\n        combineLatest([\n            this.studentForm.valueChanges.pipe(startWith(this.studentForm.value)),\n            this.groupForm.valueChanges.pipe(startWith(this.studentForm.value)),\n            this.courseForm.valueChanges.pipe(startWith(this.courseForm.value)),\n            this.eventsForm.valueChanges.pipe(startWith(this.eventsForm.value)),\n        ])\n            .pipe(takeUntil(this.destroy$), debounceTime(350))\n            .subscribe({\n                next: ([studentForm, groupForm, courseForm, eventsForm]) => {\n                    const { selectedGroup } = studentForm;\n                    const { sourceType, program, level } = courseForm;\n                    const { events } = eventsForm;\n\n                    if (this.type === 'group') {\n                        if (this.editingGroup ? true : this.groupForm.valid) {\n                            this.tabs[0].completed = true;\n                        } else {\n                            this.tabs[0].completed = false;\n                        }\n\n                        if (program && level) {\n                            this.tabs[1].completed = true;\n                        } else {\n                            this.tabs[1].completed = false;\n                        }\n\n                        if (this.events.valid) {\n                            this.tabs[2].completed = true;\n                        } else {\n                            this.tabs[2].completed = false;\n                        }\n                    } else {\n                        if (this.editingEnrollment ? true : this.studentInfoForm.valid) {\n                            this.tabs[0].completed = true;\n                        } else {\n                            this.tabs[0].completed = false;\n                        }\n\n                        if (\n                            (sourceType === 'group' && selectedGroup) ||\n                            (sourceType === 'oneOnOne' && program && level)\n                        ) {\n                            this.tabs[1].completed = true;\n                        } else {\n                            this.tabs[1].completed = false;\n                        }\n\n                        if (\n                            (sourceType === 'group' && selectedGroup) ||\n                            (sourceType === 'oneOnOne' && this.events.valid)\n                        ) {\n                            this.tabs[2].completed = true;\n                        } else {\n                            this.tabs[2].completed = false;\n                        }\n                    }\n\n                    const completedTabsLength = [\n                        this.tabs[0].completed,\n                        this.tabs[1].completed,\n                        this.tabs[2].completed,\n                    ].filter((tab) => tab).length;\n\n                    if (completedTabsLength === 0) {\n                        this.formProgress = 0;\n                        return;\n                    }\n\n                    if (completedTabsLength === 1) {\n                        this.formProgress = 33;\n                        return;\n                    }\n                    if (completedTabsLength === 2) {\n                        this.formProgress = 66;\n                        return;\n                    }\n                    if (completedTabsLength === 3) {\n                        this.formProgress = 100;\n                        return;\n                    }\n                },\n            });\n    }\n\n    // Push a new event to the Form Array\n    addEvent(): void {\n        const todayStartDate = new Date();\n        todayStartDate.setHours(18, 0);\n        const todayEndDate = new Date();\n        todayEndDate.setHours(19, 0);\n\n        const startDateTime = todayStartDate.getTime().toString();\n        const endDateTime = todayEndDate.getTime().toString();\n\n        const newEvent: Event = {\n            changeStatus: 'NEW',\n            currentDays: [],\n            startDateTime,\n            hasConflict: false,\n            endDateTime,\n            recurrence: 'RRULE:FREQ=WEEKLY;INTERVAL=1',\n        };\n        this.events.push(\n            this.formBuilder.control(\n                newEvent,\n                [],\n                [\n                    EventHasScheduleConflictValidator.validate(),\n                    EventHasNoDaySelectedValidator.validate(),\n                    EventHasStartAndEndTimeConflictValidator.validate(),\n                ],\n            ),\n        );\n    }\n\n    updateEvent({ event, controlIndex }: { event: Event; controlIndex: number }): void {\n        // see if event has an id to only set the change status to edited\n        const currentEvent = this.events.at(controlIndex);\n        if (currentEvent.value.id) {\n            this.events.at(controlIndex).setValue({ ...event, changeStatus: 'EDITED' });\n            return;\n        }\n\n        this.events.at(controlIndex).setValue(event);\n    }\n\n    // Remove event from FormArray\n    removeEvent(eventIndex: number): void {\n        // see if event has an id to only set the change status to deleted\n        const currentEvent = this.events.at(eventIndex);\n        if (currentEvent.value.id) {\n            this.events.at(eventIndex).patchValue({\n                ...currentEvent.value,\n                changeStatus: 'DELETED',\n            });\n            return;\n        }\n\n        this.events.removeAt(eventIndex);\n    }\n\n    selectTab(tab: any) {\n        // deactivate all tabs\n        this.tabs.forEach((tab) => (tab.active = false));\n\n        // activate the tab the user has clicked on.\n        tab.active = true;\n    }\n\n    backStep() {\n        if (this.selectedTab.title === this.tabs[1].title) {\n            this.selectTab(this.tabs[0]);\n        } else if (this.selectedTab.title === this.tabs[2].title) {\n            this.selectTab(this.tabs[1]);\n        }\n    }\n\n    nextStep() {\n        if (this.selectedTab.title === this.tabs[0].title) {\n            this.selectTab(this.tabs[1]);\n        } else if (this.selectedTab.title === this.tabs[1].title) {\n            this.selectTab(this.tabs[2]);\n        }\n    }\n\n    // SAVE METHODS\n    onSave() {\n        if (this.type === 'group') {\n            if (this.editingGroup) {\n                this.onUpdateGroup();\n                return;\n            }\n\n            // create group\n            const formValues = {\n                groupForm: this.groupForm.value,\n                courseForm: this.courseForm.value,\n                eventsForm: this.eventsForm.value,\n            };\n\n            this.dialogRef.close(formValues);\n            return;\n        }\n\n        if (this.type === 'student') {\n            if (this.editingEnrollment) {\n                if (\n                    this.editingEnrollment.sourceType === 'STUDY_GROUP' &&\n                    this.sourceTypeControl.value === 'oneOnOne'\n                ) {\n                    this.onTransferEnrollment();\n                    return;\n                }\n\n                this.onChangeSchedule();\n                return;\n            }\n\n            // create student invitation\n            const formValues = {\n                studentForm: this.studentForm.value,\n                courseForm: this.courseForm.value,\n                eventsForm: this.eventsForm.value,\n            };\n\n            this.dialogRef.close(formValues);\n        }\n    }\n\n    onChangeSchedule(): void {\n        const {\n            studentInfo: { firstName },\n        } = this.studentForm.getRawValue();\n\n        const { level } = this.courseForm.getRawValue();\n        const { events: unparsedEvents } = this.eventsForm.getRawValue();\n\n        let browserTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n        if (!browserTimeZone) {\n            // default to SP if not found\n            browserTimeZone = 'America/Sao_Paulo';\n        }\n\n        const enrollmentId = this.editingEnrollment.id;\n\n        const events = unparsedEvents\n            .map((event) => {\n                const parsedEvent: Event = {\n                    title: `${firstName} (1 on 1)`,\n                    description: level.name,\n                    startTimeZone: browserTimeZone,\n                    endTimeZone: browserTimeZone,\n                    startDateTime: new Date(parseInt(event.startDateTime, 10)).toISOString(),\n                    endDateTime: new Date(parseInt(event.endDateTime, 10)).toISOString(),\n                    recurrence: event.recurrence,\n                    sourceType: 'ENROLLMENT',\n                    availabilityType: 'BUSY',\n                };\n\n                if (event.id) {\n                    parsedEvent.id = event.id;\n                }\n\n                if (event.changeStatus) {\n                    parsedEvent.changeStatus = event.changeStatus;\n                }\n\n                return parsedEvent;\n            })\n            .filter((event) => event.changeStatus);\n\n        const dialogRef = this.dialog.open<ModalConfirmationComponent, ModalConfirmationDataOptions>(\n            ModalConfirmationComponent,\n            {\n                restoreFocus: false,\n                disableClose: true,\n                data: {\n                    message: 'Are you sure?',\n                },\n            },\n        );\n\n        dialogRef\n            .afterClosed()\n            .pipe(\n                take(1),\n                switchMap((confirm: boolean) => {\n                    if (!confirm) {\n                        return EMPTY;\n                    }\n\n                    return this.classroomService.changeEnrollmentSchedule({ enrollmentId, events });\n                }),\n            )\n            .subscribe({\n                next: (changeScheduleEnrollment: Enrollment) => {\n                    this.dialogRef.close(changeScheduleEnrollment);\n                },\n            });\n    }\n\n    onTransferEnrollment() {\n        const {\n            studentInfo: { firstName },\n        } = this.studentForm.getRawValue();\n\n        const { level } = this.courseForm.getRawValue();\n        const { events: unparsedEvents } = this.eventsForm.getRawValue();\n\n        let browserTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n        if (!browserTimeZone) {\n            // default to SP if not found\n            browserTimeZone = 'America/Sao_Paulo';\n        }\n\n        const enrollmentId = this.editingEnrollment.id;\n\n        const events: Event[] = unparsedEvents.map((event) => {\n            const parsedEvent: Event = {\n                title: `${firstName} (1 on 1)`,\n                description: level.name,\n                startTimeZone: browserTimeZone,\n                endTimeZone: browserTimeZone,\n                startDateTime: new Date(parseInt(event.startDateTime, 10)).toISOString(),\n                endDateTime: new Date(parseInt(event.endDateTime, 10)).toISOString(),\n                recurrence: event.recurrence,\n            };\n\n            if (event.id) {\n                parsedEvent.id = event.id;\n            }\n\n            return parsedEvent;\n        });\n\n        const dialogRef = this.dialog.open<ModalConfirmationComponent, ModalConfirmationDataOptions>(\n            ModalConfirmationComponent,\n            {\n                restoreFocus: false,\n                disableClose: true,\n                data: {\n                    title: 'Transfer Enrollment',\n                    message: 'Are you sure you want to move this enrollment to One-on-one?',\n                },\n            },\n        );\n\n        dialogRef\n            .afterClosed()\n            .pipe(\n                take(1),\n                switchMap((confirm: boolean) => {\n                    if (!confirm) {\n                        return EMPTY;\n                    }\n\n                    return this.classroomService.transferEnrollment(enrollmentId, events);\n                }),\n            )\n            .subscribe({\n                next: (enrollmentTransferInvitation: Enrollment) => {\n                    this.dialogRef.close(enrollmentTransferInvitation);\n                },\n            });\n    }\n\n    onCancelEnrollment() {\n        const enrollmentId = this.editingEnrollment.id;\n\n        const dialogRef = this.dialog.open<ModalConfirmationComponent, ModalConfirmationDataOptions>(\n            ModalConfirmationComponent,\n            {\n                restoreFocus: false,\n                disableClose: true,\n                data: {\n                    title: 'Cancel enrollment',\n                    message: 'Are you sure you want to cancel this enrollment?',\n                },\n            },\n        );\n\n        dialogRef\n            .afterClosed()\n            .pipe(\n                take(1),\n                switchMap((confirm: boolean) => {\n                    if (!confirm) {\n                        return EMPTY;\n                    }\n\n                    return this.classroomService.cancelEnrollment(enrollmentId);\n                }),\n            )\n            .subscribe({\n                next: (cancelEnrollment: Enrollment) => {\n                    this.dialogRef.close(cancelEnrollment);\n                },\n            });\n    }\n\n    onUpdateGroup(): void {\n        const { name } = this.groupForm.getRawValue();\n\n        const { level } = this.courseForm.getRawValue();\n        const { events: unparsedEvents } = this.eventsForm.getRawValue();\n\n        let browserTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n        if (!browserTimeZone) {\n            // default to SP if not found\n            browserTimeZone = 'America/Sao_Paulo';\n        }\n\n        const studyGroupId = this.editingGroup.id;\n\n        const events = unparsedEvents\n            .map((event) => {\n                const parsedEvent: Event = {\n                    title: `${name}`,\n                    description: level.name,\n                    startTimeZone: browserTimeZone,\n                    endTimeZone: browserTimeZone,\n                    startDateTime: new Date(parseInt(event.startDateTime, 10)).toISOString(),\n                    endDateTime: new Date(parseInt(event.endDateTime, 10)).toISOString(),\n                    recurrence: event.recurrence,\n                    sourceType: 'STUDY_GROUP',\n                    availabilityType: 'BUSY',\n                };\n\n                if (event.id) {\n                    parsedEvent.id = event.id;\n                }\n\n                if (event.changeStatus) {\n                    parsedEvent.changeStatus = event.changeStatus;\n                }\n\n                return parsedEvent;\n            })\n            .filter((event) => event.changeStatus);\n\n        const dialogRef = this.dialog.open<ModalConfirmationComponent, ModalConfirmationDataOptions>(\n            ModalConfirmationComponent,\n            {\n                restoreFocus: false,\n                disableClose: true,\n                data: {\n                    message: 'Are you sure?',\n                },\n            },\n        );\n\n        dialogRef\n            .afterClosed()\n            .pipe(\n                take(1),\n                switchMap((confirm: boolean) => {\n                    if (!confirm) {\n                        return EMPTY;\n                    }\n\n                    return this.classroomService.updateStudyGroup({ studyGroupId, name, events });\n                }),\n            )\n            .subscribe({\n                next: (group: StudyGroup) => {\n                    this.dialogRef.close(group);\n                },\n            });\n    }\n\n    // -- SAVE METHODS\n\n    // STUDENT\n    get studentInfoForm() {\n        return this.studentForm.get('studentInfo') as FormGroup;\n    }\n\n    get selectedGroupControl() {\n        return this.studentForm.get('selectedGroup') as FormControl;\n    }\n\n    // GROUP\n    get groupNameControl() {\n        return this.groupForm.get('name') as FormControl;\n    }\n\n    get sourceTypeControl() {\n        return this.courseForm.get('sourceType') as FormControl;\n    }\n\n    get programControl() {\n        return this.courseForm.get('program') as FormControl;\n    }\n\n    get levelControl() {\n        return this.courseForm.get('level') as FormControl;\n    }\n\n    get events() {\n        return this.eventsForm.get('events') as FormArray;\n    }\n\n    get type(): string {\n        return this.data?.type;\n    }\n\n    get editingEnrollment() {\n        return this.data?.enrollment;\n    }\n\n    get editingGroup() {\n        return this.data?.group;\n    }\n\n    get selectedGroup() {\n        return this.data?.selectedGroup;\n    }\n\n    get selectedTab(): ITab {\n        return this.tabs.find((tab) => tab.active);\n    }\n\n    get tabs() {\n        return this.data?.tabs;\n    }\n\n    get isMobile() {\n        return this.mediaObserver.isActive('xs');\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n\n.mb-16 {\n    margin-bottom: 16px !important;\n}\n\n.pulse-animation {\n    animation: pulse 1.5s infinite;\n\n    @keyframes pulse {\n        0% {\n            transform: scale(1);\n        }\n\n        50% {\n            transform: scale(1.25);\n        }\n\n        100% {\n            transform: scale(1);\n        }\n    }\n}\n\n@mixin invitation-dialog-theme($theme) {\n    $primary: mat.get-color-from-palette(map-get($theme, primary));\n    $accent: mat.get-color-from-palette(map-get($theme, accent));\n\n    $accent-200: mat.get-color-from-palette(map-get($theme, accent), 200);\n\n    $background: mat.get-color-from-palette(map-get($theme, background), card);\n    $bg-background: mat.get-color-from-palette(map-get($theme, background), background);\n\n    .bg-primary {\n        background-color: $primary;\n    }\n\n    .header {\n        background-color: $primary;\n\n        &__buttons {\n            padding: 10px 10px 0 10px;\n        }\n    }\n\n    .tabs {\n        display: flex;\n        justify-content: space-evenly;\n        align-items: center;\n        padding: 20px 0 15px 0;\n        position: relative;\n\n        &.normal-curve {\n            &::before {\n                content: '';\n                position: absolute;\n                width: 20px;\n                height: 20px;\n                right: 0;\n                bottom: -27px;\n                background: radial-gradient(circle at 100% 0, rgba(0, 0, 0, 0) 70%, $primary 70%);\n                transform: rotate(180deg);\n            }\n\n            &::after {\n                content: '';\n                position: absolute;\n                width: 20px;\n                height: 20px;\n                left: 0;\n                bottom: -27px;\n                background: radial-gradient(circle at 100% 0, rgba(0, 0, 0, 0) 70%, $primary 70%);\n                transform: rotate(90deg);\n            }\n        }\n\n        &.editing-curve {\n            &::before {\n                content: '';\n                position: absolute;\n                width: 20px;\n                height: 20px;\n                right: 0;\n                bottom: -20px;\n                background: radial-gradient(circle at 100% 0, rgba(0, 0, 0, 0) 70%, $primary 70%);\n                transform: rotate(180deg);\n            }\n\n            &::after {\n                content: '';\n                position: absolute;\n                width: 20px;\n                height: 20px;\n                left: 0;\n                bottom: -20px;\n                background: radial-gradient(circle at 100% 0, rgba(0, 0, 0, 0) 70%, $primary 70%);\n                transform: rotate(90deg);\n            }\n        }\n\n        mat-icon {\n            color: $background;\n            opacity: 0.38;\n\n            &.active-icon {\n                color: $background;\n                opacity: 1;\n            }\n\n            &.completed-icon {\n                color: $accent-200;\n                opacity: 1;\n            }\n        }\n\n        &__tab {\n            position: relative;\n            border: 1px solid $background;\n            color: $background;\n            border-radius: 28px;\n            min-width: 65px;\n            height: 36px;\n\n            &--active {\n                color: $accent;\n                background-color: $background;\n            }\n\n            &--completed {\n                border: 1px solid $accent-200;\n            }\n        }\n\n        &__actions {\n            width: 100%;\n            padding: 12px 16px;\n            background-color: darken($bg-background, 5%);\n        }\n    }\n\n    .below-tabs {\n        margin-bottom: 20px;\n    }\n}\n",
                    "styleUrl": "./invitation-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<InvitationDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "classroomService",
                        "type": "ClassroomService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 71,
                "jsdoctags": [
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<InvitationDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "classroomService",
                        "type": "ClassroomService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "studentInfoForm": {
                    "name": "studentInfoForm",
                    "getSignature": {
                        "name": "studentInfoForm",
                        "type": "",
                        "returnType": "",
                        "line": 709
                    }
                },
                "selectedGroupControl": {
                    "name": "selectedGroupControl",
                    "getSignature": {
                        "name": "selectedGroupControl",
                        "type": "",
                        "returnType": "",
                        "line": 713
                    }
                },
                "groupNameControl": {
                    "name": "groupNameControl",
                    "getSignature": {
                        "name": "groupNameControl",
                        "type": "",
                        "returnType": "",
                        "line": 718
                    }
                },
                "sourceTypeControl": {
                    "name": "sourceTypeControl",
                    "getSignature": {
                        "name": "sourceTypeControl",
                        "type": "",
                        "returnType": "",
                        "line": 722
                    }
                },
                "programControl": {
                    "name": "programControl",
                    "getSignature": {
                        "name": "programControl",
                        "type": "",
                        "returnType": "",
                        "line": 726
                    }
                },
                "levelControl": {
                    "name": "levelControl",
                    "getSignature": {
                        "name": "levelControl",
                        "type": "",
                        "returnType": "",
                        "line": 730
                    }
                },
                "events": {
                    "name": "events",
                    "getSignature": {
                        "name": "events",
                        "type": "",
                        "returnType": "",
                        "line": 734
                    }
                },
                "type": {
                    "name": "type",
                    "getSignature": {
                        "name": "type",
                        "type": "string",
                        "returnType": "string",
                        "line": 738
                    }
                },
                "editingEnrollment": {
                    "name": "editingEnrollment",
                    "getSignature": {
                        "name": "editingEnrollment",
                        "type": "",
                        "returnType": "",
                        "line": 742
                    }
                },
                "editingGroup": {
                    "name": "editingGroup",
                    "getSignature": {
                        "name": "editingGroup",
                        "type": "",
                        "returnType": "",
                        "line": 746
                    }
                },
                "selectedGroup": {
                    "name": "selectedGroup",
                    "getSignature": {
                        "name": "selectedGroup",
                        "type": "",
                        "returnType": "",
                        "line": 750
                    }
                },
                "selectedTab": {
                    "name": "selectedTab",
                    "getSignature": {
                        "name": "selectedTab",
                        "type": "",
                        "returnType": "ITab",
                        "line": 754
                    }
                },
                "tabs": {
                    "name": "tabs",
                    "getSignature": {
                        "name": "tabs",
                        "type": "",
                        "returnType": "",
                        "line": 758
                    }
                },
                "isMobile": {
                    "name": "isMobile",
                    "getSignature": {
                        "name": "isMobile",
                        "type": "",
                        "returnType": "",
                        "line": 762
                    }
                }
            },
            "templateData": "<div mat-dialog-title class=\"header\">\n  <div class=\"header__buttons\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n    <button mat-icon-button class=\"white\" mat-dialog-close>\n      <mat-icon>close</mat-icon>\n    </button>\n\n    <button\n      mat-icon-button\n      [disabled]=\"\n        (data?.type === 'group' ? groupForm.invalid : studentForm.invalid) ||\n        courseForm.invalid ||\n        eventsForm.invalid\n      \"\n      class=\"white\"\n      (click)=\"onSave()\"\n    >\n      <mat-icon [class.pulse-animation]=\"formProgress === 100\">\n        {{ !!editingEnrollment || !!editingGroup ? 'check_circle' : 'send' }}\n      </mat-icon>\n    </button>\n  </div>\n  <div\n    class=\"tabs\"\n    [class.normal-curve]=\"!editingEnrollment && !editingGroup\"\n    [class.editing-curve]=\"editingEnrollment || editingGroup\"\n  >\n    <div *ngFor=\"let tab of tabs\" fxLayout=\"column\" fxLayoutAlign=\"start center\" fxLayoutGap=\"13px\">\n      <div\n        (click)=\"selectTab(tab)\"\n        class=\"tabs__tab mat-button\"\n        [class.tabs__tab--active]=\"tab.active\"\n        [class.tabs__tab--completed]=\"\n          !tab.active && tab.completed && !editingEnrollment && !editingGroup\n        \"\n      >\n        <span>{{ tab.title }}</span>\n      </div>\n      <mat-icon\n        *ngIf=\"tab.icon && !editingEnrollment && !editingGroup\"\n        [class.active-icon]=\"tab.active\"\n        [class.completed-icon]=\"tab.completed\"\n        >{{ tab.completed ? 'check_circle' : tab.icon }}</mat-icon\n      >\n    </div>\n  </div>\n  <div *ngIf=\"!editingEnrollment && !editingGroup\" style=\"padding: 0 35px 4px 35px\" fxLayout>\n    <div style=\"width: 100%\">\n      <mat-progress-bar color=\"accent\" mode=\"determinate\" [value]=\"formProgress\"></mat-progress-bar>\n    </div>\n  </div>\n</div>\n<mat-dialog-content>\n  <div [hidden]=\"!(selectedTab.title === 'info')\">\n    <div *ngIf=\"type === 'student'\">\n      <p class=\"mat-subheading-1 mb-16\">\n        {{ (editingEnrollment ? editingEnrollment.student.firstName : 'student') | titlecase }}'s\n        basic info:\n      </p>\n\n      <form [formGroup]=\"studentForm\">\n        <app-student-info\n          [studentInfoForm]=\"studentInfoForm\"\n          [disableControlValue]=\"!!editingEnrollment\"\n        ></app-student-info>\n      </form>\n      <div fxLayout=\"row\" fxLayoutAlign=\"center center\">\n        <button\n          mat-stroked-button\n          color=\"warn\"\n          *ngIf=\"editingEnrollment\"\n          (click)=\"onCancelEnrollment()\"\n        >\n          cancel enrollment\n        </button>\n      </div>\n    </div>\n\n    <div *ngIf=\"type === 'group'\">\n      <p *ngIf=\"!editingEnrollment\" class=\"mat-subheading-1 mb-16\">\n        {{ (editingEnrollment ? 'groupName' : 'group') | titlecase }}'s basic info:\n      </p>\n      <app-group-info\n        [groupNameControl]=\"groupNameControl\"\n        [groupProgramControl]=\"programControl\"\n        [groupLevelControl]=\"levelControl\"\n      ></app-group-info>\n    </div>\n  </div>\n  <div [hidden]=\"!(selectedTab.title === 'course')\">\n    <form [formGroup]=\"courseForm\">\n      <p class=\"mat-subheading-1 mb-16\">\n        {{\n          (type === 'group'\n            ? 'group'\n            : editingEnrollment\n            ? editingEnrollment.student.firstName\n            : 'student'\n          ) | titlecase\n        }}’s course and level:\n      </p>\n      <div *ngIf=\"type === 'student'\">\n        <mat-radio-group\n          formControlName=\"sourceType\"\n          fxLayout=\"column\"\n          fxLayoutAlign=\"space-between start\"\n          style=\"font-size: 16px; height: 180px; padding: 32px 0\"\n        >\n          <mat-radio-button value=\"selfPaced\" disabled>\n            <span style=\"margin-left: 20px\"> Self paced </span>\n          </mat-radio-button>\n          <mat-radio-button value=\"oneOnOne\">\n            <span style=\"margin-left: 20px\"> One-on-one </span>\n          </mat-radio-button>\n          <mat-radio-button value=\"group\">\n            <span style=\"margin-left: 20px\"> Group </span>\n          </mat-radio-button>\n        </mat-radio-group>\n        <div *ngIf=\"sourceTypeControl.value === 'oneOnOne'\">\n          <app-group-program\n            [groupProgramControl]=\"programControl\"\n            [groupLevelControl]=\"levelControl\"\n            [isEditing]=\"!!editingEnrollment\"\n          ></app-group-program>\n        </div>\n        <div *ngIf=\"sourceTypeControl.value === 'group'\">\n          <app-select-group-enrollment\n            [groups]=\"groups$ | async\"\n            [selectedGroupControl]=\"selectedGroupControl\"\n            [programControl]=\"programControl\"\n            [levelControl]=\"levelControl\"\n          ></app-select-group-enrollment>\n        </div>\n      </div>\n\n      <div *ngIf=\"type === 'group'\">\n        <app-group-program\n          [groupProgramControl]=\"programControl\"\n          [groupLevelControl]=\"levelControl\"\n          [isEditing]=\"!!editingGroup\"\n        ></app-group-program>\n      </div>\n    </form>\n  </div>\n\n  <div [hidden]=\"!(selectedTab.title === 'schedule')\">\n    <p class=\"mat-subheading-1 mb-16\">\n      {{\n        (type === 'group'\n          ? 'group'\n          : editingEnrollment\n          ? editingEnrollment.student.firstName\n          : 'student'\n        ) | titlecase\n      }}’s schedule:\n    </p>\n    <app-invitation-events\n      [eventsForm]=\"eventsForm\"\n      [sourceTypeControl]=\"sourceTypeControl\"\n      [events]=\"events\"\n      [type]=\"type\"\n      (addEventSource)=\"addEvent()\"\n      (updateEventSource)=\"updateEvent($event)\"\n      (removeEventSource)=\"removeEvent($event)\"\n    ></app-invitation-events>\n  </div>\n</mat-dialog-content>\n<mat-dialog-actions *ngIf=\"isMobile\">\n  <div\n    fxLayout\n    [fxLayoutAlign]=\"selectedTab?.title !== tabs[0]?.title ? 'space-between center' : 'end center'\"\n    class=\"tabs__actions\"\n  >\n    <button\n      *ngIf=\"selectedTab?.title !== tabs[0]?.title\"\n      mat-button\n      color=\"primary\"\n      (click)=\"backStep()\"\n    >\n      Back\n    </button>\n    <button\n      *ngIf=\"selectedTab?.title !== tabs[2]?.title\"\n      mat-flat-button\n      color=\"primary\"\n      (click)=\"nextStep()\"\n    >\n      Next\n    </button>\n  </div>\n</mat-dialog-actions>\n"
        },
        {
            "name": "InvitationEventsComponent",
            "id": "component-InvitationEventsComponent-3599dcdd74901211ce9402d7dce4ccd3",
            "file": "src/app/classroom/components/invitation-events/invitation-events.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-invitation-events",
            "styleUrls": [
                "./invitation-events.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./invitation-events.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "events",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "FormArray"
                },
                {
                    "name": "eventsForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "FormGroup"
                },
                {
                    "name": "sourceTypeControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "FormControl"
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "addEventSource",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                },
                {
                    "name": "removeEventSource",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                },
                {
                    "name": "updateEventSource",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "addEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getEventHasErrorMessage",
                    "args": [
                        {
                            "name": "eventControl",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"Event has schedule conflict\" | \"Event has no day selected\" | \"Event has conflict with start and end time\" | \"\"",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventControl",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeEvent",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controlIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controlIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { AbstractControl, FormArray, FormControl, FormGroup } from '@angular/forms';\nimport { Event } from 'app/@core/models/event.model';\n\n@Component({\n    selector: 'app-invitation-events',\n    templateUrl: './invitation-events.component.html',\n    styleUrls: ['./invitation-events.component.scss'],\n})\nexport class InvitationEventsComponent {\n    @Input() sourceTypeControl: FormControl;\n    @Input() events: FormArray;\n    @Input() eventsForm: FormGroup;\n    @Input() type: string;\n\n    @Output() addEventSource = new EventEmitter();\n    @Output() updateEventSource = new EventEmitter();\n    @Output() removeEventSource = new EventEmitter();\n\n    constructor() {}\n\n    addEvent() {\n        this.addEventSource.emit();\n    }\n\n    updateEvent(event: Event, controlIndex: number) {\n        this.updateEventSource.emit({ event, controlIndex });\n    }\n\n    removeEvent(index: number) {\n        this.removeEventSource.emit(index);\n    }\n\n    getEventHasErrorMessage(eventControl: AbstractControl) {\n        if (eventControl.getError('hasConflict')) {\n            return 'Event has schedule conflict';\n        }\n\n        if (eventControl.getError('hasNoDaySelected')) {\n            return 'Event has no day selected';\n        }\n\n        if (eventControl.getError('hasStartAndEndTimeConflict')) {\n            return 'Event has conflict with start and end time';\n        }\n\n        return '';\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n@use '~@angular/flex-layout/mq' as mq;\n\n@mixin invitation-events-theme($theme) {\n    $primary-600: mat.get-color-from-palette(map-get($theme, primary), 600);\n    $accent: mat.get-color-from-palette(map-get($theme, accent), 200);\n    $background: mat.get-color-from-palette(map-get($theme, background), card);\n\n    .invitation-events {\n        &__container {\n            background-color: $primary-600;\n            height: 100%;\n\n            &__buttons {\n                padding: 10px 10px 0 10px;\n            }\n\n            &__content {\n                background-color: $background;\n                height: 100%;\n                border-radius: 25px 25px 0 0;\n                margin-top: 20px;\n                padding: 20px 60px 0 60px;\n\n                &__form {\n                    display: grid;\n                    grid-template-columns: 1fr 1fr 1fr;\n                    grid-gap: 85px;\n                    justify-items: center;\n\n                    &__events {\n                        margin-top: 20px;\n                    }\n\n                    &__add-schedule {\n                        margin-top: 24px !important;\n\n                        &--has-event {\n                            margin-right: 40px;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    .link {\n        color: $accent;\n        text-decoration: none;\n        cursor: pointer;\n    }\n\n    .white:not(:disabled) {\n        color: $background;\n        .mat-checkbox-frame {\n            border-color: $background !important;\n        }\n    }\n\n    .h-100 {\n        height: 100%;\n    }\n\n    .h-calc {\n        height: calc(100% - 100px);\n    }\n\n    .h-85 {\n        height: 85vh;\n    }\n\n    .w-100 {\n        width: 100%;\n    }\n}\n",
                    "styleUrl": "./invitation-events.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            },
            "templateData": "<form [formGroup]=\"eventsForm\">\n  <div *ngIf=\"type === 'group' || sourceTypeControl.value === 'oneOnOne'\">\n    <div class=\"invitation-events__container__content__form__events\">\n      <ng-container formArrayName=\"events\" *ngIf=\"events.controls\">\n        <ng-container *ngIf=\"events.getError('hasSameDate')\">\n          <button\n            mat-icon-button\n            type=\"button\"\n            color=\"warn\"\n            matTooltip=\"Events with same date\"\n            matTooltipClass=\"custom-mat-tooltip\"\n          >\n            <mat-icon>error</mat-icon>\n          </button>\n        </ng-container>\n        <div fxLayout=\"column\">\n          <ng-container\n            *ngFor=\"let eventControl of events.controls; let index = index; let first = first\"\n          >\n            <div\n              fxLayout=\"row\"\n              fxLayoutAlign=\"center center\"\n              *ngIf=\"\n                eventControl.value.changeStatus !== 'DELETED' && !eventControl.value.completedAt\n              \"\n              [style.margin-top]=\"first ? '0' : '24px'\"\n            >\n              <app-schedule-input\n                [event]=\"eventControl.value\"\n                [eventControl]=\"eventControl\"\n                (eventChange)=\"updateEvent($event, index)\"\n              >\n                <div daysButtons>\n                  <ng-container *ngIf=\"getEventHasErrorMessage(eventControl) as errorMessage\">\n                    <button\n                      mat-icon-button\n                      type=\"button\"\n                      color=\"warn\"\n                      [matTooltip]=\"errorMessage\"\n                      matTooltipClass=\"custom-mat-tooltip\"\n                    >\n                      <mat-icon>error</mat-icon>\n                    </button>\n                  </ng-container>\n                  <ng-container *ngIf=\"!getEventHasErrorMessage(eventControl)\">\n                    <button mat-icon-button type=\"button\" color=\"primary\">\n                      <mat-icon>check_circle</mat-icon>\n                    </button>\n                  </ng-container>\n                </div>\n\n                <div timesButtons>\n                  <button\n                    [ngClass]=\"{\n                      hidden: (events.controls | checkEventsControls: eventControl)\n                    }\"\n                    mat-icon-button\n                    type=\"button\"\n                    color=\"warn\"\n                    (click)=\"removeEvent(index)\"\n                    matTooltip=\"Remove recurrence\"\n                  >\n                    <mat-icon>remove_circle</mat-icon>\n                  </button>\n                </div>\n              </app-schedule-input>\n            </div>\n          </ng-container>\n        </div>\n      </ng-container>\n    </div>\n    <div\n      fxLayout\n      fxLayoutAlign=\"center center\"\n      class=\"invitation-events__container__content__form__add-schedule\"\n      [class.invitation-events__container__content__form__add-schedule--has-event]=\"\n        events.controls.length\n      \"\n    >\n      <button\n        mat-mini-fab\n        class=\"accent-200\"\n        (click)=\"addEvent()\"\n        type=\"button\"\n        color=\"primary\"\n        matTooltip=\"Create recurrence\"\n      >\n        <mat-icon>more_time</mat-icon>\n      </button>\n    </div>\n    <div style=\"margin-bottom: 24px\"></div>\n  </div>\n  <div style=\"margin-top: 24px\"></div>\n  <app-weekly-availability [eventsToAdd]=\"events.value\"></app-weekly-availability>\n</form>\n"
        },
        {
            "name": "InvitationFormComponent",
            "id": "component-InvitationFormComponent-1b0288f4e76271f4a6f4c1fac000878c",
            "file": "src/app/classroom/components/invitation-form/invitation-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-invitation-form",
            "styleUrls": [
                "./invitation-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./invitation-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "acceptedTerms",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "dialogTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "enrollmentForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "enrollmentInvitation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EnrollmentInvitationInput",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "levels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Level[]",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "matDialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<InvitationFormComponent>",
                    "optional": false,
                    "line": 54,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "programs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Program[]",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "selectedProgram",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Program",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "weekDays",
                    "defaultValue": "[RRule.SU, RRule.MO, RRule.TU, RRule.WE, RRule.TH, RRule.FR, RRule.SA]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Weekday[]",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methodsClass": [
                {
                    "name": "addEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createEventsFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "FormControl[]",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "createInvitationForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate invitation form\n\n",
                    "description": "<p>Create invitation form</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 3681,
                                "end": 3688,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getLevels",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangeSchedule",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 241,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeEvent",
                    "args": [
                        {
                            "name": "eventIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showDialogTermsAndConditions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controlIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controlIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ClassroomService } from '../../../@core/services/classroom.service';\nimport { Component, OnInit, Inject } from '@angular/core';\nimport {\n    FormBuilder,\n    FormControl,\n    FormGroup,\n    Validators,\n    FormArray,\n    ValidationErrors,\n    ValidatorFn,\n} from '@angular/forms';\nimport { MatDialogRef, MatDialog, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { RRule, Weekday } from 'rrule';\n\nimport { Program } from 'app/@core/models/program.model';\nimport { Level } from 'app/@core/models/level.model';\nimport { LMSService } from 'app/@core/services/lms.service';\nimport { EnrollmentInvitationInput } from 'app/@core/models/enrollment-invitation.model';\nimport { Event } from 'app/@core/models/event.model';\nimport { Enrollment } from 'app/@core/models/enrollment.model';\nimport {\n    ModalConfirmationComponent,\n    ModalConfirmationDataOptions,\n} from 'app/@shared/components/modal-confirmation/modal-confirmation.component';\nimport { switchMap, take } from 'rxjs/operators';\nimport { EMPTY } from 'rxjs';\n\n@Component({\n    selector: 'app-invitation-form',\n    templateUrl: './invitation-form.component.html',\n    styleUrls: ['./invitation-form.component.scss'],\n})\nexport class InvitationFormComponent implements OnInit {\n    enrollmentInvitation: EnrollmentInvitationInput;\n    enrollmentForm: FormGroup;\n    dialogTitle: string;\n\n    selectedProgram: Program;\n    acceptedTerms = false;\n    programs: Program[];\n    levels: Level[];\n\n    weekDays: Weekday[] = [RRule.SU, RRule.MO, RRule.TU, RRule.WE, RRule.TH, RRule.FR, RRule.SA];\n\n    /**\n     * Constructor\n     *\n     * @param matDialogRef\n     * @param _data\n     * @param _formBuilder\n     */\n    constructor(\n        public matDialogRef: MatDialogRef<InvitationFormComponent>,\n        private _formBuilder: FormBuilder,\n        private lmsService: LMSService,\n        private classroomService: ClassroomService,\n        private dialog: MatDialog,\n        @Inject(MAT_DIALOG_DATA) private data: { enrollment: Enrollment },\n    ) {\n        // Set the defaults\n        this.levels = [];\n        this.programs = [];\n        this.enrollmentInvitation = {\n            invitation: {\n                sourceType: 'ENROLLMENT',\n            },\n            enrollment: {},\n        };\n\n        if (this.updateEnrollment) {\n            this.enrollmentInvitation.enrollment = this.updateEnrollment;\n        }\n\n        this.enrollmentForm = this.createInvitationForm();\n    }\n\n    ngOnInit(): void {\n        this.lmsService.getPrograms().subscribe({\n            next: (programs) => {\n                this.programs = programs;\n\n                // select current program and level from updated enrollment\n                if (this.updateEnrollment) {\n                    const levelCode = this.enrollmentInvitation.enrollment?.level?.code;\n                    const programCode = levelCode.split('-').shift();\n                    const currentEnrollmentProgram = programs.find((program) => program.code === programCode);\n\n                    this.enrollmentForm.patchValue({\n                        program: currentEnrollmentProgram,\n                    });\n\n                    this.getLevels();\n\n                    const currentEnrollmentLevel = this.levels.find((level) => level.code === levelCode);\n\n                    this.enrollmentForm.patchValue({\n                        level: currentEnrollmentLevel,\n                    });\n                }\n            },\n        });\n    }\n\n    getLevels(): void {\n        const program = this.programFormControl.value;\n        this.levels = [].concat(...program.modules.map((module) => module.levels));\n    }\n\n    /**\n     * Create invitation form\n     *\n     * @returns\n     */\n    createInvitationForm(): FormGroup {\n        return this._formBuilder.group({\n            firstName: [\n                this.enrollmentInvitation.enrollment?.student?.firstName ||\n                    this.enrollmentInvitation.invitation.inviteeFirstName,\n                Validators.compose([Validators.required, Validators.pattern('^[A-Za-zñÑáéíóúÁÉÍÓÚ ]+$')]),\n            ],\n            lastName: [\n                this.enrollmentInvitation.enrollment?.student?.familyName ||\n                    this.enrollmentInvitation.invitation.inviteeSurname,\n                Validators.compose([Validators.required, Validators.pattern('^[A-Za-zñÑáéíóúÁÉÍÓÚ ]+$')]),\n            ],\n            email: [\n                this.enrollmentInvitation.enrollment?.student?.primaryEmail ||\n                    this.enrollmentInvitation.invitation.inviteeEmail,\n                [Validators.required, Validators.email],\n            ],\n            program: [this.selectedProgram, Validators.required],\n            level: [this.enrollmentInvitation.enrollment.level, Validators.required],\n            events: this._formBuilder.array(\n                this.enrollmentInvitation?.enrollment?.events\n                    ? this.enrollmentInvitation?.enrollment?.events\n                    : this.createEventsFormControl(),\n                [ValidateEvents, Validators.minLength(1)],\n            ),\n            termsAndConditions: [\n                this.enrollmentInvitation?.enrollment?.events ? true : this.acceptedTerms,\n                Validators.requiredTrue,\n            ],\n        });\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Events methods (time slots)\n    // -----------------------------------------------------------------------------------------------------\n\n    private createEventsFormControl(): FormControl[] {\n        const newEvent: Event = {};\n        return [this._formBuilder.control(newEvent)];\n    }\n\n    // Get the events from the form array\n    get events(): FormArray {\n        return this.enrollmentForm.get('events') as FormArray;\n    }\n\n    // Get program from form\n    get programFormControl(): FormControl {\n        return this.enrollmentForm.get('program') as FormControl;\n    }\n\n    updateEvent(event: Event, controlIndex: number): void {\n        // see if event has an id to only set the change status to edited\n        const currentEvent = this.events.at(controlIndex);\n        if (currentEvent.value.id) {\n            this.events.at(controlIndex).setValue({ ...event, changeStatus: 'EDITED' });\n            return;\n        }\n\n        this.events.at(controlIndex).setValue(event);\n    }\n\n    // Push a new event to the Form Array\n    addEvent(): void {\n        const newEvent: Event = { changeStatus: 'NEW' };\n        this.events.push(this._formBuilder.control(newEvent));\n    }\n\n    // Remove event from FormArray\n    removeEvent(eventIndex: number): void {\n        // see if event has an id to only set the change status to deleted\n        const currentEvent = this.events.at(eventIndex);\n        if (currentEvent.value.id) {\n            this.events.at(eventIndex).patchValue({\n                ...currentEvent.value,\n                changeStatus: 'DELETED',\n            });\n            return;\n        }\n\n        this.events.removeAt(eventIndex);\n    }\n    // -----------------------------------------------------------------------------------------------------\n\n    showDialogTermsAndConditions(): void {\n        window.open('http://eslo.com.br/termos-e-condicoes/', '_blank');\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Enrollment methods\n    // -----------------------------------------------------------------------------------------------------\n\n    onCancel(): void {\n        const enrollmentId = this.updateEnrollment.id;\n\n        const dialogRef = this.dialog.open<ModalConfirmationComponent, ModalConfirmationDataOptions>(\n            ModalConfirmationComponent,\n            {\n                restoreFocus: false,\n                disableClose: true,\n                data: {\n                    title: 'Cancel enrollment',\n                    message: 'Are you sure you want to cancel this enrollment?',\n                },\n            },\n        );\n\n        dialogRef\n            .afterClosed()\n            .pipe(\n                take(1),\n                switchMap((confirm: boolean) => {\n                    if (!confirm) {\n                        return EMPTY;\n                    }\n\n                    return this.classroomService.cancelEnrollment(enrollmentId);\n                }),\n            )\n            .subscribe({\n                next: (cancelEnrollment: Enrollment) => {\n                    this.matDialogRef.close(cancelEnrollment);\n                },\n            });\n    }\n\n    onChangeSchedule(): void {\n        const { firstName, level, events: unparsedEvents } = this.enrollmentForm.getRawValue();\n\n        let browserTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n        if (!browserTimeZone) {\n            // default to SP if not found\n            browserTimeZone = 'America/Sao_Paulo';\n        }\n\n        const enrollmentId = this.updateEnrollment.id;\n\n        const events = unparsedEvents\n            .map((event) => {\n                const parsedEvent: Event = {\n                    title: `${firstName} (1 on 1)`,\n                    description: level.name,\n                    sourceType: 'ENROLLMENT',\n                    availabilityType: 'BUSY',\n                    startTimeZone: browserTimeZone,\n                    endTimeZone: browserTimeZone,\n                    startDateTime: new Date(parseInt(event.startDateTime, 10)).toISOString(),\n                    endDateTime: new Date(parseInt(event.endDateTime, 10)).toISOString(),\n                    recurrence: event.recurrence,\n                };\n\n                if (event.id) {\n                    parsedEvent.id = event.id;\n                }\n\n                if (event.changeStatus) {\n                    parsedEvent.changeStatus = event.changeStatus;\n                }\n\n                return parsedEvent;\n            })\n            .filter((event) => event.changeStatus);\n\n        const dialogRef = this.dialog.open<ModalConfirmationComponent, ModalConfirmationDataOptions>(\n            ModalConfirmationComponent,\n            {\n                restoreFocus: false,\n                disableClose: true,\n                data: {\n                    message: 'Are you sure?',\n                },\n            },\n        );\n\n        dialogRef\n            .afterClosed()\n            .pipe(\n                take(1),\n                switchMap((confirm: boolean) => {\n                    if (!confirm) {\n                        return EMPTY;\n                    }\n\n                    return this.classroomService.changeEnrollmentSchedule({ enrollmentId, events });\n                }),\n            )\n            .subscribe({\n                next: (changeScheduleEnrollment: Enrollment) => {\n                    this.matDialogRef.close(changeScheduleEnrollment);\n                },\n            });\n    }\n\n    get updateEnrollment(): Enrollment {\n        return this.data?.enrollment;\n    }\n    // -----------------------------------------------------------------------------------------------------\n}\n\n/**\n * Event validation\n *\n * @param events\n * @returns\n */\nconst ValidateEvents: ValidatorFn = (eventControls: FormArray): ValidationErrors | null => {\n    let validEvents = true;\n    if (!eventControls?.controls) {\n        validEvents = false;\n    } else {\n        eventControls.controls.forEach((control) => {\n            try {\n                const event: Event = control.value;\n                if (!(event && event.recurrence && event.startDateTime && event.endDateTime)) {\n                    validEvents = false;\n                } else {\n                    const eventRecurrence = RRule.fromString(event.recurrence);\n                    const eventStart = new Date(parseInt(event.startDateTime, 10));\n                    const eventEnd = new Date(parseInt(event.endDateTime, 10));\n\n                    if (\n                        !(eventRecurrence.isFullyConvertibleToText() && eventStart && eventEnd && eventEnd > eventStart)\n                    ) {\n                        validEvents = false;\n                    }\n                }\n            } catch (error) {\n                return { invalidEvent: true };\n            }\n        });\n    }\n\n    if (validEvents) {\n        return null;\n    } else {\n        return { invalidEvent: true };\n    }\n};\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hidden {\n    opacity: 0;\n    pointer-events: none;\n}\n",
                    "styleUrl": "./invitation-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "matDialogRef",
                        "type": "MatDialogRef<InvitationFormComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "lmsService",
                        "type": "LMSService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "classroomService",
                        "type": "ClassroomService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "rawdescription": "\n\nConstructor\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1612,
                            "end": 1624,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "matDialogRef"
                        },
                        "type": "MatDialogRef<InvitationFormComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1606,
                            "end": 1611,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1659,
                            "end": 1671,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "_formBuilder"
                        },
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1653,
                            "end": 1658,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "lmsService",
                        "type": "LMSService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "classroomService",
                        "type": "ClassroomService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "events": {
                    "name": "events",
                    "getSignature": {
                        "name": "events",
                        "type": "",
                        "returnType": "FormArray",
                        "line": 157
                    }
                },
                "programFormControl": {
                    "name": "programFormControl",
                    "getSignature": {
                        "name": "programFormControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 162
                    }
                },
                "updateEnrollment": {
                    "name": "updateEnrollment",
                    "getSignature": {
                        "name": "updateEnrollment",
                        "type": "",
                        "returnType": "Enrollment",
                        "line": 308
                    }
                }
            },
            "templateData": "<div class=\"dialog-content-wrapper\">\n  <mat-toolbar matDialogTitle class=\"mat-primary m-0\">\n    <mat-toolbar-row fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n      <span class=\"title dialog-title\">{{\n        updateEnrollment ? 'Edit enrollment' : 'Send New Invitation'\n      }}</span>\n      <button mat-icon-button (click)=\"matDialogRef.close()\" aria-label=\"Close dialog\">\n        <mat-icon>close</mat-icon>\n      </button>\n    </mat-toolbar-row>\n  </mat-toolbar>\n\n  <div mat-dialog-content class=\"p-24 pb-0 m-0\" fusePerfectScrollbar>\n    <form [formGroup]=\"enrollmentForm\">\n      <div fxLayout=\"row\" fxLayoutAlign=\"start start\">\n        <mat-form-field appearance=\"outline\" fxFlex>\n          <mat-label>First Name</mat-label>\n          <mat-icon matSuffix class=\"secondary-text\">account_circle</mat-icon>\n          <input\n            name=\"name\"\n            formControlName=\"firstName\"\n            matInput\n            required\n            [disableControl]=\"updateEnrollment\"\n          />\n          <mat-error> First Name is required </mat-error>\n        </mat-form-field>\n      </div>\n\n      <div fxLayout=\"row\" fxLayoutAlign=\"start start\">\n        <mat-form-field appearance=\"outline\" fxFlex>\n          <mat-label>Last Name</mat-label>\n          <mat-icon matSuffix class=\"secondary-text\">account_circle</mat-icon>\n          <input\n            name=\"lastName\"\n            formControlName=\"lastName\"\n            matInput\n            required\n            [disableControl]=\"updateEnrollment\"\n          />\n          <mat-error> Last Name is required </mat-error>\n        </mat-form-field>\n      </div>\n\n      <div fxLayout=\"row\" fxLayoutAlign=\"start start\">\n        <mat-form-field appearance=\"outline\" fxFlex>\n          <mat-label>Email</mat-label>\n          <mat-icon matSuffix class=\"secondary-text\">email</mat-icon>\n          <input\n            name=\"email\"\n            formControlName=\"email\"\n            matInput\n            type=\"email\"\n            required\n            [disableControl]=\"updateEnrollment\"\n          />\n          <mat-error> A valid email is required </mat-error>\n        </mat-form-field>\n      </div>\n\n      <div fxLayout=\"row\" fxLayoutAlign=\"start start\">\n        <mat-form-field appearance=\"outline\" fxFlex>\n          <mat-label>Course</mat-label>\n          <mat-select\n            formControlName=\"program\"\n            (selectionChange)=\"getLevels()\"\n            [disableControl]=\"updateEnrollment\"\n          >\n            <mat-option *ngFor=\"let program of programs\" [value]=\"program\">\n              {{ program.name }}\n            </mat-option>\n          </mat-select>\n          <mat-error> Course is required </mat-error>\n        </mat-form-field>\n      </div>\n\n      <div fxLayout=\"row\" fxLayoutAlign=\"start start\">\n        <mat-form-field appearance=\"outline\" fxFlex>\n          <mat-label>Level</mat-label>\n          <mat-select formControlName=\"level\" [disableControl]=\"updateEnrollment\">\n            <mat-option *ngFor=\"let level of levels\" [value]=\"level\">\n              {{ level.name }}\n            </mat-option>\n          </mat-select>\n          <mat-error> Level is required </mat-error>\n        </mat-form-field>\n      </div>\n\n      <div fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\n        <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n          <span>Schedule:</span>\n\n          <!--Warning of required event - shows only for the first event-->\n          <button\n            *ngIf=\"\n              enrollmentForm.get('events').value.length === 1 &&\n              enrollmentForm.get('events').hasError('invalidEvent')\n            \"\n            mat-icon-button\n            matTooltip=\"You must add at least one recurring event\"\n            matTooltipPosition=\"right\"\n            color=\"warn\"\n          >\n            <mat-icon>error_outline</mat-icon>\n          </button>\n\n          <!--Warning of event missing information - shows only when hasError('invalidEvent')-->\n          <button\n            *ngIf=\"\n              enrollmentForm.get('events').value.length > 1 &&\n              enrollmentForm.get('events').hasError('invalidEvent')\n            \"\n            mat-icon-button\n            matTooltip=\"Event(s) missing information\"\n            matTooltipPosition=\"right\"\n            color=\"warn\"\n          >\n            <mat-icon>error_outline</mat-icon>\n          </button>\n\n          <!--Ok sign - shows when there's no error-->\n          <button\n            *ngIf=\"!enrollmentForm.get('events').hasError('invalidEvent')\"\n            mat-icon-button\n            class=\"green-500-fg\"\n          >\n            <mat-icon>check_circle_outline</mat-icon>\n          </button>\n        </div>\n\n        <div>\n          <button mat-icon-button color=\"primary\" (click)=\"addEvent()\">\n            <mat-icon>add_circle</mat-icon>\n          </button>\n        </div>\n      </div>\n      <ng-container formArrayName=\"events\" *ngIf=\"events.controls\">\n        <div fxLayout=\"column\">\n          <ng-container\n            *ngFor=\"let eventControl of events.controls; let index = index; let first = first\"\n          >\n            <div\n              fxLayout=\"row\"\n              fxLayoutAlign=\"center center\"\n              *ngIf=\"eventControl.value.changeStatus !== 'DELETED'\"\n            >\n              <app-schedule-input\n                [event]=\"eventControl.value\"\n                (eventChange)=\"updateEvent($event, index)\"\n                fxFlex=\"1 1 auto\"\n              ></app-schedule-input>\n              <button\n                [class.hidden]=\"events.controls | checkEventsControls: eventControl\"\n                mat-icon-button\n                color=\"warn\"\n                (click)=\"removeEvent(index)\"\n              >\n                <mat-icon>remove_circle</mat-icon>\n              </button>\n            </div>\n          </ng-container>\n        </div>\n      </ng-container>\n\n      <mat-expansion-panel class=\"mt-12 mat-elevation-z0\">\n        <mat-expansion-panel-header class=\"px-0 mx-8\"> Availability </mat-expansion-panel-header>\n        <app-weekly-availability></app-weekly-availability>\n      </mat-expansion-panel>\n\n      <ng-container *ngIf=\"!updateEnrollment\">\n        <div class=\"terms mat-typography\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n          <mat-checkbox formControlName=\"termsAndConditions\" aria-label=\"Accept\" required>\n            <span>Accept <a (click)=\"showDialogTermsAndConditions()\">Terms and Conditions</a></span>\n          </mat-checkbox>\n        </div>\n\n        <div fxLayout=\"row\" fxLayoutAlign=\"center center\">\n          <div fxFlex=\"90%\" fxFlexAlign=\"center\">\n            <h5 class=\"mat-body-2\">\n              <mat-icon class=\"s-24 yellow-800-fg secondary-text\"> priority_high </mat-icon>\n              By accepting the terms, you will be charged R$34,90 montly for your student's\n              subscription.\n            </h5>\n          </div>\n        </div>\n      </ng-container>\n    </form>\n  </div>\n\n  <div\n    *ngIf=\"!updateEnrollment\"\n    mat-dialog-actions\n    class=\"m-0 p-16\"\n    fxLayout=\"row\"\n    fxLayoutAlign=\"end center\"\n  >\n    <button\n      mat-button\n      (click)=\"matDialogRef.close(enrollmentForm)\"\n      [disabled]=\"enrollmentForm.invalid\"\n      aria-label=\"SAVE\"\n      color=\"primary\"\n    >\n      Send Invitation\n    </button>\n  </div>\n\n  <div\n    *ngIf=\"updateEnrollment\"\n    mat-dialog-actions\n    class=\"m-0 pr-24 pb-24\"\n    fxLayout=\"column\"\n    fxLayoutAlign=\"center stretch\"\n    fxLayoutGap=\"16px\"\n  >\n    <button\n      mat-raised-button\n      fxFlexAlign=\"center\"\n      color=\"primary\"\n      (click)=\"onChangeSchedule()\"\n      aria-label=\"Change schedule\"\n      [disabled]=\"enrollmentForm.invalid\"\n    >\n      CHANGE SCHEDULE\n    </button>\n    <button\n      fxFlexAlign=\"end\"\n      mat-button\n      color=\"warn\"\n      (click)=\"onCancel()\"\n      aria-label=\"Cancel enrollment\"\n    >\n      Cancel enrollment\n    </button>\n  </div>\n</div>\n"
        },
        {
            "name": "InvoiceDetailsPageComponent",
            "id": "component-InvoiceDetailsPageComponent-77d36b0f7d92b123db3f73e782755997",
            "file": "src/app/subscription/pages/invoice-details-page/invoice-details-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-invoice-details-page",
            "styleUrls": [
                "./invoice-details-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./invoice-details-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "navigationTabsConfig",
                    "defaultValue": "{\n        links: [\n            { path: '../invoices', label: 'invoice', icon: 'receipt' },\n            { path: '../method', label: 'method', icon: 'payments' },\n        ],\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INavigationTabsConfig",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { INavigationTabsConfig } from 'app/@shared/components/navigation-tabs/navigation-tabs.component';\n\n@Component({\n    selector: 'app-invoice-details-page',\n    templateUrl: './invoice-details-page.component.html',\n    styleUrls: ['./invoice-details-page.component.scss'],\n})\nexport class InvoiceDetailsPageComponent {\n    navigationTabsConfig: INavigationTabsConfig = {\n        links: [\n            { path: '../invoices', label: 'invoice', icon: 'receipt' },\n            { path: '../method', label: 'method', icon: 'payments' },\n        ],\n    };\n\n    constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./invoice-details-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "templateData": "<ng-template tpAttach=\"topBarStart\">\n  <app-back-button></app-back-button>\n  <app-top-bar-title text=\"Payment details\"></app-top-bar-title>\n</ng-template>\n\n<ng-template tpAttach=\"topBarCenter\">\n  <app-navigation-tabs [navigationTabsConfig]=\"navigationTabsConfig\"></app-navigation-tabs>\n</ng-template>\n"
        },
        {
            "name": "InvoicePreviewComponent",
            "id": "component-InvoicePreviewComponent-d954dc8478ba169ece9317438164b466",
            "file": "src/app/subscription/components/invoice-preview/invoice-preview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-invoice-preview",
            "styleUrls": [
                "./invoice-preview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./invoice-preview.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "invoice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Invoice"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Invoice } from 'app/@core/models/invoice.model';\n\n@Component({\n    selector: 'app-invoice-preview',\n    templateUrl: './invoice-preview.component.html',\n    styleUrls: ['./invoice-preview.component.scss'],\n})\nexport class InvoicePreviewComponent {\n    @Input() invoice: Invoice;\n\n    constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/flex-layout/mq' as mq;\n\n.text-color {\n    color: rgba(0, 0, 0, 0.6);\n}\n\n.text-color-2 {\n    color: rgba(0, 0, 0, 0.87) !important;\n}\n\n.mb-12 {\n    margin-bottom: 12px !important;\n}\n\n.mt-24 {\n    margin-top: 24px !important;\n}\n\n.mb-4 {\n    margin-bottom: 4px !important;\n}\n\n.mb-0 {\n    margin-bottom: 0 !important;\n}\n\n.invoice {\n    &__wrapper {\n\n        @include mq.layout-bp(gt-xs) {\n            min-width: 75vw;\n        }\n\n        @include mq.layout-bp(gt-sm) {\n            min-width: 80vw;\n        }\n    }\n\n    &__header {\n        padding: 0 18px;\n        @include mq.layout-bp(gt-xs) {\n            padding: 0;\n        }\n    }\n\n    &__company-details {\n        display: flex;\n\n        &__image {\n            margin-right: 14px;\n\n            @include mq.layout-bp(gt-xs) {\n                margin-right: 80px;\n            }\n        }\n\n        &__info {\n            display: flex;\n            flex-direction: column;\n            max-width: 240px;\n        }\n    }\n}\n\n.invoice-items__container {\n    padding: 24px 0 0 16px;\n\n    &__header {\n        padding: 28px 0;\n    }\n\n    &__item {\n        &__info {\n            padding: 16px 16px 16px 0;\n\n            .mat-body-2 {\n                color: rgba(0, 0, 0, 0.6);\n            }\n        }\n    }\n}\n\n.border-bottom {\n    border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n}\n\n.text-center {\n    text-align: center;\n}\n\n.pr {\n    padding-right: 20px;\n\n    @include mq.layout-bp(gt-xs) {\n        padding-right: 60px;\n    }\n}\n\n.pr-items-header {\n    padding-right: 20px;\n\n    @include mq.layout-bp(gt-xs) {\n        padding-right: 0;\n    }\n}\n",
                    "styleUrl": "./invoice-preview.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "templateData": "<div class=\"invoice__wrapper\">\n  <div class=\"invoice__header\">\n    <div\n      fxLayout=\"column\"\n      fxLayoutGap.xs=\"24px\"\n      fxLayoutAlign=\"space-between start\"\n      fxLayout.gt-xs=\"row\"\n    >\n      <div class=\"invoice__company-details\" fxFlexOrder=\"1\" fxFlexOrder.gt-xs=\"2\">\n        <img\n          class=\"invoice__company-details__image\"\n          src=\"../../../../assets/images/logos/eslo-logo-round.svg\"\n          alt=\"eslo round logo\"\n        />\n        <div class=\"invoice__company-details__info mat-subheading-2\">\n          <span>{{ invoice?.companyDetails.name }}.</span>\n          <span>{{ invoice?.companyDetails.address }}</span>\n          <span>{{ invoice?.companyDetails.phone }}</span>\n          <span>{{ invoice?.companyDetails.email }}</span>\n          <span>{{ invoice?.companyDetails.webSite }}</span>\n        </div>\n      </div>\n\n      <div fxLayout fxLayoutGap=\"24px\" fxFlexOrder=\"2\" fxFlexOrder.gt-xs=\"1\">\n        <div fxLayout=\"column\" fxLayoutAlign=\"start start\">\n          <div class=\"mat-display-1 mb-12\">INVOICE</div>\n          <div class=\"mat-subheading-1 text-color mb-4\">INVOICE DATE</div>\n          <div class=\"mat-subheading-1 text-color mb-4\">DUE DATE</div>\n          <div class=\"mat-subheading-1 text-color\">TOTAL DUE</div>\n        </div>\n        <div fxLayout=\"column\" fxLayoutAlign=\"start start\">\n          <div class=\"mat-display-1 mb-12\">#0-0001</div>\n          <div class=\"mat-subheading-1 text-color mb-4\">{{ invoice?.processedAt | invoiceDate }}</div>\n          <div class=\"mat-subheading-1 text-color mb-4\">{{ invoice?.dueDate | invoiceDate }}</div>\n          <div class=\"mat-subheading-1 text-color\">\n            {{ invoice?.balanceSummary?.totalAmount | currency: 'BRL' }}\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div fxLayout=\"column\" class=\"mt-24\">\n      <span class=\"mat-title mb-4\">{{ invoice?.customerDetails.name }}</span>\n      <span class=\"mat-subheading-2 text-color\">{{ invoice?.customerDetails.address }}</span>\n      <span class=\"mat-subheading-2 text-color\">{{ invoice?.customerDetails.email }}</span>\n      <span class=\"mat-subheading-2 text-color\">{{\n        invoice?.customerDetails.phone | mask: '00 00 00000 0000'\n      }}</span>\n    </div>\n  </div>\n\n  <div class=\"invoice-items__container\">\n    <div>\n      <!-- ITEMS HEADER -->\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"16px\">\n        <div\n          fxLayout=\"row\"\n          fxLayoutAlign=\"space-between center\"\n          fxFlex=\"100%\"\n          class=\"invoice-items__container__header border-bottom text-color mat-subheading-1\"\n        >\n          <span fxFlex.gt-xs=\"70\">Description</span>\n          <span fxFlex.gt-xs=\"10\" class=\"text-center\" fxHide fxShow.gt-xs>RATE</span>\n          <span fxFlex.gt-xs=\"10\" class=\"text-center\" fxHide fxShow.gt-xs>DAYS</span>\n          <span fxFlex.gt-xs=\"10\" class=\"text-center pr-items-header\">TOTAL</span>\n        </div>\n      </div>\n\n      <!-- ITEMS -->\n      <div *ngFor=\"let item of invoice?.invoiceItems\" class=\"invoice-items__container__item\">\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"16px\">\n          <div\n            fxLayout=\"row\"\n            fxLayoutAlign=\"space-between center\"\n            fxFlex=\"100%\"\n            class=\"border-bottom\"\n          >\n            <div\n              fxLayout=\"column\"\n              fxLayoutAlign=\"start start\"\n              class=\"invoice-items__container__item__info\"\n              fxFlex.gt-xs=\"70\"\n            >\n              <span class=\"mat-subheading-1 text-color\">{{ item?.productName }}</span>\n              <span class=\"mat-body-2 text-color-2\">{{ item?.productDescription }}</span>\n            </div>\n            <span fxFlex.gt-xs=\"10\" class=\"text-center text-color\" fxHide fxShow.gt-xs>{{\n              item?.balance?.unitPrice | currency: 'BRL'\n            }}</span>\n            <span fxFlex.gt-xs=\"10\" class=\"text-center text-color\" fxHide fxShow.gt-xs>{{\n              item?.balance?.quantity | invoiceDays\n            }}</span>\n            <span fxFlex.gt-xs=\"10\" class=\"text-center text-color pr-items-header\">{{\n              item?.balance?.totalAmount | currency: 'BRL'\n            }}</span>\n          </div>\n        </div>\n      </div>\n\n      <!-- SUBTOTAL -->\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"16px\">\n        <div\n          fxLayout=\"row\"\n          fxLayoutAlign=\"space-between center\"\n          fxFlex=\"100%\"\n          class=\"invoice-items__container__header border-bottom\"\n        >\n          <span class=\"mat-subheading-1 text-color-2\">SUBTOTAL</span>\n          <span class=\"pr mat-subheading-1 text-color-2\">{{\n            invoice?.balanceSummary?.totalAmount -\n              invoice?.balanceSummary?.discountAmount -\n              invoice?.balanceSummary?.taxAmount | currency: 'BRL'\n          }}</span>\n        </div>\n      </div>\n      <!-- TAX -->\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"16px\">\n        <div\n          fxLayout=\"row\"\n          fxLayoutAlign=\"space-between center\"\n          fxFlex=\"100%\"\n          class=\"invoice-items__container__header border-bottom\"\n        >\n          <span class=\"mat-subheading-1 text-color-2\">TAX</span>\n          <span class=\"pr mat-subheading-1 text-color-2\">{{\n            invoice?.balanceSummary?.taxAmount | currency: 'BRL'\n          }}</span>\n        </div>\n      </div>\n      <!-- DISCOUNT -->\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"16px\">\n        <div\n          fxLayout=\"row\"\n          fxLayoutAlign=\"space-between center\"\n          fxFlex=\"100%\"\n          class=\"invoice-items__container__header border-bottom\"\n        >\n          <span class=\"mat-subheading-1 text-color-2\">DISCOUNT</span>\n          <span class=\"pr mat-subheading-1 text-color-2\">{{\n            invoice?.balanceSummary?.discountAmount | currency: 'BRL'\n          }}</span>\n        </div>\n      </div>\n      <!-- TOTAL -->\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"16px\">\n        <div\n          fxLayout=\"row\"\n          fxLayoutAlign=\"space-between center\"\n          fxFlex=\"100%\"\n          class=\"invoice-items__container__header border-bottom\"\n        >\n          <span class=\"mat-title text-color-2 mb-0\">TOTAL</span>\n          <span class=\"mat-title text-color-2 mb-0 pr\">{{\n            invoice?.balanceSummary?.totalAmount | currency: 'BRL'\n          }}</span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "InvoicesListComponent",
            "id": "component-InvoicesListComponent-7032c029cee7f55783d5f45889bb2d07",
            "file": "src/app/subscription/components/invoices-list/invoices-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-invoices-list",
            "styleUrls": [
                "./invoices-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./invoices-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "invoices",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "invoiceDetailEvent",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onInvoiceDetail",
                    "args": [
                        {
                            "name": "invoiceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "invoiceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'app-invoices-list',\n    templateUrl: './invoices-list.component.html',\n    styleUrls: ['./invoices-list.component.scss'],\n})\nexport class InvoicesListComponent {\n    @Input() invoices: any[];\n\n    @Output() invoiceDetailEvent = new EventEmitter<string>();\n\n    constructor() {}\n\n    onInvoiceDetail(invoiceId: string) {\n        this.invoiceDetailEvent.emit(invoiceId);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".invoices-list__container {\n  padding: 24px 0 0 16px;\n\n  &__invoice {\n      cursor: pointer;\n\n      &__info {\n          padding: 16px 16px 16px 0;\n\n          .mat-body-2 {\n              color: rgba(0, 0, 0, 0.6);\n          }\n      }\n\n      &__status-icon {\n          margin-right: 19px;\n      }\n  }\n}\n",
                    "styleUrl": "./invoices-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "templateData": "<div class=\"invoices-list__container\">\n  <div *ngFor=\"let invoice of invoices\" class=\"invoices-list__container__invoice\">\n    <div\n      fxLayout=\"row\"\n      fxLayoutAlign=\"start center\"\n      fxLayoutGap=\"16px\"\n      (click)=\"onInvoiceDetail(invoice.id)\"\n    >\n      <div\n        fxLayout=\"row\"\n        fxLayoutAlign=\"space-between center\"\n        fxFlex=\"100%\"\n        style=\"border-bottom: 1px solid rgba(0, 0, 0, 0.12)\"\n      >\n        <span class=\"mat-subheading-1\">FEBRUARY 2021</span>\n        <div fxLayout fxLayoutAlign=\"center center\" fxLayoutGap=\"40px\">\n          <span>R$ 349,00</span>\n          <button\n            mat-icon-button\n            color=\"primary\"\n            class=\"invoices-list__container__invoice__status-icon\"\n          >\n            <mat-icon>edit</mat-icon>\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "InvoicesPageComponent",
            "id": "component-InvoicesPageComponent-62fd4ff390eec4d318fa3e7b4cc19594",
            "file": "src/app/subscription/pages/invoices-page/invoices-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-invoices-page",
            "styleUrls": [
                "./invoices-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./invoices-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "invoice$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Invoice>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "invoices$",
                    "defaultValue": "of([{ id: 'd21312' }])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "navigationTabsConfig",
                    "defaultValue": "{\n        links: [{ path: '../invoices', label: 'invoice', icon: 'receipt' }],\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INavigationTabsConfig",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onInvoiceDetail",
                    "args": [
                        {
                            "name": "invoiceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "invoiceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Invoice } from 'app/@core/models/invoice.model';\nimport { SubscriptionService } from 'app/@core/services/subscription.service';\nimport { INavigationTabsConfig } from 'app/@shared/components/navigation-tabs/navigation-tabs.component';\nimport { Observable, of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-invoices-page',\n    templateUrl: './invoices-page.component.html',\n    styleUrls: ['./invoices-page.component.scss'],\n})\nexport class InvoicesPageComponent implements OnInit {\n    invoices$ = of([{ id: 'd21312' }]);\n    invoice$: Observable<Invoice>;\n\n    navigationTabsConfig: INavigationTabsConfig = {\n        links: [{ path: '../invoices', label: 'invoice', icon: 'receipt' }],\n    };\n    constructor(\n        private router: Router,\n        private route: ActivatedRoute,\n        private subscriptionService: SubscriptionService,\n    ) {}\n\n    ngOnInit() {\n        this.invoice$ = this.subscriptionService.getInvoicePreview();\n    }\n\n    onInvoiceDetail(invoiceId: string) {\n        this.router.navigate([invoiceId], { relativeTo: this.route });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/flex-layout/mq' as mq;\n\n.invoice-page__content {\n    padding: 24px 0;\n    display: flex;\n    justify-content: center;\n\n    @include mq.layout-bp(gt-xs) {\n        padding: 32px;\n    }\n}\n",
                    "styleUrl": "./invoices-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "subscriptionService",
                        "type": "SubscriptionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "subscriptionService",
                        "type": "SubscriptionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-template tpAttach=\"topBarStart\">\n  <app-eslo-letter-logo></app-eslo-letter-logo>\n  <app-top-bar-title text=\"Payment\"></app-top-bar-title>\n</ng-template>\n\n<ng-template tpAttach=\"topBarCenter\">\n  <app-navigation-tabs [navigationTabsConfig]=\"navigationTabsConfig\"></app-navigation-tabs>\n</ng-template>\n\n<div class=\"invoice-page__content\">\n    <app-invoice-preview [invoice]=\"invoice$ | async\"></app-invoice-preview>\n</div>\n"
        },
        {
            "name": "LayoutComponent",
            "id": "component-LayoutComponent-15b22176c919442255d42aa7c4349bad",
            "file": "src/app/layout/layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-layout",
            "styleUrls": [
                "./layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "showNavigationBar",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "classInProgress$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ClassRecord>",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "classInProgressPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "hasAdminRole",
                    "defaultValue": "this.userService.hasRole('admin')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "hasStudentRole",
                    "defaultValue": "this.userService.hasRole('student')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "hasTeacherRole",
                    "defaultValue": "this.userService.hasRole('teacher')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "links",
                    "defaultValue": "[\n        {\n            label: 'Panel',\n            path: 'dashboard',\n            icon: 'dashboard',\n            teacher: true,\n            student: true,\n            admin: true,\n            position: 'left',\n        },\n\n        {\n            label: 'Enrolled',\n            path: 'enrolled',\n            icon: 'badge',\n            student: true,\n            admin: true,\n            position: 'right',\n        },\n\n        {\n            label: 'Courses',\n            path: 'lms',\n            icon: 'school',\n            teacher: true,\n            admin: true,\n            position: 'left',\n        },\n        {\n            label: 'Classes',\n            path: 'classroom',\n            icon: 'group',\n            teacher: true,\n            admin: true,\n            position: 'right',\n        },\n        {\n            label: 'Calendar',\n            path: 'calendar',\n            icon: 'calendar_today',\n            teacher: true,\n            admin: true,\n            position: 'right',\n        },\n        {\n            label: 'Payment',\n            path: 'payment',\n            icon: 'payment',\n            teacher: true,\n            student: true,\n            admin: true,\n            position: 'menu',\n        },\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "listenClassInProgress",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "markAsDone",
                    "args": [
                        {
                            "name": "session",
                            "type": "ClassSession",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "classInProgress",
                            "type": "ClassRecord",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "session",
                            "type": "ClassSession",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "classInProgress",
                            "type": "ClassRecord",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigateBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 223,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDoneLesson",
                    "args": [
                        {
                            "name": "classInProgress",
                            "type": "ClassRecord",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "classInProgress",
                            "type": "ClassRecord",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onScroll",
                    "args": [
                        {
                            "name": "evt",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Location } from '@angular/common';\nimport { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { MediaObserver } from '@angular/flex-layout';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport {\n    ClassRecord,\n    ClassSession,\n    EnrollmentClassRecord,\n    StudyGroupClassRecord,\n} from 'app/@core/models/class-record.model';\nimport { ClassroomService, IClassroom, IFinishClassInput } from 'app/@core/services/classroom.service';\nimport { UserService } from 'app/@core/services/user.service';\nimport { LessonFinishedDialogComponent } from 'app/lms/components/lesson-finished-dialog/lesson-finished-dialog.component';\nimport { Observable, Subject } from 'rxjs';\nimport { map, take, takeUntil } from 'rxjs/operators';\n\nimport { LayoutService } from './services/layout.service';\n\n@Component({\n    selector: 'app-layout',\n    templateUrl: './layout.component.html',\n    styleUrls: ['./layout.component.scss'],\n})\nexport class LayoutComponent implements OnInit, OnDestroy {\n    @Input() showNavigationBar = true;\n\n    classInProgress$: Observable<ClassRecord>;\n\n    classInProgressPosition: any;\n\n    links = [\n        {\n            label: 'Panel',\n            path: 'dashboard',\n            icon: 'dashboard',\n            teacher: true,\n            student: true,\n            admin: true,\n            position: 'left',\n        },\n\n        {\n            label: 'Enrolled',\n            path: 'enrolled',\n            icon: 'badge',\n            student: true,\n            admin: true,\n            position: 'right',\n        },\n\n        {\n            label: 'Courses',\n            path: 'lms',\n            icon: 'school',\n            teacher: true,\n            admin: true,\n            position: 'left',\n        },\n        {\n            label: 'Classes',\n            path: 'classroom',\n            icon: 'group',\n            teacher: true,\n            admin: true,\n            position: 'right',\n        },\n        {\n            label: 'Calendar',\n            path: 'calendar',\n            icon: 'calendar_today',\n            teacher: true,\n            admin: true,\n            position: 'right',\n        },\n        {\n            label: 'Payment',\n            path: 'payment',\n            icon: 'payment',\n            teacher: true,\n            student: true,\n            admin: true,\n            position: 'menu',\n        },\n    ];\n\n    hasAdminRole = this.userService.hasRole('admin');\n    hasTeacherRole = this.userService.hasRole('teacher');\n    hasStudentRole = this.userService.hasRole('student');\n\n    private destroy$ = new Subject<void>();\n\n    constructor(\n        private mediaObserver: MediaObserver,\n        private dialog: MatDialog,\n        private location: Location,\n        private classroomService: ClassroomService,\n        private layoutService: LayoutService,\n        private router: Router,\n        private userService: UserService,\n    ) {}\n\n    ngOnInit() {\n        this.classroomService.getClassroom$().pipe(take(1)).subscribe();\n\n        this.listenClassInProgress();\n\n        const classInProgressPosition = localStorage.getItem('classInProgressPosition');\n        this.classInProgressPosition = classInProgressPosition ? JSON.parse(classInProgressPosition) : '';\n    }\n\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    listenClassInProgress() {\n        this.classInProgress$ = this.classroomService.getClassroom$().pipe(\n            takeUntil(this.destroy$),\n            map((classroom: IClassroom) => {\n                const classInProgress = classroom.classInProgress;\n                if (!classInProgress) {\n                    return null;\n                } else {\n                    if ('enrollmentId' in classInProgress) {\n                        return {\n                            sourceType: 'ENROLLMENT',\n                            enrollmentClassRecord: classInProgress as EnrollmentClassRecord,\n                            studyGroupClassRecord: null,\n                        };\n                    } else {\n                        return {\n                            sourceType: 'STUDY_GROUP',\n                            enrollmentClassRecord: null,\n                            studyGroupClassRecord: classInProgress as StudyGroupClassRecord,\n                        };\n                    }\n                }\n            }),\n        );\n    }\n\n    get isMobile() {\n        return this.mediaObserver.isActive('xs');\n    }\n\n    onDoneLesson(classInProgress: ClassRecord) {\n        const dialogRef = this.dialog.open(LessonFinishedDialogComponent, {\n            panelClass: 'dialog-border-radius',\n            data: {\n                classInProgress,\n            },\n        });\n\n        dialogRef\n            .afterClosed()\n            .pipe(take(1))\n            .subscribe({\n                next: (response: { confirm: boolean; session: ClassSession }) => {\n                    if (!response) {\n                        return;\n                    }\n                    const { confirm, session } = response;\n                    if (!confirm) {\n                        return;\n                    }\n                    this.markAsDone(session, classInProgress);\n                },\n            });\n    }\n\n    markAsDone(session: ClassSession, classInProgress: ClassRecord): void {\n        const status = session.lessonFinished ? 'LESSON_DONE' : 'SESSION_DONE';\n        const { eventStart, eventEnd, attendees } = session;\n\n        const sourceType = classInProgress.sourceType;\n        let sourceId: string;\n        let classRecordId: string;\n        if (sourceType === 'ENROLLMENT') {\n            classRecordId = classInProgress.enrollmentClassRecord.id;\n            sourceId = classInProgress.enrollmentClassRecord.enrollmentId;\n        } else {\n            classRecordId = classInProgress.studyGroupClassRecord.id;\n            sourceId = classInProgress.studyGroupClassRecord.studyGroupId;\n        }\n\n        const [startHour, startMinutes] = eventStart.split(':');\n        let lessonStartedAt: Date | string = new Date();\n        lessonStartedAt.setHours(+startHour, +startMinutes);\n        lessonStartedAt = lessonStartedAt.toISOString();\n\n        const [endHour, endMinutes] = eventEnd.split(':');\n        let lessonEndedAt: Date | string = new Date();\n        lessonEndedAt.setHours(+endHour, +endMinutes);\n        lessonEndedAt = lessonEndedAt.toISOString();\n\n        const finishClassInput: IFinishClassInput = {\n            classRecordId,\n            sourceId,\n            sourceType,\n            status,\n            lessonStartedAt,\n            lessonEndedAt,\n            attendees: attendees.length ? attendees : undefined,\n        };\n\n        this.classroomService.finishClass(finishClassInput).subscribe({\n            next: (classroom) => {\n                this.classroomService.classroomRefetch();\n\n                this.classroomService.refetchEnrollment();\n\n                if (sourceType === 'ENROLLMENT') {\n                    this.router.navigate(['classroom', 'enrollments', sourceId]);\n                } else if (sourceType === 'STUDY_GROUP') {\n                    this.router.navigate(['classroom', 'groups', sourceId, 'schedule']);\n                    this.classroomService.refetchCurrentGroupById(sourceId);\n                }\n            },\n        });\n    }\n\n    navigateBack(): void {\n        this.location.back();\n    }\n\n    onScroll(evt) {\n        this.layoutService.onScroll(evt);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/flex-layout/mq' as mq;\n\n.layout {\n    display: grid;\n    grid-template-rows: fit-content(104px) 1fr 56px;\n    grid-template-columns: 1fr;\n    grid-template-areas:\n        'top-bar'\n        'content'\n        'navigation-bar';\n    height: 100vh;\n    position: relative;\n\n    @include mq.layout-bp(gt-xs) {\n        grid-template-rows: 108px 1fr;\n        grid-template-columns: 108px 1fr;\n        grid-template-areas:\n            'navigation-bar top-bar'\n            'navigation-bar content';\n    }\n\n    &__top-bar {\n        grid-area: top-bar;\n\n        @include mq.layout-bp(gt-xs) {\n            max-height: 56px;\n        }\n    }\n\n    &__content {\n        grid-area: content;\n        padding-bottom: 80px;\n        max-height: 100%;\n        overflow-y: auto;\n\n        @include mq.layout-bp(gt-xs) {\n            padding-bottom: 0;\n            padding: 0 40px;\n        }\n    }\n\n    &__navigation-bar {\n        grid-area: navigation-bar;\n        position: absolute;\n        height: 100%;\n        bottom: 0;\n        left: 0;\n        right: 0;\n\n        @include mq.layout-bp(gt-xs) {\n            position: unset;\n            bottom: unset;\n            left: unset;\n            right: unset;\n        }\n    }\n\n    &__float-action-button {\n        position: fixed;\n        bottom: 86px;\n        right: 10px;\n\n        @include mq.layout-bp(gt-xs) {\n            bottom: 12px;\n            right: 12px;\n        }\n    }\n\n    &__timer {\n        position: absolute;\n        bottom: 70px;\n        z-index: 999998;\n        left: 30%;\n        pointer-events: none;\n        // transform: translate(-50%, 0);\n    }\n}\n",
                    "styleUrl": "./layout.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "classroomService",
                        "type": "ClassroomService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "layoutService",
                        "type": "LayoutService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 91,
                "jsdoctags": [
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "classroomService",
                        "type": "ClassroomService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "layoutService",
                        "type": "LayoutService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "isMobile": {
                    "name": "isMobile",
                    "getSignature": {
                        "name": "isMobile",
                        "type": "",
                        "returnType": "",
                        "line": 143
                    }
                }
            },
            "templateData": "<div class=\"layout\">\n  <header class=\"layout__top-bar\" [class.mat-elevation-z4]=\"isMobile\">\n    <app-top-bar></app-top-bar>\n  </header>\n\n  <main class=\"layout__content\" (scroll)=\"onScroll($event)\">\n    <router-outlet></router-outlet>\n    <ng-content></ng-content>\n  </main>\n\n  <nav class=\"layout__navigation-bar border-right-fade\" *ngIf=\"showNavigationBar\">\n    <app-navigation-bar\n      [links]=\"links\"\n      [hasAdminRole]=\"hasAdminRole\"\n      [hasTeacherRole]=\"hasTeacherRole\"\n      [hasStudentRole]=\"hasStudentRole\"\n    ></app-navigation-bar>\n  </nav>\n\n  <aside class=\"layout__float-action-button\">\n    <ng-container tpTarget=\"floatActionButton\"></ng-container>\n  </aside>\n\n  <div\n    class=\"layout__timer\"\n    *ngIf=\"classInProgress$ | async as classInProgress\"\n    [style.top]=\"classInProgressPosition?.top + 'px' || '70px'\"\n    [style.left]=\"classInProgressPosition?.left + 'px' || '30%'\"\n  >\n    <app-class-record-timer\n      [classInProgress]=\"classInProgress\"\n      (doneEvent)=\"onDoneLesson(classInProgress)\"\n    ></app-class-record-timer>\n  </div>\n</div>\n"
        },
        {
            "name": "LessonCardComponent",
            "id": "component-LessonCardComponent-d4cd92d89662011c36fb6bebcbb32037",
            "file": "src/app/lms/components/lesson-card/lesson-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-lesson-card",
            "styleUrls": [
                "./lesson-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./lesson-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "lesson",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Lesson"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "hover",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Lesson } from 'app/@core/models/lesson.model';\n\n@Component({\n    selector: 'app-lesson-card',\n    templateUrl: './lesson-card.component.html',\n    styleUrls: ['./lesson-card.component.scss'],\n})\nexport class LessonCardComponent {\n    @Input() lesson: Lesson;\n\n    hover = false;\n\n    constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".p-t-7 {\n    padding-top: 7px;\n}\n\n.p-t-25 {\n    padding-top: 25px;\n}\n\n.m-0 {\n    margin: 0;\n}\n\n.w-100 {\n    width: 100%;\n}\n\n.title-max-width {\n    max-width: 98%;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n.lesson-card {\n    border-radius: 14px;\n    position: relative;\n    cursor: pointer;\n\n    mat-icon {\n        font-size: 30px;\n        width: 26px;\n        height: 33px;\n    }\n}\n",
                    "styleUrl": "./lesson-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "templateData": "<mat-card\n  class=\"lesson-card mat-elevation-z2\"\n  (mouseenter)=\"hover = true\"\n  (mouseleave)=\"hover = false\"\n  [class.mat-elevation-z8]=\"hover\"\n>\n  <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"16px\">\n    <div fxLayout=\"column\" fxLayoutAlign=\"start start\" fxLayoutGap=\"10px\" class=\"w-100\">\n      <div fxLayout=\"column\" fxLayoutAlign=\"start start\" class=\"w-100\">\n        <p [title]=\"lesson?.title\" class=\"mat-title m-0 title-max-width\">\n          {{ lesson?.title }}\n        </p>\n        <span class=\"mat-body-2\">{{ lesson?.category | titlecase }}</span>\n      </div>\n      <span class=\"mat-body-2 text-black-opacity-06\"> {{ lesson?.subject }}</span>\n    </div>\n  </div>\n  <div fxLayout=\"row\" fxLayoutAlign=\"end center\" class=\"p-t-7\">\n    <!-- <button mat-button color=\"primary\" (click)=\"goToClass(lesson)\">plan lesson</button> -->\n    <small class=\"mat-caption text-black-opacity-06\">#{{ lesson?.levelOrder }}</small>\n  </div>\n</mat-card>\n"
        },
        {
            "name": "LessonCardComponent",
            "id": "component-LessonCardComponent-2b4e12868ff3a7eba3303462af939f9e-1",
            "file": "src/app/lms/lesson/lesson-card/lesson-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-lesson-card",
            "styleUrls": [
                "./lesson-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./lesson-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "lesson",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Lesson"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\nimport { Lesson } from 'app/@core/models/lesson.model';\n\n@Component({\n    selector: 'app-lesson-card',\n    templateUrl: './lesson-card.component.html',\n    styleUrls: ['./lesson-card.component.scss'],\n})\nexport class LessonCardComponent {\n    @Input() lesson: Lesson;\n\n    constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n\n.lesson-content {\n    min-height: 140px;\n    min-width: 340px;\n    max-width: 340px;\n    border-radius: 4px;\n    overflow: hidden;\n    transition: box-shadow 200ms ease-in-out;\n    background-color: white;\n\n    &:hover {\n        border: none;\n    }\n\n    .header {\n        padding: 8px;\n        height: 64px !important;\n        min-height: 64px !important;\n        max-height: 64px !important;\n\n        .category {\n            height: 100%;\n            margin-right: 20px;\n\n            .category-icon {\n                height: 36px;\n                width: 36px;\n            }\n        }\n\n        .info {\n            .lesson-number {\n                margin-right: 16px;\n            }\n        }\n    }\n\n    .schedule-button {\n        width: 100px;\n        height: 40px;\n        padding-left: 0;\n\n        .schedule-user-icon {\n            margin-left: 0;\n            padding-left: 0;\n            margin-right: 12px;\n            font-size: 32px;\n        }\n    }\n\n    .footer {\n        padding: 16px;\n        height: 48px !important;\n        min-height: 48px !important;\n        max-height: 48px !important;\n    }\n}\n",
                    "styleUrl": "./lesson-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "LessonCardComponent-1",
            "templateData": "<mat-card class=\"mat-elevation-z4\">\n    <div\n        *ngIf=\"lesson\"\n        class=\"lesson-content mat-typography\"\n        fxLayout=\"column\"\n        fxLayoutAlign=\"space-between\"\n        fxFlex=\"1 1 auto\"\n    >\n        <div class=\"header mt-12\" fxLayout=\"row\" fxLayoutAlign=\"start stretch\">\n            <div fxFlex=\"1 0 auto\" fxFlexAlign=\"center\">\n                <div class=\"category\" fxLayout=\"column\" fxLayoutAlign=\"center\">\n                    <img\n                        class=\"category-icon\"\n                        fxFlexAlign=\"center\"\n                        fxFlex=\"grow\"\n                        src=\"assets/icons/skill-icons/{{ lesson.category }}.png\"\n                    />\n                </div>\n            </div>\n\n            <div fxFlex=\"3 0 auto\" fxLayout=\"column\" fxLayoutAlign=\"start\">\n                <div class=\"title\">\n                    <span class=\"title mat-h2\">{{ lesson.title }}</span>\n                </div>\n                <div class=\"info\" fxLayout=\"row\" fxLayoutAlign=\"space-between\">\n                    <span class=\"subject mat-h4 hint-text\">{{ lesson.subject }}</span>\n\n                    <div class=\"lesson-number\">\n                        <span class=\"subject mat-h4 hint-text\">#{{ lesson.levelOrder }}</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- TODO: This could be a separate component - Fetch teacher's class for the day -->\n        <!-- <div class=\"p-16\" fxLayout=\"column\" fxLayoutAlign=\"space-around\" fxFlex=\"1 1 auto\">\n        <div class=\"mat-body\" fxFlexAlign=\"start\">On schedule today...</div>\n        \n        <div fxLayout=\"row\" fxLayoutAlign=\"stretch\" fxLayoutGap=\"16px\">\n            <button mat-raised-button class=\"schedule-button\">\n                <mat-icon [inline]=\"true\" class=\"schedule-user-icon hint-text\">\n                    account_circle\n                </mat-icon>\n                <span class=\"mat-body hint-text\">16:00</span>\n            </button>\n            <button mat-raised-button class=\"schedule-button\">\n                <mat-icon [inline]=\"true\" class=\"schedule-user-icon hint-text\">\n                    account_circle\n                </mat-icon>\n                <span class=\"mat-body hint-text\">17:00</span>\n            </button>\n            <button mat-raised-button class=\"schedule-button mat-primary\">\n                <mat-icon [inline]=\"true\" class=\"schedule-user-icon\">\n                    done\n                </mat-icon>\n                <span class=\"mat-body hint-text\">19:00</span>\n            </button>\n        </div>\n    </div> -->\n\n        <div class=\"footer\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n            <button mat-button color=\"primary\" [routerLink]=\"'/lms/lessons/' + lesson.id\">PREVIEW</button>\n        </div>\n    </div>\n</mat-card>\n"
        },
        {
            "name": "LessonClassPageComponent",
            "id": "component-LessonClassPageComponent-b1635ff042d0b4676e06e3f6c243632b",
            "file": "src/app/lms/pages/lesson-class-page/lesson-class-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-lesson-class-page",
            "styleUrls": [
                "./lesson-class-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./lesson-class-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isFirstSlide",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "isFullscreen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "isLastSlide",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "lesson$",
                    "defaultValue": "this.lmsService.getLesson(this.route.snapshot.params.lessonId).pipe(\n        tap((lesson) => {\n            const activities = lesson.lessonMaterial.activities;\n            const firstActivity = activities[0];\n            if (firstActivity.activitySlides.length === 1) {\n                this.isLastSlide = true;\n            }\n        }),\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "navigationTabsConfig",
                    "defaultValue": "{\n        links: [\n            { path: '../script', label: 'script', icon: 'description' },\n            { path: '../class', label: 'lesson', icon: 'class' },\n        ],\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INavigationTabsConfig",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "sectionStepper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CdkStepper",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'sectionStepper'"
                        }
                    ]
                },
                {
                    "name": "slideSteppers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<CdkStepper>",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'slideStepper'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkFullscreen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFirstStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFullscreen",
                    "args": [
                        {
                            "name": "imgElement",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "imgElement",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLastStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onStepperChange",
                    "args": [
                        {
                            "type": "StepperSelectionEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lesson",
                            "type": "Lesson",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isSection",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "StepperSelectionEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lesson",
                            "type": "Lesson",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isSection",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CdkStepper, StepperSelectionEvent } from '@angular/cdk/stepper';\nimport { DOCUMENT } from '@angular/common';\nimport { Component, Inject, QueryList, ViewChild, ViewChildren } from '@angular/core';\nimport { MediaObserver } from '@angular/flex-layout';\nimport { ActivatedRoute } from '@angular/router';\nimport { Lesson } from 'app/@core/models/lesson.model';\nimport { LMSService } from 'app/@core/services/lms.service';\nimport { INavigationTabsConfig } from 'app/@shared/components/navigation-tabs/navigation-tabs.component';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-lesson-class-page',\n    templateUrl: './lesson-class-page.component.html',\n    styleUrls: ['./lesson-class-page.component.scss'],\n})\nexport class LessonClassPageComponent {\n    lesson$ = this.lmsService.getLesson(this.route.snapshot.params.lessonId).pipe(\n        tap((lesson) => {\n            const activities = lesson.lessonMaterial.activities;\n            const firstActivity = activities[0];\n            if (firstActivity.activitySlides.length === 1) {\n                this.isLastSlide = true;\n            }\n        }),\n    );\n\n    navigationTabsConfig: INavigationTabsConfig = {\n        links: [\n            { path: '../script', label: 'script', icon: 'description' },\n            { path: '../class', label: 'lesson', icon: 'class' },\n        ],\n    };\n\n    isFullscreen = false;\n\n    @ViewChild('sectionStepper') sectionStepper: CdkStepper;\n    @ViewChildren('slideStepper') slideSteppers: QueryList<CdkStepper>;\n\n    isLastSlide = false;\n    isFirstSlide = false;\n\n    constructor(\n        private lmsService: LMSService,\n        private route: ActivatedRoute,\n        private mediaObserver: MediaObserver,\n        @Inject(DOCUMENT) private document: Document,\n    ) {}\n\n    onStepperChange({ selectedIndex }: StepperSelectionEvent, lesson: Lesson, isSection: boolean) {\n        let currentSectionIndex: number;\n        if (isSection) {\n            currentSectionIndex = selectedIndex;\n        } else {\n            currentSectionIndex = this.sectionStepper.selectedIndex;\n        }\n\n        let slideStepperIndex = !isSection && selectedIndex;\n\n        if (isSection) {\n            const currentSlideStepper = this.slideSteppers.toArray()[currentSectionIndex];\n            currentSlideStepper.reset();\n            slideStepperIndex = 0;\n        }\n\n        const activities = lesson.lessonMaterial.activities;\n        const currentActivity = activities[currentSectionIndex];\n\n        const isLastSlide = currentActivity.activitySlides.length - 1 === selectedIndex && !isSection;\n\n        if ((currentActivity.order > 1 && slideStepperIndex === 0) || currentActivity.activitySlides.length === 1) {\n            this.isFirstSlide = true;\n            if (currentActivity.order === 1) {\n                this.isFirstSlide = false;\n            }\n        } else {\n            this.isFirstSlide = false;\n        }\n\n        if (\n            (currentActivity.order !== activities.length &&\n                isLastSlide &&\n                currentActivity.order !== activities.length) ||\n            (currentActivity.activitySlides.length === 1 && currentActivity.order !== activities.length)\n        ) {\n            this.isLastSlide = true;\n        } else {\n            this.isLastSlide = false;\n        }\n    }\n\n    onLastStep() {\n        this.sectionStepper.next();\n    }\n\n    onFirstStep() {\n        this.sectionStepper.previous();\n    }\n\n    onFullscreen(imgElement: any) {\n        const elem = imgElement || this.document.documentElement;\n\n        if (!this.document.fullscreenElement) {\n            if (elem.requestFullscreen) {\n                elem.requestFullscreen();\n                this.isFullscreen = true;\n            }\n        } else {\n            if (this.document.exitFullscreen) {\n                this.document.exitFullscreen();\n                this.isFullscreen = false;\n            }\n        }\n    }\n\n    checkFullscreen() {\n        if (this.isFullscreen) {\n            this.document.exitFullscreen();\n            this.isFullscreen = false;\n        }\n    }\n\n    get isMobile() {\n        return this.mediaObserver.isActive('xs');\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/flex-layout/mq' as mq;\n\n.class-container {\n    height: 100%;\n    padding: 0;\n    position: relative;\n\n    @include mq.layout-bp(gt-xs) {\n        height: inherit;\n        padding: 24px 18px 20vh 18px; \n    }\n\n    &__fullscreen-button {\n        position: absolute;\n        bottom: 0;\n        right: 10px;\n    }\n}\n\n.slide-image {\n    margin-top: 24px;\n    width: 100%;\n    overflow-x: hidden;\n\n    @include mq.layout-bp(gt-xs) {\n        width: 110%;\n    }\n\n    @include mq.layout-bp(gt-sm) {\n        width: 120%;\n    }\n\n    @include mq.layout-bp(gt-lg) {\n        width: 150%;\n    }\n}\n",
                    "styleUrl": "./lesson-class-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "lmsService",
                        "type": "LMSService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "lmsService",
                        "type": "LMSService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "isMobile": {
                    "name": "isMobile",
                    "getSignature": {
                        "name": "isMobile",
                        "type": "",
                        "returnType": "",
                        "line": 122
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"lesson$ | async as lesson\">\n  <ng-template tpAttach=\"topBarStart\">\n    <app-back-button></app-back-button>\n    <app-top-bar-title [text]=\"lesson.title\"></app-top-bar-title>\n  </ng-template>\n\n  <ng-template tpAttach=\"topBarCenter\">\n    <app-navigation-tabs [navigationTabsConfig]=\"navigationTabsConfig\"></app-navigation-tabs>\n  </ng-template>\n\n  <div class=\"class-container\">\n    <app-custom-stepper\n      [hasWarmUp]=\"true\"\n      [hasAudio]=\"lesson.lessonMaterial.audio.length > 0\"\n      #sectionStepper\n      (selectionChange)=\"onStepperChange($event, lesson, true)\"\n    >\n      <cdk-step\n        *ngFor=\"\n          let activity of lesson.lessonMaterial.activities;\n          let i = index;\n          let first = first;\n          let last = last\n        \"\n      >\n        <div style=\"margin-left: 50px\"></div>\n        <app-slides-stepper\n          #slideStepper\n          (selectionChange)=\"onStepperChange($event, lesson, false)\"\n          [isLastSlide]=\"isLastSlide\"\n          [isFirstSlide]=\"isFirstSlide\"\n          [isFirstSection]=\"first\"\n          [isLastSection]=\"last\"\n          (lastStepEvent)=\"onLastStep()\"\n          (firstStepEvent)=\"onFirstStep()\"\n        >\n          <cdk-step *ngFor=\"let slide of activity.activitySlides\">\n            <img\n              #imgElement\n              class=\"slide-image\"\n              [src]=\"slide.media.rootUri\"\n              (click)=\"checkFullscreen()\"\n            />\n            <button\n              color=\"primary\"\n              class=\"class-container__fullscreen-button\"\n              *ngIf=\"isMobile\"\n              mat-icon-button\n              (click)=\"onFullscreen(imgElement)\"\n            >\n              <mat-icon>fullscreen</mat-icon>\n            </button>\n          </cdk-step>\n        </app-slides-stepper>\n      </cdk-step>\n    </app-custom-stepper>\n  </div>\n\n  <app-audio-control-card\n    *ngIf=\"lesson.lessonMaterial.audio.length > 0\"\n    [audioList]=\"lesson.lessonMaterial.audio\"\n  ></app-audio-control-card>\n</ng-container>\n"
        },
        {
            "name": "LessonDetailComponent",
            "id": "component-LessonDetailComponent-0536a91ab7d4248870e33ad54d5436e6",
            "file": "src/app/lms/lesson/lesson-detail/lesson-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-lesson-detail",
            "styleUrls": [
                "./lesson-detail.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./lesson-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_unsubscribeAll",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "classInProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClassRecord",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "lesson",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Lesson",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "selectedTab",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "goToNextTab",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "goToPreviousTab",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "leaveLesson",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadLesson",
                    "args": [
                        {
                            "name": "lessonId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "lessonId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "markAsDone",
                    "args": [
                        {
                            "name": "session",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "session",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigateBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOn destroy\n",
                    "description": "<p>On destroy</p>\n"
                },
                {
                    "name": "onDoneLesson",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { IFinishClassInput } from './../../../@core/services/classroom.service';\nimport { Component, OnDestroy } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\n\nimport { Lesson } from 'app/@core/models/lesson.model';\nimport { LMSService } from 'app/@core/services/lms.service';\n\nimport { ClassroomService } from 'app/@core/services/classroom.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { LessonFinishedDialogComponent } from 'app/lms/components/lesson-finished-dialog/lesson-finished-dialog.component';\nimport { Location } from '@angular/common';\nimport { ClassRecord } from 'app/@core/models/class-record.model';\n\n@Component({\n    selector: 'app-lesson-detail',\n    templateUrl: './lesson-detail.component.html',\n    styleUrls: ['./lesson-detail.component.scss'],\n})\nexport class LessonDetailComponent implements OnDestroy {\n    // Private\n    private _unsubscribeAll: Subject<any>;\n\n    public selectedTab: number;\n    public lesson: Lesson;\n\n    public classInProgress: ClassRecord;\n\n    constructor(\n        private location: Location,\n        private activatedRoute: ActivatedRoute,\n        private router: Router,\n        private lmsService: LMSService,\n        private dialog: MatDialog,\n\n        private classroomService: ClassroomService,\n    ) {\n        // Set the private defaults\n        this._unsubscribeAll = new Subject();\n        this.selectedTab = 0;\n\n        this.activatedRoute.params.pipe(takeUntil(this._unsubscribeAll)).subscribe((params) => {\n            this.loadLesson(params['lessonId']);\n\n            this.classroomService.classInProgress$\n                .pipe(takeUntil(this._unsubscribeAll))\n                .subscribe((classInProgress) => {\n                    this.classInProgress = classInProgress;\n                });\n        });\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next();\n        this._unsubscribeAll.complete();\n    }\n\n    private loadLesson(lessonId: string): void {\n        this.lmsService\n            .getLesson(lessonId)\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe((lesson: Lesson) => {\n                this.lesson = lesson;\n            });\n    }\n\n    goToPreviousTab(): void {\n        this.selectedTab = this.selectedTab - 1;\n    }\n\n    goToNextTab(): void {\n        this.selectedTab = this.selectedTab + 1;\n    }\n\n    leaveLesson(): void {\n        if (this.classInProgress) {\n            if (this.classInProgress.sourceType === 'ENROLLMENT') {\n                this.router.navigate([\n                    'classroom',\n                    'enrollments',\n                    this.classInProgress.enrollmentClassRecord.enrollmentId,\n                ]);\n            } else {\n                this.router.navigate([\n                    'classroom',\n                    'groups',\n                    this.classInProgress.studyGroupClassRecord.studyGroupId,\n                    'schedule',\n                ]);\n            }\n        } else {\n            this.router.navigate(['/lms']);\n        }\n    }\n\n    onDoneLesson() {\n        const dialogRef = this.dialog.open(LessonFinishedDialogComponent, {\n            data: {\n                lesson: this.lesson,\n                classInProgress: this.classInProgress,\n            },\n        });\n\n        dialogRef\n            .afterClosed()\n            .pipe(take(1))\n            .subscribe({\n                next: (response) => {\n                    if (!response) {\n                        return;\n                    }\n                    const { confirm, session } = response;\n                    if (!confirm) {\n                        return;\n                    }\n                    this.markAsDone(session);\n                },\n            });\n    }\n\n    markAsDone(session: any): void {\n        const status = session.lessonFinished ? 'LESSON_DONE' : 'SESSION_DONE';\n\n        const { eventStart, eventEnd, attendees } = session;\n        const sourceType = this.classInProgress.sourceType;\n        let sourceId: string;\n        let classRecordId: string;\n        if (sourceType === 'ENROLLMENT') {\n            classRecordId = this.classInProgress.enrollmentClassRecord.id;\n            sourceId = this.classInProgress.enrollmentClassRecord.enrollmentId;\n        } else {\n            classRecordId = this.classInProgress.studyGroupClassRecord.id;\n            sourceId = this.classInProgress.studyGroupClassRecord.studyGroupId;\n        }\n\n        const [startHour, startMinutes] = eventStart.split(':');\n        let lessonStartedAt: Date | string = new Date();\n        lessonStartedAt.setHours(+startHour, +startMinutes);\n        lessonStartedAt = lessonStartedAt.toISOString();\n\n        const [endHour, endMinutes] = eventEnd.split(':');\n        let lessonEndedAt: Date | string = new Date();\n        lessonEndedAt.setHours(+endHour, +endMinutes);\n        lessonEndedAt = lessonEndedAt.toISOString();\n\n        const finishClassInput: IFinishClassInput = {\n            classRecordId,\n            sourceId,\n            sourceType,\n            status,\n            lessonStartedAt,\n            lessonEndedAt,\n            attendees: attendees.length ? attendees : undefined,\n        };\n\n        this.classroomService\n            .finishClass(finishClassInput)\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe(() => {\n                this.classInProgress = undefined;\n                this.navigateBack();\n            });\n    }\n\n    navigateBack(): void {\n        this.location.back();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#lesson-detail-page {\n    width: 100%;\n}\n\n\n",
                    "styleUrl": "./lesson-detail.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "lmsService",
                        "type": "LMSService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "classroomService",
                        "type": "ClassroomService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lmsService",
                        "type": "LMSService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "classroomService",
                        "type": "ClassroomService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<div id=\"lesson-detail-page\" class=\"page-layout fullwidth tabbed\">\n  <!-- CENTER -->\n  <div class=\"center\" *ngIf=\"lesson && lesson.lessonMaterial\">\n    <ng-template tpAttach=\"topBarStart\">\n      <app-back-button></app-back-button>\n      <app-top-bar-title [text]=\"lesson.title\"></app-top-bar-title>\n    </ng-template>\n\n    <!-- CONTENT CARD -->\n    <div class=\"content-card\">\n      <!-- CONTENT -->\n      <div id=\"lesson-content\" class=\"content\" [@.disabled]=\"true\">\n        <mat-tab-group [selectedIndex]=\"selectedTab\">\n          <mat-tab label=\"Student Book\">\n            <div class=\"tab-content\">\n              <app-audio-control-card\n                *ngIf=\"lesson.lessonMaterial.audio.length > 0\"\n                [audioList]=\"lesson.lessonMaterial.audio\"\n              ></app-audio-control-card>\n\n              <app-lesson-media-content\n                [mediaContent]=\"lesson.lessonMaterial.studentBook\"\n                [offsetStepNavigation]=\"true\"\n                (lastStepClick)=\"goToNextTab()\"\n              ></app-lesson-media-content>\n            </div>\n          </mat-tab>\n\n          <mat-tab *ngIf=\"!classInProgress\" label=\"Script\">\n            <div class=\"tab-content\" fusePerfectScrollbar>\n              <app-lesson-media-content\n                [mediaContent]=\"lesson.lessonMaterial.lectureScript\"\n                [offsetStepNavigation]=\"true\"\n                [enableFirstStep]=\"true\"\n                (firstStepClick)=\"goToPreviousTab()\"\n                (lastStepClick)=\"goToNextTab()\"\n              ></app-lesson-media-content>\n            </div>\n          </mat-tab>\n\n          <mat-tab label=\"Slides\">\n            <div class=\"tab-content\" fusePerfectScrollbar>\n              <app-lesson-lecture-slides\n                [activities]=\"lesson.lessonMaterial.activities\"\n                (firstStepClick)=\"goToPreviousTab()\"\n                (lastStepClick)=\"leaveLesson()\"\n              ></app-lesson-lecture-slides>\n            </div>\n          </mat-tab>\n        </mat-tab-group>\n      </div>\n      <!-- / CONTENT -->\n    </div>\n    <!-- / CONTENT CARD -->\n  </div>\n  <!-- / CENTER -->\n</div>\n"
        },
        {
            "name": "LessonFinishedDialogComponent",
            "id": "component-LessonFinishedDialogComponent-dbfb9a56e9f6e3d76bd368cf83925c99",
            "file": "src/app/lms/components/lesson-finished-dialog/lesson-finished-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-lesson-finished-dialog",
            "styleUrls": [
                "./lesson-finished-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./lesson-finished-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "attendeesList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSelectionList",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'attendeesList'"
                        }
                    ]
                },
                {
                    "name": "eventEnd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "eventStart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "lessonFinished",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "minutes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "checkClassLength",
                    "args": [
                        {
                            "name": "eventEndTime",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventEndTime",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onConfirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateTimeEnd",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTimeStart",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DatePipe } from '@angular/common';\nimport { Component, Inject, OnInit, ViewChild } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MatSelectionList } from '@angular/material/list';\nimport { ClassRecord } from 'app/@core/models/class-record.model';\n\n@Component({\n    selector: 'app-lesson-finished-dialog',\n    templateUrl: './lesson-finished-dialog.component.html',\n    styleUrls: ['./lesson-finished-dialog.component.scss'],\n})\nexport class LessonFinishedDialogComponent implements OnInit {\n    eventStart: string;\n    eventEnd: string;\n\n    lessonFinished = false;\n    minutes: number;\n\n    @ViewChild('attendeesList') attendeesList: MatSelectionList;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private data: { classInProgress: ClassRecord },\n        private dialogRef: MatDialogRef<LessonFinishedDialogComponent>,\n        private datePipe: DatePipe,\n    ) {}\n\n    ngOnInit(): void {\n        this.eventEnd = this.datePipe.transform(new Date(), 'HH:mm');\n\n        let startedAt: string;\n        if (this.classInProgress.sourceType === 'ENROLLMENT') {\n            startedAt = this.classInProgress.enrollmentClassRecord.startedAt;\n        } else {\n            startedAt = this.classInProgress.studyGroupClassRecord.startedAt;\n        }\n\n        const eventStartTime = parseInt(startedAt, 10);\n        const eventStartDate = new Date(eventStartTime);\n        this.eventStart = this.datePipe.transform(eventStartDate, 'HH:mm');\n\n        const now = Date.now();\n        this.checkClassLength(now);\n    }\n\n    checkClassLength(eventEndTime: number): void {\n        const today = new Date();\n        const [hour, minutes] = this.eventStart.split(':');\n        today.setHours(+hour);\n        today.setMinutes(+minutes);\n        const eventStartTime = today.getTime();\n\n        const difference = eventEndTime - eventStartTime;\n        this.minutes = Math.floor(difference / 1000 / 60);\n    }\n\n    updateTimeStart(value: string): void {\n        this.eventStart = value;\n\n        if (value) {\n            const today = new Date();\n            const [hour, minutes] = this.eventEnd.split(':');\n            today.setHours(+hour);\n            today.setMinutes(+minutes);\n            const utc = today.getTime();\n            this.checkClassLength(utc);\n        }\n    }\n\n    updateTimeEnd(value: string): void {\n        this.eventEnd = value;\n\n        if (value) {\n            const today = new Date();\n            const [hour, minutes] = value.split(':');\n            today.setHours(+hour);\n            today.setMinutes(+minutes);\n            const utc = today.getTime();\n            this.checkClassLength(utc);\n        }\n    }\n\n    onConfirm(): void {\n        const attendees =\n            this.attendeesList?.options?.map((option) => {\n                const {\n                    selected: attended,\n                    value: { studentId },\n                } = option;\n                return {\n                    studentId,\n                    attended,\n                };\n            }) || [];\n\n        const session = {\n            eventStart: this.eventStart,\n            eventEnd: this.eventEnd,\n            lessonFinished: this.lessonFinished,\n            attendees,\n        };\n\n        this.dialogRef.close({ confirm: true, session });\n    }\n\n    get classInProgress(): ClassRecord {\n        return this.data?.classInProgress;\n    }\n\n    get isGroup(): boolean {\n        return this.classInProgress.sourceType === 'STUDY_GROUP';\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".time-field {\n    display: flex;\n    align-content: center;\n    justify-content: center;\n    border: 1px solid rgba(0, 0, 0, 0.12);\n    border-radius: 13px;\n    padding: 0 3px 0 10px;\n    position: relative;\n\n    &__input {\n        border: none;\n        outline: none;\n        color: rgba(0, 0, 0, 0.6);\n        font-size: 15px;\n        font-family: 'Comfortaa';\n\n        &::-webkit-calendar-picker-indicator {\n            display: none;\n        }\n    }\n\n    &__hint {\n        position: absolute;\n        top: 40px;\n        left: 0;\n    }\n}\n\n.session-finished {\n    cursor: pointer;\n    padding: 16px 10px;\n\n    &__label {\n        font-size: 14px;\n        user-select: none;\n    }\n}\n\n.text-center {\n    text-align: center;\n}\n\n\n",
                    "styleUrl": "./lesson-finished-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<LessonFinishedDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<LessonFinishedDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "classInProgress": {
                    "name": "classInProgress",
                    "getSignature": {
                        "name": "classInProgress",
                        "type": "",
                        "returnType": "ClassRecord",
                        "line": 105
                    }
                },
                "isGroup": {
                    "name": "isGroup",
                    "getSignature": {
                        "name": "isGroup",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 109
                    }
                }
            },
            "templateData": "<div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"18px\" style=\"margin-bottom: 32px\">\n  <div class=\"time-field\">\n    <input\n      placeholder=\"Time\"\n      type=\"time\"\n      [ngModel]=\"eventStart\"\n      (ngModelChange)=\"updateTimeStart($event)\"\n      [step]=\"60 * 15\"\n      class=\"time-field__input\"\n    />\n    <button mat-icon-button color=\"primary\">\n      <mat-icon>schedule</mat-icon>\n    </button>\n  </div>\n\n  <div class=\"time-field\">\n    <input\n      placeholder=\"Time\"\n      type=\"time\"\n      [ngModel]=\"eventEnd\"\n      (ngModelChange)=\"updateTimeEnd($event)\"\n      [step]=\"60 * 15\"\n      class=\"time-field__input\"\n    />\n    <button mat-icon-button color=\"primary\">\n      <mat-icon>schedule</mat-icon>\n    </button>\n    <span class=\"time-field__hint mat-caption\" *ngIf=\"minutes > 0\">{{\n      minutes | minutesToHours\n    }}</span>\n    <span class=\"time-field__hint mat-caption\" *ngIf=\"minutes < 0\"\n      >End time is less than the start time\n    </span>\n  </div>\n</div>\n\n<div\n  class=\"session-finished\"\n  fxLayout\n  fxLayoutAlign=\"space-between center\"\n  matRipple\n  (click)=\"lessonFinished = !lessonFinished\"\n>\n  <span fxFlex class=\"mat-body-2 session-finished__label\">\n    Lesson\n    {{\n      isGroup\n        ? classInProgress?.studyGroupClassRecord.lesson?.levelOrder\n        : classInProgress?.enrollmentClassRecord.lesson?.levelOrder\n    }}\n    finished?\n  </span>\n  <mat-checkbox [(ngModel)]=\"lessonFinished\" (click)=\"$event.stopPropagation()\"></mat-checkbox>\n</div>\n\n<div *ngIf=\"isGroup\">\n  <p class=\"mat-subheading-1 text-center\">Attendees</p>\n  <mat-selection-list #attendeesList>\n    <mat-list-option\n      *ngFor=\"let enrollment of classInProgress?.studyGroupClassRecord.studyGroupClassAttendees\"\n      [value]=\"enrollment\"\n      selected\n    >\n      <!-- Only inline css works with mat-list-option -->\n      <span\n        style=\"\n          font-size: 14px;\n          color: rgba(0, 0, 0, 0.6);\n          font-family: 'Work Sans';\n          line-height: 20px;\n          letter-spacing: 0.25px;\n        \"\n      >\n        {{\n          enrollment?.student?.student?.firstName + ' ' + enrollment?.student?.student?.familyName\n            | titlecase\n        }}\n      </span>\n    </mat-list-option>\n  </mat-selection-list>\n</div>\n\n<mat-dialog-actions fxLayout fxLayoutAlign=\"end center\" style=\"padding-top: 8px\">\n  <button\n    mat-button\n    color=\"primary\"\n    (click)=\"onConfirm()\"\n    [disabled]=\"!eventStart || !eventEnd || minutes < 0 || minutes > 180\"\n  >\n    confirm\n  </button>\n</mat-dialog-actions>\n"
        },
        {
            "name": "LessonLectureNavStepComponent",
            "id": "component-LessonLectureNavStepComponent-8102d1c216b29ac877256aa0ae7322a5",
            "file": "src/app/lms/lesson/lesson-lecture-nav-step/lesson-lecture-nav-step.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-lesson-lecture-nav-step",
            "styleUrls": [
                "./lesson-lecture-nav-step.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./lesson-lecture-nav-step.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentStep",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "number"
                },
                {
                    "name": "firstDisabled",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean"
                },
                {
                    "name": "lastDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "lastStepStyle",
                    "defaultValue": "'done'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "\"done\" | \"forward\""
                },
                {
                    "name": "offset",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean"
                },
                {
                    "name": "totalSteps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "firstStepClick",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                },
                {
                    "name": "lastStepClick",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                },
                {
                    "name": "stepChangeEvent",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "gotoNextStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGo to next step\n",
                    "description": "<p>Go to next step</p>\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "gotoPreviousStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGo to previous step\n",
                    "description": "<p>Go to previous step</p>\n",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, ViewEncapsulation, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'app-lesson-lecture-nav-step',\n    templateUrl: './lesson-lecture-nav-step.component.html',\n    styleUrls: ['./lesson-lecture-nav-step.component.scss'],\n})\nexport class LessonLectureNavStepComponent {\n    @Input() totalSteps: number;\n    @Input() currentStep: number;\n    @Input() firstDisabled = true;\n    @Input() lastDisabled = false;\n    @Input() lastStepStyle: 'done' | 'forward' = 'done';\n    @Input() offset = false;\n    @Output() stepChangeEvent = new EventEmitter<number>();\n    @Output() firstStepClick = new EventEmitter<boolean>();\n    @Output() lastStepClick = new EventEmitter<boolean>();\n\n    /**\n     * Constructor\n     */\n    constructor() {}\n\n    /**\n     * Go to next step\n     */\n    public gotoNextStep(): void {\n        if (this.currentStep === this.totalSteps - 1 && !this.lastDisabled) {\n            this.lastStepClick.emit(true);\n\n            return;\n        }\n\n        this.stepChangeEvent.emit(++this.currentStep);\n    }\n\n    /**\n     * Go to previous step\n     */\n    public gotoPreviousStep(): void {\n        if (this.currentStep === 0) {\n            if (!this.firstDisabled) {\n                this.firstStepClick.emit(true);\n            }\n\n            return;\n        }\n\n        this.stepChangeEvent.emit(--this.currentStep);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n\n.step-navigation {\n    position: fixed;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    top: 90vh;\n    max-width: 944px;\n    padding: 0 24px;\n    width: 60vw;\n\n    &.offset {\n        margin-left: 15vw;\n    }\n\n    .previous {\n        margin-right: auto;\n    }\n\n    .counter {\n        padding: 6px;\n        border-radius: 2px;\n\n        .current {\n            margin-right: 4px;\n        }\n\n        .total {\n            margin-left: 4px;\n        }\n    }\n\n    .next,\n    .done {\n        margin-left: auto;\n    }\n}\n",
                    "styleUrl": "./lesson-lecture-nav-step.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17,
                "rawdescription": "\n\nConstructor\n"
            },
            "templateData": "<div class=\"step-navigation\" [ngClass]=\"{ 'offset': offset }\">\n    <button mat-fab class=\"previous mat-primary\"\n            (click)=\"gotoPreviousStep()\"\n            [disabled]=\"currentStep === 0 && firstDisabled\">\n        <mat-icon *ngIf=\"currentStep > 0\">chevron_left</mat-icon>\n        <mat-icon *ngIf=\"currentStep === 0\">fast_rewind</mat-icon>\n    </button>\n\n    <span class=\"counter primary\">\n        <span class=\"current\">{{currentStep + 1}}</span>\n        <span>/</span>\n        <span class=\"total\">{{totalSteps}}</span>\n    </span>\n\n    <button mat-fab class=\"next\"\n        [ngClass]=\"{'green-600': currentStep === totalSteps - 1 && lastStepStyle === 'done'}\"\n        (click)=\"gotoNextStep()\"\n        [disabled]=\"lastDisabled\">\n        <mat-icon *ngIf=\"currentStep< totalSteps -1\">chevron_right</mat-icon>\n        <mat-icon *ngIf=\"currentStep === totalSteps - 1 && lastStepStyle === 'done'\">check</mat-icon>\n        <mat-icon *ngIf=\"currentStep === totalSteps - 1 && lastStepStyle === 'forward'\">fast_forward</mat-icon>\n    </button>\n</div>"
        },
        {
            "name": "LessonLectureSlidesComponent",
            "id": "component-LessonLectureSlidesComponent-b8ee27c66660b21a0814e09b63ac6ddf",
            "file": "src/app/lms/lesson/lesson-lecture-slides/lesson-lecture-slides.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-lesson-lecture-slides",
            "styleUrls": [
                "./lesson-lecture-slides.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./lesson-lecture-slides.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Activity[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "firstStepClick",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                },
                {
                    "name": "lastStepClick",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "animationDirection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"forward\" | \"back\" | \"none\"",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "currentActivity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Activity",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "currentStep",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "lessonStepContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "getActivityIndex",
                    "args": [
                        {
                            "name": "activityToSearch",
                            "type": "Activity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "activityToSearch",
                            "type": "Activity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goToActivity",
                    "args": [
                        {
                            "name": "activity",
                            "type": "Activity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGo to activity\n\n",
                    "description": "<p>Go to activity</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2515,
                                "end": 2523,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "activity"
                            },
                            "type": "Activity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2509,
                                "end": 2514,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFirstStepClick",
                    "args": [
                        {
                            "name": "clicked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clicked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLastStepClick",
                    "args": [
                        {
                            "name": "clicked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clicked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { OnChanges, Input, ChangeDetectorRef, Component, Output, EventEmitter, SimpleChanges } from '@angular/core';\n\nimport { Activity } from 'app/@core/models/lesson-material.model';\n\n@Component({\n    selector: 'app-lesson-lecture-slides',\n    templateUrl: './lesson-lecture-slides.component.html',\n    styleUrls: ['./lesson-lecture-slides.component.scss'],\n})\nexport class LessonLectureSlidesComponent implements OnChanges {\n    @Input() activities: Activity[];\n    @Output() firstStepClick = new EventEmitter<boolean>();\n    @Output() lastStepClick = new EventEmitter<boolean>();\n\n    animationDirection: 'forward' | 'back' | 'none';\n    lessonStepContent: any;\n    currentActivity: Activity;\n    currentStep: number;\n\n    /**\n     * Constructor\n     *\n     * @param _changeDetectorRef\n     */\n    constructor(private _changeDetectorRef: ChangeDetectorRef) {\n        // Set the defaults\n        this.animationDirection = 'none';\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes['activities'] && this.activities?.length > 0) {\n            this.goToActivity(this.activities[0]);\n        }\n    }\n\n    private getActivityIndex(activityToSearch: Activity): number {\n        return this.activities.findIndex((activity) => activity === activityToSearch);\n    }\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    onFirstStepClick(clicked: boolean): void {\n        if (this.currentActivity === this.activities[0]) {\n            this.firstStepClick.emit(clicked);\n        } else {\n            const previousActivity = this.activities[this.getActivityIndex(this.currentActivity) - 1];\n            this.goToActivity(previousActivity);\n        }\n    }\n\n    onLastStepClick(clicked: boolean): void {\n        if (this.currentActivity === this.activities[this.activities.length - 1]) {\n            this.lastStepClick.emit(clicked);\n        } else {\n            const nextActivity = this.activities[this.getActivityIndex(this.currentActivity) + 1];\n            this.goToActivity(nextActivity);\n        }\n    }\n\n    /**\n     * Go to activity\n     *\n     * @param activity\n     */\n    goToActivity(activity: Activity): void {\n        // Decide the animation direction\n        this.animationDirection =\n            this.getActivityIndex(this.currentActivity) < this.getActivityIndex(activity) ? 'forward' : 'back';\n\n        // Set the current step\n        this.currentActivity = activity;\n        this.currentStep = 0;\n\n        // Run change detection so the change\n        // in the animation direction registered\n        this._changeDetectorRef.detectChanges();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".invisible-image {\n    display: none;\n}\n\n.sidebar {\n    .steps {\n        cursor: pointer;\n\n        .step {\n            position: relative;\n            display: flex;\n            justify-content: flex-start;\n            align-items: center;\n            padding: 16px;\n            cursor: pointer;\n\n            &.current {\n                .index {\n                    cursor: pointer;\n\n                    span {\n                        border: 2px solid;\n                    }\n                }\n\n                .title {\n                    font-weight: bold;\n                }\n            }\n\n            &.completed {\n                .index {\n                    span {\n                        border: 2px solid;\n                    }\n                }\n            }\n\n            &.first {\n                .index {\n                    &:before {\n                        display: none;\n                    }\n                }\n            }\n\n            &.last {\n                .index {\n                    &:after {\n                        display: none;\n                    }\n                }\n            }\n\n            .index {\n                display: flex;\n                margin-right: 12px;\n                cursor: pointer;\n\n                &:before,\n                &:after {\n                    position: absolute;\n                    display: block;\n                    content: ' ';\n                    border-left: 1px solid;\n                    width: 1px;\n                    height: 50%;\n                    left: 29px;\n                    z-index: 8;\n                }\n\n                &:before {\n                    top: 0;\n                }\n\n                &:after {\n                    bottom: 0;\n                }\n\n                span {\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                    position: relative;\n                    width: 28px;\n                    min-width: 28px;\n                    max-width: 28px;\n                    height: 28px;\n                    border-radius: 100%;\n                    border: 2px solid;\n                    font-weight: bold;\n                    font-size: 12px;\n                    z-index: 10;\n                }\n            }\n\n            .title {\n                display: flex;\n            }\n        }\n    }\n}\n",
                    "styleUrl": "./lesson-lecture-slides.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "rawdescription": "\n\nConstructor\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 771,
                            "end": 789,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "_changeDetectorRef"
                        },
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 765,
                            "end": 770,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div *ngIf=\"activities\" id=\"lesson-content\" fxLayout=\"row\">\n    <!-- SIDEBAR -->\n    <!-- SIDEBAR CONTENT -->\n    <div class=\"content\">\n        <div class=\"steps\">\n            <div\n                class=\"step step-background\"\n                *ngFor=\"let activity of activities; let i = index; let last = last; let first = first\"\n                (click)=\"goToActivity(activity)\"\n                [ngClass]=\"{\n                    current: currentActivity === activity,\n                    'primary-50': currentActivity === activity,\n                    last: last,\n                    first: first\n                }\"\n            >\n                <div\n                    class=\"index\"\n                    [ngClass]=\"{ 'accent-border-color': currentActivity === activity }\"\n                    fxLayout\n                    fxLayoutGap=\"10px\"\n                >\n                    <span class=\"step-index\">{{ i + 1 }}</span>\n                    <div class=\"title\">{{ activity.title }}</div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <!-- / SIDEBAR CONTENT -->\n    <!-- / SIDEBAR -->\n\n    <div class=\"lesson-slides\">\n        <app-lesson-media-content\n            [mediaContent]=\"currentActivity.activitySlides\"\n            [enableFirstStep]=\"true\"\n            [lastStepStyle]=\"currentActivity === activities[activities.length - 1] ? 'done' : 'forward'\"\n            (firstStepClick)=\"onFirstStepClick($event)\"\n            (lastStepClick)=\"onLastStepClick($event)\"\n        ></app-lesson-media-content>\n    </div>\n</div>\n"
        },
        {
            "name": "LessonListComponent",
            "id": "component-LessonListComponent-3340129083ea94c8779be3bd1b876bf1",
            "file": "src/app/lms/lesson/lesson-list/lesson-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-lesson-list",
            "styleUrls": [
                "./lesson-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./lesson-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-lesson-list',\n    templateUrl: './lesson-list.component.html',\n    styleUrls: ['./lesson-list.component.scss'],\n})\nexport class LessonListComponent {\n    constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./lesson-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "templateData": "<p>lesson-list works!</p>\n"
        },
        {
            "name": "LessonMidiaContentComponent",
            "id": "component-LessonMidiaContentComponent-ed0f8f544de596ed46ca936018d02b7f",
            "file": "src/app/lms/lesson/lesson-media-content/lesson-media-content.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-lesson-media-content",
            "styleUrls": [
                "./lesson-media-content.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./lesson-media-content.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "enableFirstStep",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "lastStepStyle",
                    "defaultValue": "'forward'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "\"done\" | \"forward\""
                },
                {
                    "name": "mediaContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "MediaAssociation[]"
                },
                {
                    "name": "offsetStepNavigation",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "firstStepClick",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                },
                {
                    "name": "lastStepClick",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "animationDirection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"forward\" | \"back\" | \"none\"",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "currentStep",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "lessonStepContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "getAnimationDirection",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFirstStepClick",
                    "args": [
                        {
                            "name": "clicked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": "clicked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLastStepClick",
                    "args": [
                        {
                            "name": "clicked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": "clicked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onStepChange",
                    "args": [
                        {
                            "name": "newStep",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newStep",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Output, Input, ChangeDetectorRef, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\n\nimport { MediaAssociation } from 'app/@core/models/lesson-material.model';\n\n@Component({\n    selector: 'app-lesson-media-content',\n    templateUrl: './lesson-media-content.component.html',\n    styleUrls: ['./lesson-media-content.component.scss'],\n})\nexport class LessonMidiaContentComponent implements OnChanges {\n    @Input() mediaContent: MediaAssociation[];\n    @Input() enableFirstStep = false;\n    @Input() offsetStepNavigation = false;\n    @Input() lastStepStyle: 'done' | 'forward' = 'forward';\n    @Output() firstStepClick = new EventEmitter<boolean>();\n    @Output() lastStepClick = new EventEmitter<boolean>();\n\n    animationDirection: 'forward' | 'back' | 'none';\n    lessonStepContent: any;\n    currentStep: number;\n\n    /**\n     * Constructor\n     *\n     * @param _changeDetectorRef\n     * @param _fuseSidebarService\n     */\n    constructor(private _changeDetectorRef: ChangeDetectorRef) {\n        // Set the defaults\n        this.animationDirection = 'none';\n        this.currentStep = 0;\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes['mediaContent']) {\n            this.currentStep = 0;\n        }\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    getAnimationDirection(): string {\n        if (this.animationDirection === 'back') {\n            return '-100%';\n        }\n        return '100%';\n    }\n\n    onStepChange(newStep: number): void {\n        // Set the animation direction\n        this.animationDirection = this.currentStep > newStep ? 'back' : 'forward';\n\n        // Run change detection so the change\n        // in the animation direction registered\n        this._changeDetectorRef.detectChanges();\n\n        this.currentStep = newStep;\n    }\n\n    /**\n     *\n     */\n    onFirstStepClick(clicked: boolean): void {\n        this.firstStepClick.emit(clicked);\n    }\n    /**\n     *\n     */\n    onLastStepClick(clicked: boolean): void {\n        this.lastStepClick.emit(clicked);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n\n.lesson-content {\n    position: relative;\n    background-color: white;\n    height: 100vh;\n\n    .lesson-step {\n        background-color: white;\n\n        .lesson-step-content {\n            background-color: white;\n        }\n    }\n}\n\n.invisible-image {\n    display: none;\n}\n\n.lesson-image {\n  \n\n    max-width: 150%;\n}\n",
                    "styleUrl": "./lesson-media-content.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "rawdescription": "\n\nConstructor\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 895,
                            "end": 913,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "_changeDetectorRef"
                        },
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 889,
                            "end": 894,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<ng-container *ngIf=\"mediaContent && mediaContent.length > 0\">\n    <!-- CONTENT -->\n    <div class=\"lesson-content m-0 p-0\">\n        <ng-container *ngFor=\"let step of mediaContent; let i = index\">\n            <div class=\"lesson-step\">\n                <div class=\"lesson-step-content\" fxLayout=\"row\" fxLayoutAlign=\"center\">\n                    <img\n                        class=\"lesson-image\"\n                        [src]=\"step.media.rootUri\"\n                        [ngClass]=\"{ 'invisible-image': currentStep !== i }\"\n                    />\n                </div>\n            </div>\n        </ng-container>\n        <app-lesson-lecture-nav-step\n            [currentStep]=\"currentStep\"\n            [totalSteps]=\"this.mediaContent.length\"\n            [lastStepStyle]=\"lastStepStyle\"\n            [firstDisabled]=\"!enableFirstStep\"\n            [offset]=\"offsetStepNavigation\"\n            (stepChangeEvent)=\"onStepChange($event)\"\n            (firstStepClick)=\"onFirstStepClick($event)\"\n            (lastStepClick)=\"onLastStepClick($event)\"\n        >\n        </app-lesson-lecture-nav-step>\n    </div>\n    <!-- / CONTENT -->\n</ng-container>\n"
        },
        {
            "name": "LessonScriptPageComponent",
            "id": "component-LessonScriptPageComponent-05f95fafc9e8bc244513bd05d355a07d",
            "file": "src/app/lms/pages/lesson-script-page/lesson-script-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-lesson-script-page",
            "styleUrls": [
                "./lesson-script-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./lesson-script-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isFullscreen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "lesson$",
                    "defaultValue": "this.lmsService.getLesson(this.route.snapshot.params.lessonId)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "navigationTabsConfig",
                    "defaultValue": "{\n        links: [\n            { path: '../script', label: 'script', icon: 'description' },\n            { path: '../class', label: 'lesson', icon: 'class' },\n        ],\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INavigationTabsConfig",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "checkFullscreen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFullscreen",
                    "args": [
                        {
                            "name": "imgElement",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "imgElement",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DOCUMENT } from '@angular/common';\nimport { Component, Inject } from '@angular/core';\nimport { MediaObserver } from '@angular/flex-layout';\nimport { ActivatedRoute } from '@angular/router';\nimport { LMSService } from 'app/@core/services/lms.service';\nimport { INavigationTabsConfig } from 'app/@shared/components/navigation-tabs/navigation-tabs.component';\n\n@Component({\n    selector: 'app-lesson-script-page',\n    templateUrl: './lesson-script-page.component.html',\n    styleUrls: ['./lesson-script-page.component.scss'],\n})\nexport class LessonScriptPageComponent {\n    lesson$ = this.lmsService.getLesson(this.route.snapshot.params.lessonId);\n\n    navigationTabsConfig: INavigationTabsConfig = {\n        links: [\n            { path: '../script', label: 'script', icon: 'description' },\n            { path: '../class', label: 'lesson', icon: 'class' },\n        ],\n    };\n\n    isFullscreen = false;\n\n    constructor(\n        private lmsService: LMSService,\n        private route: ActivatedRoute,\n        @Inject(DOCUMENT) private document: Document,\n        private mediaObserver: MediaObserver,\n    ) {}\n\n    onFullscreen(imgElement: any) {\n        const elem = imgElement || this.document.documentElement;\n\n        if (!this.document.fullscreenElement) {\n            if (elem.requestFullscreen) {\n                elem.requestFullscreen();\n                this.isFullscreen = true;\n            }\n        } else {\n            if (this.document.exitFullscreen) {\n                this.document.exitFullscreen();\n                this.isFullscreen = false;\n            }\n        }\n    }\n\n    checkFullscreen() {\n        if (this.isFullscreen) {\n            this.document.exitFullscreen();\n            this.isFullscreen = false;\n        }\n    }\n\n    get isMobile() {\n        return this.mediaObserver.isActive('xs');\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/flex-layout/mq' as mq;\n\n.script-container {\n    padding: 0;\n    position: relative;\n\n    &--has-audio {\n        padding-bottom: 30px;\n    }\n\n    @include mq.layout-bp(gt-xs) {\n        padding: 24px 18px 20vh 18px;\n\n        &--has-audio {\n            padding-bottom: 200px;\n        }\n    }\n\n\n    &__fullscreen-button {\n        position: absolute;\n        bottom: 0px;\n        right: 10px;\n\n        &--has-audio {\n            bottom: 50px;\n        }\n    }\n}\n\n.script-image {\n    margin-top: 24px;\n    max-width: 100%;\n}\n",
                    "styleUrl": "./lesson-script-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "lmsService",
                        "type": "LMSService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "lmsService",
                        "type": "LMSService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "isMobile": {
                    "name": "isMobile",
                    "getSignature": {
                        "name": "isMobile",
                        "type": "",
                        "returnType": "",
                        "line": 55
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"lesson$ | async as lesson\">\n  <ng-template tpAttach=\"topBarStart\">\n    <app-back-button></app-back-button>\n    <app-top-bar-title [text]=\"lesson.title\"></app-top-bar-title>\n  </ng-template>\n\n  <ng-template tpAttach=\"topBarCenter\">\n    <app-navigation-tabs [navigationTabsConfig]=\"navigationTabsConfig\"></app-navigation-tabs>\n  </ng-template>\n\n  <div\n    class=\"script-container\"\n    [class.script-container--has-audio]=\"lesson.lessonMaterial.audio.length > 0\"\n  >\n    <app-custom-stepper #stepper [hasAudio]=\"lesson.lessonMaterial.audio.length > 0\">\n      <cdk-step *ngFor=\"let scriptPage of lesson.lessonMaterial.lectureScript; let i = index\">\n        <img\n          #imgElement\n          class=\"script-image\"\n          [src]=\"scriptPage.media.rootUri\"\n          [alt]=\"scriptPage.media.id\"\n          (click)=\"checkFullscreen()\"\n        />\n        <button\n          color=\"primary\"\n          class=\"script-container__fullscreen-button\"\n          [class.script-container__fullscreen-button--has-audio]=\"lesson.lessonMaterial.audio.length > 0\"\n          *ngIf=\"isMobile\"\n          mat-icon-button\n          (click)=\"onFullscreen(imgElement)\"\n        >\n          <mat-icon>fullscreen</mat-icon>\n        </button>\n      </cdk-step>\n    </app-custom-stepper>\n  </div>\n\n  <app-audio-control-card\n    *ngIf=\"lesson.lessonMaterial.audio.length > 0\"\n    [audioList]=\"lesson.lessonMaterial.audio\"\n  ></app-audio-control-card>\n</ng-container>\n"
        },
        {
            "name": "LessonsListComponent",
            "id": "component-LessonsListComponent-54f54d4f41af59e78598b5547e5f0c8d",
            "file": "src/app/lms/components/lessons-list/lessons-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-lessons-list",
            "styleUrls": [
                "./lessons-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./lessons-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "lessons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "goToLessonEvent",
                    "defaultValue": "new EventEmitter<Lesson>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                },
                {
                    "name": "planLessonEvent",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "chipList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatChipList",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'chipList'"
                        }
                    ]
                },
                {
                    "name": "filters",
                    "defaultValue": "[\n        {\n            value: 'grammar',\n            selected: false,\n        },\n        {\n            value: 'listening',\n            selected: false,\n        },\n        {\n            value: 'speaking',\n            selected: false,\n        },\n        {\n            value: 'reading',\n            selected: false,\n        },\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "selectedFilters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "goToClass",
                    "args": [
                        {
                            "name": "lesson",
                            "type": "Lesson",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lesson",
                            "type": "Lesson",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChangeList",
                    "args": [
                        {
                            "type": "MatChipListChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "MatChipListChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChangeSelected",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filter",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filter",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPlanLesson",
                    "args": [
                        {
                            "name": "lessonId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lessonId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectChip",
                    "args": [
                        {
                            "name": "filter",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "chip",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chip",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectFilter",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { MatChip, MatChipList, MatChipListChange } from '@angular/material/chips';\nimport { Lesson } from 'app/@core/models/lesson.model';\n\n@Component({\n    selector: 'app-lessons-list',\n    templateUrl: './lessons-list.component.html',\n    styleUrls: ['./lessons-list.component.scss'],\n})\nexport class LessonsListComponent {\n    @Input() lessons: any;\n\n    @Output() planLessonEvent = new EventEmitter<string>();\n    @Output() goToLessonEvent = new EventEmitter<Lesson>();\n\n    @ViewChild('chipList') chipList: MatChipList;\n\n    selectedFilters: string[];\n    filters = [\n        {\n            value: 'grammar',\n            selected: false,\n        },\n        {\n            value: 'listening',\n            selected: false,\n        },\n        {\n            value: 'speaking',\n            selected: false,\n        },\n        {\n            value: 'reading',\n            selected: false,\n        },\n    ];\n\n    constructor() {}\n\n    onPlanLesson(lessonId: string) {\n        this.planLessonEvent.emit(lessonId);\n    }\n\n    onSelectChip(filter, chip) {\n        if (filter.selected) {\n            chip.deselect();\n            filter.selected = false;\n        } else {\n            chip.select();\n            filter.selected = true;\n        }\n\n        // treatment when clicking on chip\n        // I think there are two different events when chip is selected, backspace and custom 'click'\n        // chips don't have click event by default\n        const array = Array.from(this.chipList.selected as MatChip[]).map((chip) => chip.value);\n        this.selectedFilters = array;\n    }\n\n    onChangeSelected(event, filter): void {\n        filter.selected = event.selected;\n    }\n\n    onChangeList({ value }: MatChipListChange) {\n        this.selectedFilters = value;\n    }\n\n    onSelectFilter(index: number) {\n        this.filters = this.filters.map((filter, i) => {\n            if (index === i) {\n                return {\n                    ...filter,\n                    selected: !filter.selected,\n                };\n            }\n\n            return filter;\n        });\n    }\n\n    goToClass(lesson: Lesson): void {\n        this.goToLessonEvent.emit(lesson);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n@use '~@angular/flex-layout/mq' as mq;\n\n@mixin lessons-list-theme($theme) {\n    $primary: mat.get-color-from-palette(map-get($theme, primary));\n    $accent: mat.get-color-from-palette(map-get($theme, accent));\n\n    $accent-500: mat.get-color-from-palette(map-get($theme, accent), 500);\n    $primary-50: mat.get-color-from-palette(map-get($theme, primary), 50);\n\n    .lessons__container {\n        padding: 24px 8px;\n\n        @include mq.layout-bp(gt-xs) {\n            padding: 32px 24px;\n        }\n    }\n\n    .lessons__filters {\n        padding-bottom: 24px;\n\n        mat-chip-list {\n            mat-chip {\n                cursor: pointer;\n                background-color: $primary-50 !important;\n\n                &.mat-standard-chip.mat-chip-selected.mat-primary {\n                    color: $accent-500 !important;\n                }\n            }\n        }\n    }\n}\n",
                    "styleUrl": "./lessons-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 36
            },
            "templateData": "<div class=\"lessons__container\">\n  <div class=\"lessons__filters\">\n    <mat-chip-list\n      #chipList\n      aria-label=\"Lesson selection\"\n      class=\"mat-body-2\"\n      [multiple]=\"true\"\n      (change)=\"onChangeList($event)\"\n    >\n      <mat-chip\n        *ngFor=\"let filter of filters; let i = index\"\n        [selected]=\"filter.selected\"\n        [value]=\"filter.value\"\n        #chip=\"matChip\"\n        (click)=\"onSelectChip(filter, chip)\"\n        (selectionChange)=\"onChangeSelected($event, filter)\"\n      >\n        <mat-icon *ngIf=\"chip.selected\">check</mat-icon>\n        {{ filter.value | titlecase }}\n      </mat-chip>\n    </mat-chip-list>\n  </div>\n\n  <section\n    gdColumns.xs=\"repeat(auto-fill, minmax(300px, 1fr))\"\n    gdColumns.gt-xs=\"repeat(auto-fill, minmax(320px, 1fr))\"\n    gdGap.xs=\"24px\"\n    gdGap.gt-xs=\"46px\"\n    gdAlignColumns=\"start stretch\"\n    gdAuto\n    style=\"z-index: -1\"\n  >\n    <div *ngFor=\"let lesson of lessons | filterLessons: selectedFilters\">\n      <app-lesson-card [lesson]=\"lesson\" (click)=\"goToClass(lesson)\"></app-lesson-card>\n    </div>\n  </section>\n</div>\n"
        },
        {
            "name": "LoginFormComponent",
            "id": "component-LoginFormComponent-00b287210d1edfd04054065374b1ef92",
            "file": "src/app/authentication/components/login-form/login-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-form",
            "styleUrls": [
                "./login-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "defaultEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string"
                },
                {
                    "name": "loginFailed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "literal type"
                }
            ],
            "outputsClass": [
                {
                    "name": "loginEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "loginForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "showPassword",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLogin user function\n",
                    "description": "<p>Login user function</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOn init\n",
                    "description": "<p>On init</p>\n"
                },
                {
                    "name": "onToggleShowPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output, Input } from '@angular/core';\nimport { MediaObserver } from '@angular/flex-layout';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { UserService } from 'app/@core/services/user.service';\n\n@Component({\n    selector: 'app-login-form',\n    templateUrl: './login-form.component.html',\n    styleUrls: ['./login-form.component.scss'],\n})\nexport class LoginFormComponent implements OnInit {\n    loginForm: FormGroup;\n\n    showPassword = false;\n\n    // loginFailed = false;\n\n    @Input() loginFailed: { error: boolean; message: string };\n    @Input() defaultEmail: string;\n\n    @Output() loginEvent = new EventEmitter();\n\n    /**\n     * Constructor\n     *\n     * @param _fuseConfigService\n     * @param _formBuilder\n     */\n    constructor(\n        private _formBuilder: FormBuilder,\n        private userService: UserService,\n        private router: Router,\n        private mediaObserver: MediaObserver,\n    ) {\n        // Configure the layout\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void {\n        this.loginForm = this._formBuilder.group({\n            email: ['', [Validators.required, Validators.email]],\n            password: ['', Validators.compose([Validators.required, Validators.minLength(8)])],\n        });\n\n        if (this.defaultEmail) {\n            const email = decodeURI(this.defaultEmail);\n            this.loginForm.get('email').patchValue(email);\n        }\n    }\n\n    /**\n     * Login user function\n     */\n    login(): void {\n        const { email, password } = this.loginForm.value;\n        this.loginEvent.emit({ email, password });\n    }\n\n    onToggleShowPassword() {\n        this.showPassword = !this.showPassword;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".cursor-pointer {\n    cursor: pointer;\n}\n\n:host {\n    width: 100%;\n}\n\n",
                    "styleUrl": "./login-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "rawdescription": "\n\nConstructor\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 816,
                            "end": 828,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "_formBuilder"
                        },
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 810,
                            "end": 815,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxLayout=\"column\" fxLayoutAlign=\"start stretch\" fxLayoutGap=\"20px\">\n  <form\n    name=\"loginForm\"\n    [formGroup]=\"loginForm\"\n    novalidate\n    fxLayout=\"column\"\n    fxLayoutAlign=\"start stretch\"\n    fxLayoutGap=\"20px\"\n    (ngSubmit)=\"login()\"\n  >\n    <div fxLayout=\"column\" fxLayoutAlign=\"start stretch\" style=\"position: relative\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Email</mat-label>\n        <input matInput formControlName=\"email\" type=\"email\" />\n        <mat-error *ngIf=\"loginForm.get('email').hasError('required')\">\n          Email is required\n        </mat-error>\n        <mat-error\n          *ngIf=\"\n            !loginForm.get('email').hasError('required') && loginForm.get('email').hasError('email')\n          \"\n        >\n          Please enter a valid email address\n        </mat-error>\n      </mat-form-field>\n      <small\n        class=\"mat-error mat-caption\"\n        *ngIf=\"defaultEmail\"\n        style=\"position: absolute; bottom: 5px; left: 15px\"\n      >\n        Email is taken. Login instead\n      </small>\n    </div>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Password</mat-label>\n\n      <input matInput [type]=\"showPassword ? 'text' : 'password'\" formControlName=\"password\" />\n\n      <mat-icon\n        class=\"cursor-pointer text-black-opacity-06\"\n        matSuffix\n        (click)=\"onToggleShowPassword()\"\n        >{{ showPassword ? 'visibility_off' : 'visibility' }}</mat-icon\n      >\n\n      <mat-error *ngIf=\"loginForm.get('password').hasError('required')\">\n        Password is required\n      </mat-error>\n\n      <mat-error *ngIf=\"!loginForm.get('password').hasError('required')\">\n        Password must have at least 8 characters\n      </mat-error>\n    </mat-form-field>\n\n    <mat-error class=\"mat-caption text-center\" *ngIf=\"loginFailed.error\">\n      {{ loginFailed.message }}\n    </mat-error>\n    <div fxLayout=\"column\" fxLayoutAlign=\"start center\" fxLayoutGap=\"16px\">\n      <a mat-button color=\"primary\" [routerLink]=\"'/auth/forgot-password'\"> Forgot Password? </a>\n\n      <button\n        mat-flat-button\n        color=\"primary\"\n        aria-label=\"LOGIN\"\n        type=\"submit\"\n        [disabled]=\"loginForm.invalid\"\n      >\n        login\n      </button>\n\n      <a mat-stroked-button color=\"primary\" [routerLink]=\"'/auth/create-account'\">\n        Create an account\n      </a>\n    </div>\n  </form>\n</div>\n"
        },
        {
            "name": "LoginPageComponent",
            "id": "component-LoginPageComponent-1eea846f5cb7963123323b11284dc7b0",
            "file": "src/app/authentication/pages/login-page/login-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-page",
            "styleUrls": [
                "./login-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "loginFailed",
                    "defaultValue": "{\n        error: false,\n        message: '',\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { OnInit } from '@angular/core';\nimport { Component } from '@angular/core';\nimport { MediaObserver } from '@angular/flex-layout';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { UserService } from 'app/@core/services/user.service';\nimport { throwError } from 'rxjs';\nimport { catchError, first, switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-login-page',\n    templateUrl: './login-page.component.html',\n    styleUrls: ['./login-page.component.scss'],\n})\nexport class LoginPageComponent implements OnInit {\n    loginFailed = {\n        error: false,\n        message: '',\n    };\n\n    email: string;\n\n    constructor(\n        private userService: UserService,\n        private router: Router,\n        private mediaObserver: MediaObserver,\n        private route: ActivatedRoute,\n    ) {}\n\n    ngOnInit() {\n        this.email = this.route.snapshot.queryParams?.email;\n\n        if (this.email) {\n            this.router.navigate([], {\n                relativeTo: this.route,\n                queryParams: { email: null },\n                queryParamsHandling: 'merge',\n            });\n        }\n    }\n\n    login({ email, password }: { email: string; password: string }): void {\n        this.userService\n            .login(email, password)\n            .pipe(\n                first(),\n                switchMap((result) => {\n                    return this.userService.loginSuccess(result);\n                }),\n                catchError((err) => throwError(err)),\n            )\n            .subscribe({\n                next: () => {\n                    this.router.navigate(['/']);\n                },\n                error: (err) => {\n                    if (err === 'Bad Request') {\n                        this.loginFailed = {\n                            error: true,\n                            message: 'Invalid email or password',\n                        };\n                        return;\n                    }\n                    this.loginFailed = {\n                        error: true,\n                        message: 'Error validating email/password',\n                    };\n                },\n            });\n    }\n\n    get isMobile() {\n        return this.mediaObserver.isActive('xs');\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./login-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isMobile": {
                    "name": "isMobile",
                    "getSignature": {
                        "name": "isMobile",
                        "type": "",
                        "returnType": "",
                        "line": 71
                    }
                }
            },
            "templateData": "<app-auth-layout>\n  <app-login-form\n    (loginEvent)=\"login($event)\"\n    [loginFailed]=\"loginFailed\"\n    [defaultEmail]=\"email\"\n  ></app-login-form>\n</app-auth-layout>\n"
        },
        {
            "name": "MessageComponent",
            "id": "component-MessageComponent-d6aebc304a5486392a1cf9ecc9141ee7",
            "file": "src/app/main/invitation/message/message.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "invitation-message",
            "styleUrls": [
                "./message.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./message.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "sub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewEncapsulation, OnDestroy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n    selector: 'invitation-message',\n    templateUrl: './message.component.html',\n    styleUrls: ['./message.component.scss'],\n})\nexport class MessageComponent implements OnInit, OnDestroy {\n    private sub: any;\n    status: string;\n    title: string;\n    subtitle: string;\n    icon: string;\n\n    constructor(private route: ActivatedRoute) {\n        // Initialize variables\n        this.status = '';\n        this.title = '';\n        this.subtitle = '';\n        this.icon = '';\n    }\n\n    ngOnInit(): void {\n        this.sub = this.route.params.subscribe((params) => {\n            this.status = params.status;\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.sub.unsubscribe();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-icon {\n    font-size: 40px;\n    width: 40px;\n    height: 40px;\n}\n",
                    "styleUrl": "./message.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-auth-layout>\n  <div fxLayout=\"column\" fxLayoutAlign=\"center center\" fxLayoutGap=\"16px\">\n    <!-- Accepted invitation -->\n    <ng-container *ngIf=\"status === 'accepted'\">\n      <mat-icon color=\"primary\">check_box</mat-icon>\n      <div class=\"mat-title\">Bem vindo à eslo!</div>\n      <div class=\"mat-subheading-1 text-center\">\n        <p>Em breve iremos ativar sua matrícula e enviar um email de acesso ao aplicativo.</p>\n      </div>\n    </ng-container>\n\n    <!-- Refused invitation -->\n    <ng-container *ngIf=\"status === 'rejected'\">\n      <mat-icon color=\"warn\">cancel</mat-icon>\n      <div class=\"mat-title\">Convite rejeitado</div>\n      <div class=\"mat-subheading-1 text-center\">\n        <p>Não se preocupe, nós iremos avisar seu professor.</p>\n      </div>\n    </ng-container>\n\n    <!-- Failed invitation link -->\n    <ng-container *ngIf=\"status === 'failed'\">\n      <mat-icon color=\"accent\">warning</mat-icon>\n      <div class=\"mat-title\">Convite inválido</div>\n      <div class=\"mat-subheading-1 text-center\">\n        <p>O link para o convite é inválido ou já foi usado.</p>\n      </div>\n    </ng-container>\n  </div>\n</app-auth-layout>\n"
        },
        {
            "name": "ModalConfirmationComponent",
            "id": "component-ModalConfirmationComponent-5394e8f694e2506a2a9a73d1dcde9fa3",
            "file": "src/app/@shared/components/modal-confirmation/modal-confirmation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-modal-confirmation",
            "styleUrls": [
                "./modal-confirmation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modal-confirmation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ModalConfirmationComponent>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nexport interface ModalConfirmationDataOptions {\n    title?: string;\n    message?: string;\n    confirmLabel?: string;\n    cancelLabel?: string;\n}\n\n@Component({\n    selector: 'app-modal-confirmation',\n    templateUrl: './modal-confirmation.component.html',\n    styleUrls: ['./modal-confirmation.component.scss'],\n})\nexport class ModalConfirmationComponent {\n    constructor(\n        public dialogRef: MatDialogRef<ModalConfirmationComponent>,\n        @Inject(MAT_DIALOG_DATA) private data: ModalConfirmationDataOptions,\n    ) {\n        this.dialogRef.addPanelClass('dialog-border-radius--padding');\n    }\n\n    get title(): string {\n        return this.data?.title;\n    }\n\n    get message(): string {\n        return this.data?.message ?? 'Are you sure you want to continue this action?';\n    }\n\n    get confirmLabel(): string {\n        return this.data?.confirmLabel ?? 'Confirm';\n    }\n\n    get cancelLabel(): string {\n        return this.data?.cancelLabel ?? 'Cancel';\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".padding-top {\n  padding-top: 24px !important;\n} ",
                    "styleUrl": "./modal-confirmation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ModalConfirmationComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "ModalConfirmationDataOptions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ModalConfirmationComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "ModalConfirmationDataOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "title": {
                    "name": "title",
                    "getSignature": {
                        "name": "title",
                        "type": "string",
                        "returnType": "string",
                        "line": 24
                    }
                },
                "message": {
                    "name": "message",
                    "getSignature": {
                        "name": "message",
                        "type": "string",
                        "returnType": "string",
                        "line": 28
                    }
                },
                "confirmLabel": {
                    "name": "confirmLabel",
                    "getSignature": {
                        "name": "confirmLabel",
                        "type": "string",
                        "returnType": "string",
                        "line": 32
                    }
                },
                "cancelLabel": {
                    "name": "cancelLabel",
                    "getSignature": {
                        "name": "cancelLabel",
                        "type": "string",
                        "returnType": "string",
                        "line": 36
                    }
                }
            },
            "templateData": "<h1 *ngIf=\"title\" mat-dialog-title>{{ title }}</h1>\n\n<div mat-dialog-content class=\"mat-body-2\">\n    {{ message }}\n</div>\n\n<div mat-dialog-actions class=\"padding-top\" fxLayout=\"row\" fxLayoutAlign=\"end center\">\n    <button mat-button color=\"warn\" (click)=\"dialogRef.close(false)\" aria-label=\"Cancel\">\n        {{ cancelLabel }}\n    </button>\n    <button mat-button color=\"primary\" (click)=\"dialogRef.close(true)\" aria-label=\"Confirm\">\n        {{ confirmLabel }}\n    </button>\n</div>\n"
        },
        {
            "name": "ModalTermsConditionsComponent",
            "id": "component-ModalTermsConditionsComponent-f71dcfac166da8b0c2c428d48840664c",
            "file": "src/app/main/invitation/welcome/modal-terms-conditions/modal-terms-conditions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-modal-terms-conditions",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./modal-terms-conditions.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-modal-terms-conditions',\n    templateUrl: './modal-terms-conditions.component.html',\n})\nexport class ModalTermsConditionsComponent {\n    constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "templateData": "<h2 mat-dialog-title>Terms and Conditions</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <h3>Develop across all platforms</h3>\n  <p>Learn one way to build applications with Angular and reuse your code and abilities to build\n    apps for any deployment target. For web, mobile web, native mobile and native desktop.</p>\n\n  <h3>Speed &amp; Performance</h3>\n  <p>Achieve the maximum speed possible on the Web Platform today, and take it further, via Web\n    Workers and server-side rendering. Angular puts you in control over scalability. Meet huge\n    data requirements by building data models on RxJS, Immutable.js or another push-model.</p>\n\n  <h3>Incredible tooling</h3>\n  <p>Build features quickly with simple, declarative templates. Extend the template language with\n    your own components and use a wide array of existing components. Get immediate Angular-specific\n    help and feedback with nearly every IDE and editor. All this comes together so you can focus\n    on building amazing apps rather than trying to make the code work.</p>\n\n  <h3>Loved by millions</h3>\n  <p>From prototype through global deployment, Angular delivers the productivity and scalable\n    infrastructure that supports Google's largest applications.</p>\n\n  <h3>What is Angular?</h3>\n\n  <p>Angular is a platform that makes it easy to build applications with the web. Angular\n    combines declarative templates, dependency injection, end to end tooling, and integrated\n    best practices to solve development challenges. Angular empowers developers to build\n    applications that live on the web, mobile, or the desktop</p>\n\n  <h3>Architecture overview</h3>\n\n  <p>Angular is a platform and framework for building client applications in HTML and TypeScript.\n  Angular is itself written in TypeScript. It implements core and optional functionality as a\n  set of TypeScript libraries that you import into your apps.</p>\n\n  <p>The basic building blocks of an Angular application are NgModules, which provide a compilation\n  context for components. NgModules collect related code into functional sets; an Angular app is\n  defined by a set of NgModules. An app always has at least a root module that enables\n  bootstrapping, and typically has many more feature modules.</p>\n\n  <p>Components define views, which are sets of screen elements that Angular can choose among and\n  modify according to your program logic and data. Every app has at least a root component.</p>\n\n  <p>Components use services, which provide specific functionality not directly related to views.\n  Service providers can be injected into components as dependencies, making your code modular,\n  reusable, and efficient.</p>\n\n  <p>Both components and services are simply classes, with decorators that mark their type and\n  provide metadata that tells Angular how to use them.</p>\n\n  <p>The metadata for a component class associates it with a template that defines a view. A\n  template combines ordinary HTML with Angular directives and binding markup that allow Angular\n  to modify the HTML before rendering it for display.</p>\n\n  <p>The metadata for a service class provides the information Angular needs to make it available\n  to components through Dependency Injection (DI).</p>\n\n  <p>An app's components typically define many views, arranged hierarchically. Angular provides\n  the Router service to help you define navigation paths among views. The router provides\n  sophisticated in-browser navigational capabilities.</p>\n</mat-dialog-content>"
        },
        {
            "name": "MonthPageComponent",
            "id": "component-MonthPageComponent-1395293334e76b6b18d14146ba6df308",
            "file": "src/app/calendar/pages/month-page/month-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-month-page",
            "styleUrls": [
                "./month-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./month-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-month-page',\n    templateUrl: './month-page.component.html',\n    styleUrls: ['./month-page.component.scss'],\n})\nexport class MonthPageComponent {\n    constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".month__container {\n  padding: 40px 12px;\n}",
                    "styleUrl": "./month-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "templateData": "<div class=\"month__container\">\n  <app-calendar-mobile></app-calendar-mobile>\n</div>\n"
        },
        {
            "name": "NavigationBarComponent",
            "id": "component-NavigationBarComponent-aadf38d507cdb0936bb9db519a1ad1f4",
            "file": "src/app/layout/components/navigation-bar/navigation-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navigation-bar",
            "styleUrls": [
                "./navigation-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "navigation-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string"
                },
                {
                    "name": "hasAdminRole",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "hasStudentRole",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean"
                },
                {
                    "name": "hasTeacherRole",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean"
                },
                {
                    "name": "links",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "any[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "leftLinks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "menuLinks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "openFromButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "rightLinks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "getIsLinkActive",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClickedOutside",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { Component } from '@angular/core';\nimport { MediaObserver } from '@angular/flex-layout';\nimport { Router } from '@angular/router';\n\n@Component({\n    selector: 'app-navigation-bar',\n    templateUrl: 'navigation-bar.component.html',\n    styleUrls: ['./navigation-bar.component.scss'],\n})\nexport class NavigationBarComponent implements OnChanges {\n    isOpen = false;\n\n    @Input() links: any[];\n    leftLinks: any[] = [];\n    rightLinks: any[] = [];\n    menuLinks: any[] = [];\n    openFromButton = false;\n\n    @Input() hasAdminRole: boolean;\n    @Input() hasTeacherRole: boolean;\n    @Input() hasStudentRole: boolean;\n\n    @Input() activeLink: string;\n\n    constructor(private mediaObserver: MediaObserver, private router: Router) {}\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes['links']?.currentValue) {\n            this.links.forEach((link) => {\n                const position = link.position;\n                if (position === 'left') {\n                    this.leftLinks.push(link);\n                } else if (position === 'right') {\n                    this.rightLinks.push(link);\n                } else if (position === 'menu') {\n                    this.menuLinks.push(link);\n                }\n            });\n        }\n    }\n\n    onClickedOutside() {\n        this.isOpen = false;\n    }\n\n    get isMobile() {\n        return this.mediaObserver.isActive('xs');\n    }\n\n    getIsLinkActive(path: string) {\n        return this.router.isActive(path, false);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n@use '~@angular/flex-layout/mq' as mq;\n\n.hamburger {\n    display: inline-block;\n    cursor: pointer;\n    transition-property: opacity, filter;\n    transition-duration: 0.15s;\n    transition-timing-function: linear;\n    font: inherit;\n    color: inherit;\n    text-transform: none;\n    background-color: transparent;\n    border: 0;\n    margin: 0;\n    overflow: visible;\n    transform: scale(0.6);\n}\n\n.hamburger.is-active .hamburger-inner,\n.hamburger.is-active .hamburger-inner::before,\n.hamburger.is-active .hamburger-inner::after {\n    background-color: #fff;\n}\n\n.hamburger-box {\n    width: 40px;\n    height: 24px;\n    display: inline-block;\n    position: relative;\n}\n\n.hamburger-inner {\n    display: block;\n    top: 50%;\n    margin-top: -2px;\n}\n.hamburger-inner,\n.hamburger-inner::before,\n.hamburger-inner::after {\n    width: 40px;\n    height: 4px;\n    background-color: #fff;\n    border-radius: 4px;\n    position: absolute;\n    transition-property: transform;\n    transition-duration: 0.15s;\n    transition-timing-function: ease;\n}\n.hamburger-inner::before,\n.hamburger-inner::after {\n    content: '';\n    display: block;\n}\n.hamburger-inner::before {\n    top: -10px;\n}\n.hamburger-inner::after {\n    bottom: -10px;\n}\n\n/*\n   * Spin\n   */\n.hamburger--spin .hamburger-inner {\n    transition-duration: 0.22s;\n    transition-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);\n}\n.hamburger--spin .hamburger-inner::before {\n    transition: top 0.1s 0.25s ease-in, opacity 0.1s ease-in;\n}\n.hamburger--spin .hamburger-inner::after {\n    transition: bottom 0.1s 0.25s ease-in, transform 0.22s cubic-bezier(0.55, 0.055, 0.675, 0.19);\n}\n\n.hamburger--spin.is-active .hamburger-inner {\n    transform: rotate(225deg);\n    transition-delay: 0.12s;\n    transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n}\n.hamburger--spin.is-active .hamburger-inner::before {\n    top: 0;\n    opacity: 0;\n    transition: top 0.1s ease-out, opacity 0.1s 0.12s ease-out;\n}\n.hamburger--spin.is-active .hamburger-inner::after {\n    bottom: 0;\n    transform: rotate(-90deg);\n    transition: bottom 0.1s ease-out, transform 0.22s 0.12s cubic-bezier(0.215, 0.61, 0.355, 1);\n}\n\n/*\n     * Spin Reverse\n     */\n.hamburger--spin-r .hamburger-inner {\n    transition-duration: 0.22s;\n    transition-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);\n}\n.hamburger--spin-r .hamburger-inner::before {\n    transition: top 0.1s 0.25s ease-in, opacity 0.1s ease-in;\n}\n.hamburger--spin-r .hamburger-inner::after {\n    transition: bottom 0.1s 0.25s ease-in, transform 0.22s cubic-bezier(0.55, 0.055, 0.675, 0.19);\n}\n\n.hamburger--spin-r.is-active .hamburger-inner {\n    transform: rotate(-225deg);\n    transition-delay: 0.12s;\n    transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n}\n.hamburger--spin-r.is-active .hamburger-inner::before {\n    top: 0;\n    opacity: 0;\n    transition: top 0.1s ease-out, opacity 0.1s 0.12s ease-out;\n}\n.hamburger--spin-r.is-active .hamburger-inner::after {\n    bottom: 0;\n    transform: rotate(90deg);\n    transition: bottom 0.1s ease-out, transform 0.22s 0.12s cubic-bezier(0.215, 0.61, 0.355, 1);\n}\n\n@mixin navigation-bar-theme($theme) {\n    $primary: mat.get-color-from-palette(map-get($theme, primary));\n    $accent: mat.get-color-from-palette(map-get($theme, accent));\n    $background: mat.get-color-from-palette(map-get($theme, background), background);\n    $background-contrast: mat.get-color-from-palette(map-get($theme, background), default-contrast);\n    $primary-contrast: mat.get-color-from-palette(map-get($theme, primary), '500-contrast');\n    $is-dark: map-get($theme, is-dark);\n\n    .navigation-bar {\n        display: flex;\n        height: 56px;\n        z-index: 1;\n\n        @include mq.layout-bp(gt-xs) {\n            flex-direction: column;\n            padding: 18px;\n        }\n\n        &__wrapper {\n            will-change: background-color, border-radius;\n            background-color: $background;\n            flex: 1;\n            z-index: 2;\n            transition: background-color 2s;\n            border-radius: 0;\n            margin-bottom: 5px;\n            position: relative;\n\n            @include mq.layout-bp(xs) {\n                display: flex;\n                justify-content: center;\n                align-items: center;\n            }\n        }\n\n        &__menu-button {\n            padding: 0;\n            border: none;\n            outline: none;\n            height: 100%;\n            width: 56px;\n            height: 54px;\n            z-index: 3;\n            cursor: pointer;\n            border-radius: 50%;\n            background-color: $primary !important;\n            color: $primary-contrast !important;\n        }\n\n        &__menu-card {\n            position: absolute;\n            top: -65px;\n            z-index: 10;\n            padding: 0;\n            border-radius: 24px;\n            width: 100px;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n        }\n\n        &__button {\n            padding: 0;\n            background-color: $background !important;\n            border: none;\n            outline: none;\n            height: 100%;\n            width: 56px;\n            height: 56px;\n            z-index: 3;\n            cursor: pointer;\n            border-radius: 50%;\n\n            @if ($is-dark) {\n                color: white;\n            } @else {\n                color: black;\n            }\n\n            mat-icon {\n                transition: all 0.3s;\n            }\n\n            @include mq.layout-bp(gt-xs) {\n                width: 72px;\n                height: 72px;\n            }\n\n            &--active {\n                color: $primary !important;\n\n                @include mq.layout-bp(gt-xs) {\n                    background-color: $primary !important;\n                    color: $primary-contrast !important;\n                }\n\n                mat-icon {\n                    font-size: 28px;\n                    width: 28px;\n                    height: 28px;\n\n                    @include mq.layout-bp(gt-xs) {\n                        font-size: 32px;\n                        width: 32px;\n                        height: 32px;\n                    }\n                }\n            }\n        }\n    }\n}\n",
                    "styleUrl": "./navigation-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "isMobile": {
                    "name": "isMobile",
                    "getSignature": {
                        "name": "isMobile",
                        "type": "",
                        "returnType": "",
                        "line": 47
                    }
                }
            },
            "templateData": "<!-- TODO: Navigation bar on mobile: https://dribbble.com/shots/6689572-Tab-Bar-Animation -->\n\n<div class=\"navigation-bar\">\n  <div\n    *ngIf=\"!isMobile\"\n    style=\"height: 56px; margin-bottom: 16px\"\n    fxLayout=\"row\"\n    fxLayoutAlign=\"center center\"\n  >\n    <app-eslo-logo></app-eslo-logo>\n  </div>\n\n  <ng-container style=\"width: 100%\" *ngFor=\"let link of leftLinks; let i = index\">\n    <div\n      *ngIf=\"\n        (link.admin && hasAdminRole) ||\n        (link.teacher && hasTeacherRole) ||\n        (link.student && hasStudentRole)\n      \"\n      class=\"navigation-bar__wrapper\"\n    >\n      <button\n        [disabled]=\"link.spacer\"\n        class=\"navigation-bar__button\"\n        matRipple\n        [routerLink]=\"[link.path]\"\n        routerLinkActive=\"navigation-bar__button--active\"\n        [class.navigation-bar__button--active]=\"activeLink === link.path\"\n      >\n        <mat-icon>{{ link.icon }}</mat-icon>\n      </button>\n    </div>\n  </ng-container>\n\n  <div *ngIf=\"isMobile\" class=\"navigation-bar__wrapper\" (clickOutside)=\"onClickedOutside()\">\n    <button\n      class=\"navigation-bar__menu-button mat-elevation-z2\"\n      (click)=\"isOpen = !isOpen\"\n      matRipple\n    >\n      <div class=\"hamburger hamburger--spin\" [class.is-active]=\"isOpen\">\n        <div class=\"hamburger-box\">\n          <div class=\"hamburger-inner\"></div>\n        </div>\n      </div>\n    </button>\n    <mat-card *ngIf=\"isOpen\" class=\"navigation-bar__menu-card mat-elevation-z4\">\n      <ng-container style=\"width: 100%\" *ngFor=\"let link of menuLinks; let i = index\">\n        <button\n          *ngIf=\"\n            (link.admin && hasAdminRole) ||\n            (link.teacher && hasTeacherRole) ||\n            (link.student && hasStudentRole)\n          \"\n          [disabled]=\"link.spacer\"\n          class=\"navigation-bar__button\"\n          matRipple\n          [routerLink]=\"[link.path]\"\n          routerLinkActive=\"navigation-bar__button--active\"\n          [class.navigation-bar__button--active]=\"activeLink === link.path\"\n          (click)=\"isOpen = false\"\n        >\n          <mat-icon>{{ link.icon }}</mat-icon>\n        </button>\n      </ng-container>\n    </mat-card>\n  </div>\n\n  <ng-container style=\"width: 100%\" *ngFor=\"let link of rightLinks; let i = index\">\n    <div\n      *ngIf=\"\n        (link.admin && hasAdminRole) ||\n        (link.teacher && hasTeacherRole) ||\n        (link.student && hasStudentRole && !isMobile && !link.spacer) ||\n        (isMobile && (link.spacer || !link.spacer) && link.student && hasStudentRole)\n      \"\n      class=\"navigation-bar__wrapper\"\n    >\n      <button\n        [disabled]=\"link.spacer\"\n        class=\"navigation-bar__button\"\n        matRipple\n        [routerLink]=\"[link.path]\"\n        routerLinkActive=\"navigation-bar__button--active\"\n        [class.navigation-bar__button--active]=\"activeLink === link.path\"\n        [class.mat-elevation-z2]=\"!isMobile && getIsLinkActive(link.path)\"\n      >\n        <mat-icon>{{ link.icon }}</mat-icon>\n      </button>\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"!isMobile\">\n    <ng-container style=\"width: 100%\" *ngFor=\"let link of menuLinks; let i = index\">\n      <div\n        *ngIf=\"\n          (link.admin && hasAdminRole) ||\n          (link.teacher && hasTeacherRole) ||\n          (link.student && hasStudentRole && !isMobile && !link.spacer) ||\n          (isMobile && (link.spacer || !link.spacer) && link.student && hasStudentRole)\n        \"\n        class=\"navigation-bar__wrapper\"\n      >\n        <button\n          [disabled]=\"link.spacer\"\n          class=\"navigation-bar__button\"\n          matRipple\n          [routerLink]=\"[link.path]\"\n          routerLinkActive=\"navigation-bar__button--active\"\n          [class.navigation-bar__button--active]=\"activeLink === link.path\"\n          [class.mat-elevation-z2]=\"!isMobile && getIsLinkActive(link.path)\"\n        >\n          <mat-icon>{{ link.icon }}</mat-icon>\n        </button>\n      </div>\n    </ng-container>\n  </ng-container>\n</div>\n"
        },
        {
            "name": "NavigationTabsComponent",
            "id": "component-NavigationTabsComponent-d1262211ee830438148f93ca17d1dcf1",
            "file": "src/app/@shared/components/navigation-tabs/navigation-tabs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navigation-tabs",
            "styleUrls": [
                "./navigation-tabs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navigation-tabs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "navigationTabsConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "INavigationTabsConfig"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_navigationTabsConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INavigationTabsConfig",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "activePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkRoute",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateNavigationTabsConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { MediaObserver } from '@angular/flex-layout';\nimport { Router, NavigationEnd } from '@angular/router';\nimport { Subject } from 'rxjs';\nimport { takeUntil, filter } from 'rxjs/operators';\n\nexport interface INavigationTabsPath {\n    path: string;\n    icon?: string;\n    textIcon?: string;\n    label?: string;\n    layoutOnly?: boolean;\n    queryParams?: Record<string, string>;\n}\n\nexport interface INavigationTabsConfig {\n    links: INavigationTabsPath[];\n}\n\n@Component({\n    selector: 'app-navigation-tabs',\n    templateUrl: './navigation-tabs.component.html',\n    styleUrls: ['./navigation-tabs.component.scss'],\n})\nexport class NavigationTabsComponent implements OnInit, OnDestroy {\n    _navigationTabsConfig: INavigationTabsConfig;\n    get navigationTabsConfig() {\n        return this._navigationTabsConfig;\n    }\n\n    @Input() set navigationTabsConfig(value) {\n        this._navigationTabsConfig = value;\n\n        if (value) {\n            this.updateNavigationTabsConfig();\n        }\n    }\n\n    activePath: string;\n\n    private destroy$ = new Subject<void>();\n\n    constructor(private router: Router, private mediaObserver: MediaObserver) {}\n\n    updateNavigationTabsConfig() {\n        // check path of current route to activate the right tab\n        this.router.events\n            .pipe(\n                takeUntil(this.destroy$),\n                filter((evt) => evt instanceof NavigationEnd),\n            )\n            .subscribe({\n                next: ({ url }: NavigationEnd) => {\n                    this.checkRoute(url);\n                },\n            });\n    }\n\n    ngOnInit(): void {\n        const url = this.router.url;\n        this.checkRoute(url);\n    }\n\n    checkRoute(url: string) {\n        const currentPath = url.split('/').pop();\n        this.activePath = this.navigationTabsConfig.links.find(\n            (link) => link.path.replace(/..\\//g, '') === currentPath,\n        )?.path;\n    }\n\n    ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    get isGreaterThanMobile() {\n        return this.mediaObserver.isActive('gt-xs');\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n@use '~@angular/flex-layout/mq' as mq;\n\n@mixin navigation-tabs-theme($theme) {\n    $primary: mat.get-color-from-palette(map-get($theme, primary));\n    $accent: mat.get-color-from-palette(map-get($theme, accent));\n\n    .navigation-tabs {\n        border: none;\n        max-width: 90vw;\n        overflow-x: auto;\n\n        @include mq.layout-bp(gt-xs) {\n            max-width: unset;\n            overflow-x: auto;\n        }\n\n        .mat-tab-link-container {\n            overflow: auto !important;\n            .mat-tab-list {\n                .mat-tab-links {\n                    .mat-tab-link {\n                        padding: 0 !important;\n                    }\n                }\n            }\n        }\n\n        &__link {\n            color: $primary;\n            height: 100%;\n\n            &--active {\n                color: $accent;\n            }\n            \n            &.mat-tab-disabled {\n                color: $accent;\n            }\n\n            &__content {\n                display: flex;\n                flex-direction: column;\n                justify-content: center;\n                align-items: center;\n\n                mat-icon {\n                    margin-top: 10px;\n                }\n\n                &__text-icon {\n                    height: 28px;\n                    text-transform: uppercase;\n                }\n            }\n        }\n    }\n}\n",
                    "styleUrl": "./navigation-tabs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "navigationTabsConfig": {
                    "name": "navigationTabsConfig",
                    "setSignature": {
                        "name": "navigationTabsConfig",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 31,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "navigationTabsConfig",
                        "type": "",
                        "returnType": "",
                        "line": 27
                    }
                },
                "isGreaterThanMobile": {
                    "name": "isGreaterThanMobile",
                    "getSignature": {
                        "name": "isGreaterThanMobile",
                        "type": "",
                        "returnType": "",
                        "line": 76
                    }
                }
            },
            "templateData": "<nav mat-tab-nav-bar class=\"navigation-tabs\" color=\"accent\" [disablePagination]=\"true\">\n  <div *ngFor=\"let link of navigationTabsConfig.links\">\n    <a\n      mat-tab-link\n      [routerLink]=\"link.path\"\n      [queryParams]=\"link.queryParams\"\n      routerLinkActive\n      #rla=\"routerLinkActive\"\n      [active]=\"rla.isActive\"\n      routerLinkActive=\"navigation-tabs__link--active\"\n      class=\"navigation-tabs__link\"\n      [disabled]=\"link.layoutOnly\"\n    >\n      <div class=\"navigation-tabs__link__content mat-button\">\n        <!-- <mat-icon *ngIf=\"isGreaterThanMobile && link?.icon\">{{ link.icon || 'home' }}</mat-icon> -->\n        <!-- <span\n          class=\"navigation-tabs__link__content__text-icon\"\n          *ngIf=\"isGreaterThanMobile && link?.textIcon\"\n        >\n          {{ link.textIcon }}\n        </span> -->\n        {{ link.label || link.path | uppercase }}\n      </div>\n    </a>\n  </div>\n</nav>\n"
        },
        {
            "name": "PillTabComponent",
            "id": "component-PillTabComponent-d9e12db1216dd4d050231c029606180d",
            "file": "src/app/@shared/components/pill-tabs/pill-tab/pill-tab.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pill-tab",
            "styleUrls": [
                "./pill-tab.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pill-tab.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "active",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean"
                },
                {
                    "name": "completed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'app-pill-tab',\n    templateUrl: './pill-tab.component.html',\n    styleUrls: ['./pill-tab.component.scss'],\n})\nexport class PillTabComponent {\n    @Input() title: string;\n    @Input() active = false;\n    @Input() icon = '';\n    @Input() completed = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n.pane {\n    padding: 1em;\n    background-color: white;\n    border-radius: 21px 21px 0 0;\n    height: 100%;\n}\n",
                    "styleUrl": "./pill-tab.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div [hidden]=\"!active\" class=\"pane\">\n  <ng-content></ng-content>\n</div>"
        },
        {
            "name": "PillTabsComponent",
            "id": "component-PillTabsComponent-bee1cdef612278fa05191cde515edd1b",
            "file": "src/app/@shared/components/pill-tabs/pill-tabs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pill-tabs",
            "styleUrls": [
                "./pill-tabs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pill-tabs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tabs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<PillTabComponent>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "PillTabComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectTab",
                    "args": [
                        {
                            "name": "tab",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ContentChildren, QueryList, AfterContentInit } from '@angular/core';\n\nimport { PillTabComponent } from './pill-tab/pill-tab.component';\n\n@Component({\n    selector: 'app-pill-tabs',\n    templateUrl: './pill-tabs.component.html',\n    styleUrls: ['./pill-tabs.component.scss'],\n})\nexport class PillTabsComponent implements AfterContentInit {\n    @ContentChildren(PillTabComponent) tabs: QueryList<PillTabComponent>;\n\n    // contentChildren are set\n    ngAfterContentInit() {\n        // get all active tabs\n        let activeTabs = this.tabs.filter((tab) => tab.active);\n\n        // if there is no active tab set, activate the first\n        if (activeTabs.length === 0) {\n            this.selectTab(this.tabs.first);\n        }\n    }\n\n    selectTab(tab: any) {\n        // deactivate all tabs\n        this.tabs.toArray().forEach((tab) => (tab.active = false));\n\n        // activate the tab the user has clicked on.\n        tab.active = true;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n@mixin pill-tabs-theme($theme) {\n    $primary: mat.get-color-from-palette(map-get($theme, primary));\n    $accent: mat.get-color-from-palette(map-get($theme, accent));\n\n    $accent-200: mat.get-color-from-palette(map-get($theme, accent), 200);\n\n    $background: mat.get-color-from-palette(map-get($theme, background), card);\n\n    .tabs {\n        display: flex;\n        justify-content: space-evenly;\n        align-items: center;\n        margin: 20px 0 15px 0;\n\n        mat-icon {\n            color: $background;\n            opacity: 0.38;\n\n            &.active-icon {\n                color: $background;\n                opacity: 1;\n            }\n\n            &.completed-icon {\n                color: $accent-200;\n                opacity: 1;\n            }\n        }\n\n        &__tab {\n            position: relative;\n            border: 1px solid $background;\n            color: $background;\n            border-radius: 28px;\n            min-width: 65px;\n            height: 36px;\n\n            &--active {\n                color: $accent;\n                background-color: $background;\n            }\n\n            &--completed {\n                border: 1px solid $accent-200;\n            }\n        }\n    }\n\n    .below-tabs {\n        margin-bottom: 20px;\n    }\n}\n",
                    "styleUrl": "./pill-tabs.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "AfterContentInit"
            ],
            "templateData": "<div class=\"tabs\">\n  <div *ngFor=\"let tab of tabs\" fxLayout=\"column\" fxLayoutAlign=\"start center\" fxLayoutGap=\"13px\">\n    <div\n      (click)=\"selectTab(tab)\"\n      class=\"tabs__tab mat-button\"\n      [class.tabs__tab--active]=\"tab.active\"\n      [class.tabs__tab--completed]=\"!tab.active && tab.completed\"\n    >\n      <span>{{ tab.title }}</span>\n    </div>\n    <mat-icon\n      *ngIf=\"tab.icon\"\n      [class.active-icon]=\"tab.active\"\n      [class.completed-icon]=\"tab.completed\"\n      >{{ tab.completed ? 'check_circle' : tab.icon }}</mat-icon\n    >\n  </div>\n</div>\n<div class=\"below-tabs\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n  <ng-container tpTarget=\"belowPillTabs\"></ng-container>\n</div>\n<ng-content></ng-content>\n"
        },
        {
            "name": "PlanCardComponent",
            "id": "component-PlanCardComponent-6af80b670eb87f82cc3e231b34d74b58",
            "file": "src/app/authentication/components/plan-card/plan-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-plan-card",
            "styleUrls": [
                "./plan-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./plan-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "plan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "Product"
                }
            ],
            "outputsClass": [
                {
                    "name": "planSelectedEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                },
                {
                    "name": "priceSelectedEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "hover",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "selectedPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductPrice",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChangeSelectedPrice",
                    "args": [
                        {
                            "name": "selectedPrice",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selectedPrice",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPlanSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Input, Output } from '@angular/core';\nimport { SimpleChanges } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { Component, OnChanges } from '@angular/core';\nimport { Product, ProductPrice } from 'app/@core/models/product.model';\n\n@Component({\n    selector: 'app-plan-card',\n    templateUrl: './plan-card.component.html',\n    styleUrls: ['./plan-card.component.scss'],\n})\nexport class PlanCardComponent implements OnChanges {\n    @Input() plan: Product;\n\n    @Output() planSelectedEvent = new EventEmitter();\n    @Output() priceSelectedEvent = new EventEmitter();\n\n    selectedPrice: ProductPrice;\n\n    hover = false;\n\n    constructor() {}\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.plan) {\n            const { currentValue: plan } = changes.plan;\n            if (plan) {\n                this.onChangeSelectedPrice(plan.prices[0]);\n            }\n        }\n    }\n\n    onChangeSelectedPrice(selectedPrice) {\n        this.selectedPrice = selectedPrice;\n        this.priceSelectedEvent.emit(selectedPrice);\n    }\n\n    onPlanSelected() {\n        this.planSelectedEvent.emit();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n@mixin plan-card-theme($theme) {\n    $primary-50: mat.get-color-from-palette(map-get($theme, primary), 50);\n    $primary-500: mat.get-color-from-palette(map-get($theme, primary), 500);\n    $accent: mat.get-color-from-palette(map-get($theme, accent), 300);\n\n    .plan-card {\n        border-radius: 14px;\n        cursor: pointer;\n\n        &--selected {\n            background-color: $primary-50;\n            border: 1px solid $primary-500;\n        }\n\n        &__padding {\n            padding: 0 16px;\n        }\n    }\n}\n\n.mt24 {\n    margin-top: 24px;\n}\n",
                    "styleUrl": "./plan-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<mat-card\n  class=\"mat-elevation-z4 plan-card\"\n  [class.plan-card--selected]=\"plan.selected\"\n  (mouseenter)=\"hover = true\"\n  (mouseleave)=\"hover = false\"\n  [class.mat-elevation-z12]=\"hover\"\n  fxLayout=\"column\"\n  fxLayoutAlign=\"start stretch\"\n  fxLayoutGap=\"24px\"\n  (click)=\"onPlanSelected()\"\n>\n  <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" class=\"plan-card__padding\">\n    <span class=\"mat-title\">{{ plan.name }}</span>\n    <mat-icon *ngIf=\"plan.selected\" color=\"primary\">check_circle</mat-icon>\n  </div>\n\n  <div class=\"plan-card__padding\">\n    <mat-radio-group\n      aria-label=\"Select an price option\"\n      fxLayout=\"row\"\n      fxLayoutAlign=\"space-between center\"\n      [ngModel]=\"selectedPrice\"\n      (ngModelChange)=\"onChangeSelectedPrice($event)\"\n    >\n      <div *ngFor=\"let price of plan.prices; let i = index\">\n        <mat-radio-button [value]=\"price\" (click)=\"$event.stopPropagation()\">\n          <span\n            class=\"mat-button-text text-black-opacity-06\"\n            [class.text-accent]=\"selectedPrice?.slug === price?.slug\"\n          >\n            {{ price.pricePeriod | intervalLabel }}\n          </span>\n        </mat-radio-button>\n      </div>\n    </mat-radio-group>\n  </div>\n\n  <div *ngIf=\"selectedPrice as price\">\n    <div class=\"plan-card__padding\" fxLayout fxLayoutAlign=\"center center\">\n      <span class=\"mat-headline\">{{ price.name }}</span>\n    </div>\n    <div class=\"mat-body-2 text-black-opacity-06 mt24\">{{ price.description }}</div>\n  </div>\n</mat-card>\n"
        },
        {
            "name": "PlansListComponent",
            "id": "component-PlansListComponent-513a0de96f481279890bfb9b1010288b",
            "file": "src/app/authentication/components/plans-list/plans-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-plans-list",
            "styleUrls": [
                "./plans-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./plans-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "hasCancelledSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean"
                },
                {
                    "name": "plans",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "Product[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "payEvent",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "selectedPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductPrice",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "termsAndConditions",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPlanSelected",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPriceSelected",
                    "args": [
                        {
                            "name": "selectedPrice",
                            "type": "ProductPrice",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selectedPrice",
                            "type": "ProductPrice",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { EventEmitter, Input, Output } from '@angular/core';\nimport { SimpleChanges } from '@angular/core';\nimport { Component, OnChanges } from '@angular/core';\nimport { Product, ProductPrice } from 'app/@core/models/product.model';\n\n@Component({\n    selector: 'app-plans-list',\n    templateUrl: './plans-list.component.html',\n    styleUrls: ['./plans-list.component.scss'],\n})\nexport class PlansListComponent implements OnChanges {\n    termsAndConditions = false;\n\n    @Input() plans: Product[];\n\n    @Input() hasCancelledSubscription: boolean;\n\n    @Output() payEvent = new EventEmitter<any>();\n\n    selectedPrice: ProductPrice;\n\n    constructor() {}\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.plans) {\n            const { currentValue: plans } = changes.plans;\n\n            if (plans) {\n                this.plans = plans.map((plan, index) => ({ ...plan, selected: index === 0 ? true : false }));\n            }\n        }\n    }\n\n    onPlanSelected(index: number) {\n        this.plans = this.plans.map((plan, i) => {\n            if (i === index) {\n                return { ...plan, selected: true };\n            }\n\n            return { ...plan, selected: false };\n        });\n    }\n\n    onPriceSelected(selectedPrice: ProductPrice) {\n        this.selectedPrice = selectedPrice;\n    }\n\n    onPay() {\n        const selectedPlan = this.plans.find(({ selected }) => selected);\n        this.payEvent.emit({ selectedPlan, selectedPrice: this.selectedPrice });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./plans-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div fxLayout=\"column\" fxLayoutAlign=\"start stretch\" fxLayoutGap=\"24px\">\n  <p class=\"mat-title mb24\" fxFlexAlign=\"center\">\n    {{ hasCancelledSubscription ? 'Having second thoughts?' : 'Choose your plan' }}\n  </p>\n\n  <a\n    *ngIf=\"hasCancelledSubscription\"\n    mat-stroked-button\n    fxFlexAlign=\"center\"\n    color=\"primary\"\n    href=\"https://www.eslo.com.br\"\n    target=\"_blank\"\n  >\n    see all eslo has to offer\n  </a>\n\n  <div *ngFor=\"let plan of plans; let i = index\">\n    <app-plan-card\n      [plan]=\"plan\"\n      (planSelectedEvent)=\"onPlanSelected(i)\"\n      (priceSelectedEvent)=\"onPriceSelected($event)\"\n    ></app-plan-card>\n  </div>\n  <a\n    mat-stroked-button\n    fxFlexAlign=\"center\"\n    color=\"primary\"\n    href=\"https://www.eslo.com.br/teachers\"\n    target=\"_blank\"\n  >\n    see all features\n  </a>\n\n  <mat-checkbox\n    class=\"accent-200 mat-button-text mat-button-text--size-12\"\n    [(ngModel)]=\"termsAndConditions\"\n    fxFlexAlign=\"center\"\n  >\n    I have read and accepted\n    <a class=\"link\" href=\"http://eslo.com.br/termos-e-condicoes/\" target=\"_blank\">\n      terms and conditions\n    </a>\n  </mat-checkbox>\n\n  <br />\n\n  <button\n    mat-flat-button\n    color=\"primary\"\n    type=\"button\"\n    fxFlexAlign=\"center\"\n    (click)=\"onPay()\"\n    [disabled]=\"!termsAndConditions || !selectedPrice\"\n  >\n    proceed to payment\n  </button>\n</div>\n"
        },
        {
            "name": "ProgressBarComponent",
            "id": "component-ProgressBarComponent-95e0c9707379050e8a33c31dfb1e5402",
            "file": "src/app/@core/components/progress-bar/progress-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-progress-bar",
            "styleUrls": [
                "./progress-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./progress-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_unsubscribeAll",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "bufferValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"determinate\" | \"indeterminate\" | \"buffer\" | \"query\"",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOn destroy\n",
                    "description": "<p>On destroy</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOn init\n",
                    "description": "<p>On init</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { ProgressBarService } from './progress-bar.service';\n\n@Component({\n    selector: 'app-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    styleUrls: ['./progress-bar.component.scss'],\n})\nexport class ProgressBarComponent implements OnInit, OnDestroy {\n    bufferValue: number;\n    mode: 'determinate' | 'indeterminate' | 'buffer' | 'query';\n    value: number;\n    visible: boolean;\n\n    // Private\n    private _unsubscribeAll: Subject<any>;\n\n    /**\n     * Constructor\n     *\n     * @param _fuseProgressBarService\n     */\n    constructor(private progressBarService: ProgressBarService, private cdr: ChangeDetectorRef) {\n        // Set the defaults\n\n        // Set the private defaults\n        this._unsubscribeAll = new Subject();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void {\n        // Subscribe to the progress bar service properties\n\n        // Buffer value\n        this.progressBarService.bufferValue.pipe(takeUntil(this._unsubscribeAll)).subscribe((bufferValue) => {\n            this.bufferValue = bufferValue;\n        });\n\n        // Mode\n        this.progressBarService.mode.pipe(takeUntil(this._unsubscribeAll)).subscribe((mode) => {\n            this.mode = mode;\n        });\n\n        // Value\n        this.progressBarService.value.pipe(takeUntil(this._unsubscribeAll)).subscribe((value) => {\n            this.value = value;\n        });\n\n        // Visible\n        this.progressBarService.visible.pipe(takeUntil(this._unsubscribeAll)).subscribe((visible) => {\n            this.visible = visible;\n            this.cdr.detectChanges();\n        });\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next();\n        this._unsubscribeAll.complete();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/flex-layout/mq' as mq;\n\n:host {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n}\n",
                    "styleUrl": "./progress-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "progressBarService",
                        "type": "ProgressBarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "rawdescription": "\n\nConstructor\n\n",
                "jsdoctags": [
                    {
                        "name": "progressBarService",
                        "type": "ProgressBarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-progress-bar\n    *ngIf=\"visible\"\n    color=\"primary\"\n    [bufferValue]=\"bufferValue\"\n    [mode]=\"mode\"\n    [value]=\"value\"\n></mat-progress-bar>\n"
        },
        {
            "name": "RegisterFormComponent",
            "id": "component-RegisterFormComponent-6519c33acbd010e7926a38feeb32b7be",
            "file": "src/app/authentication/components/register-form/register-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register-form",
            "styleUrls": [
                "./register-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "defaultEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string"
                },
                {
                    "name": "registerFailed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean"
                },
                {
                    "name": "studentInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "CreatePasswordStudentInfo"
                }
            ],
            "outputsClass": [
                {
                    "name": "registerEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_unsubscribeAll",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "addressInputComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AddressInputComponent",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "AddressInputComponent"
                        }
                    ]
                },
                {
                    "name": "registerForm",
                    "defaultValue": "this._formBuilder.group({\n        // earlyAccessCode: ['', Validators.compose([Validators.required])],\n        firstName: ['', Validators.compose([Validators.required, Validators.pattern('^[A-Za-zñÑáéíóúÁÉÍÓÚ ]+$')])],\n        lastName: ['', Validators.compose([Validators.required, Validators.pattern('^[A-Za-zñÑáéíóúÁÉÍÓÚ ]+$')])],\n        email: ['', [Validators.required, Validators.email]],\n        cpf: ['', [Validators.required]],\n        // dateOfBirth: ['', Validators.required],\n        password: [\n            '',\n            Validators.compose([\n                Validators.required,\n                Validators.minLength(8),\n                Validators.maxLength(28),\n                Validators.pattern(/^(?=.*[A-Z])(?=.*[\\W])(?=.*[0-9])(?=.*[a-z]).{8,64}$/),\n            ]),\n        ],\n        passwordConfirm: ['', [Validators.required, confirmPasswordValidator]],\n        terms: ['', Validators.requiredTrue],\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "showPassword",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "userAddress",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserAddress",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOn destroy\n",
                    "description": "<p>On destroy</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOn init\n",
                    "description": "<p>On init</p>\n"
                },
                {
                    "name": "onToggleShowPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showDialogTermsAndConditions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n    ViewChild,\n} from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { CreatePasswordStudentInfo } from 'app/@core/models/invitation.model';\nimport { UserAddress } from 'app/@core/models/user-profile.model';\nimport { AddressInputComponent } from 'app/@shared/components/forms/address-input/address-input.component';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-register-form',\n    templateUrl: './register-form.component.html',\n    styleUrls: ['./register-form.component.scss'],\n})\nexport class RegisterFormComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() defaultEmail: string;\n    @Input() registerFailed: boolean;\n\n    @Input() studentInfo: CreatePasswordStudentInfo;\n\n    @Output() registerEvent = new EventEmitter();\n\n    @ViewChild(AddressInputComponent)\n    addressInputComponent: AddressInputComponent;\n\n    showPassword = false;\n\n    userAddress: UserAddress = {};\n\n    registerForm: FormGroup = this._formBuilder.group({\n        // earlyAccessCode: ['', Validators.compose([Validators.required])],\n        firstName: ['', Validators.compose([Validators.required, Validators.pattern('^[A-Za-zñÑáéíóúÁÉÍÓÚ ]+$')])],\n        lastName: ['', Validators.compose([Validators.required, Validators.pattern('^[A-Za-zñÑáéíóúÁÉÍÓÚ ]+$')])],\n        email: ['', [Validators.required, Validators.email]],\n        cpf: ['', [Validators.required]],\n        // dateOfBirth: ['', Validators.required],\n        password: [\n            '',\n            Validators.compose([\n                Validators.required,\n                Validators.minLength(8),\n                Validators.maxLength(28),\n                Validators.pattern(/^(?=.*[A-Z])(?=.*[\\W])(?=.*[0-9])(?=.*[a-z]).{8,64}$/),\n            ]),\n        ],\n        passwordConfirm: ['', [Validators.required, confirmPasswordValidator]],\n        terms: ['', Validators.requiredTrue],\n    });\n\n    // Private\n    private _unsubscribeAll: Subject<any>;\n\n    constructor(private _formBuilder: FormBuilder) {\n        // Configure the layout\n\n        // Set the private defaults\n        this._unsubscribeAll = new Subject();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void {\n        // Update the validity of the 'passwordConfirm' field\n        // when the 'password' field changes\n        this.registerForm\n            .get('password')\n            .valueChanges.pipe(takeUntil(this._unsubscribeAll))\n            .subscribe(() => {\n                this.registerForm.get('passwordConfirm').updateValueAndValidity();\n            });\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes?.defaultEmail?.currentValue) {\n            const email = decodeURI(changes?.defaultEmail?.currentValue);\n            this.registerForm.get('email').patchValue(email);\n        }\n\n        if (changes?.studentInfo?.currentValue) {\n            const { email, firstName, surname: lastName } = this.studentInfo;\n\n            this.registerForm.patchValue({\n                email,\n                firstName,\n                lastName,\n            });\n        }\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next();\n        this._unsubscribeAll.complete();\n    }\n\n    register(): void {\n        const { terms, passwordConfirm, ...rest } = this.registerForm.getRawValue();\n\n        const registerValues = {\n            ...rest,\n            ...this.addressInputComponent.formAddress.getRawValue(),\n            countryISO: 'BR',\n            addressType: 'BILLING',\n            category: 'PRIMARY',\n        };\n\n        this.registerEvent.emit(registerValues);\n    }\n\n    showDialogTermsAndConditions(): void {\n        window.open('http://eslo.com.br/termos-e-condicoes/', '_blank');\n    }\n\n    onToggleShowPassword() {\n        this.showPassword = !this.showPassword;\n    }\n}\n\n/**\n * Confirm password validator\n *\n * @param control\n * @returns\n */\nexport const confirmPasswordValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    if (!control.parent || !control) {\n        return null;\n    }\n\n    const password = control.parent.get('password');\n    const passwordConfirm = control.parent.get('passwordConfirm');\n\n    if (!password || !passwordConfirm) {\n        return null;\n    }\n\n    if (passwordConfirm.value === '') {\n        return null;\n    }\n\n    if (password.value === passwordConfirm.value) {\n        return null;\n    }\n\n    return { passwordsNotMatching: true };\n};\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".terms {\n  margin-bottom: 20px !important;\n}",
                    "styleUrl": "./register-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 60,
                "jsdoctags": [
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges",
                "OnDestroy"
            ],
            "templateData": "<div fxLayout=\"column\" fxLayoutAlign=\"start stretch\" fxLayoutGap=\"16px\">\n  <p class=\"mat-title text-center\">Create your account</p>\n  <form\n    name=\"registerForm\"\n    [formGroup]=\"registerForm\"\n    novalidate\n    fxLayout=\"column\"\n    fxLayoutAlign=\"start stretch\"\n    fxLayoutGap=\"20px\"\n    (ngSubmit)=\"register()\"\n  >\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Email</mat-label>\n      <input\n        matInput\n        name=\"email\"\n        formControlName=\"email\"\n        type=\"email\"\n        [disableControl]=\"studentInfo\"\n      />\n\n      <mat-error *ngIf=\"registerForm.get('email').hasError('required')\">\n        Email is required\n      </mat-error>\n      <mat-error *ngIf=\"registerForm.get('email').hasError('email')\">\n        Please enter a valid email address\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>First Name</mat-label>\n      <input matInput name=\"firstName\" formControlName=\"firstName\" type=\"text\" />\n\n      <mat-error *ngIf=\"registerForm.get('firstName').hasError('required')\">\n        First Name is required\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Last Name</mat-label>\n      <input matInput name=\"lastName\" formControlName=\"lastName\" type=\"text\" autocomplete=\"off\" />\n\n      <mat-error *ngIf=\"registerForm.get('lastName').hasError('required')\">\n        Last Name is required\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Password</mat-label>\n      <input matInput [type]=\"showPassword ? 'text' : 'password'\" formControlName=\"password\" />\n\n      <mat-icon\n        class=\"cursor-pointer text-black-opacity-06\"\n        matSuffix\n        (click)=\"onToggleShowPassword()\"\n        >{{ showPassword ? 'visibility_off' : 'visibility' }}</mat-icon\n      >\n\n      <mat-error *ngIf=\"registerForm.get('password').hasError('required')\">\n        Password is required\n      </mat-error>\n      <mat-error *ngIf=\"!registerForm.get('password').hasError('required')\">\n        Passwords must be at 8-28 characters and contain at least 1 uppercase, 1 lowercase, 1 number\n        and 1 special character\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Confirm Password</mat-label>\n      <input matInput type=\"password\" formControlName=\"passwordConfirm\" />\n\n      <mat-error *ngIf=\"registerForm.get('passwordConfirm').hasError('required')\">\n        Password confirmation is required\n      </mat-error>\n      <mat-error\n        *ngIf=\"\n          !registerForm.get('passwordConfirm').hasError('required') &&\n          registerForm.get('passwordConfirm').hasError('passwordsNotMatching')\n        \"\n      >\n        Passwords must match\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>CPF</mat-label>\n      <input\n        matInput\n        type=\"text\"\n        mask=\"CPF_CNPJ\"\n        [showMaskTyped]=\"true\"\n        [validation]=\"true\"\n        placeHolderCharacter=\" \"\n        formControlName=\"cpf\"\n      />\n\n      <mat-error *ngIf=\"registerForm.get('passwordConfirm').hasError('required')\">\n        CPF is required\n      </mat-error>\n    </mat-form-field>\n\n    <app-address-input [address]=\"userAddress\" [column]=\"true\"></app-address-input>\n\n    <div class=\"terms mat-body-1\" fxLayout=\"row\" fxLayoutAlign=\"center baseline\" fxLayoutGap=\"5px\">\n      <mat-checkbox formControlName=\"terms\" name=\"terms\" aria-label=\"Accept\" required>\n        <span>Accept</span>\n      </mat-checkbox>\n      <a (click)=\"showDialogTermsAndConditions()\">Terms and Conditions</a>\n    </div>\n\n    <button\n      fxFlexAlign=\"center\"\n      mat-flat-button\n      color=\"primary\"\n      type=\"submit\"\n      aria-label=\"Register with E-mail\"\n      [disabled]=\"registerForm.invalid || !!addressInputComponent?.formAddress?.invalid\"\n    >\n      continue\n    </button>\n  </form>\n\n  <mat-error class=\"text-center mat-body-1\" *ngIf=\"registerFailed\">\n    Failed to register user\n  </mat-error>\n\n  <a mat-button fxFlexAlign=\"center\" color=\"primary\" [routerLink]=\"'/auth/login'\">\n    Go back to login\n  </a>\n</div>\n"
        },
        {
            "name": "RegisterPageComponent",
            "id": "component-RegisterPageComponent-951eaf13f85bcd16d9cd343b6498a3f9",
            "file": "src/app/authentication/pages/register-page/register-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register-page",
            "styleUrls": [
                "./register-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "registerFailed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "studentInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CreatePasswordStudentInfo",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onRegister",
                    "args": [
                        {
                            "name": "registerFormValue",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "registerFormValue",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { CreatePasswordStudentInfo } from 'app/@core/models/invitation.model';\nimport { UserService } from 'app/@core/services/user.service';\nimport { WelcomeService } from 'app/main/invitation/welcome/welcome.service';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-register-page',\n    templateUrl: './register-page.component.html',\n    styleUrls: ['./register-page.component.scss'],\n})\nexport class RegisterPageComponent implements OnInit {\n    registerFailed = false;\n\n    email: string;\n\n    studentInfo: CreatePasswordStudentInfo;\n\n    constructor(\n        private userService: UserService,\n        private matSnackBar: MatSnackBar,\n        private router: Router,\n        private route: ActivatedRoute,\n        private welcomeService: WelcomeService,\n    ) {}\n\n    ngOnInit() {\n        this.email = this.route.snapshot.queryParams?.email;\n        const invitationToken = this.route.snapshot.queryParams?.invitationToken;\n        if (invitationToken) {\n            this.welcomeService.invitationRequest('confirm', invitationToken).subscribe({\n                next: (res) => {\n                    if (res.status === 200) {\n                        this.studentInfo = res.body;\n                    }\n                },\n                error: (err) => {\n                    this.matSnackBar.open('Invitation token is not valid', 'Ok', {\n                        duration: 0,\n                        panelClass: ['snackbar-panel', 'snackbar-panel--one-line'],\n                    });\n                    this.router.navigate(['auth', 'login']);\n                },\n            });\n        }\n    }\n\n    onRegister(registerFormValue) {\n        let registerBody = registerFormValue;\n\n        if (this.studentInfo) {\n            registerBody = { ...registerBody, invitationToken: this.studentInfo.invitationToken };\n        }\n\n        this.userService\n            .register(registerBody)\n            .pipe(\n                switchMap((result: any) => {\n                    return this.userService.loginSuccess(result);\n                }),\n            )\n            .subscribe({\n                next: () => {\n                    if (this.studentInfo) {\n                        this.router.navigate(['/auth/select-plan'], { queryParams: { student: true } });\n                        return;\n                    }\n                    this.router.navigate(['/auth/select-plan'], { queryParams: { teacher: true } });\n                },\n                error: (err) => {\n                    if (err?.length > 0) {\n                        this.matSnackBar.open(err.join(' - '), 'Ok', {\n                            duration: 0,\n                            panelClass: ['snackbar-panel', 'snackbar-panel--one-line'],\n                        });\n                    }\n                    this.registerFailed = true;\n                },\n            });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./register-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "matSnackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "welcomeService",
                        "type": "WelcomeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matSnackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "welcomeService",
                        "type": "WelcomeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-auth-layout>\n  <app-register-form\n    [defaultEmail]=\"email\"\n    [studentInfo]=\"studentInfo\"\n    (registerEvent)=\"onRegister($event)\"\n    [registerFailed]=\"registerFailed\"\n  ></app-register-form>\n</app-auth-layout>\n"
        },
        {
            "name": "ResetPasswordFormComponent",
            "id": "component-ResetPasswordFormComponent-dc1dc2577bc88a1b255431bb957c8689",
            "file": "src/app/authentication/components/reset-password-form/reset-password-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reset-password-form",
            "styleUrls": [
                "./reset-password-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reset-password-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "resetPasswordEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_unsubscribeAll",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "resetPasswordForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOn destroy\n",
                    "description": "<p>On destroy</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOn init\n",
                    "description": "<p>On init</p>\n"
                },
                {
                    "name": "onResetPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-reset-password-form',\n    templateUrl: './reset-password-form.component.html',\n    styleUrls: ['./reset-password-form.component.scss'],\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n    resetPasswordForm: FormGroup;\n\n    @Output() resetPasswordEvent = new EventEmitter();\n\n    // Private\n    private _unsubscribeAll: Subject<any>;\n\n    constructor(private _formBuilder: FormBuilder) {\n        // Set the private defaults\n        this._unsubscribeAll = new Subject();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void {\n        this.resetPasswordForm = this._formBuilder.group({\n            password: ['', Validators.compose([Validators.required, Validators.minLength(8)])],\n            passwordConfirm: ['', [Validators.required, confirmPasswordValidator]],\n        });\n\n        // Update the validity of the 'passwordConfirm' field\n        // when the 'password' field changes\n        this.resetPasswordForm\n            .get('password')\n            .valueChanges.pipe(takeUntil(this._unsubscribeAll))\n            .subscribe(() => {\n                this.resetPasswordForm.get('passwordConfirm').updateValueAndValidity();\n            });\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next();\n        this._unsubscribeAll.complete();\n    }\n\n    onResetPassword(): void {\n        const newPassword = this.passwordControl.value;\n        this.resetPasswordEvent.emit(newPassword);\n    }\n\n    get passwordControl(): AbstractControl {\n        return this.resetPasswordForm.get('password');\n    }\n}\n\n/**\n * Confirm password validator\n *\n * @param control\n * @returns\n */\nexport const confirmPasswordValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    if (!control.parent || !control) {\n        return null;\n    }\n\n    const password = control.parent.get('password');\n    const passwordConfirm = control.parent.get('passwordConfirm');\n\n    if (!password || !passwordConfirm) {\n        return null;\n    }\n\n    if (passwordConfirm.value === '') {\n        return null;\n    }\n\n    if (password.value === passwordConfirm.value) {\n        return null;\n    }\n\n    return { passwordsNotMatching: true };\n};\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./reset-password-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "passwordControl": {
                    "name": "passwordControl",
                    "getSignature": {
                        "name": "passwordControl",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 61
                    }
                }
            },
            "templateData": "<div fxLayout=\"column\" fxLayoutAlign=\"start stretch\" fxLayoutGap=\"16px\">\n  <p class=\"mat-title text-center\">Reset your password</p>\n  <form\n    name=\"resetPasswordForm\"\n    [formGroup]=\"resetPasswordForm\"\n    novalidate\n    fxLayout=\"column\"\n    fxLayoutAlign=\"start stretch\"\n    (ngSubmit)=\"onResetPassword()\"\n  >\n    <mat-form-field appearance=\"outline\">\n      <mat-label>New Password</mat-label>\n      <input matInput type=\"password\" formControlName=\"password\" />\n      <mat-error *ngIf=\"resetPasswordForm.get('password').hasError('required')\">\n        Password is required\n      </mat-error>\n      <mat-error *ngIf=\"!resetPasswordForm.get('password').hasError('required')\">\n        Password must have at least 8 characters\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Confirm Password</mat-label>\n      <input matInput type=\"password\" formControlName=\"passwordConfirm\" />\n      <mat-error *ngIf=\"resetPasswordForm.get('passwordConfirm').hasError('required')\">\n        Password confirmation is required\n      </mat-error>\n      <mat-error\n        *ngIf=\"\n          !resetPasswordForm.get('passwordConfirm').hasError('required') &&\n          resetPasswordForm.get('passwordConfirm').hasError('passwordsNotMatching')\n        \"\n      >\n        Passwords must match\n      </mat-error>\n    </mat-form-field>\n\n    <button\n      mat-flat-button\n      fxFlexAlign=\"center\"\n      color=\"primary\"\n      aria-label=\"RESET MY PASSWORD\"\n      type=\"submit\"\n      [disabled]=\"resetPasswordForm.invalid\"\n    >\n      RESET MY PASSWORD\n    </button>\n  </form>\n\n  <a mat-stroked-button color=\"primary\" fxFlexAlign=\"center\" [routerLink]=\"'/auth/login'\">\n    Go back to login\n  </a>\n</div>\n"
        },
        {
            "name": "ResetPasswordPageComponent",
            "id": "component-ResetPasswordPageComponent-47d9e375f7c261b004dd92316a3d3a34",
            "file": "src/app/authentication/pages/reset-password-page/reset-password-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reset-password-page",
            "styleUrls": [
                "./reset-password-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reset-password-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onResetPassword",
                    "args": [
                        {
                            "name": "newPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { UserService } from 'app/@core/services/user.service';\nimport { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n    selector: 'app-reset-password-page',\n    templateUrl: './reset-password-page.component.html',\n    styleUrls: ['./reset-password-page.component.scss'],\n})\nexport class ResetPasswordPageComponent {\n    constructor(\n        private userService: UserService,\n        private router: Router,\n        private route: ActivatedRoute,\n        private matSnackBar: MatSnackBar,\n    ) {}\n\n    onResetPassword(newPassword: string) {\n        const resetPasswordToken = this.route.snapshot.params.resetPasswordToken;\n\n        this.userService.resetPassword(resetPasswordToken, newPassword).subscribe({\n            next: (res) => {\n                // TODO: treat errors and toasts\n                if (res) {\n                    this.router.navigate(['/auth/login']);\n\n                    this.matSnackBar.open(res.message, 'Ok', {\n                        duration: 0,\n                        panelClass: ['snackbar-panel', 'snackbar-panel--one-line'],\n                    });\n                }\n            },\n            error: (err) => {\n                this.matSnackBar.open(err, 'Ok', {\n                    duration: 0,\n                    panelClass: ['snackbar-panel', 'snackbar-panel--one-line'],\n                });\n            },\n        });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./reset-password-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "matSnackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matSnackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-auth-layout>\n  <app-reset-password-form (resetPasswordEvent)=\"onResetPassword($event)\"></app-reset-password-form>\n</app-auth-layout>\n"
        },
        {
            "name": "ScheduleInputComponent",
            "id": "component-ScheduleInputComponent-339438b4636e8fb3f273e63e6f9889f4",
            "file": "src/app/@shared/components/calendar/schedule-input/schedule-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-schedule-input",
            "styleUrls": [
                "./schedule-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./schedule-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "endHourAvailability",
                    "defaultValue": "22",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "number"
                },
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "Event"
                },
                {
                    "name": "eventControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "AbstractControl"
                },
                {
                    "name": "onlyRead",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "startHourAvailability",
                    "defaultValue": "7",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "eventChange",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "DAYS",
                    "defaultValue": "DAYS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "eventEnd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "eventRecurrence",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RRule",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "eventStart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "log",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "selectedWeekdays",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "weekDays",
                    "defaultValue": "[RRule.MO, RRule.TU, RRule.WE, RRule.TH, RRule.FR, RRule.SA, RRule.SU]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Weekday[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onWeekdayChange",
                    "args": [
                        {
                            "name": "weekday",
                            "type": "Weekday",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "weekday",
                            "type": "Weekday",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTimeEnd",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTimeStart",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateRecurrence",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DatePipe } from '@angular/common';\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\nimport { Event } from 'app/@core/models/event.model';\nimport { RRule, Weekday } from 'rrule';\n\nconst DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n@Component({\n    selector: 'app-schedule-input',\n    templateUrl: './schedule-input.component.html',\n    styleUrls: ['./schedule-input.component.scss'],\n})\nexport class ScheduleInputComponent implements OnInit {\n    @Input() event: Event;\n    @Input() eventControl: AbstractControl;\n\n    @Input() startHourAvailability = 7; // 07:00\n    @Input() endHourAvailability = 22; // 22:00\n\n    @Input() onlyRead: boolean;\n\n    @Output() eventChange = new EventEmitter<Event>();\n\n    weekDays: Weekday[] = [RRule.MO, RRule.TU, RRule.WE, RRule.TH, RRule.FR, RRule.SA, RRule.SU];\n    selectedWeekdays: number[] = [];\n\n    eventRecurrence: RRule;\n    log;\n    eventStart: string;\n    eventEnd: string;\n\n    DAYS = DAYS;\n\n    constructor(private datePipe: DatePipe) {}\n\n    ngOnInit() {\n        if ('recurrence' in this.event) {\n            const { startDateTime, endDateTime, recurrence } = this.event;\n            const eventRecurrence = RRule.fromString(recurrence);\n            const hasDay = recurrence.includes('BYDAY=');\n            this.selectedWeekdays = hasDay ? eventRecurrence.options.byweekday : [];\n\n            this.eventStart = this.datePipe.transform(new Date(parseInt(startDateTime, 10)), 'HH:mm');\n            this.eventEnd = this.datePipe.transform(new Date(parseInt(endDateTime, 10)), 'HH:mm');\n\n            this.validateRecurrence();\n        }\n    }\n\n    onWeekdayChange(weekday: Weekday): void {\n        const index = this.selectedWeekdays.findIndex((wd) => wd === weekday.weekday);\n        if (index === -1) {\n            this.selectedWeekdays.push(weekday.weekday);\n        } else {\n            this.selectedWeekdays.splice(index, 1);\n        }\n\n        this.validateRecurrence();\n    }\n\n    updateTimeStart(value: string): void {\n        this.eventStart = value;\n\n        const startHour = +value.split(':')[0];\n        if (startHour < this.startHourAvailability) {\n            return;\n        }\n\n        this.validateRecurrence();\n    }\n\n    updateTimeEnd(value: string): void {\n        this.eventEnd = value;\n\n        const endHour = +value.split(':')[0];\n        if (endHour > this.endHourAvailability + 1) {\n            return;\n        }\n\n        this.validateRecurrence();\n    }\n\n    validateRecurrence(): void {\n        this.event = {\n            ...this.event,\n            recurrence: new RRule({\n                freq: RRule.WEEKLY,\n                interval: 1,\n                byweekday: this.selectedWeekdays,\n            }).toString(),\n            currentDays: this.selectedWeekdays,\n        };\n\n        if (!this.eventStart || !this.eventEnd) {\n            this.eventChange.emit(this.event);\n            return;\n        }\n\n        const eventStartSplit = this.eventStart?.split(':');\n        let eventStartDateTime = new Date(parseInt(this.event.startDateTime, 10));\n        if (!(eventStartDateTime instanceof Date) || isNaN(eventStartDateTime.getTime())) {\n            eventStartDateTime = new Date();\n        }\n        eventStartDateTime.setHours(parseInt(eventStartSplit[0], 10), parseInt(eventStartSplit[1], 10), 0, 0);\n        this.event.startDateTime = eventStartDateTime.getTime().toString();\n\n        const eventEndSplit = this.eventEnd?.split(':');\n        let eventEndDateTime = new Date(parseInt(this.event.endDateTime, 10));\n        if (!(eventEndDateTime instanceof Date) || isNaN(eventEndDateTime.getTime())) {\n            eventEndDateTime = new Date();\n        }\n        eventEndDateTime.setHours(parseInt(eventEndSplit[0], 10), parseInt(eventEndSplit[1], 10), 0, 0);\n        this.event.endDateTime = eventEndDateTime.getTime().toString();\n\n        this.eventChange.emit(this.event);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n@mixin schedule-input-theme($theme) {\n    $primary: mat.get-color-from-palette(map-get($theme, primary));\n    $accent: mat.get-color-from-palette(map-get($theme, accent));\n\n    $accent-100: mat.get-color-from-palette(map-get($theme, accent), 100);\n    $primary-50: mat.get-color-from-palette(map-get($theme, primary), 50);\n\n    .wrapper {\n        display: grid;\n        align-items: center;\n        justify-items: center;\n        grid-template-columns: 1fr 40px;\n        grid-template-rows: 1fr 1fr;\n        grid-template-areas: 'days  contentDays' 'times  contentTimes';\n        row-gap: 12px;\n        \n        &--only-read {\n            grid-template-columns: 1fr;\n            grid-template-rows: 1fr 1fr;\n            grid-template-areas: 'days' 'times';\n        }\n    }\n\n    .days-buttons {\n        grid-area: 'days';\n    }\n\n    .days-content {\n        grid-area: 'contentDays';\n    }\n\n    .day-button {\n        min-width: 40px;\n        width: 40px;\n        padding: 0;\n        background-color: $primary-50;\n        font-weight: 500;\n        align-self: center;\n        justify-self: center;\n\n        &--active {\n            background-color: $accent-100;\n            color: $accent;\n        }\n    }\n\n    .input-times {\n        max-width: 312px;\n        grid-area: 'times';\n    }\n\n    .times-content {\n        grid-area: 'contentTimes';\n    }\n\n    .time-field {\n        display: flex;\n        align-content: center;\n        justify-content: center;\n        border: 1px solid rgba(0, 0, 0, 0.12);\n        border-radius: 13px;\n        padding: 0 3px 0 10px;\n        position: relative;\n\n\n\n        &__input {\n            border: none;\n            outline: none;\n            color: rgba(0, 0, 0, 0.6);\n            font-size: 15px;\n            font-family: 'Comfortaa';\n\n            &::-webkit-calendar-picker-indicator {\n                display: none;\n            }\n        }\n\n        &__hint-text {\n            position: absolute;\n            bottom: -18px;\n            left: 10px;\n        }\n    }\n}\n",
                    "styleUrl": "./schedule-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"wrapper\" [class.wrapper--only-read]=\"onlyRead\">\n  <div class=\"days-buttons\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"5px\">\n    <button\n      mat-icon-button\n      *ngFor=\"let weekday of weekDays\"\n      (click)=\"onlyRead ? false : onWeekdayChange(weekday)\"\n      class=\"day-button\"\n      [class.day-button--active]=\"\n        selectedWeekdays.length && selectedWeekdays.includes(weekday.weekday)\n      \"\n      [matTooltip]=\"DAYS[weekday.getJsWeekday()]\"\n    >\n      {{ weekday.toString()[0] }}\n    </button>\n  </div>\n  <div *ngIf=\"!onlyRead\" class=\"days-content\">\n    <ng-content select=\"[daysButtons]\"></ng-content>\n  </div>\n\n  <div class=\"input-times\">\n    <div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"18px\">\n      <div class=\"time-field\">\n        <input\n          placeholder=\"Time\"\n          type=\"time\"\n          [ngModel]=\"eventStart\"\n          (ngModelChange)=\"updateTimeStart($event)\"\n          [step]=\"60 * 15\"\n          [min]=\"startHourAvailability + ':00'\"\n          [max]=\"endHourAvailability + 1 + ':00'\"\n          class=\"time-field__input\"\n          [disabled]=\"onlyRead\"\n        />\n        <small class=\"mat-caption time-field__hint-text\">Start time</small>\n        <button mat-icon-button color=\"primary\">\n          <mat-icon>schedule</mat-icon>\n        </button>\n      </div>\n\n      <div class=\"time-field\">\n        <input\n          placeholder=\"Time\"\n          type=\"time\"\n          [ngModel]=\"eventEnd\"\n          (ngModelChange)=\"updateTimeEnd($event)\"\n          [step]=\"60 * 15\"\n          [min]=\"startHourAvailability + ':00'\"\n          [max]=\"endHourAvailability + 1 + ':00'\"\n          class=\"time-field__input\"\n          [disabled]=\"onlyRead\"\n        />\n        <small class=\"mat-caption time-field__hint-text\">End time</small>\n        <button mat-icon-button color=\"primary\">\n          <mat-icon>schedule</mat-icon>\n        </button>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"!onlyRead\" class=\"times-content\">\n    <ng-content select=\"[timesButtons]\"></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "ScheduleInputDialogComponent",
            "id": "component-ScheduleInputDialogComponent-7368a9a8ebb690318ecde590eec649e1",
            "file": "src/app/classroom/components/schedule-input-dialog/schedule-input-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-schedule-input-dialog",
            "styleUrls": [
                "./schedule-input-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./schedule-input-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { StudyGroup } from 'app/@core/models/enrollment.model';\n\n@Component({\n    selector: 'app-schedule-input-dialog',\n    templateUrl: './schedule-input-dialog.component.html',\n    styleUrls: ['./schedule-input-dialog.component.scss'],\n})\nexport class ScheduleInputDialogComponent {\n    constructor(@Inject(MAT_DIALOG_DATA) private data: { group: StudyGroup }) {}\n\n    get group() {\n        return this.data?.group;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./schedule-input-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "group": {
                    "name": "group",
                    "getSignature": {
                        "name": "group",
                        "type": "",
                        "returnType": "",
                        "line": 13
                    }
                }
            },
            "templateData": "<button mat-mini-fab color=\"primary\" class=\"schedule-input-dialog__close-button\" mat-dialog-close>\n  <mat-icon>close</mat-icon>\n</button>\n<div fxLayout=\"column\" fxLayoutAlign=\"center center\" fxLayoutGap=\"12px\">\n  <p class=\"mat-subheading-1\">{{ group.name }}</p>\n\n  <br />\n  <div *ngFor=\"let event of group.events\">\n    <app-schedule-input [event]=\"event\" [onlyRead]=\"true\"></app-schedule-input>\n  </div>\n</div>\n"
        },
        {
            "name": "ScriptStandAlonePageComponent",
            "id": "component-ScriptStandAlonePageComponent-243d961fa45fcae734b5498a8cb51f53",
            "file": "src/app/script-stand-alone/pages/script-stand-alone-page/script-stand-alone-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-script-stand-alone-page",
            "styleUrls": [
                "./script-stand-alone-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./script-stand-alone-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "isFullscreen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "lesson$",
                    "defaultValue": "this.lmsService.getLesson(this.route.snapshot.params.lessonId)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "stepper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CdkStepper",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'stepper'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkFullscreen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "listenScroll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFullscreen",
                    "args": [
                        {
                            "name": "imgElement",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "imgElement",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CdkStepper } from '@angular/cdk/stepper';\nimport { DOCUMENT } from '@angular/common';\nimport { Component, Inject, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { MediaObserver } from '@angular/flex-layout';\nimport { ActivatedRoute } from '@angular/router';\nimport { LMSService } from 'app/@core/services/lms.service';\nimport { LayoutService } from 'app/layout/services/layout.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil, debounceTime, withLatestFrom } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-script-stand-alone-page',\n    templateUrl: './script-stand-alone-page.component.html',\n    styleUrls: ['./script-stand-alone-page.component.scss'],\n})\nexport class ScriptStandAlonePageComponent implements OnInit, OnDestroy {\n    lesson$ = this.lmsService.getLesson(this.route.snapshot.params.lessonId);\n\n    isFullscreen = false;\n\n    @ViewChild('stepper') stepper: CdkStepper;\n\n    private destroy$ = new Subject<void>();\n\n    constructor(\n        private lmsService: LMSService,\n        private route: ActivatedRoute,\n        @Inject(DOCUMENT) private document: Document,\n        private mediaObserver: MediaObserver,\n        private layoutService: LayoutService,\n    ) {}\n\n    ngOnInit() {\n        this.listenScroll();\n    }\n\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    listenScroll() {\n        this.layoutService.scroll$\n            .pipe(takeUntil(this.destroy$), debounceTime(350), withLatestFrom(this.lesson$))\n            .subscribe({\n                next: ([evt, lesson]) => {\n                    const isLastPage = this.stepper.selectedIndex === lesson.lessonMaterial.lectureScript.length - 1;\n\n                    if (evt.target.scrollTop === evt.target.scrollHeight - evt.target.offsetHeight) {\n                        this.stepper.next();\n\n                        if (!isLastPage) {\n                            evt.target.scrollTo(0, 50);\n                        }\n                    }\n\n                    if (evt.target.scrollTop <= 0) {\n                        const hasMorePages = this.stepper.selectedIndex !== 0;\n                        if (hasMorePages) {\n                            this.stepper.previous();\n                        }\n                    }\n                },\n            });\n    }\n\n    onFullscreen(imgElement: any) {\n        const elem = imgElement || this.document.documentElement;\n\n        if (!this.document.fullscreenElement) {\n            if (elem.requestFullscreen) {\n                elem.requestFullscreen();\n                this.isFullscreen = true;\n            }\n        } else {\n            if (this.document.exitFullscreen) {\n                this.document.exitFullscreen();\n                this.isFullscreen = false;\n            }\n        }\n    }\n\n    checkFullscreen() {\n        if (this.isFullscreen) {\n            this.document.exitFullscreen();\n            this.isFullscreen = false;\n        }\n    }\n\n    get isMobile() {\n        return this.mediaObserver.isActive('xs');\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/flex-layout/mq' as mq;\n\n.script-container {\n    padding: 0;\n    position: relative;\n\n    &--has-audio {\n        padding-bottom: 30px;\n    }\n\n    @include mq.layout-bp(gt-xs) {\n        padding: 24px 18px 20vh 18px;\n\n        &--has-audio {\n            padding-bottom: 200px;\n        }\n    }\n\n\n    &__fullscreen-button {\n        position: absolute;\n        bottom: 25px;\n        right: 10px;\n\n        &--has-audio {\n            bottom: 50px;\n        }\n    }\n}\n\n.script-image {\n    margin-top: 24px;\n    max-width: 100%;\n}\n",
                    "styleUrl": "./script-stand-alone-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "lmsService",
                        "type": "LMSService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "layoutService",
                        "type": "LayoutService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "lmsService",
                        "type": "LMSService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "layoutService",
                        "type": "LayoutService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "isMobile": {
                    "name": "isMobile",
                    "getSignature": {
                        "name": "isMobile",
                        "type": "",
                        "returnType": "",
                        "line": 90
                    }
                }
            },
            "templateData": "<app-layout [showNavigationBar]=\"false\">\n  <ng-container *ngIf=\"lesson$ | async as lesson\">\n    <ng-template tpAttach=\"topBarStart\">\n      <app-eslo-letter-logo></app-eslo-letter-logo>\n      <app-top-bar-title [text]=\"lesson.title\"></app-top-bar-title>\n    </ng-template>\n\n    <div class=\"script-container\">\n      <app-custom-stepper #stepper>\n        <cdk-step *ngFor=\"let scriptPage of lesson.lessonMaterial.lectureScript; let i = index\">\n          <img\n            #imgElement\n            class=\"script-image\"\n            [src]=\"scriptPage.media.rootUri\"\n            [alt]=\"scriptPage.media.id\"\n            (click)=\"checkFullscreen()\"\n          />\n          <button\n            color=\"primary\"\n            class=\"script-container__fullscreen-button\"\n            [class.script-container__fullscreen-button--has-audio]=\"\n              lesson.lessonMaterial.audio.length > 0\n            \"\n            *ngIf=\"isMobile\"\n            mat-icon-button\n            (click)=\"onFullscreen(imgElement)\"\n          >\n            <mat-icon>fullscreen</mat-icon>\n          </button>\n        </cdk-step>\n      </app-custom-stepper>\n    </div>\n  </ng-container>\n</app-layout>\n"
        },
        {
            "name": "SelectGroupEnrollmentComponent",
            "id": "component-SelectGroupEnrollmentComponent-d669ab3724a722ff40fc4e81cc25f4cb",
            "file": "src/app/classroom/components/select-group-enrollment/select-group-enrollment.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-select-group-enrollment",
            "styleUrls": [
                "./select-group-enrollment.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select-group-enrollment.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "groups",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "StudyGroup[]"
                },
                {
                    "name": "levelControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "FormControl"
                },
                {
                    "name": "programControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "FormControl"
                },
                {
                    "name": "selectedGroupControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_selectedGroupControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "filteredGroups$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<StudyGroup[]>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "groupSearchInput",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "groupSearchInputFocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "groupSearchTerm$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onShowSchedule",
                    "args": [
                        {
                            "name": "group",
                            "type": "StudyGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "StudyGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { OnInit } from '@angular/core';\nimport { Component, Input } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { StudyGroup } from 'app/@core/models/enrollment.model';\nimport { Observable } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, filter, map, startWith } from 'rxjs/operators';\nimport { ScheduleInputDialogComponent } from '../schedule-input-dialog/schedule-input-dialog.component';\n\n@Component({\n    selector: 'app-select-group-enrollment',\n    templateUrl: './select-group-enrollment.component.html',\n    styleUrls: ['./select-group-enrollment.component.scss'],\n})\nexport class SelectGroupEnrollmentComponent implements OnInit {\n    @Input() groups: StudyGroup[];\n\n    _selectedGroupControl: FormControl;\n    get selectedGroupControl() {\n        return this._selectedGroupControl;\n    }\n    @Input()\n    set selectedGroupControl(value) {\n        this._selectedGroupControl = value;\n    }\n\n    @Input() programControl: FormControl;\n    @Input() levelControl: FormControl;\n\n    groupSearchInputFocus = false;\n    groupSearchInput = new FormControl();\n    groupSearchTerm$: Observable<string>;\n    filteredGroups$: Observable<StudyGroup[]>;\n\n    constructor(private matDialog: MatDialog) {}\n\n    ngOnInit() {\n        this.filteredGroups$ = this.groupSearchInput.valueChanges.pipe(\n            startWith(this.groups),\n            filter((value) => !value || value.length > 2),\n            debounceTime(350),\n            distinctUntilChanged(),\n            map((term) => {\n                if (!term) {\n                    return this.groups;\n                }\n\n                term = term.toLowerCase();\n\n                const groups = [...this.groups];\n\n                return groups.filter((group) => {\n                    const hasTerm =\n                        group.name.toLowerCase().includes(term) ||\n                        group.level.label.toLowerCase().includes(term) ||\n                        group.level.module.program.label.toLowerCase().includes(term);\n\n                    return hasTerm;\n                });\n            }),\n        );\n    }\n\n    onShowSchedule(group: StudyGroup) {\n        this.matDialog.open(ScheduleInputDialogComponent, {\n            panelClass: 'schedule-input-dialog',\n            autoFocus: false,\n            data: {\n                group,\n            },\n        });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".group-search-input {\n    border: none;\n    outline: none;\n}\n\n.input-wrapper {\n    border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n    padding: 12px 16px 12px 0;\n\n    &--focus {\n        border-bottom: 1px solid rgba(0, 0, 0, 0.3);  \n    }\n}\n\n.group-list__container {\n    padding: 12px 0 0 8px;\n\n    &__group {\n        cursor: pointer;\n\n        &__info {\n            padding: 8px 8px 8px 0;\n\n            .mat-body-2 {\n                color: rgba(0, 0, 0, 0.6);\n            }\n        }\n\n        &__schedule-button {\n            margin-right: 10px;\n        }\n    }\n}\n",
                    "styleUrl": "./select-group-enrollment.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "selectedGroupControl": {
                    "name": "selectedGroupControl",
                    "setSignature": {
                        "name": "selectedGroupControl",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 23,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "selectedGroupControl",
                        "type": "",
                        "returnType": "",
                        "line": 19
                    }
                }
            },
            "templateData": "<div\n  fxLayout\n  fxLayoutAlign=\"space-between center\"\n  class=\"input-wrapper\"\n  [class.input-wrapper--focus]=\"groupSearchInputFocus\"\n>\n  <input\n    type=\"text\"\n    placeholder=\"Search\"\n    class=\"group-search-input mat-subheading-1\"\n    [formControl]=\"groupSearchInput\"\n    (focus)=\"groupSearchInputFocus = true\"\n    (blur)=\"groupSearchInputFocus = false\"\n  />\n  <mat-icon class=\"text-black-opacity-06\">search</mat-icon>\n</div>\n\n<mat-radio-group [formControl]=\"selectedGroupControl\">\n  <ng-container *ngIf=\"filteredGroups$ | async as filteredGroups\">\n    <div *ngIf=\"!filteredGroups.length\">\n      <br />\n      <p class=\"mat-subheading-1\">No results</p>\n    </div>\n\n    <div *ngIf=\"filteredGroups.length\" class=\"group-list__container\">\n      <div *ngFor=\"let group of filteredGroups\" class=\"group-list__container__group\">\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"16px\">\n          <mat-radio-button\n            #radioButton\n            [value]=\"group\"\n            [checked]=\"group?.id === selectedGroupControl?.value?.id\"\n          >\n          </mat-radio-button>\n          <div\n            fxLayout=\"row\"\n            fxLayoutAlign=\"space-between center\"\n            fxFlex=\"100%\"\n            style=\"border-bottom: 1px solid rgba(0, 0, 0, 0.12)\"\n            (click)=\"selectedGroupControl.patchValue(group)\"\n          >\n            <div\n              fxLayout=\"column\"\n              fxLayoutAlign=\"start start\"\n              class=\"group-list__container__group__info\"\n            >\n              <span class=\"mat-subheading-1\">{{ group.name }}</span>\n              <span class=\"mat-body-2\">\n                {{ group.level.module.program.label }} - {{ group.level.label }}\n              </span>\n            </div>\n            <button\n              mat-icon-button\n              class=\"group-list__container__group__schedule-button\"\n              (click)=\"onShowSchedule(group); $event.stopPropagation()\"\n            >\n              <mat-icon class=\"text-black-opacity-06\">schedule</mat-icon>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n</mat-radio-group>\n"
        },
        {
            "name": "SelectMembersDialogComponent",
            "id": "component-SelectMembersDialogComponent-c8916413f34de92f8f84fc81f2dabbea",
            "file": "src/app/classroom/components/select-members-dialog/select-members-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-select-members-dialog",
            "styleUrls": [
                "./select-members-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select-members-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onAddStudents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Enrollment } from 'app/@core/models/enrollment.model';\n\n@Component({\n    selector: 'app-select-members-dialog',\n    templateUrl: './select-members-dialog.component.html',\n    styleUrls: ['./select-members-dialog.component.scss'],\n})\nexport class SelectMembersDialogComponent {\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private data: { enrollments: Enrollment[] },\n        private dialogRef: MatDialogRef<SelectMembersDialogComponent>,\n    ) {}\n\n    get enrollments(): Enrollment[] {\n        return this.data?.enrollments;\n    }\n\n    get selectedEnrollments(): Enrollment[] {\n        return this.enrollments.filter((enrollment) => enrollment.selected);\n    }\n\n    onAddStudents() {\n        this.dialogRef.close(this.selectedEnrollments);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$black-fade: rgba(0, 0, 0, 0.6);\n\n.mat-icon-button .mat-icon {\n    color: $black-fade;\n}\n\n.select-members-list__container {\n  padding-bottom: 16px;\n\n  &__member {\n      cursor: pointer;\n\n      &__info {\n          padding: 16px 16px 16px 0;\n\n          .mat-body-2 {\n              color: $black-fade;\n          }\n      }\n\n      &__select-button {\n          margin-right: 19px;\n      }\n  }\n}\n",
                    "styleUrl": "./select-members-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<SelectMembersDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<SelectMembersDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "enrollments": {
                    "name": "enrollments",
                    "getSignature": {
                        "name": "enrollments",
                        "type": "[]",
                        "returnType": "Enrollment[]",
                        "line": 16
                    }
                },
                "selectedEnrollments": {
                    "name": "selectedEnrollments",
                    "getSignature": {
                        "name": "selectedEnrollments",
                        "type": "[]",
                        "returnType": "Enrollment[]",
                        "line": 20
                    }
                }
            },
            "templateData": "<div mat-dialog-title>\n  <div fxLayout=\"column\" fxLayoutAlign=\"start start\" fxLayoutGap=\"10px\" style=\"position: relative\">\n    <span class=\"mat-title\">Students</span>\n    <span class=\"mat-caption\">Only students with same course and level of this group</span>\n    <button mat-icon-button mat-dialog-close style=\"position: absolute; top: -28px; right: -24px\">\n      <mat-icon>close</mat-icon>\n    </button>\n  </div>\n</div>\n<mat-dialog-content>\n  <p *ngIf=\"enrollments.length === 0\" class=\"mat-subheading-1\">\n    There are no students compatible with this group\n  </p>\n\n  <div *ngIf=\"enrollments.length > 0\" class=\"select-members-list__container\">\n    <div *ngFor=\"let enrollment of enrollments\" class=\"select-members-list__container__group\">\n      <div\n        fxLayout=\"row\"\n        fxLayoutAlign=\"start center\"\n        fxLayoutGap=\"16px\"\n        style=\"cursor: pointer\"\n        (click)=\"enrollment.selected = !enrollment.selected\"\n      >\n        <app-avatar [text]=\"enrollment?.student?.firstName[0]\" fontSize=\"19px\"></app-avatar>\n        <div\n          fxLayout=\"row\"\n          fxLayoutAlign=\"space-between center\"\n          fxFlex=\"100%\"\n          style=\"border-bottom: 1px solid rgba(0, 0, 0, 0.12)\"\n        >\n          <div\n            fxLayout=\"column\"\n            fxLayoutAlign=\"start start\"\n            class=\"select-members-list__container__member__info\"\n          >\n            <span class=\"mat-subheading-1\">\n              {{ enrollment?.student?.firstName | titlecase }}\n              {{ enrollment?.student?.familyName | titlecase }}\n            </span>\n            <span class=\"mat-body-2\">\n              {{ enrollment?.level?.module?.program?.label }} - {{ enrollment?.level?.label }}\n            </span>\n          </div>\n          <mat-checkbox\n            (click)=\"$event.stopPropagation()\"\n            [(ngModel)]=\"enrollment.selected\"\n          ></mat-checkbox>\n        </div>\n      </div>\n    </div>\n  </div>\n</mat-dialog-content>\n\n<mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"center center\" *ngIf=\"enrollments.length > 0\">\n  <button\n    mat-flat-button\n    color=\"primary\"\n    [disabled]=\"selectedEnrollments.length === 0\"\n    (click)=\"onAddStudents()\"\n  >\n    <mat-icon>{{ selectedEnrollments.length > 1 ? 'group' : 'person' }}_add</mat-icon>\n    add student{{ selectedEnrollments.length > 1 ? 's' : '' }}\n  </button>\n</mat-dialog-actions>\n"
        },
        {
            "name": "SelectPlanPageComponent",
            "id": "component-SelectPlanPageComponent-e7c77f8e3360e17a9e505f9f598a0add",
            "file": "src/app/authentication/pages/select-plan-page/select-plan-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-select-plan-page",
            "styleUrls": [
                "./select-plan-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select-plan-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "hasCancelledSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "imageCancelledOptions",
                    "defaultValue": "{\n        src: '../../../../assets/images/backgrounds/auth-cancelled.png',\n        width: 570,\n        height: 528,\n        alt: 'subscription cancelled user',\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "imageNormalOptions",
                    "defaultValue": "{\n        src: '../../../../assets/images/backgrounds/auth-image.png',\n        width: 569,\n        height: 532,\n        alt: 'auth normal user',\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "isStudent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isTeacher",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "plans$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Product[]>",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "stripe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Stripe",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "getProducts",
                    "args": [
                        {
                            "name": "isTeacher",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "isStudent",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isTeacher",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isStudent",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initStripe",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPay",
                    "args": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ICreateSubscriptionCheckoutInput, SubscriptionService } from 'app/@core/services/subscription.service';\n\nimport { loadStripe, Stripe } from '@stripe/stripe-js';\nimport { environment } from 'environments/environment';\nimport { Product, IProductFilters, ProductPrice } from 'app/@core/models/product.model';\nimport { Subscription } from 'app/@core/models/subscription.model';\n\n@Component({\n    selector: 'app-select-plan-page',\n    templateUrl: './select-plan-page.component.html',\n    styleUrls: ['./select-plan-page.component.scss'],\n})\nexport class SelectPlanPageComponent implements OnInit {\n    isTeacher: boolean;\n    isStudent: boolean;\n    hasCancelledSubscription: boolean;\n\n    imageNormalOptions = {\n        src: '../../../../assets/images/backgrounds/auth-image.png',\n        width: 569,\n        height: 532,\n        alt: 'auth normal user',\n    };\n\n    imageCancelledOptions = {\n        src: '../../../../assets/images/backgrounds/auth-cancelled.png',\n        width: 570,\n        height: 528,\n        alt: 'subscription cancelled user',\n    };\n\n    plans$: Observable<Product[]>;\n\n    stripe: Stripe;\n\n    constructor(\n        private subscriptionService: SubscriptionService,\n        private route: ActivatedRoute,\n        private router: Router,\n    ) {}\n\n    ngOnInit() {\n        const isTeacher = this.route.snapshot.queryParams.teacher === 'true' ? true : false;\n        const isStudent = this.route.snapshot.queryParams.student === 'true' ? true : false;\n\n        this.hasCancelledSubscription = this.router.url.includes('canceled');\n\n        this.getProducts(isTeacher, isStudent);\n        this.initStripe();\n    }\n\n    async initStripe() {\n        this.stripe = await loadStripe(`${environment.stripePublicKey}`);\n    }\n\n    getProducts(isTeacher?: boolean, isStudent?: boolean) {\n        let productFilters: IProductFilters;\n\n        if (isTeacher) {\n            productFilters = {\n                categoryCode: 'teacher_licence',\n            };\n        }\n\n        if (isStudent) {\n            productFilters = {\n                categoryCode: 'student_licence',\n            };\n        }\n\n        this.plans$ = this.subscriptionService.getProducts(productFilters);\n    }\n\n    onPay({ selectedPlan, selectedPrice }: { selectedPlan: Product; selectedPrice: ProductPrice }) {\n        const subscriptionCheckoutInput: ICreateSubscriptionCheckoutInput = {\n            checkoutItems: [{ priceId: selectedPrice.id, quantity: 1 }],\n        };\n\n        this.subscriptionService.createSubscriptionCheckout(subscriptionCheckoutInput).subscribe({\n            next: async (res: Subscription) => {\n                try {\n                    await this.stripe.redirectToCheckout({ sessionId: res.paymentProviderCheckoutId });\n                } catch (error) {\n                    console.error(error);\n                }\n            },\n        });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./select-plan-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "subscriptionService",
                        "type": "SubscriptionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "subscriptionService",
                        "type": "SubscriptionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-auth-layout\n  maxWidth=\"365px\"\n  [imageOptions]=\"hasCancelledSubscription ? imageCancelledOptions : imageNormalOptions\"\n>\n  <app-plans-list\n    [plans]=\"plans$ | async\"\n    (payEvent)=\"onPay($event)\"\n    [hasCancelledSubscription]=\"hasCancelledSubscription\"\n  ></app-plans-list>\n</app-auth-layout>\n"
        },
        {
            "name": "SlidesStepperComponent",
            "id": "component-SlidesStepperComponent-154effad25e479d67b78865c887580aa",
            "file": "src/app/lms/components/slides-stepper/slides-stepper.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: CdkStepper, useExisting: SlidesStepperComponent }",
                    "type": "component"
                }
            ],
            "selector": "app-slides-stepper",
            "styleUrls": [
                "./slides-stepper.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./slides-stepper.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isFirstSection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean"
                },
                {
                    "name": "isFirstSlide",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean"
                },
                {
                    "name": "isLastSection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean"
                },
                {
                    "name": "isLastSlide",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "firstStepEvent",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter"
                },
                {
                    "name": "lastStepEvent",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "hover",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleKeyboardEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:keydown ', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFirstStepClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLastStepClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectStepByIndex",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:keydown ",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Directionality } from '@angular/cdk/bidi';\nimport { CdkStepper } from '@angular/cdk/stepper';\nimport { DOCUMENT } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Inject,\n    Input,\n    Output,\n} from '@angular/core';\nimport { MediaObserver } from '@angular/flex-layout';\n\n@Component({\n    selector: 'app-slides-stepper',\n    templateUrl: './slides-stepper.component.html',\n    styleUrls: ['./slides-stepper.component.scss'],\n    providers: [{ provide: CdkStepper, useExisting: SlidesStepperComponent }],\n})\nexport class SlidesStepperComponent extends CdkStepper {\n    public hover = false;\n\n    @Input() isFirstSlide: boolean;\n    @Input() isLastSlide: boolean;\n\n    @Input() isFirstSection: boolean;\n    @Input() isLastSection: boolean;\n\n    @Output() firstStepEvent = new EventEmitter<void>();\n    @Output() lastStepEvent = new EventEmitter<void>();\n\n    @HostListener('document:keydown ', ['$event'])\n    handleKeyboardEvent(event: KeyboardEvent) {\n        if (event.key === 'ArrowLeft') {\n            this.previous();\n        }\n        if (event.key === 'ArrowRight') {\n            this.next();\n        }\n    }\n\n    constructor(\n        private mediaObserver: MediaObserver,\n        elementRef: ElementRef,\n        cdr: ChangeDetectorRef,\n        dir: Directionality,\n        @Inject(DOCUMENT) document: Document,\n    ) {\n        super(dir, cdr, elementRef, document);\n    }\n\n    selectStepByIndex(index: number): void {\n        this.selectedIndex = index;\n    }\n\n    onLastStepClicked() {\n        this.lastStepEvent.emit();\n    }\n\n    onFirstStepClicked() {\n        this.firstStepEvent.emit();\n    }\n\n    get isMobile() {\n        return this.mediaObserver.isActive('xs');\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n\n.rotate {\n    transform: rotateY(180deg);\n}\n\n@mixin slides-stepper-theme($theme) {\n    $primary: mat.get-color-from-palette(map-get($theme, primary));\n    $background: mat.get-color-from-palette(map-get($theme, background), card);\n\n    $primary-100: mat.get-color-from-palette(map-get($theme, primary), 100);\n\n    .slides-stepper__buttons {\n        z-index: 999998 !important;\n        background-color: $primary-100;\n        border-radius: 14px;\n\n        &--opacity-25 {\n            opacity: 0.25;\n        }\n\n        &--opacity-100 {\n            opacity: 1;\n        }\n\n        &--desktop {\n            position: fixed;\n            top: 82px;\n        }\n    }\n}\n",
                    "styleUrl": "./slides-stepper.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dir",
                        "type": "Directionality",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dir",
                        "type": "Directionality",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "CdkStepper",
            "accessors": {
                "isMobile": {
                    "name": "isMobile",
                    "getSignature": {
                        "name": "isMobile",
                        "type": "",
                        "returnType": "",
                        "line": 66
                    }
                }
            },
            "templateData": "<section fxLayout=\"column\" fxLayoutAlign=\"space-between center\">\n  <div\n    *ngIf=\"!isMobile\"\n    fxLayout=\"row\"\n    fxLayoutAlign=\"center center\"\n    fxLayoutGap=\"20px\"\n    class=\"slides-stepper__buttons slides-stepper__buttons--opacity-25 slides-stepper__buttons--desktop mat-elevation-z4\"\n    (mouseenter)=\"hover = true\"\n    (mouseleave)=\"hover = false\"\n    [class.slides-stepper__buttons--opacity-100]=\"hover\"\n  >\n    <button\n      mat-icon-button\n      cdkStepperPrevious\n      (click)=\"isFirstSlide ? onFirstStepClicked() : false\"\n      [disabled]=\"isFirstSection && selectedIndex === 0\"\n    >\n      <mat-icon [class.rotate]=\"isFirstSlide\"\n        >{{ isFirstSlide ? 'double_arrow' : 'chevron_left' }}\n      </mat-icon>\n    </button>\n    <span>{{ selectedIndex + 1 }}/{{ steps.length }}</span>\n    <button\n      mat-icon-button\n      cdkStepperNext\n      (click)=\"isLastSlide ? onLastStepClicked() : false\"\n      [disabled]=\"isLastSection && selectedIndex + 1 === steps.length\"\n    >\n      <mat-icon>{{ isLastSlide ? 'double_arrow' : 'navigate_next' }}</mat-icon>\n    </button>\n  </div>\n\n  <div [ngTemplateOutlet]=\"selected ? selected.content : null\"></div>\n\n  <div\n    *ngIf=\"isMobile\"\n    fxLayout=\"row\"\n    fxLayoutAlign=\"center center\"\n    fxLayoutGap=\"20px\"\n    class=\"slides-stepper__buttons\"\n  >\n    <button\n      mat-icon-button\n      cdkStepperPrevious\n      (click)=\"isFirstSlide ? onFirstStepClicked() : false\"\n      [disabled]=\"isFirstSection && selectedIndex === 0\"\n    >\n      <mat-icon [class.rotate]=\"isFirstSlide\"\n        >{{ isFirstSlide ? 'double_arrow' : 'chevron_left' }}\n      </mat-icon>\n    </button>\n    <span>{{ selectedIndex + 1 }}/{{ steps.length }}</span>\n    <button\n      mat-icon-button\n      cdkStepperNext\n      (click)=\"isLastSlide ? onLastStepClicked() : false\"\n      [disabled]=\"isLastSection && selectedIndex + 1 === steps.length\"\n    >\n      <mat-icon>{{ isLastSlide ? 'double_arrow' : 'navigate_next' }}</mat-icon>\n    </button>\n  </div>\n</section>\n"
        },
        {
            "name": "StorybookButtonsComponent",
            "id": "component-StorybookButtonsComponent-c5fc0c39ca3abdad2a720c105941a0d7",
            "file": "src/stories/storybook-buttons.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-buttons",
            "styleUrls": [],
            "styles": [],
            "template": "<div fxLayout=\"column\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\">\n    <button mat-button [color]=\"color\">{{ label }}</button>\n    <button mat-raised-button [color]=\"color\">{{ label }}</button>\n    <button mat-stroked-button [color]=\"color\">{{ label }}</button>\n    <button mat-flat-button [color]=\"color\">{{ label }}</button>\n    <button mat-button [color]=\"color\">\n        <mat-icon>{{ icon }}</mat-icon>\n        {{ label }}\n    </button>\n    <button mat-raised-button [color]=\"color\">\n        <mat-icon>{{ icon }}</mat-icon>\n        {{ label }}\n    </button>\n    <button mat-stroked-button [color]=\"color\">\n        <mat-icon>{{ icon }}</mat-icon>\n        {{ label }}\n    </button>\n    <button mat-flat-button [color]=\"color\">\n        <mat-icon>{{ icon }}</mat-icon>\n        {{ label }}\n    </button>\n    <button mat-icon-button [color]=\"color\">\n        <mat-icon>{{ icon }}</mat-icon>\n    </button>\n    <button mat-fab [color]=\"color\">\n        <mat-icon>{{ icon }}</mat-icon>\n    </button>\n    <button mat-mini-fab [color]=\"color\">\n        <mat-icon>{{ icon }}</mat-icon>\n    </button>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "\"primary\" | \"accent\" | \"warn\" | string"
                },
                {
                    "name": "icon",
                    "defaultValue": "'home'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'storybook-buttons',\n    template: `\n        <div fxLayout=\"column\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\">\n            <button mat-button [color]=\"color\">{{ label }}</button>\n            <button mat-raised-button [color]=\"color\">{{ label }}</button>\n            <button mat-stroked-button [color]=\"color\">{{ label }}</button>\n            <button mat-flat-button [color]=\"color\">{{ label }}</button>\n            <button mat-button [color]=\"color\">\n                <mat-icon>{{ icon }}</mat-icon>\n                {{ label }}\n            </button>\n            <button mat-raised-button [color]=\"color\">\n                <mat-icon>{{ icon }}</mat-icon>\n                {{ label }}\n            </button>\n            <button mat-stroked-button [color]=\"color\">\n                <mat-icon>{{ icon }}</mat-icon>\n                {{ label }}\n            </button>\n            <button mat-flat-button [color]=\"color\">\n                <mat-icon>{{ icon }}</mat-icon>\n                {{ label }}\n            </button>\n            <button mat-icon-button [color]=\"color\">\n                <mat-icon>{{ icon }}</mat-icon>\n            </button>\n            <button mat-fab [color]=\"color\">\n                <mat-icon>{{ icon }}</mat-icon>\n            </button>\n            <button mat-mini-fab [color]=\"color\">\n                <mat-icon>{{ icon }}</mat-icon>\n            </button>\n        </div>\n    `,\n})\nexport class StorybookButtonsComponent {\n    @Input() label: string = 'Button';\n    @Input() color: 'primary' | 'accent' | 'warn' | '' = '';\n    @Input() icon: string = 'home';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "StudentBookPageComponent",
            "id": "component-StudentBookPageComponent-13da09fb0b1165bbea2d0b0db4c64f7b",
            "file": "src/app/enrolled/pages/student-book-page/student-book-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-student-book-page",
            "styleUrls": [
                "./student-book-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./student-book-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isFullscreen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "lesson$",
                    "defaultValue": "this.lmsService.getLesson(this.route.snapshot.params.lessonId)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "navigationTabsConfig",
                    "defaultValue": "{\n        links: [{ path: '', icon: 'menu_book', label: 'student book', layoutOnly: true }],\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INavigationTabsConfig",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "checkFullscreen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFullscreen",
                    "args": [
                        {
                            "name": "imgElement",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "imgElement",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DOCUMENT } from '@angular/common';\nimport { Component, Inject } from '@angular/core';\nimport { MediaObserver } from '@angular/flex-layout';\nimport { ActivatedRoute } from '@angular/router';\nimport { LMSService } from 'app/@core/services/lms.service';\nimport { INavigationTabsConfig } from 'app/@shared/components/navigation-tabs/navigation-tabs.component';\n\n@Component({\n    selector: 'app-student-book-page',\n    templateUrl: './student-book-page.component.html',\n    styleUrls: ['./student-book-page.component.scss'],\n})\nexport class StudentBookPageComponent {\n    lesson$ = this.lmsService.getLesson(this.route.snapshot.params.lessonId);\n\n    navigationTabsConfig: INavigationTabsConfig = {\n        links: [{ path: '', icon: 'menu_book', label: 'student book', layoutOnly: true }],\n    };\n\n    isFullscreen = false;\n\n    constructor(\n        private lmsService: LMSService,\n        private route: ActivatedRoute,\n        @Inject(DOCUMENT) private document: Document,\n        private mediaObserver: MediaObserver,\n    ) {}\n\n    onFullscreen(imgElement: any) {\n        const elem = imgElement || this.document.documentElement;\n\n        if (!this.document.fullscreenElement) {\n            if (elem.requestFullscreen) {\n                elem.requestFullscreen();\n                this.isFullscreen = true;\n            }\n        } else {\n            if (this.document.exitFullscreen) {\n                this.document.exitFullscreen();\n                this.isFullscreen = false;\n            }\n        }\n    }\n\n    checkFullscreen() {\n        if (this.isFullscreen) {\n            this.document.exitFullscreen();\n            this.isFullscreen = false;\n        }\n    }\n\n    get isMobile() {\n        return this.mediaObserver.isActive('xs');\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/flex-layout/mq' as mq;\n\n.student-book-container {\n    padding: 0;\n    position: relative;\n\n    &--has-audio {\n        padding-bottom: 30px;\n    }\n\n    @include mq.layout-bp(gt-xs) {\n        padding: 24px 18px 20vh 18px;\n\n        &--has-audio {\n            padding-bottom: 200px;\n        }\n    }\n\n\n    &__fullscreen-button {\n        position: absolute;\n        bottom: 0px;\n        right: 10px;\n\n        &--has-audio {\n            bottom: 50px;\n        }\n    }\n}\n\n.student-book-image {\n    margin-top: 24px;\n    max-width: 100%;\n}\n",
                    "styleUrl": "./student-book-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "lmsService",
                        "type": "LMSService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "lmsService",
                        "type": "LMSService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "isMobile": {
                    "name": "isMobile",
                    "getSignature": {
                        "name": "isMobile",
                        "type": "",
                        "returnType": "",
                        "line": 52
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"lesson$ | async as lesson\">\n  <ng-template tpAttach=\"topBarStart\">\n    <app-eslo-letter-logo></app-eslo-letter-logo>\n    <app-top-bar-title [text]=\"lesson.title\"></app-top-bar-title>\n  </ng-template>\n\n  <ng-template tpAttach=\"topBarCenter\">\n    <app-navigation-tabs [navigationTabsConfig]=\"navigationTabsConfig\"></app-navigation-tabs>\n  </ng-template>\n\n  <div\n    class=\"student-book-container\"\n    [class.student-book-container--has-audio]=\"lesson.lessonMaterial.audio.length > 0\"\n  >\n    <app-custom-stepper #stepper [hasAudio]=\"lesson.lessonMaterial.audio.length > 0\">\n      <cdk-step *ngFor=\"let studentBookPage of lesson.lessonMaterial.studentBook; let i = index\">\n        <img\n          #imgElement\n          class=\"student-book-image\"\n          [src]=\"studentBookPage.media.rootUri\"\n          [alt]=\"studentBookPage.media.id\"\n          (click)=\"checkFullscreen()\"\n        />\n        <button\n          color=\"primary\"\n          class=\"student-book-container__fullscreen-button\"\n          [class.student-book-container__fullscreen-button--has-audio]=\"\n            lesson.lessonMaterial.audio.length > 0\n          \"\n          *ngIf=\"isMobile\"\n          mat-icon-button\n          (click)=\"onFullscreen(imgElement)\"\n        >\n          <mat-icon>fullscreen</mat-icon>\n        </button>\n      </cdk-step>\n    </app-custom-stepper>\n  </div>\n\n  <app-audio-control-card\n    *ngIf=\"lesson.lessonMaterial.audio.length > 0\"\n    [audioList]=\"lesson.lessonMaterial.audio\"\n  ></app-audio-control-card>\n</ng-container>\n"
        },
        {
            "name": "StudentEmptyEnrollmentsComponent",
            "id": "component-StudentEmptyEnrollmentsComponent-cbfc154102d6ec58265041d2a882c1db",
            "file": "src/app/enrolled/components/student-empty-enrollments/student-empty-enrollments.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-student-empty-enrollments",
            "styleUrls": [
                "./student-empty-enrollments.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./student-empty-enrollments.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "text",
                    "defaultValue": "'Nothing to show here.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'app-student-empty-enrollments',\n    templateUrl: './student-empty-enrollments.component.html',\n    styleUrls: ['./student-empty-enrollments.component.scss'],\n})\nexport class StudentEmptyEnrollmentsComponent {\n    @Input() text = 'Nothing to show here.';\n\n    constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n@use '~@angular/flex-layout/mq' as mq;\n\n@mixin empty-list-theme($theme) {\n    $primary: mat.get-color-from-palette(map-get($theme, primary));\n\n    .empty-list {\n    \n        margin-top: 130px;\n\n        &__content {\n            text-align: center;\n            padding: 16px;\n\n            @include mq.layout-bp(gt-xs) {\n                padding: 0;\n            }\n\n            &__title {\n                color: $primary;\n                font-size: 19px;\n                line-height: 24px;\n                letter-spacing: 0.15px;\n            }\n\n            &__button {\n                border-radius: 28px;\n                &:first-child {\n                    margin-right: 6px;\n                }\n\n                @include mq.layout-bp(gt-xs) {\n                    &:first-child {\n                        margin-right: 30px;\n                    }\n                }\n            }\n        }\n    }\n}\n",
                    "styleUrl": "./student-empty-enrollments.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "templateData": "<div class=\"empty-list\" fxLayout fxLayoutAlign=\"center center\">\n  <div\n    class=\"empty-list__content\"\n    fxLayout=\"column\"\n    fxLayoutAlign=\"center center\"\n    fxLayoutGap=\"30px\"\n  >\n    <p class=\"empty-list__content__title\">{{ text }}</p>\n    <img src=\"/assets/icons/empty-archive.svg\" alt=\"empty list\" />\n  </div>\n</div>\n"
        },
        {
            "name": "StudentEnrollmentListComponent",
            "id": "component-StudentEnrollmentListComponent-7b24137beed68b2c59ab694d65ab6c69",
            "file": "src/app/enrolled/components/student-enrollment-list/student-enrollment-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-student-enrollment-list",
            "styleUrls": [
                "./student-enrollment-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./student-enrollment-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "enrollments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Enrollment[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "acceptEnrollmentEvent",
                    "defaultValue": "new EventEmitter<{ action: string; enrollment: Enrollment }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                },
                {
                    "name": "goToEnrollmentEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "goToEnrollmentStatuses",
                    "defaultValue": "[ENROLLMENT_STATUS.ACTIVE, ENROLLMENT_STATUS.CANCELLED, ENROLLMENT_STATUS.DELETED]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "goToEnrollment",
                    "args": [
                        {
                            "name": "enrollment",
                            "type": "Enrollment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "enrollment",
                            "type": "Enrollment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onAcceptEnrollment",
                    "args": [
                        {
                            "name": "body",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "body",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Enrollment, ENROLLMENT_STATUS } from 'app/@core/models/enrollment.model';\n\n@Component({\n    selector: 'app-student-enrollment-list',\n    templateUrl: './student-enrollment-list.component.html',\n    styleUrls: ['./student-enrollment-list.component.scss'],\n})\nexport class StudentEnrollmentListComponent {\n    @Input() enrollments: Enrollment[];\n\n    @Output() goToEnrollmentEvent = new EventEmitter();\n    @Output() acceptEnrollmentEvent = new EventEmitter<{ action: string; enrollment: Enrollment }>();\n\n    goToEnrollmentStatuses = [ENROLLMENT_STATUS.ACTIVE, ENROLLMENT_STATUS.CANCELLED, ENROLLMENT_STATUS.DELETED];\n\n    constructor() {}\n\n    goToEnrollment(enrollment: Enrollment) {\n        this.goToEnrollmentEvent.emit(enrollment.id);\n    }\n\n    onAcceptEnrollment(body: { action: string; enrollment: Enrollment }) {\n        this.acceptEnrollmentEvent.emit(body);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/flex-layout/mq' as mq;\n\n.enrollments-list {\n    padding: 1.5rem 0.5rem;\n\n    @include mq.layout-bp(gt-xs) {\n        padding: 2rem;\n    }\n}\n",
                    "styleUrl": "./student-enrollment-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "templateData": "<div\n  gdColumns.xs=\"repeat(auto-fill, minmax(300px, 1fr))\"\n  gdColumns.gt-xs=\"repeat(auto-fill, minmax(320px, 1fr))\"\n  gdGap.xs=\"24px\"\n  gdGap.gt-xs=\"46px\"\n  gdAlignColumns=\"start stretch\"\n  gdAuto\n  class=\"enrollments-list\"\n>\n  <div *ngFor=\"let enrollment of enrollments; let i = index\">\n    <app-enrollment-card\n      [enrollment]=\"enrollment\"\n      (click)=\"\n        goToEnrollmentStatuses.includes(enrollment.status) ? goToEnrollment(enrollment) : false\n      \"\n      [style.cursor]=\"goToEnrollmentStatuses.includes(enrollment.status) ? 'pointer' : 'auto'\"\n      (acceptEnrollmentEvent)=\"onAcceptEnrollment($event)\"\n    ></app-enrollment-card>\n  </div>\n</div>\n"
        },
        {
            "name": "StudentEnrollmentPageComponent",
            "id": "component-StudentEnrollmentPageComponent-f8d17bf535043762b50c4f9a2dbf5851",
            "file": "src/app/enrolled/pages/student-enrollment-page/student-enrollment-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-student-enrollment-page",
            "styleUrls": [
                "./student-enrollment-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./student-enrollment-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "enrollment$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Enrollment>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "navigationTabsConfig",
                    "defaultValue": "{\n        links: [{ path: '', icon: 'event_note', label: 'schedule', layoutOnly: true }],\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INavigationTabsConfig",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "getEnrollment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onOpenStudentBook",
                    "args": [
                        {
                            "name": "lesson",
                            "type": "LessonRecordList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lesson",
                            "type": "LessonRecordList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { LessonRecordList } from 'app/@core/models/class-record.model';\nimport { Enrollment } from 'app/@core/models/enrollment.model';\nimport { ClassroomService } from 'app/@core/services/classroom.service';\nimport { INavigationTabsConfig } from 'app/@shared/components/navigation-tabs/navigation-tabs.component';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-student-enrollment-page',\n    templateUrl: './student-enrollment-page.component.html',\n    styleUrls: ['./student-enrollment-page.component.scss'],\n})\nexport class StudentEnrollmentPageComponent implements OnInit {\n    enrollment$: Observable<Enrollment>;\n\n    navigationTabsConfig: INavigationTabsConfig = {\n        links: [{ path: '', icon: 'event_note', label: 'schedule', layoutOnly: true }],\n    };\n\n    constructor(private route: ActivatedRoute, private classroomService: ClassroomService, private router: Router) {}\n    ngOnInit(): void {\n        this.getEnrollment();\n    }\n\n    getEnrollment() {\n        this.enrollment$ = this.classroomService.getEnrollment(this.route.snapshot.params.enrollmentId).pipe(\n            map((enrollment) => {\n                const mappedEnrollment: Enrollment = {\n                    ...enrollment,\n                    revertLessonStatus: enrollment.classRecords\n                        .filter((record) => record.lesson.id === enrollment.lastLesson.id)\n                        .every((record) => record.revertClassStatus),\n                    lessonTrackerList: enrollment.lessons.map((lesson: any) => {\n                        return {\n                            ...lesson,\n                            classRecords: enrollment.classRecords.filter((record) => {\n                                return record.lesson.id === lesson.id;\n                            }),\n                        };\n                    }),\n                };\n\n                return mappedEnrollment;\n            }),\n        );\n    }\n\n    onOpenStudentBook(lesson: LessonRecordList) {\n        this.router.navigate(['../../student-book', lesson.id], { relativeTo: this.route });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/flex-layout/mq' as mq;\n\n.container {\n    @include mq.layout-bp(gt-xs) {\n        padding: 32px 0 0 32px;\n    }\n}",
                    "styleUrl": "./student-enrollment-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "classroomService",
                        "type": "ClassroomService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "classroomService",
                        "type": "ClassroomService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"enrollment$ | async as enrollment\">\n  <ng-template tpAttach=\"topBarStart\">\n    <app-eslo-letter-logo></app-eslo-letter-logo>\n    <app-top-bar-title\n      *ngIf=\"enrollment?.level.name\"\n      [text]=\"enrollment?.level.name\"\n    ></app-top-bar-title>\n  </ng-template>\n\n  <ng-template tpAttach=\"topBarCenter\">\n    <app-navigation-tabs [navigationTabsConfig]=\"navigationTabsConfig\"></app-navigation-tabs>\n  </ng-template>\n\n  <div class=\"container\">\n    <app-class-record-list\n      [student]=\"true\"\n      [enrollment]=\"enrollment\"\n      [lessonTrackerList]=\"enrollment?.lessonTrackerList\"\n      (openStudentBookEvent)=\"onOpenStudentBook($event)\"\n    ></app-class-record-list>\n  </div>\n</div>\n"
        },
        {
            "name": "StudentInfoComponent",
            "id": "component-StudentInfoComponent-ac76dee3cff0acc605bf9d751b412ead",
            "file": "src/app/classroom/components/student-info/student-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-student-info",
            "styleUrls": [
                "./student-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./student-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disableControlValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean"
                },
                {
                    "name": "studentInfoForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "FormGroup"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'app-student-info',\n    templateUrl: './student-info.component.html',\n    styleUrls: ['./student-info.component.scss'],\n})\nexport class StudentInfoComponent {\n    @Input() studentInfoForm: FormGroup;\n    @Input() disableControlValue: boolean;\n\n    constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./student-info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "templateData": "<div [formGroup]=\"studentInfoForm\" fxLayout=\"column\" fxLayoutAlign=\"stretch\">\n  <mat-form-field appearance=\"outline\">\n    <mat-label>First name</mat-label>\n    <input matInput formControlName=\"firstName\" type=\"text\" [disableControl]=\"disableControlValue\" />\n  </mat-form-field>\n\n  <mat-form-field appearance=\"outline\">\n    <mat-label>Last name</mat-label>\n    <input matInput formControlName=\"lastName\" type=\"text\" [disableControl]=\"disableControlValue\" />\n  </mat-form-field>\n\n  <mat-form-field appearance=\"outline\">\n    <mat-label>Email</mat-label>\n    <input matInput formControlName=\"email\" type=\"email\" [disableControl]=\"disableControlValue\" />\n  </mat-form-field>\n</div>\n"
        },
        {
            "name": "StudentListComponent",
            "id": "component-StudentListComponent-6922293d6f2014376bb9ef493e2a9ed4",
            "file": "src/app/classroom/components/student-list/student-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-student-list",
            "styleUrls": [
                "./student-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./student-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "students",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "Student[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fragment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "goToEnrollment",
                    "args": [
                        {
                            "name": "enrollment",
                            "type": "Enrollment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "enrollment",
                            "type": "Enrollment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCancel",
                    "args": [
                        {
                            "name": "enrollment",
                            "type": "Enrollment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "enrollment",
                            "type": "Enrollment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEdit",
                    "args": [
                        {
                            "name": "enrollment",
                            "type": "Enrollment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "enrollment",
                            "type": "Enrollment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onOpenStudentEnrollments",
                    "args": [
                        {
                            "name": "studentId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "studentId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DOCUMENT } from '@angular/common';\nimport { AfterViewChecked, Component, Inject, Input, OnInit, Renderer2 } from '@angular/core';\nimport { MatBottomSheet } from '@angular/material/bottom-sheet';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Enrollment } from 'app/@core/models/enrollment.model';\nimport { ClassroomService, Student } from 'app/@core/services/classroom.service';\nimport {\n    ModalConfirmationComponent,\n    ModalConfirmationDataOptions,\n} from 'app/@shared/components/modal-confirmation/modal-confirmation.component';\nimport { EMPTY } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { InvitationDialogComponent, ITab } from '../invitation-dialog/invitation-dialog.component';\n\n@Component({\n    selector: 'app-student-list',\n    templateUrl: './student-list.component.html',\n    styleUrls: ['./student-list.component.scss'],\n})\nexport class StudentListComponent implements OnInit, AfterViewChecked {\n    @Input() students: Student[];\n\n    fragment: string;\n\n    constructor(\n        private router: Router,\n        private route: ActivatedRoute,\n        private matDialog: MatDialog,\n        private classroomService: ClassroomService,\n        @Inject(DOCUMENT) private document: Document,\n        private renderer: Renderer2,\n        private bottomSheet: MatBottomSheet,\n    ) {}\n\n    ngOnInit() {\n        this.fragment = this.route.snapshot.fragment;\n    }\n\n    ngAfterViewChecked(): void {\n        try {\n            if (this.fragment) {\n                this.document.querySelector('#' + this.fragment).scrollIntoView();\n            }\n        } catch (e) {}\n    }\n\n    goToEnrollment(enrollment: Enrollment): void {\n        if (enrollment.status === 'ACTIVE') {\n            this.router.navigate(['/classroom/enrollments', enrollment.id]);\n        }\n    }\n\n    onEdit(enrollment: Enrollment): void {\n        const dialogRef = this.matDialog.open(InvitationDialogComponent, {\n            panelClass: 'invitation-dialog--material--editing',\n            autoFocus: false,\n            disableClose: true,\n            // maxWidth: '400px',\n            data: {\n                enrollment,\n                type: 'student',\n                tabs: [\n                    {\n                        title: 'info',\n                        active: false,\n                        completed: false,\n                        icon: 'account_circle',\n                    },\n                    {\n                        title: 'course',\n                        active: false,\n                        completed: false,\n                        icon: 'school',\n                    },\n                    {\n                        title: 'schedule',\n                        active: false,\n                        completed: false,\n                        icon: 'date_range',\n                    },\n                ] as ITab[],\n            },\n        });\n\n        dialogRef\n            .afterClosed()\n            .pipe(take(1))\n            .subscribe({\n                next: (enrollment: Enrollment) => {\n                    if (!enrollment) {\n                        return;\n                    }\n                    this.classroomService.classroomRefetch();\n                },\n            });\n    }\n\n    onCancel(enrollment: Enrollment): void {\n        const dialogRef = this.matDialog.open<ModalConfirmationComponent, ModalConfirmationDataOptions>(\n            ModalConfirmationComponent,\n            {\n                restoreFocus: false,\n                disableClose: true,\n                data: {\n                    title: 'Cancel invitation',\n                    message: 'Are you sure you want to cancel this invitation?',\n                },\n            },\n        );\n\n        dialogRef\n            .afterClosed()\n            .pipe(\n                take(1),\n                switchMap((confirm: boolean) => {\n                    if (!confirm) {\n                        return EMPTY;\n                    }\n\n                    return this.classroomService.cancelEnrollment(enrollment.id);\n                }),\n            )\n            .subscribe({\n                next: (cancelledEnrollment: Enrollment) => {\n                    this.classroomService.classroomRefetch();\n                },\n            });\n    }\n\n    onOpenStudentEnrollments(studentId: string) {\n        this.students = this.students.map((student) => {\n            let opened = student?.opened ?? false;\n            if (studentId === student?.id) {\n                opened = !opened;\n            }\n            return {\n                ...student,\n                opened,\n            };\n        });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-table {\n    .mat-row {\n        &.active {\n            cursor: pointer;\n        }\n\n        &.inactive {\n            background-color: #f5f5f5;\n        }\n    }\n}\n\n.avatar {\n    border-radius: 50%;\n    text-align: center;\n    line-height: 40px;\n    margin: 0;\n    text-transform: uppercase;\n    transition: 0.3s;\n    opacity: 1;\n    width: 40px;\n    height: 40px;\n    margin-right: 10px;\n}\n\n.student-list__container {\n    padding: 24px 0 0 16px;\n\n    &__student {\n        cursor: pointer;\n\n        &--not-active {\n            cursor: auto;\n        }\n\n        &__info {\n            padding: 16px 16px 16px 0;\n\n            &--many-enrollments {\n                padding: 16px 24px 16px 0;\n            }\n        }\n\n        &__edit-button {\n            margin-right: 19px;\n        }\n    }\n}\n\n.border-bottom {\n    border-bottom: 1px solid rgba(0, 0, 0, 0.12) !important;\n}\n\n.mat-body-2 {\n    color: rgba(0, 0, 0, 0.6);\n}\n",
                    "styleUrl": "./student-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "classroomService",
                        "type": "ClassroomService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bottomSheet",
                        "type": "MatBottomSheet",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "classroomService",
                        "type": "ClassroomService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bottomSheet",
                        "type": "MatBottomSheet",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewChecked"
            ],
            "templateData": "<div class=\"student-list__container\">\n  <div *ngFor=\"let student of students\" [attr.id]=\"student?.firstName + student?.familyName\">\n    <div\n      fxLayout=\"row\"\n      fxLayoutAlign=\"start start\"\n      fxLayoutGap=\"16px\"\n      class=\"student-list__container__student\"\n      (click)=\"\n        student?.enrollments?.length > 1\n          ? onOpenStudentEnrollments(student?.id)\n          : goToEnrollment(student?.enrollments[0])\n      \"\n    >\n      <div style=\"padding-top: 16px\">\n        <app-avatar [text]=\"student?.firstName[0]\" fontSize=\"19px\"></app-avatar>\n      </div>\n      <div fxLayout=\"column\" fxLayoutAlign=\"start stretch\" fxFlex=\"100%\">\n        <div\n          fxLayout=\"row\"\n          fxLayoutAlign=\"space-between center\"\n          fxFlex=\"100%\"\n          [class.border-bottom]=\"!student?.opened\"\n        >\n          <div\n            fxLayout=\"column\"\n            fxLayoutAlign=\"start start\"\n            class=\"student-list__container__student__info\"\n          >\n            <span class=\"mat-subheading-1\">\n              {{ student?.firstName | titlecase }}\n              {{ student?.familyName | titlecase }}\n              {{\n                student?.enrollments?.length === 1 &&\n                student?.enrollments[0]?.sourceType === 'STUDY_GROUP'\n                  ? '(' + student.enrollments[0]?.studyGroup?.name + ')'\n                  : ''\n              }}\n              {{\n                student?.enrollments?.length === 1 && student?.enrollments[0]?.status === 'PENDING'\n                  ? '(pending)'\n                  : ''\n              }}\n              {{\n                student?.enrollments?.length === 1 &&\n                student?.enrollments[0]?.status === 'CONFIRMED'\n                  ? '(missing activation)'\n                  : ''\n              }}\n              {{\n                student?.enrollments?.length === 1 &&\n                student?.enrollments[0]?.status === 'CANCELLED'\n                  ? '(cancelled)'\n                  : ''\n              }}\n            </span>\n\n            <span *ngIf=\"student?.enrollments?.length === 1\" class=\"mat-body-2\">\n              {{ student?.enrollments[0]?.level?.module?.program?.label | titlecase }} -\n              {{ student?.enrollments[0]?.level?.label | titlecase }}\n            </span>\n          </div>\n\n          <div\n            *ngIf=\"\n              student?.enrollments?.length === 1 && student?.enrollments[0]?.status === 'ACTIVE'\n            \"\n          >\n            <button\n              mat-icon-button\n              color=\"primary\"\n              class=\"student-list__container__student__edit-button\"\n              (click)=\"onEdit(student?.enrollments[0]); $event.stopPropagation()\"\n            >\n              <mat-icon>edit</mat-icon>\n            </button>\n          </div>\n\n          <div\n            *ngIf=\"\n              student?.enrollments?.length === 1 && student?.enrollments[0]?.status === 'PENDING'\n            \"\n          >\n            <button\n              mat-icon-button\n              color=\"primary\"\n              class=\"student-list__container__student__edit-button\"\n              (click)=\"onCancel(student?.enrollments[0]); $event.stopPropagation()\"\n            >\n              <mat-icon>cancel</mat-icon>\n            </button>\n          </div>\n\n          <div *ngIf=\"student?.enrollments?.length > 1\">\n            <button\n              mat-icon-button\n              color=\"primary\"\n              class=\"student-list__container__student__edit-button\"\n              (click)=\"onOpenStudentEnrollments(student?.id); $event.stopPropagation()\"\n            >\n              <mat-icon>{{ student?.opened ? 'keyboard_arrow_up' : 'expand_more' }}</mat-icon>\n            </button>\n          </div>\n        </div>\n        <!-- MANY ENROLLMENTS -->\n        <div *ngIf=\"student?.opened\">\n          <div fxLayout=\"column\" fxLayoutAlign=\"start stretch\">\n            <div\n              *ngFor=\"let enrollment of student?.enrollments; let last = last\"\n              fxLayout=\"row\"\n              fxLayoutAlign=\"space-between center\"\n              fxFlex=\"100%\"\n              [class.border-bottom]=\"last\"\n              (click)=\"goToEnrollment(enrollment)\"\n            >\n              <div\n                fxLayout=\"column\"\n                fxLayoutAlign=\"start start\"\n                class=\"student-list__container__student__info--many-enrollments\"\n              >\n                <span class=\"mat-body-2\">\n                  {{ enrollment?.level?.module?.program?.label | titlecase }} -\n                  {{ enrollment?.level?.label | titlecase }}\n                  {{\n                    enrollment?.sourceType === 'STUDY_GROUP'\n                      ? '(' + enrollment?.studyGroup?.name + ')'\n                      : ''\n                  }}\n                  {{ enrollment?.status === 'PENDING' ? '(pending)' : '' }}\n                  {{ enrollment?.status === 'CONFIRMED' ? '(missing activation)' : '' }}\n                  {{ enrollment?.status === 'CANCELLED' ? '(cancelled)' : '' }}\n                </span>\n              </div>\n\n              <div *ngIf=\"enrollment?.status === 'ACTIVE'\">\n                <button\n                  mat-icon-button\n                  color=\"primary\"\n                  class=\"student-list__container__student__edit-button\"\n                  (click)=\"onEdit(enrollment); $event.stopPropagation()\"\n                >\n                  <mat-icon>edit</mat-icon>\n                </button>\n              </div>\n\n              <div *ngIf=\"enrollment?.status === 'PENDING'\">\n                <button\n                  mat-icon-button\n                  color=\"primary\"\n                  class=\"student-list__container__student__edit-button\"\n                  (click)=\"onCancel(student?.enrollments[0]); $event.stopPropagation()\"\n                >\n                  <mat-icon>cancel</mat-icon>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <!-- -- MANY ENROLLMENTS -->\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "SubscriptionActivePageComponent",
            "id": "component-SubscriptionActivePageComponent-a6585352cfa706b3ed1949f25eb436b8",
            "file": "src/app/authentication/pages/subscription-active-page/subscription-active-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-subscription-active-page",
            "styleUrls": [
                "./subscription-active-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./subscription-active-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "imageOptions",
                    "defaultValue": "{\n        src: '../../../../assets/images/backgrounds/auth-success.png',\n        width: 699,\n        height: 532,\n        alt: 'auth happy user',\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isLoadingSubscription",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "isSubscriptionActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "seconds",
                    "defaultValue": "COUNTDOWN_SECONDS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "timer$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "checkCurrentSubscription",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "redirectToApp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { SubscriptionService } from 'app/@core/services/subscription.service';\nimport { UserService } from 'app/@core/services/user.service';\nimport { interval } from 'rxjs';\nimport { Subject } from 'rxjs';\nimport { Subscription } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\n\nconst COUNTDOWN_SECONDS = 5;\n@Component({\n    selector: 'app-subscription-active-page',\n    templateUrl: './subscription-active-page.component.html',\n    styleUrls: ['./subscription-active-page.component.scss'],\n})\nexport class SubscriptionActivePageComponent implements OnInit, OnDestroy {\n    imageOptions = {\n        src: '../../../../assets/images/backgrounds/auth-success.png',\n        width: 699,\n        height: 532,\n        alt: 'auth happy user',\n    };\n\n    timer$: Subscription;\n    seconds = COUNTDOWN_SECONDS;\n\n    isLoadingSubscription = false;\n\n    isSubscriptionActive = false;\n\n    private destroy$ = new Subject<void>();\n\n    constructor(\n        private router: Router,\n        private subscriptionService: SubscriptionService,\n        private route: ActivatedRoute,\n        private userService: UserService,\n    ) {}\n\n    ngOnInit() {\n        this.checkCurrentSubscription();\n    }\n\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    checkCurrentSubscription() {\n        const sessionId = this.route.snapshot.queryParams.session_id;\n\n        if (!sessionId) {\n            return;\n        }\n\n        this.isLoadingSubscription = true;\n\n        this.subscriptionService\n            .getSubscriptionByCheckoutId(sessionId)\n            .valueChanges.pipe(takeUntil(this.destroy$))\n            .subscribe({\n                next: (res) => {\n                    const {\n                        data: { subscriptionByStripeCheckoutId },\n                    } = res;\n                    if (subscriptionByStripeCheckoutId) {\n                        const { status } = subscriptionByStripeCheckoutId;\n\n                        if (status === 'ACTIVE') {\n                            this.isSubscriptionActive = true;\n                            this.userService.setUserFromAuthToken().pipe(take(1)).subscribe();\n                            this.initTimer();\n                        }\n                    }\n                },\n            });\n    }\n\n    initTimer() {\n        this.timer$ = interval(1000)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe({\n                next: (tick) => {\n                    this.seconds = COUNTDOWN_SECONDS - (tick + 1);\n\n                    if (tick === COUNTDOWN_SECONDS - 1) {\n                        this.redirectToApp();\n                    }\n                },\n            });\n    }\n\n    redirectToApp() {\n        this.router.navigate(['/']);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./subscription-active-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "subscriptionService",
                        "type": "SubscriptionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "subscriptionService",
                        "type": "SubscriptionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-auth-layout [noBorder]=\"true\" [maxWidth]=\"'460px'\" [imageOptions]=\"imageOptions\">\n  <ng-container *ngIf=\"!isSubscriptionActive\">\n    <h1 class=\"text-primary text-center mat-display-1\">Checking your subscription status</h1>\n    <div fxLayout=\"column\" fxLayoutAlign=\"center center\">\n      <h1 class=\"text-primary text-center mat-title\" style=\"margin-top: 20px\">Please wait...</h1>\n      <mat-spinner diameter=\"40\" color=\"primary\" style=\"margin-top: 10px\"></mat-spinner>\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"isSubscriptionActive\">\n    <h1 class=\"text-primary text-center mat-display-2\">Your subscription is active.</h1>\n\n    <br />\n\n    <p class=\"text-center mat-input\" *ngIf=\"seconds > 0\">\n      Redirecting to the application in {{ seconds }} seconds...\n    </p>\n    <p class=\"text-center mat-input\" *ngIf=\"seconds === 0\">Redirecting...</p>\n\n    <div fxLayout=\"column\" fxLayoutAlign=\"center center\">\n      <p>or</p>\n\n      <button\n        mat-flat-button\n        color=\"primary\"\n        type=\"button\"\n        fxFlexAlign=\"center\"\n        (click)=\"redirectToApp()\"\n      >\n        go to application\n      </button>\n    </div>\n  </ng-container>\n</app-auth-layout>\n"
        },
        {
            "name": "SubscriptionPageComponent",
            "id": "component-SubscriptionPageComponent-680871eb6830f0204c78fb4a04dc38d2",
            "file": "src/app/subscription/pages/subscription-page/subscription-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-subscription-page",
            "styleUrls": [
                "./subscription-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./subscription-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "navigationTabsConfig",
                    "defaultValue": "{\n        links: [\n            { path: '../invoices', label: 'invoice', icon: 'receipt' },\n            { path: '../method', label: 'method', icon: 'payments' },\n        ],\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INavigationTabsConfig",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { INavigationTabsConfig } from 'app/@shared/components/navigation-tabs/navigation-tabs.component';\n\n@Component({\n    selector: 'app-subscription-page',\n    templateUrl: './subscription-page.component.html',\n    styleUrls: ['./subscription-page.component.scss'],\n})\nexport class SubscriptionPageComponent {\n    navigationTabsConfig: INavigationTabsConfig = {\n        links: [\n            { path: '../invoices', label: 'invoice', icon: 'receipt' },\n            { path: '../method', label: 'method', icon: 'payments' },\n        ],\n    };\n\n    constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./subscription-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "templateData": "<ng-template tpAttach=\"topBarStart\">\n    <app-eslo-letter-logo></app-eslo-letter-logo>\n    <app-top-bar-title text=\"Method\"></app-top-bar-title>\n  </ng-template>\n  \n  <ng-template tpAttach=\"topBarCenter\">\n    <app-navigation-tabs [navigationTabsConfig]=\"navigationTabsConfig\"></app-navigation-tabs>\n  </ng-template>\n  \n  <p>method</p>"
        },
        {
            "name": "SvgIconComponent",
            "id": "component-SvgIconComponent-dbb701cdad36cab599e72531c3767599",
            "file": "src/app/@shared/components/svg-icon/svg-icon.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-svg-icon",
            "styleUrls": [
                "./svg-icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./svg-icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "fill",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "stroke",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string"
                },
                {
                    "name": "svg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "svgSafeHtml",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SafeHtml",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { Input } from '@angular/core';\nimport { Component, OnInit } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\n@Component({\n    selector: 'app-svg-icon',\n    templateUrl: './svg-icon.component.html',\n    styleUrls: ['./svg-icon.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SvgIconComponent implements OnInit {\n    @Input() svg: string;\n    @Input() fill: string;\n    @Input() stroke: string;\n    @Input() style: string;\n\n    svgSafeHtml: SafeHtml;\n\n    constructor(private sanitizer: DomSanitizer, private http: HttpClient, private cdr: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        this.http.get(`../../../..${this.svg}`, { responseType: 'text' }).subscribe((logo) => {\n            // check fill or stroke with regex to check in between quotes\n            logo = logo.replace(/fill=([\"'])(?:\\\\.|[^\\\\])*?\\1/g, `fill=\"${this.fill}\"`);\n            logo = logo.replace(/stroke=([\"'])(?:\\\\.|[^\\\\])*?\\1/g, `stroke=\"${this.stroke}\"`);\n\n            // inject style in svg tag -> '<svg :style ...'\n            logo = logo.slice(0, 5) + `style=\"${this.style}\" ` + logo.slice(5);\n\n            this.svgSafeHtml = this.sanitizer.bypassSecurityTrustHtml(logo);\n            this.cdr.markForCheck();\n        });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./svg-icon.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [innerHTML]=\"svgSafeHtml\"></div>\n"
        },
        {
            "name": "TeacherDashboardCardComponent",
            "id": "component-TeacherDashboardCardComponent-b08888face506da8dd1f3cb9ebd69fe5",
            "file": "src/app/dashboard/components/teacher-dashboard-card/teacher-dashboard-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-teacher-dashboard-card",
            "styleUrls": [
                "./teacher-dashboard-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./teacher-dashboard-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "contentList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "ITeacherCardContent[]"
                },
                {
                    "name": "emptyMessage",
                    "defaultValue": "'Empty content'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "icon",
                    "defaultValue": "'pending_actions'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "title",
                    "defaultValue": "'schedule'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "goToEvent",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "goTo",
                    "args": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { ITeacherCardContent } from 'app/dashboard/pages/dashboard-page/dashboard-page.component';\n\n@Component({\n    selector: 'app-teacher-dashboard-card',\n    templateUrl: './teacher-dashboard-card.component.html',\n    styleUrls: ['./teacher-dashboard-card.component.scss'],\n})\nexport class TeacherDashboardCardComponent {\n    @Input() icon = 'pending_actions';\n    @Input() title = 'schedule';\n    @Input() emptyMessage = 'Empty content';\n\n    @Input() contentList: ITeacherCardContent[];\n\n    @Output() goToEvent = new EventEmitter<any>();\n\n    constructor() {}\n\n    goTo(content: any) {\n        this.goToEvent.emit(content);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/flex-layout/mq' as mq;\n\n.teacher-dashboard-card {\n    width: 100%;\n    height: 14rem;\n    border-radius: 14px;\n    border: 1px solid rgba(0, 0, 0, 0.12);\n    border-radius: 14px;\n    padding: 12px 0 12px 16px;\n\n    @include mq.layout-bp(gt-xs) {\n      width: 22.5rem;\n    }\n\n    &__header {\n        height: 56px;\n        padding-left: 4px;\n    }\n\n    &__content-list {\n        height: calc(100% - 50px);\n        overflow: auto;\n\n        &__item {\n            padding: 12px 16px 12px 0;\n            border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n            cursor: pointer;\n        }\n    }\n\n    mat-icon {\n        font-size: 32px;\n        width: 32px;\n        height: 32px;\n    }\n}\n",
                    "styleUrl": "./teacher-dashboard-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "templateData": "<div class=\"teacher-dashboard-card\">\n  <div\n    fxLayout=\"row\"\n    fxLayoutAlign=\"start center\"\n    fxLayoutGap=\"20px\"\n    class=\"teacher-dashboard-card__header\"\n  >\n    <mat-icon color=\"primary\">{{ icon }}</mat-icon>\n    <span class=\"mat-subheading-1\">{{ title | titlecase }}</span>\n  </div>\n\n  <div\n    *ngIf=\"!contentList || contentList?.length === 0\"\n    class=\"teacher-dashboard-card__content-list\"\n    fxLayout\n    fxLayoutAlign=\"center center\"\n  >\n    <span class=\"mat-subheading-1 text-default--fade\">{{ emptyMessage }}</span>\n  </div>\n  <div *ngIf=\"contentList?.length > 0\" class=\"teacher-dashboard-card__content-list\">\n    <div *ngFor=\"let content of contentList\">\n      <div\n        fxLayout=\"row\"\n        fxLayoutAlign=\"space-between center\"\n        class=\"teacher-dashboard-card__content-list__item\"\n        (click)=\"goTo(content)\"\n      >\n        <span class=\"mat-subheading-1 text-black-opacity-06\">{{ content.name }}</span>\n        <span class=\"mat-subheading-1 text-black-opacity-06\">{{ content.time }}</span>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "TopBarComponent",
            "id": "component-TopBarComponent-e4ed40f2d04e57fc732d1133430dc077",
            "file": "src/app/layout/components/top-bar/top-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-top-bar",
            "styleUrls": [
                "./top-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "top-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { MediaObserver } from '@angular/flex-layout';\n\n@Component({\n    selector: 'app-top-bar',\n    templateUrl: 'top-bar.component.html',\n    styleUrls: ['./top-bar.component.scss'],\n})\nexport class TopBarComponent {\n    constructor(private mediaObserver: MediaObserver) {}\n\n    get isMobile() {\n        return this.mediaObserver.isActive('xs');\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n@use '~@angular/flex-layout/mq' as mq;\n\n@mixin top-bar-theme($theme) {\n    $primary: mat.get-color-from-palette(map-get($theme, primary));\n\n    .top-bar {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: space-between;\n        padding: 10px 20px 0 18px;\n\n        @include mq.layout-bp(gt-xs) {\n            flex-direction: row;\n            align-items: center;\n            justify-content: space-between;\n            height: 56px;\n            padding: 28px 28px 28px 26px;\n        }\n\n        &__center {\n            display: flex;\n            justify-content: center;\n            align-items: flex-end;\n            max-height: 104px;\n            margin-top: 8px;\n\n            @include mq.layout-bp(gt-xs) {\n                align-self: none;\n                height: unset;\n                margin-top: 0;\n            }\n        }\n    }\n}\n",
                    "styleUrl": "./top-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "isMobile": {
                    "name": "isMobile",
                    "getSignature": {
                        "name": "isMobile",
                        "type": "",
                        "returnType": "",
                        "line": 12
                    }
                }
            },
            "templateData": "<!-- TODO: TOP BAR BELOW TEMPLATE -->\n\n<div class=\"top-bar\">\n    <ng-container *ngIf=\"isMobile; then mobile; else greaterMobile\">\n        <ng-content></ng-content>\n    </ng-container>\n</div>\n\n<ng-template #mobile>\n    <div fxLayout=\"column\" fxLayoutAlign=\"center space-between\">\n        <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n            <div class=\"top-bar__start\">\n                <ng-container tpTarget=\"topBarStart\"></ng-container>\n            </div>\n\n            <div class=\"top-bar__end\">\n                <ng-container tpTarget=\"topBarEnd\"></ng-container>\n                <app-user-button></app-user-button>\n            </div>\n        </div>\n\n        <div class=\"top-bar__center\">\n            <ng-container tpTarget=\"topBarCenter\"></ng-container>\n        </div>\n    </div>\n</ng-template>\n\n<ng-template #greaterMobile>\n    <div class=\"top-bar__start\">\n        <ng-container tpTarget=\"topBarStart\"></ng-container>\n    </div>\n\n    <div class=\"top-bar__center\">\n        <ng-container tpTarget=\"topBarCenter\"></ng-container>\n    </div>\n\n    <div class=\"top-bar__end\">\n        <ng-container tpTarget=\"topBarEnd\"></ng-container>\n        <app-user-button></app-user-button>\n    </div>\n</ng-template>\n"
        },
        {
            "name": "TopBarTitleComponent",
            "id": "component-TopBarTitleComponent-6783a9ec2c3288fe6ac849d913cebed0",
            "file": "src/app/@shared/components/top-bar-title/top-bar-title.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-top-bar-title",
            "styleUrls": [
                "./top-bar-title.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./top-bar-title.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "text",
                    "defaultValue": "'eslo'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'app-top-bar-title',\n    templateUrl: './top-bar-title.component.html',\n    styleUrls: ['./top-bar-title.component.scss'],\n})\nexport class TopBarTitleComponent {\n    @Input() text = 'eslo';\n\n    constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n@use '~@angular/flex-layout/mq' as mq;\n\n@mixin top-bar-title-theme($theme) {\n    $primary: mat.get-color-from-palette(map-get($theme, primary));\n    .top-bar-title {\n        color: $primary;\n        margin: 0;\n        padding-left: 28px;\n\n        @include mq.layout-bp(gt-xs) {\n            font-weight: normal;\n            font-size: 19px;\n            line-height: 24px;\n            letter-spacing: 0.15px;\n        }\n    }\n}\n",
                    "styleUrl": "./top-bar-title.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "templateData": "<span class=\"mat-subheading-1 top-bar-title\">{{ text }}</span>\n"
        },
        {
            "name": "TransferComponent",
            "id": "component-TransferComponent-ad73ff85c758d23e07ee36df05ed990d",
            "file": "src/app/main/invitation/transfer/transfer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-transfer",
            "styleUrls": [
                "./transfer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./transfer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_unsubscribeAll",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "invitationForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "acceptInvitation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refuseInvitation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showDialogTermsAndConditions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Subject } from 'rxjs';\n\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { TransferService } from './transfer.service';\nimport { ModalTermsConditionsComponent } from '../welcome/modal-terms-conditions/modal-terms-conditions.component';\n\n@Component({\n    selector: 'app-transfer',\n    templateUrl: './transfer.component.html',\n    styleUrls: ['./transfer.component.scss'],\n})\nexport class TransferComponent implements OnInit, OnDestroy {\n    invitationForm: FormGroup;\n\n    private _unsubscribeAll: Subject<any>;\n\n    constructor(\n        private _formBuilder: FormBuilder,\n        private router: Router,\n        private Dialog: MatDialog,\n        private transferService: TransferService,\n    ) {\n        // Set the private defaults\n        this._unsubscribeAll = new Subject();\n    }\n\n    ngOnInit(): void {\n        this.invitationForm = this._formBuilder.group({\n            terms: ['', Validators.requiredTrue],\n        });\n    }\n\n    ngOnDestroy(): void {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next();\n        this._unsubscribeAll.complete();\n    }\n\n    showDialogTermsAndConditions(): void {\n        this.Dialog.open(ModalTermsConditionsComponent);\n    }\n\n    acceptInvitation(): void {\n        this.transferService.invitationRequest('confirm').subscribe(\n            (res) => {\n                const status = 'accepted';\n                if (res.status === 200) {\n                    this.router.navigate(['/invitation/message', status]);\n                }\n            },\n            (err) => {\n                const status = 'failed';\n                this.router.navigate(['/invitation/message', status]);\n            },\n        );\n    }\n\n    refuseInvitation(): void {\n        this.transferService.invitationRequest('decline').subscribe(\n            (res) => {\n                const status = 'rejected';\n                if (res.status === 200) {\n                    this.router.navigate(['/invitation/message', status]);\n                }\n            },\n            (err) => {\n                const status = 'failed';\n                this.router.navigate(['/invitation/message', status]);\n            },\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".text-center {\n  text-align: center;\n}\n\ninvitation-welcome {\n  #register {\n      width: 100%;\n      padding: 128px;\n      margin-top: 128px;\n      overflow: hidden;\n      background: url('/assets/images/backgrounds/banner-logoless.jpg') no-repeat;\n      background-size: cover;\n\n      #register-intro {\n          .logo {\n              width: 128px;\n              margin-bottom: 32px;\n          }\n\n          .title {\n              font-size: 60px;\n              font-weight: 600;\n              line-height: 1;\n          }\n\n          .description {\n              padding-top: 4px;\n              font-size: 16px;\n              font-weight: 600;\n              max-width: 600px;\n          }\n      }\n\n      #register-form-wrapper {\n          width: 400px;\n          min-width: 400px;\n          max-width: 400px;\n          overflow: auto;\n          -webkit-overflow-scrolling: touch;\n          padding: 128px 48px 48px 48px;\n\n          #register-form {\n              padding: 128px 48px 48px 48px;\n\n              .logo {\n                  width: 128px;\n                  margin: 32px auto;\n              }\n\n              .title {\n                  text-align: center;\n                  font-size: 21px;\n              }\n\n              .description {\n                  padding-top: 8px;\n              }\n\n              form {\n                  width: 100%;\n\n                  mat-form-field {\n                      width: 100%;\n                  }\n\n                  mat-checkbox {\n                      margin: 0;\n                  }\n\n                  .terms {\n                      margin: 16px 0 32px 0;\n\n                      a {\n                          cursor: pointer;\n                          font-size: 16px;\n                          margin-left: 4px;\n                      }\n                  }\n\n                  .submit-button {\n                      width: 100%;\n                      margin: 16px auto;\n                      display: block;\n                  }\n              }\n\n              .separator {\n                  font-size: 15px;\n                  font-weight: 600;\n                  margin: 24px auto;\n                  position: relative;\n                  overflow: hidden;\n                  width: 100px;\n                  text-align: center;\n\n                  .text {\n                      display: inline-flex;\n                      position: relative;\n                      padding: 0 8px;\n                      z-index: 9999;\n\n                      &:before,\n                      &:after {\n                          content: '';\n                          display: block;\n                          width: 30px;\n                          position: absolute;\n                          top: 10px;\n                          border-top: 1px solid;\n                      }\n\n                      &:before {\n                          right: 100%;\n                      }\n\n                      &:after {\n                          left: 100%;\n                      }\n                  }\n              }\n\n              button {\n                  &.google,\n                  &.facebook {\n                      width: 100%;\n                      text-transform: none;\n                      color: #ffffff;\n                      font-size: 13px;\n\n                      mat-icon {\n                          color: #ffffff;\n                          margin: 0 8px 0 0;\n                      }\n                  }\n\n                  &.google {\n                      background-color: #d73d32;\n                      margin-bottom: 8px;\n                  }\n\n                  &.facebook {\n                      background-color: rgb(63, 92, 154);\n                  }\n              }\n          }\n      }\n  }\n}\n#register-form {\n  padding: 128px 48px 48px 48px;\n}   \n",
                    "styleUrl": "./transfer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "transferService",
                        "type": "TransferService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "Dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transferService",
                        "type": "TransferService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-auth-layout>\n  <div class=\"title mat-h1 primary-700-fg text-center\">Transferência de matrícula!</div>\n\n  <form name=\"invitationForm\" [formGroup]=\"invitationForm\" novalidate>\n    <p class=\"mat-h3 text-center mb-16\">Seu professor transferiu sua matrícula.</p>\n    <p class=\"mat-body text-center\">\n      Leia os termos de serviço e aceite o convite para ter acesso a plataforma.\n    </p>\n\n    <div class=\"terms mat-body-1\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n      <mat-checkbox formControlName=\"terms\" name=\"terms\" aria-label=\"Accept\" required>\n        <span>Eu aceito os </span>\n        <a (click)=\"showDialogTermsAndConditions()\"> termos de serviço</a>\n      </mat-checkbox>\n    </div>\n\n    <div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"20px\" style=\"margin-top: 20px\">\n      <button\n        mat-button\n        color=\"warn\"\n        class=\"submit-button\"\n        aria-label=\"Refuse Invitation\"\n        (click)=\"refuseInvitation()\"\n      >\n        Rejeitar\n      </button>\n      <button\n        mat-raised-button\n        color=\"primary\"\n        class=\"submit-button\"\n        aria-label=\"Accept Invitation\"\n        [disabled]=\"invitationForm.invalid\"\n        (click)=\"acceptInvitation()\"\n      >\n        Aceitar\n      </button>\n    </div>\n  </form>\n</app-auth-layout>\n"
        },
        {
            "name": "UserButtonComponent",
            "id": "component-UserButtonComponent-34af7ad0c61d7b5743c2fa641afd5958",
            "file": "src/app/@shared/components/user-button/user-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-button",
            "styleUrls": [
                "./user-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loggedUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserProfile",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "redirectToHelpPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "redirectToTermsPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { UserProfile } from 'app/@core/models/user-profile.model';\nimport { UserService } from 'app/@core/services/user.service';\n\n@Component({\n    selector: 'app-user-button',\n    templateUrl: './user-button.component.html',\n    styleUrls: ['./user-button.component.scss'],\n})\nexport class UserButtonComponent implements OnInit {\n    loggedUser: UserProfile;\n\n    constructor(private userService: UserService) {}\n\n    ngOnInit() {\n        this.userService.loggedUser.subscribe((currentUser) => (this.loggedUser = currentUser));\n    }\n\n    logout() {\n        this.userService.logout();\n    }\n\n    redirectToTermsPage(): void {\n        window.open('http://eslo.com.br/termos-e-condicoes/', '_blank');\n    }\n\n    redirectToHelpPage(): void {\n        window.open('http://eslo.com.br/help/', '_blank');\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n@use '~@angular/flex-layout/mq' as mq;\n\n@mixin user-button-theme($theme) {\n    $accent: mat.get-color-from-palette(map-get($theme, accent), 300);\n\n    .user-button {\n        padding: 0;\n        min-width: 40px;\n        margin-left: 16px;\n\n        &__content {\n            border-radius: 50%;\n\n            &__avatar {\n                border-radius: 50%;\n                background-color: $accent;\n                color: #ffffff;\n                text-align: center;\n                line-height: 40px;\n                margin: 0;\n                text-transform: uppercase;\n                transition: 0.3s;\n                opacity: 1;\n            }\n        }\n    }\n}\n",
                    "styleUrl": "./user-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button *ngIf=\"loggedUser\" mat-button class=\"user-button\" [matMenuTriggerFor]=\"menu\">\n  <app-avatar\n    color=\"accent\"\n    [text]=\"loggedUser.firstName[0] + ' ' + loggedUser.familyName[0]\"\n  ></app-avatar>\n</button>\n\n<mat-menu #menu=\"matMenu\">\n  <button mat-menu-item routerLink=\"profile/account\">\n    <mat-icon>account_circle</mat-icon>\n    Profile\n  </button>\n  <button mat-menu-item (click)=\"redirectToHelpPage()\">\n    <mat-icon>help</mat-icon>\n    Help\n  </button>\n  <button mat-menu-item (click)=\"redirectToTermsPage()\">\n    <mat-icon>gavel</mat-icon>\n    Terms of Service\n  </button>\n  <button mat-menu-item (click)=\"logout()\">\n    <mat-icon>exit_to_app</mat-icon>\n    Log out\n  </button>\n</mat-menu>\n"
        },
        {
            "name": "UserPageComponent",
            "id": "component-UserPageComponent-caa16c8167cf913ad84c47ccf865012d",
            "file": "src/app/profile/pages/user-page/user-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-page",
            "styleUrls": [
                "./user-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "user-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "links",
                    "defaultValue": "[accountPath, passwordPath]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "navigationTabsConfig",
                    "defaultValue": "{\n        links: [\n            { path: accountPath, icon: 'account_box' },\n            { path: passwordPath, icon: 'lock_outline' },\n        ],\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INavigationTabsConfig",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy } from '@angular/core';\nimport { Router, NavigationEnd } from '@angular/router';\nimport { INavigationTabsConfig } from 'app/@shared/components/navigation-tabs/navigation-tabs.component';\n\nimport { Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { accountPath, passwordPath } from '../../profile.module';\n\n@Component({\n    selector: 'app-user-page',\n    templateUrl: 'user-page.component.html',\n    styleUrls: ['./user-page.component.scss'],\n})\nexport class UserPageComponent implements OnDestroy {\n    links = [accountPath, passwordPath];\n    activeLink: string;\n\n    navigationTabsConfig: INavigationTabsConfig = {\n        links: [\n            { path: accountPath, icon: 'account_box' },\n            { path: passwordPath, icon: 'lock_outline' },\n        ],\n    };\n\n    private destroy$ = new Subject<void>();\n\n    constructor(private router: Router) {\n        // check path of current route to activate the right tab\n        this.router.events\n            .pipe(\n                takeUntil(this.destroy$),\n                filter((evt) => evt instanceof NavigationEnd),\n            )\n            .subscribe({\n                next: ({ url }: NavigationEnd) => {\n                    const currentPath = url.split('/').pop();\n                    this.activeLink = this.links.find((link) => link === currentPath);\n                },\n            });\n    }\n\n    ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/flex-layout/mq' as mq;\n\n.profile-content {\n    padding: 16px;\n\n    @include mq.layout-bp(gt-xs) {\n        padding: 24px;\n    }\n}\n\na.mat-tab-link {\n    text-decoration: none !important;\n}\n",
                    "styleUrl": "./user-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<ng-template tpAttach=\"topBarStart\">\n    <app-eslo-letter-logo></app-eslo-letter-logo>\n    <app-top-bar-title text=\"Profile\"></app-top-bar-title>\n</ng-template>\n\n<ng-template tpAttach=\"topBarCenter\">\n    <app-navigation-tabs [navigationTabsConfig]=\"navigationTabsConfig\"></app-navigation-tabs>\n</ng-template>\n\n<div class=\"page-layout simple fullwidth\" fxLayout=\"column\">\n    <div class=\"profile-content\">\n        <router-outlet></router-outlet>\n    </div>\n</div>\n"
        },
        {
            "name": "UserPasswordPageComponent",
            "id": "component-UserPasswordPageComponent-1e39eddfe981a4272f5442c4f3a9ef83",
            "file": "src/app/profile/pages/user-password-page/user-password-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-password-page",
            "styleUrls": [
                "./user-password-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-password-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "userPasswordForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "createUserPasswordForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms';\n\nimport { switchMap } from 'rxjs/operators';\n\nimport { UserService } from 'app/@core/services/user.service';\n\nexport class PasswordValidation {\n    static MatchPassword(ac: AbstractControl): void {\n        const password = ac.get('password').value;\n        const passwordConfirm = ac.get('passwordConfirm').value;\n        if (password !== passwordConfirm) {\n            return ac.get('passwordConfirm').setErrors({ matchPassword: true });\n        }\n\n        return;\n    }\n}\n\n@Component({\n    selector: 'app-user-password-page',\n    templateUrl: './user-password-page.component.html',\n    styleUrls: ['./user-password-page.component.scss'],\n})\nexport class UserPasswordPageComponent implements OnInit {\n    userPasswordForm: FormGroup;\n\n    constructor(private formBuilder: FormBuilder, private userService: UserService) {}\n\n    ngOnInit(): void {\n        this.createUserPasswordForm();\n    }\n\n    createUserPasswordForm(): void {\n        this.userPasswordForm = this.formBuilder.group(\n            {\n                oldPassword: [\n                    null,\n                    Validators.compose([\n                        Validators.required,\n                        Validators.minLength(8),\n                        Validators.maxLength(28),\n                        Validators.pattern(/^(?=.*[A-Z])(?=.*[\\W])(?=.*[0-9])(?=.*[a-z]).{8,64}$/),\n                    ]),\n                ],\n                password: [\n                    '',\n                    Validators.compose([\n                        Validators.required,\n                        Validators.minLength(8),\n                        Validators.maxLength(28),\n                        Validators.pattern(/^(?=.*[A-Z])(?=.*[\\W])(?=.*[0-9])(?=.*[a-z]).{8,64}$/),\n                    ]),\n                ],\n                passwordConfirm: ['', [Validators.required]],\n            },\n            { validator: PasswordValidation.MatchPassword },\n        );\n    }\n\n    onUpdate(): void {\n        const { oldPassword, password: newPassword } = this.userPasswordForm.value;\n\n        this.userService.loggedUser\n            .pipe(\n                switchMap((user) => {\n                    const changePasswordInput = {\n                        userEmail: user.primaryEmail,\n                        oldPassword,\n                        newPassword,\n                    };\n\n                    return this.userService.changePassword(changePasswordInput);\n                }),\n            )\n            .subscribe({\n                next: () => {\n                    // TODO: confirmation message?\n                },\n            });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/flex-layout/mq' as mq;\n\n.form-width {\n    max-width: 100%;\n\n    @include mq.layout-bp(gt-xs) {\n        max-width: 33%;\n    }\n}\n",
                    "styleUrl": "./user-password-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form fxLayout=\"column\" [formGroup]=\"userPasswordForm\">\n  <div fxLayout=\"column\" fxLayoutAlign=\"start stretch\" fxLayoutGap=\"10px\">\n    <mat-form-field appearance=\"outline\" class=\"form-width\">\n      <mat-label>Old password</mat-label>\n      <input matInput type=\"password\" formControlName=\"oldPassword\" />\n      <mat-error *ngIf=\"userPasswordForm.get('oldPassword').hasError('required')\">\n        Old password is required\n      </mat-error>\n      <mat-error *ngIf=\"!userPasswordForm.get('oldPassword').hasError('required')\">\n        Passwords must be at 8-28 characters and contain at least 1 uppercase, 1 lowercase, 1 number\n        and 1 special character\n      </mat-error>\n    </mat-form-field>\n\n    <div\n      fxLayout.xs=\"column\"\n      fxLayoutAlign.xs=\"start stretch\"\n      fxLayoutGap.xs=\"16px\"\n      fxLayout.gt-xs=\"row\"\n      fxLayoutAlign.gt-xs=\"start start\"\n      fxLayoutGap.gt-xs=\"24px\"\n    >\n      <mat-form-field appearance=\"outline\" fxFlex.gt-xs=\"33\">\n        <mat-label>New password</mat-label>\n        <input matInput type=\"password\" formControlName=\"password\" />\n        <mat-error *ngIf=\"userPasswordForm.get('password').hasError('required')\">\n          New password is required\n        </mat-error>\n        <mat-error *ngIf=\"!userPasswordForm.get('password').hasError('required')\">\n          Passwords must be at 8-28 characters and contain at least 1 uppercase, 1 lowercase, 1\n          number and 1 special character\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"outline\" fxFlex.gt-xs=\"33\">\n        <mat-label>Confirm Password</mat-label>\n        <input matInput type=\"password\" formControlName=\"passwordConfirm\" />\n        <mat-error *ngIf=\"userPasswordForm.get('passwordConfirm').hasError('required')\">\n          Password confirmation is required\n        </mat-error>\n        <mat-error\n          *ngIf=\"\n            !userPasswordForm.get('passwordConfirm').hasError('required') &&\n            userPasswordForm.get('passwordConfirm').getError('matchPassword')\n          \"\n          >Passwords must match\n        </mat-error>\n      </mat-form-field>\n    </div>\n  </div>\n\n  <div fxLayout=\"row\" fxLayoutAlign=\"center center\">\n    <button\n      mat-flat-button\n      type=\"button\"\n      color=\"primary\"\n      (click)=\"onUpdate()\"\n      [disabled]=\"userPasswordForm.invalid\"\n      style=\"border-radius: 28px\"\n    >\n      Save\n    </button>\n  </div>\n</form>\n"
        },
        {
            "name": "UserProfileFormComponent",
            "id": "component-UserProfileFormComponent-335ef0b3b2bec96476f1930b5438f171",
            "file": "src/app/profile/components/user-profile-form/user-profile-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-profile-form",
            "styleUrls": [
                "./user-profile-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-profile-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addressInputComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AddressInputComponent",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "AddressInputComponent"
                        }
                    ]
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "isSaving",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "userAddress",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserAddress",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "userIdentification",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserIdentification",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "userPhoneNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserPhoneNumber",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "userProfile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserProfile",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "userProfileForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "createUserForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveUserProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Router } from '@angular/router';\nimport { UserProfile, UserIdentification, UserPhoneNumber, UserAddress } from 'app/@core/models/user-profile.model';\nimport { UserService } from 'app/@core/services/user.service';\nimport { AddressInputComponent } from 'app/@shared/components/forms/address-input/address-input.component';\n@Component({\n    selector: 'app-user-profile-form',\n    templateUrl: './user-profile-form.component.html',\n    styleUrls: ['./user-profile-form.component.scss'],\n})\nexport class UserProfileFormComponent implements AfterViewInit {\n    @ViewChild(AddressInputComponent)\n    addressInputComponent: AddressInputComponent;\n\n    userProfile: UserProfile;\n    userIdentification: UserIdentification;\n    userPhoneNumber: UserPhoneNumber;\n    userAddress: UserAddress = {};\n\n    userProfileForm: FormGroup;\n\n    isSaving = false;\n    errorMessage = '';\n\n    constructor(\n        private router: Router,\n        private formBuilder: FormBuilder,\n        private matSnackBar: MatSnackBar,\n        private userService: UserService,\n    ) {}\n\n    ngAfterViewInit(): void {\n        setTimeout(() => {\n            this.userService.getUserProfile().subscribe((userProfile: UserProfile) => {\n                this.userProfile = { ...userProfile };\n                delete this.userProfile.id;\n                delete (this.userProfile as any).__typename;\n\n                if (this.userProfile.dateOfBirth) {\n                    this.userProfile.dateOfBirth = new Date(parseInt(this.userProfile.dateOfBirth, 10)).toISOString();\n                }\n\n                if (this.userProfile.userIdentificationList && this.userProfile.userIdentificationList.length > 0) {\n                    this.userIdentification = this.userProfile.userIdentificationList[0];\n                } else {\n                    this.userIdentification = {\n                        countryISO: 'BR',\n                        category: 'CPF_CNPJ',\n                        code: '',\n                    };\n                    this.userProfile.userIdentificationList = [this.userIdentification];\n                }\n\n                if (this.userProfile.userPhoneNumbers && this.userProfile.userPhoneNumbers.length > 0) {\n                    this.userPhoneNumber = this.userProfile.userPhoneNumbers[0];\n                } else {\n                    this.userPhoneNumber = {\n                        countryISO: 'BR',\n                        category: 'PRIMARY',\n                        code: 'MOBILE',\n                        rawFormat: '',\n                    };\n                    this.userProfile.userPhoneNumbers = [this.userPhoneNumber];\n                }\n\n                if (this.userProfile.userAddresses && this.userProfile.userAddresses.length > 0) {\n                    this.userAddress = this.userProfile.userAddresses[0];\n                } else {\n                    const userAddress = { countryISO: 'BR', addressType: 'BILLING' };\n                    this.userProfile.userAddresses = [userAddress];\n                }\n\n                this.createUserForm();\n            });\n        });\n    }\n\n    createUserForm(): void {\n        this.userProfileForm = this.formBuilder.group({\n            email: [this.userProfile.primaryEmail],\n            firstName: [\n                this.userProfile.firstName,\n                Validators.compose([Validators.required, Validators.pattern('^[A-Za-zñÑáéíóúÁÉÍÓÚ ]+$')]),\n            ],\n            familyName: [\n                this.userProfile.familyName,\n                Validators.compose([Validators.required, Validators.pattern('^[A-Za-zñÑáéíóúÁÉÍÓÚ ]+$')]),\n            ],\n            // dateOfBirth: [this.userProfile.dateOfBirth, Validators.required],\n            documentId: [this.userIdentification.code, Validators.required],\n            // phoneNumber: [\n            //     this.userPhoneNumber.rawFormat,\n            //     Validators.compose([Validators.required, Validators.minLength(10), Validators.maxLength(11)]),\n            // ],\n        });\n    }\n\n    saveUserProfile(): void {\n        this.isSaving = true;\n\n        try {\n            this.errorMessage = '';\n\n            const updatedUserProfile = this.userProfileForm.getRawValue();\n            this.userProfile.firstName = updatedUserProfile.firstName;\n            this.userProfile.familyName = updatedUserProfile.familyName;\n            this.userProfile.dateOfBirth = updatedUserProfile.dateOfBirth;\n\n            const userProfile = JSON.parse(JSON.stringify(this.userProfile));\n\n            delete (userProfile.userIdentificationList[0] as any).__typename;\n            delete (userProfile.userAddresses[0] as any).__typename;\n            delete userProfile.__typename;\n            delete userProfile.id;\n\n            userProfile.userIdentificationList[0].code = updatedUserProfile.documentId;\n            delete userProfile.userPhoneNumbers;\n\n            const updatedAddress = this.addressInputComponent.formAddress.getRawValue();\n            userProfile.userAddresses[0].postalCode = updatedAddress.postalCode;\n            userProfile.userAddresses[0].street = updatedAddress.street;\n            userProfile.userAddresses[0].streetNumber = updatedAddress.streetNumber;\n            userProfile.userAddresses[0].streetComplement = updatedAddress.streetComplement;\n            userProfile.userAddresses[0].district = updatedAddress.district;\n            userProfile.userAddresses[0].city = updatedAddress.city;\n            userProfile.userAddresses[0].state = updatedAddress.state;\n\n            this.userService.updateMyProfile(userProfile).subscribe((updatedUser: UserProfile) => {\n                this.isSaving = false;\n                if (updatedUser) {\n                    this.userProfile = updatedUser;\n                    this.matSnackBar.open('Profile updated successfully', 'OK', {\n                        duration: 0,\n                        panelClass: ['snackbar-panel', 'snackbar-panel--one-line'],\n                    });\n                } else {\n                    // this.errorMessage = 'Your profile could not be saved.';\n                    this.matSnackBar.open('Your profile could not be saved.', 'OK', {\n                        duration: 0,\n                        panelClass: ['snackbar-panel', 'snackbar-panel--one-line'],\n                    });\n                }\n            });\n        } catch (error) {\n            this.isSaving = false;\n            this.errorMessage = 'An error ocurred while saving your profile.';\n            console.error('error saving profile', error);\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/flex-layout/mq' as mq;\n\n.user-profile-form {\n    margin-top: 16px;\n\n    @include mq.layout-bp(gt-xs) {\n        margin-top: 24px;\n    }\n}\n",
                    "styleUrl": "./user-profile-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "matSnackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matSnackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div *ngIf=\"userProfileForm && userProfile\">\n  <div *ngIf=\"userProfile?.profileComplete === false\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n    <div fxLayout fxLayoutAlign=\"start center\" fxLayoutGap=\"12px\" fxFlex=\"start\">\n      <mat-icon color=\"warn\"> priority_high </mat-icon>\n      <div\n        fxLayout.xs=\"column\"\n        fxLayout.gt-xs=\"row\"\n        fxLayoutAlign.gt-xs=\"start center\"\n        fxLayoutAlign.xs=\"start start\"\n        fxLayoutGap=\"12px\"\n        fxFlex=\"start\"\n      >\n        <h5 class=\"mat-button-text text-warn\">YOUR PROFILE IS INCOMPLETE.</h5>\n        <small>Please finish it to access the platform.</small>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"userProfile?.profileComplete === true\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n    <div fxLayout fxLayoutAlign=\"start center\" fxLayoutGap=\"12px\" fxFlex=\"start\">\n      <mat-icon color=\"primary\"> verified_user </mat-icon>\n      <h5 class=\"mat-button-text text-primary\">YOUR PROFILE IS COMPLETE.</h5>\n    </div>\n  </div>\n\n  <form\n    fxLayout.xs=\"column\"\n    fxLayoutGap.xs=\"12px\"\n    fxLayout.gt-xs=\"row wrap\"\n    fxLayoutGap.gt-xs=\"24px\"\n    [formGroup]=\"userProfileForm\"\n    class=\"user-profile-form\"\n    style=\"margin-top: 24px;\"\n  >\n    <mat-form-field appearance=\"outline\" fxFlex=\"30\">\n      <mat-label>Email</mat-label>\n      <input matInput formControlName=\"email\" [disableControl]=\"true\" />\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\" fxFlex=\"30\">\n      <mat-label>First Name</mat-label>\n      <input matInput formControlName=\"firstName\" />\n\n      <mat-error *ngIf=\"userProfileForm.get('firstName').hasError('required')\">\n        First Name is required\n      </mat-error>\n      <mat-error *ngIf=\"!userProfileForm.get('firstName').hasError('required')\">\n        Please enter a valid First Name\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\" fxFlex=\"30\">\n      <mat-label>Last Name</mat-label>\n      <input matInput formControlName=\"familyName\" />\n\n      <mat-error *ngIf=\"userProfileForm.get('familyName').hasError('required')\">\n        Last Name is required\n      </mat-error>\n      <mat-error *ngIf=\"!userProfileForm.get('familyName').hasError('required')\">\n        Please enter a valid Last Name\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\" fxFlex=\"30\">\n      <mat-label>CPF/CNPJ</mat-label>\n      <input\n        matInput\n        formControlName=\"documentId\"\n        mask=\"CPF_CNPJ\"\n        [showMaskTyped]=\"true\"\n        [validation]=\"true\"\n        placeHolderCharacter=\" \"\n      />\n\n      <mat-error *ngIf=\"userProfileForm.get('documentId').hasError('required')\">\n        CPF or CNPJ is required\n      </mat-error>\n      <mat-error *ngIf=\"!userProfileForm.get('documentId').hasError('required')\">\n        Please enter a valid CPF or CNPJ\n      </mat-error>\n    </mat-form-field>\n\n    <!-- <mat-form-field appearance=\"outline\" fxFlex=\"30\">\n      <mat-label>Date of Birth</mat-label>\n      <input matInput formControlName=\"dateOfBirth\" [matDatepicker]=\"picker\" />\n      <mat-datepicker-toggle matSuffix [for]=\"picker\">\n        <mat-icon matDatepickerToggleIcon>keyboard_arrow_down</mat-icon>\n      </mat-datepicker-toggle>\n      <mat-datepicker #picker></mat-datepicker>\n      <mat-error *ngIf=\"userProfileForm.get('dateOfBirth').hasError('required')\">\n        Date of Birth is required\n      </mat-error>\n      <mat-error *ngIf=\"!userProfileForm.get('dateOfBirth').hasError('required')\">\n        Please enter a valid Date of Birth\n      </mat-error>\n    </mat-form-field> -->\n\n    <!-- <mat-form-field appearance=\"outline\" fxFlex=\"30\">\n      <mat-label>Phone Number</mat-label>\n      <input\n        matInput\n        type=\"tel\"\n        formControlName=\"phoneNumber\"\n        mask=\"(00) 0000-00009\"\n        [showMaskTyped]=\"true\"\n        [validation]=\"true\"\n        placeHolderCharacter=\" \"\n      />\n\n      <mat-error *ngIf=\"userProfileForm.get('phoneNumber').hasError('required')\">\n        Phone Number is required\n      </mat-error>\n      <mat-error *ngIf=\"!userProfileForm.get('phoneNumber').hasError('required')\">\n        Please enter a valid Phone Number\n      </mat-error>\n    </mat-form-field> -->\n  </form>\n\n  <app-address-input [address]=\"userAddress\"></app-address-input>\n\n  <div fxLayout=\"column\" fxLayoutAlign=\"center center\">\n    <div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"20px\">\n      <button\n        mat-flat-button\n        type=\"button\"\n        color=\"primary\"\n        (click)=\"saveUserProfile()\"\n        [disabled]=\"!!userProfileForm?.invalid || !!addressInputComponent?.formAddress?.invalid\"\n        style=\"border-radius: 28px;\"\n      >\n        Save\n      </button>\n    </div>\n    <mat-progress-spinner\n      *ngIf=\"isSaving\"\n      class=\"mt-12\"\n      diameter=\"48\"\n      mode=\"indeterminate\"\n    ></mat-progress-spinner>\n    <span *ngIf=\"errorMessage !== ''\" class=\"mt-24 mat-body-2 warn-500-fg\">{{ errorMessage }}</span>\n  </div>\n</div>\n"
        },
        {
            "name": "UserProfilePageComponent",
            "id": "component-UserProfilePageComponent-4c7644305919c408f4ae6bf757b504d3",
            "file": "src/app/profile/pages/user-profile-page/user-profile-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-profile-page",
            "styleUrls": [
                "./user-profile-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-profile-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addressInputComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AddressInputComponent",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "AddressInputComponent"
                        }
                    ],
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "isSaving",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "userAddress",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserAddress",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "userIdentification",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserIdentification",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "userPhoneNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserPhoneNumber",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "userProfile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserProfile",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "userProfileForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "createUserForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveUserProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, AfterViewInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { UserAddress, UserIdentification, UserPhoneNumber, UserProfile } from 'app/@core/models/user-profile.model';\nimport { UserService } from 'app/@core/services/user.service';\n\nimport { AddressInputComponent } from 'app/@shared/components/forms/address-input/address-input.component';\n\n@Component({\n    selector: 'app-user-profile-page',\n    templateUrl: './user-profile-page.component.html',\n    styleUrls: ['./user-profile-page.component.scss'],\n})\nexport class UserProfilePageComponent implements AfterViewInit {\n    @ViewChild(AddressInputComponent)\n    private addressInputComponent: AddressInputComponent;\n\n    userProfile: UserProfile;\n    userIdentification: UserIdentification;\n    userPhoneNumber: UserPhoneNumber;\n    userAddress: UserAddress = {};\n\n    userProfileForm: FormGroup;\n\n    isSaving = false;\n    errorMessage = '';\n\n    constructor(\n        private router: Router,\n        private formBuilder: FormBuilder,\n\n        private userService: UserService,\n    ) {}\n\n    ngAfterViewInit(): void {\n        setTimeout(() => {\n            this.userService.getUserProfile().subscribe((userProfile: UserProfile) => {\n                this.userProfile = { ...userProfile };\n                delete this.userProfile.id;\n                delete (this.userProfile as any).__typename;\n\n                if (this.userProfile.dateOfBirth) {\n                    this.userProfile.dateOfBirth = new Date(parseInt(this.userProfile.dateOfBirth, 10)).toISOString();\n                }\n\n                if (this.userProfile.userIdentificationList && this.userProfile.userIdentificationList.length > 0) {\n                    this.userIdentification = this.userProfile.userIdentificationList[0];\n                } else {\n                    this.userIdentification = {\n                        countryISO: 'BR',\n                        category: 'CPF_CNPJ',\n                        code: '',\n                    };\n                    this.userProfile.userIdentificationList = [this.userIdentification];\n                }\n\n                if (this.userProfile.userPhoneNumbers && this.userProfile.userPhoneNumbers.length > 0) {\n                    this.userPhoneNumber = this.userProfile.userPhoneNumbers[0];\n                } else {\n                    this.userPhoneNumber = {\n                        countryISO: 'BR',\n                        category: 'PRIMARY',\n                        code: 'MOBILE',\n                        rawFormat: '',\n                    };\n                    this.userProfile.userPhoneNumbers = [this.userPhoneNumber];\n                }\n\n                if (this.userProfile.userAddresses && this.userProfile.userAddresses.length > 0) {\n                    this.userAddress = this.userProfile.userAddresses[0];\n                } else {\n                    const userAddress = { countryISO: 'BR', addressType: 'BILLING' };\n                    this.userProfile.userAddresses = [userAddress];\n                }\n\n                this.createUserForm();\n            });\n        });\n    }\n\n    createUserForm(): void {\n        this.userProfileForm = this.formBuilder.group({\n            firstName: [\n                this.userProfile.firstName,\n                Validators.compose([Validators.required, Validators.pattern('^[A-Za-zñÑáéíóúÁÉÍÓÚ ]+$')]),\n            ],\n            familyName: [\n                this.userProfile.familyName,\n                Validators.compose([Validators.required, Validators.pattern('^[A-Za-zñÑáéíóúÁÉÍÓÚ ]+$')]),\n            ],\n            dateOfBirth: [this.userProfile.dateOfBirth, Validators.required],\n            documentId: [this.userIdentification.code, Validators.required],\n            phoneNumber: [\n                this.userPhoneNumber.rawFormat,\n                Validators.compose([Validators.required, Validators.minLength(10), Validators.maxLength(11)]),\n            ],\n            // address: this.addressInputComponent.formAddress,\n        });\n    }\n\n    saveUserProfile(): void {\n        this.isSaving = true;\n\n        try {\n            this.errorMessage = '';\n\n            const updatedUserProfile = this.userProfileForm.getRawValue();\n            this.userProfile.firstName = updatedUserProfile.firstName;\n            this.userProfile.familyName = updatedUserProfile.familyName;\n            this.userProfile.dateOfBirth = updatedUserProfile.dateOfBirth;\n\n            delete (this.userProfile.userIdentificationList[0] as any).__typename;\n            delete (this.userProfile.userPhoneNumbers[0] as any).__typename;\n            delete (this.userProfile.userAddresses[0] as any).__typename;\n\n            this.userProfile.userIdentificationList[0].code = updatedUserProfile.documentId;\n            this.userProfile.userPhoneNumbers[0].rawFormat = updatedUserProfile.phoneNumber;\n\n            const updatedAddress = this.addressInputComponent.formAddress.getRawValue();\n            this.userProfile.userAddresses[0].postalCode = updatedAddress.postalCode;\n            this.userProfile.userAddresses[0].street = updatedAddress.street;\n            this.userProfile.userAddresses[0].streetNumber = updatedAddress.streetNumber;\n            this.userProfile.userAddresses[0].streetComplement = updatedAddress.streetComplement;\n            this.userProfile.userAddresses[0].district = updatedAddress.district;\n            this.userProfile.userAddresses[0].city = updatedAddress.city;\n            this.userProfile.userAddresses[0].state = updatedAddress.state;\n\n            this.userService.updateMyProfile(this.userProfile).subscribe((updatedUser: UserProfile) => {\n                this.isSaving = false;\n                if (updatedUser) {\n                    this.userProfile = updatedUser;\n                    this.router.navigate(['']);\n                } else {\n                    this.errorMessage = 'Your profile could not be saved.';\n                }\n            });\n        } catch (error) {\n            this.isSaving = false;\n            this.errorMessage = 'An error ocurred while saving your profile.';\n            console.error('error saving profile', error);\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./user-profile-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div class=\"user-profile-page__container\">\n  <app-user-profile-form></app-user-profile-form>\n</div>\n"
        },
        {
            "name": "WeeklyAvailabilityComponent",
            "id": "component-WeeklyAvailabilityComponent-7ebe11642411659872fc6972ef64c111",
            "file": "src/app/@shared/components/calendar/weekly-availability/weekly-availability.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-weekly-availability",
            "styleUrls": [
                "./weekly-availability.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./weekly-availability.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "endHourAvailability",
                    "defaultValue": "22",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "number"
                },
                {
                    "name": "eventsToAdd",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any[]"
                },
                {
                    "name": "startHourAvailability",
                    "defaultValue": "7",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "daysWithHours",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "events",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Event[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "screenHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "weekDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Weekday[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "checkEventsToAdd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "checkScreenHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initGrid",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "populateGrid",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DatePipe } from '@angular/common';\nimport { Inject } from '@angular/core';\nimport { EventEmitter, Output } from '@angular/core';\nimport { Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { MediaObserver } from '@angular/flex-layout';\nimport { Event } from 'app/@core/models/event.model';\nimport { CalendarService } from 'app/@core/services/calendar.service';\nimport RRule, { Weekday } from 'rrule';\n\n@Component({\n    selector: 'app-weekly-availability',\n    templateUrl: './weekly-availability.component.html',\n    styleUrls: ['./weekly-availability.component.scss'],\n})\nexport class WeeklyAvailabilityComponent implements OnInit, OnChanges {\n    @Input() eventsToAdd: any[] = [];\n\n    @Input() startHourAvailability = 7; // 07:00\n    @Input() endHourAvailability = 22; // 22:00\n\n    daysWithHours: any[];\n\n    events: Event[];\n\n    weekDays: Weekday[];\n\n    screenHeight: number;\n\n    constructor(\n        private calendarService: CalendarService,\n        private datePipe: DatePipe,\n        private mediaObserver: MediaObserver,\n        @Inject(Window) private window: Window,\n    ) {\n        // see first day of the week - Sunday\n        this.weekDays = [RRule.MO, RRule.TU, RRule.WE, RRule.TH, RRule.FR, RRule.SA, RRule.SU];\n        this.events = [];\n        this.initGrid();\n    }\n\n    ngOnInit(): void {\n        if (this.calendarService.getMyEventsQuery$) {\n            this.calendarService.getMyEventsRefetch();\n        }\n\n        this.calendarService.getMyEvents().subscribe({\n            next: (events: Event[]) => {\n                this.events = events;\n                if (this.events && this.events.length > 0) {\n                    this.populateGrid();\n                }\n            },\n        });\n\n        this.checkScreenHeight();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes['startHour'] || changes['endHour']) {\n            this.initGrid();\n        }\n\n        if (changes['eventsToAdd']) {\n            this.initGrid();\n            this.populateGrid();\n            this.checkEventsToAdd();\n        }\n    }\n\n    checkScreenHeight() {\n        this.screenHeight = this.window.innerHeight;\n    }\n\n    initGrid() {\n        const todayDate = new Date();\n        todayDate.setMinutes(0);\n\n        this.daysWithHours = [];\n        for (let j = 0; j < this.weekDays.length; j++) {\n            const name = this.weekDays[j];\n            const dayIndex = j;\n            const hours = [];\n            for (let index = this.startHourAvailability; index < this.endHourAvailability + 1; index++) {\n                const time = this.datePipe.transform(todayDate.setHours(index), 'HH:mm');\n                const period = index < 12 ? 'AM' : 'PM';\n\n                let minutes = [];\n                for (let z = 0; z < 4; z++) {\n                    // (z + 1) * 15: starts with 15 min and end with 60 min\n                    minutes.push({ value: (z + 1) * 15, hasEvent: false, isActive: false });\n                }\n\n                hours.push({ time, period, minutes });\n            }\n            this.daysWithHours.push({ name, hours, dayIndex });\n        }\n    }\n\n    populateGrid(): void {\n        this.events.forEach((event) => {\n            const isEditingEvent = this.eventsToAdd.find((eventToAdd) => eventToAdd.id === event.id);\n            if (isEditingEvent) {\n                return;\n            }\n\n            const eventRRule = RRule.fromString(event.recurrence);\n            const eventDays = eventRRule.options.byweekday;\n\n            const eventStartDate = new Date(parseInt(event.startDateTime, 10));\n            const eventStartHour = eventStartDate.getHours();\n            const eventStartMinutes = Math.round(eventStartDate.getMinutes() / 15) * 15;\n\n            const eventEndDate = new Date(parseInt(event.endDateTime, 10));\n            const eventEndHour = eventEndDate.getHours();\n            const eventEndMinutes = Math.round(eventEndDate.getMinutes() / 15) * 15;\n\n            for (let index = eventStartHour; index <= eventEndHour; index++) {\n                eventDays.forEach((eventDay) => {\n                    const currentDay = this.daysWithHours[eventDay];\n                    const currentHours = currentDay.hours;\n\n                    const currentHour = currentHours.find((hour) => {\n                        const onlyHour = +hour.time.split(':').shift();\n                        return onlyHour === index;\n                    });\n\n                    if (currentHour) {\n                        currentHour.minutes = currentHour?.minutes.map((minute) => {\n                            const { value } = minute;\n\n                            // start hour\n                            if (index === eventStartHour && value > eventStartMinutes) {\n                                currentHour.title = event.title;\n                                minute.hasEvent = true;\n                            }\n\n                            // end hour\n                            if (index === eventEndHour && value <= eventEndMinutes) {\n                                currentHour.title = event.title;\n                                minute.hasEvent = true;\n                            }\n\n                            // in between hours\n                            if (index > eventStartHour && index < eventEndHour) {\n                                currentHour.title = event.title;\n                                minute.hasEvent = true;\n                            }\n\n                            // start and end time with same hour\n                            if (\n                                eventStartHour === eventEndHour &&\n                                (value > eventEndMinutes || value <= eventStartMinutes)\n                            ) {\n                                currentHour.title = '';\n                                minute.hasEvent = false;\n                            }\n\n                            return minute;\n                        });\n                    }\n                });\n            }\n        });\n    }\n\n    checkEventsToAdd() {\n        if (!this.eventsToAdd?.length) {\n            return;\n        }\n\n        this.eventsToAdd.forEach((eventToAdd) => {\n            if (!eventToAdd.currentDays?.length) {\n                eventToAdd.hasConflict = false;\n                return;\n            }\n            eventToAdd.hasConflict = false;\n\n            const eventRRule = RRule.fromString(eventToAdd.recurrence);\n            const eventDays = eventRRule.options?.byweekday;\n\n            const eventStartDate = new Date(parseInt(eventToAdd.startDateTime, 10));\n            const eventStartHour = eventStartDate.getHours();\n            const eventStartMinutes = Math.round(eventStartDate.getMinutes() / 15) * 15;\n\n            const eventEndDate = new Date(parseInt(eventToAdd.endDateTime, 10));\n            const eventEndHour = eventEndDate.getHours();\n            const eventEndMinutes = Math.round(eventEndDate.getMinutes() / 15) * 15;\n\n            for (let index = eventStartHour; index <= eventEndHour; index++) {\n                eventDays.forEach((eventDay) => {\n                    const currentDay = this.daysWithHours[eventDay];\n                    const currentHours = currentDay.hours;\n\n                    const currentHour = currentHours.find((hour) => {\n                        const onlyHour = +hour.time.split(':').shift();\n                        return onlyHour === index;\n                    });\n\n                    if (currentHour) {\n                        currentHour.minutes = currentHour?.minutes.map((minute) => {\n                            const { value } = minute;\n\n                            // start hour\n                            if (index === eventStartHour && value > eventStartMinutes) {\n                                minute.isActive = true;\n                            }\n\n                            // end hour\n                            if (index === eventEndHour && value <= eventEndMinutes) {\n                                minute.isActive = true;\n                            }\n\n                            // in between hours\n                            if (index > eventStartHour && index < eventEndHour) {\n                                minute.isActive = true;\n                            }\n\n                            // start and end time with same hour\n                            if (\n                                eventStartHour === eventEndHour &&\n                                (value > eventEndMinutes || value <= eventStartMinutes)\n                            ) {\n                                minute.isActive = false;\n                            }\n\n                            // event with conflict\n                            if (minute.isActive && minute.hasEvent) {\n                                eventToAdd.hasConflict = true;\n                            }\n\n                            return minute;\n                        });\n                    }\n                });\n            }\n        });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n@mixin weekly-availability-theme($theme) {\n    $primary: mat.get-color-from-palette(map-get($theme, primary));\n    $accent: mat.get-color-from-palette(map-get($theme, accent));\n    $background: mat.get-color-from-palette(map-get($theme, background), card);\n\n    $busy-color: mat.get-color-from-palette(map-get($theme, primary), 50);\n    $active-color: mat.get-color-from-palette(map-get($theme, accent), 100);\n    $conflict-color: mat.get-color-from-palette(map-get($theme, warn), 200);\n\n    .isActive {\n        background-color: $active-color;\n    }\n\n    .weekly-availability__week-list {\n        margin-bottom: 8px;\n\n        &__day {\n            border: 1px solid rgba(0, 0, 0, 0.12);\n\n            &:first-child {\n                border-top-left-radius: 7px;\n                border-bottom-left-radius: 7px;\n            }\n\n            &:last-child {\n                border-top-right-radius: 7px;\n                border-bottom-right-radius: 7px;\n            }\n        }\n    }\n\n    .weekly-availability__hours-list-container {\n        // max-height: 380px;\n        overflow-y: auto;\n    }\n\n    .weekly-availability__hours-list {\n        &__day-name {\n            border: 1px solid rgba(0, 0, 0, 0.12);\n            width: 100%;\n            margin-bottom: 8px;\n            position: sticky;\n            top: 0;\n            background-color: $background;\n            z-index: 2;\n        }\n\n        &__hour {\n            border: 1px solid rgba(0, 0, 0, 0.12);\n            z-index: 1;\n\n            &__cell {\n                display: flex;\n                flex-direction: column;\n                padding: 0;\n                height: 30px;\n                min-height: 30px;\n                width: 48px;\n                min-width: 48px;\n                border: 1px solid rgba(0, 0, 0, 0.12);\n                border-radius: 0;\n                position: relative;\n\n                &__minute {\n                    height: 8px;\n                    width: 100%;\n\n                    &--has-event {\n                        background-color: $busy-color;\n                    }\n\n                    &--active {\n                        background-color: $active-color;\n                    }\n\n                    &--has-conflict {\n                        background-color: $conflict-color;\n                    }\n                }\n\n                &__text {\n                    position: absolute;\n                    top: 6.5px;\n                    left: 5.5px;\n                }\n            }\n        }\n\n        .mat-grid-tile {\n            max-height: 30px;\n        }\n    }\n\n    // availability\n    // events inserted\n    // free\n    .calendar-cell-free,\n    .calendar-cell-first-60m-free {\n        background: white;\n    }\n\n    .calendar-cell-first-15m-hasEvent-free {\n        background: linear-gradient(to bottom, white 25%, $busy-color 25% 100%);\n    }\n\n    .calendar-cell-first-30m-hasEvent-free {\n        background: linear-gradient(to bottom, white 50%, $busy-color 50% 100%);\n    }\n\n    .calendar-cell-first-45m-hasEvent-free {\n        background: linear-gradient(to bottom, white 75%, $busy-color 75% 100%);\n    }\n\n    // busy\n    .calendar-cell-hasEvent-busy,\n    .calendar-cell-first-60m-hasEvent-busy,\n    .calendar-cell-first-0m-hasEvent-busy {\n        background: $busy-color;\n    }\n\n    .calendar-cell-first-15m-hasEvent-busy {\n        background: linear-gradient(to top, white 25%, $busy-color 25% 100%);\n    }\n\n    .calendar-cell-first-30m-hasEvent-busy {\n        background: linear-gradient(to top, white 50%, $busy-color 50% 100%);\n    }\n\n    .calendar-cell-first-45m-hasEvent-busy {\n        background: linear-gradient(to top, white 75%, $busy-color 75% 100%);\n    }\n\n    // new events\n    // active busy\n    .calendar-cell-active-busy,\n    .calendar-cell-first-60m-active-busy,\n    .calendar-cell-first-0m-active-busy {\n        background: $active-color;\n    }\n\n    .calendar-cell-first-15m-active-busy {\n        background: linear-gradient(to bottom, $active-color 25%, white 25% 100%);\n    }\n\n    .calendar-cell-first-30m-active-busy {\n        background: linear-gradient(to bottom, $active-color 50%, white 50% 100%);\n    }\n\n    .calendar-cell-first-45m-active-busy {\n        background: linear-gradient(to bottom, $active-color 75%, white 75% 100%);\n    }\n\n    // active free\n    .calendar-cell-first-15m-active-free {\n        background: linear-gradient(to bottom, white 25%, $active-color 25% 100%);\n    }\n\n    .calendar-cell-first-30m-active-free {\n        background: linear-gradient(to bottom, white 50%, $active-color 50% 100%);\n    }\n\n    .calendar-cell-first-45m-active-free {\n        background: linear-gradient(to bottom, white 75%, $active-color 75% 100%);\n    }\n}\n",
                    "styleUrl": "./weekly-availability.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "calendarService",
                        "type": "CalendarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "calendarService",
                        "type": "CalendarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mediaObserver",
                        "type": "MediaObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "  <div\n    class=\"weekly-availability__hours-list-container\"\n    >\n    <!-- [style.max-height]=\"screenHeight < 800 ? '224px' : '380px'\" -->\n    <div fxLayout=\"row\" fxLayoutAlign=\"center center\">\n      <div *ngFor=\"let day of daysWithHours; let dayIndex = index\">\n        <div fxLayout=\"column\" fxLayoutAlign=\"stretch center\">\n          <div\n            fxLayout=\"row\"\n            fxLayoutAlign=\"center center\"\n            class=\"weekly-availability__hours-list__day-name\"\n          >\n            {{ day.name.toString() }}\n          </div>\n          <div\n            *ngFor=\"let hour of day.hours; let hourIndex = index\"\n            class=\"weekly-availability__hours-list__hour__cell\"\n            [matTooltip]=\"hour.title\"\n          >\n            <div\n              *ngFor=\"let minute of hour.minutes\"\n              class=\"weekly-availability__hours-list__hour__cell__minute\"\n              [class.weekly-availability__hours-list__hour__cell__minute--has-event]=\"\n                minute.hasEvent\n              \"\n              [class.weekly-availability__hours-list__hour__cell__minute--active]=\"minute.isActive\"\n              [class.weekly-availability__hours-list__hour__cell__minute--has-conflict]=\"\n                minute.hasEvent && minute.isActive\n              \"\n            ></div>\n\n            <div\n              fxLayout=\"row\"\n              fxLayoutAlign=\"center center\"\n              class=\"mat-caption weekly-availability__hours-list__hour__cell__text\"\n            >\n              {{ hour.time | convertTime }}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>"
        },
        {
            "name": "WelcomeComponent",
            "id": "component-WelcomeComponent-cd99846347275a8e44b1a65125cfc810",
            "file": "src/app/main/invitation/welcome/welcome.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "invitation-welcome",
            "styleUrls": [
                "./welcome.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./welcome.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_unsubscribeAll",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "invitationForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "acceptInvitation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refuseInvitation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showDialogTermsAndConditions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Subject } from 'rxjs';\n\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { ModalTermsConditionsComponent } from './modal-terms-conditions/modal-terms-conditions.component';\nimport { WelcomeService } from './welcome.service';\nimport { UserService } from 'app/@core/services/user.service';\n\n@Component({\n    selector: 'invitation-welcome',\n    templateUrl: './welcome.component.html',\n    styleUrls: ['./welcome.component.scss'],\n})\nexport class WelcomeComponent implements OnInit, OnDestroy {\n    invitationForm: FormGroup;\n\n    private _unsubscribeAll: Subject<any>;\n\n    constructor(\n        private _formBuilder: FormBuilder,\n        private router: Router,\n        private Dialog: MatDialog,\n        private _welcomeService: WelcomeService,\n        private userService: UserService,\n    ) {\n        // Set the private defaults\n        this._unsubscribeAll = new Subject();\n    }\n\n    ngOnInit(): void {\n        this.invitationForm = this._formBuilder.group({\n            terms: ['', Validators.requiredTrue],\n        });\n    }\n\n    ngOnDestroy(): void {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next();\n        this._unsubscribeAll.complete();\n    }\n\n    showDialogTermsAndConditions(): void {\n        this.Dialog.open(ModalTermsConditionsComponent);\n    }\n\n    acceptInvitation(): void {\n        this._welcomeService.invitationRequest('confirm').subscribe(\n            (res) => {\n                const { invitationToken } = res.body;\n                this.userService.setStudentInfoForCreatePassword(res.body);\n                if (res.status === 200) {\n                    this.router.navigate(['/auth/register'], { queryParams: { invitationToken } });\n                }\n            },\n            (err) => {\n                const status = 'failed';\n                this.router.navigate(['/invitation/message', status]);\n            },\n        );\n    }\n\n    refuseInvitation(): void {\n        this._welcomeService.invitationRequest('decline').subscribe(\n            (res) => {\n                const status = 'rejected';\n                if (res.status === 200) {\n                    this.router.navigate(['/invitation/message', status]);\n                }\n            },\n            (err) => {\n                const status = 'failed';\n                this.router.navigate(['/invitation/message', status]);\n            },\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".text-center {\n    text-align: center;\n}\n\ninvitation-welcome {\n    #register {\n        width: 100%;\n        padding: 128px;\n        margin-top: 128px;\n        overflow: hidden;\n        background: url('/assets/images/backgrounds/banner-logoless.jpg') no-repeat;\n        background-size: cover;\n\n        #register-intro {\n            .logo {\n                width: 128px;\n                margin-bottom: 32px;\n            }\n\n            .title {\n                font-size: 60px;\n                font-weight: 600;\n                line-height: 1;\n            }\n\n            .description {\n                padding-top: 4px;\n                font-size: 16px;\n                font-weight: 600;\n                max-width: 600px;\n            }\n        }\n\n        #register-form-wrapper {\n            width: 400px;\n            min-width: 400px;\n            max-width: 400px;\n            overflow: auto;\n            -webkit-overflow-scrolling: touch;\n            padding: 128px 48px 48px 48px;\n\n            #register-form {\n                padding: 128px 48px 48px 48px;\n\n                .logo {\n                    width: 128px;\n                    margin: 32px auto;\n                }\n\n                .title {\n                    text-align: center;\n                    font-size: 21px;\n                }\n\n                .description {\n                    padding-top: 8px;\n                }\n\n                form {\n                    width: 100%;\n\n                    mat-form-field {\n                        width: 100%;\n                    }\n\n                    mat-checkbox {\n                        margin: 0;\n                    }\n\n                    .terms {\n                        margin: 16px 0 32px 0;\n\n                        a {\n                            cursor: pointer;\n                            font-size: 16px;\n                            margin-left: 4px;\n                        }\n                    }\n\n                    .submit-button {\n                        width: 100%;\n                        margin: 16px auto;\n                        display: block;\n                    }\n                }\n\n                .separator {\n                    font-size: 15px;\n                    font-weight: 600;\n                    margin: 24px auto;\n                    position: relative;\n                    overflow: hidden;\n                    width: 100px;\n                    text-align: center;\n\n                    .text {\n                        display: inline-flex;\n                        position: relative;\n                        padding: 0 8px;\n                        z-index: 9999;\n\n                        &:before,\n                        &:after {\n                            content: '';\n                            display: block;\n                            width: 30px;\n                            position: absolute;\n                            top: 10px;\n                            border-top: 1px solid;\n                        }\n\n                        &:before {\n                            right: 100%;\n                        }\n\n                        &:after {\n                            left: 100%;\n                        }\n                    }\n                }\n\n                button {\n                    &.google,\n                    &.facebook {\n                        width: 100%;\n                        text-transform: none;\n                        color: #ffffff;\n                        font-size: 13px;\n\n                        mat-icon {\n                            color: #ffffff;\n                            margin: 0 8px 0 0;\n                        }\n                    }\n\n                    &.google {\n                        background-color: #d73d32;\n                        margin-bottom: 8px;\n                    }\n\n                    &.facebook {\n                        background-color: rgb(63, 92, 154);\n                    }\n                }\n            }\n        }\n    }\n}\n#register-form {\n    padding: 128px 48px 48px 48px;\n}   \n",
                    "styleUrl": "./welcome.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_welcomeService",
                        "type": "WelcomeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "Dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_welcomeService",
                        "type": "WelcomeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-auth-layout>\n      <div class=\"title mat-h1 primary-700-fg text-center\">Venha fazer parte!</div>\n\n      <form name=\"invitationForm\" [formGroup]=\"invitationForm\" novalidate>\n        <p class=\"mat-h3 text-center mb-16\">Seu professor te convidou para ser parte da eslo.</p>\n        <p class=\"mat-body text-center\">\n          Leia os termos de serviço e aceite o convite para ter acesso a plataforma.\n        </p>\n\n        <div class=\"terms mat-body-1\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n          <mat-checkbox formControlName=\"terms\" name=\"terms\" aria-label=\"Accept\" required>\n            <span>Eu aceito os </span>\n            <a (click)=\"showDialogTermsAndConditions()\"> termos de serviço</a>\n          </mat-checkbox>\n        </div>\n\n        <div\n          fxLayout=\"row\"\n          fxLayoutAlign=\"center center\"\n          fxLayoutGap=\"20px\"\n          style=\"margin-top: 20px\"\n        >\n          <button\n            mat-button\n            color=\"warn\"\n            class=\"submit-button\"\n            aria-label=\"Refuse Invitation\"\n            (click)=\"refuseInvitation()\"\n          >\n            Rejeitar\n          </button>\n          <button\n            mat-raised-button\n            color=\"primary\"\n            class=\"submit-button\"\n            aria-label=\"Accept Invitation\"\n            [disabled]=\"invitationForm.invalid\"\n            (click)=\"acceptInvitation()\"\n          >\n            Aceitar\n          </button>\n        </div>\n      </form>\n</app-auth-layout>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-a33fd9d01c5b0e1754aed2c166bf1a1b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {MatSidenavModule} from '@angular/material/sidenav';\n// App modules\nimport { CoreModule } from './@core/core.module';\nimport { AuthModule } from './@core/auth/auth.module';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n    declarations: [AppComponent],\n    imports: [\n        BrowserModule,\n        BrowserAnimationsModule,\n        HttpClientModule,\n\n        // App modules\n        AppRoutingModule,\n        CoreModule,\n        AuthModule,\n\n        MatSidenavModule,\n    ],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {\n    constructor() {\n        console.clear();\n    }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "AuthModule"
                        },
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-635e384c9d0c7da5d39663754c7660a9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { RolesGuard } from './@core/auth/guards/roles.guard';\nimport { SubscriptionGuard } from './@core/auth/guards/subscription.guard';\n\nconst appRoutes: Routes = [\n    {\n        path: '',\n        loadChildren: () => \"import('./app-shell/app-shell.module').then((m) => m.AppShellModule)\",\n    },\n    {\n        path: 'script/:lessonId',\n        loadChildren: () =>\n            \"import('./script-stand-alone/script-stand-alone.module').then((m) => m.ScriptStandAloneModule)\",\n        canActivate: [SubscriptionGuard, RolesGuard],\n        data: {\n            roles: ['teacher', 'admin'],\n        },\n    },\n    {\n        path: 'auth',\n        loadChildren: () => \"import('./authentication/authentication.module').then((m) => m.AuthenticationModule)\",\n    },\n    {\n        path: 'invitation',\n        loadChildren: () => \"import('./main/invitation/invitation.module').then((m) => m.InvitationModule)\",\n    },\n    {\n        path: 'user-account',\n        loadChildren: () => \"import('./main/user-account/user-account.module').then((m) => m.UserAccountModule)\",\n    },\n];\n@NgModule({\n    imports: [RouterModule.forRoot(appRoutes, { anchorScrolling: 'enabled' })],\n    exports: [RouterModule],\n    providers: [],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppShellModule",
            "id": "module-AppShellModule-0e2f16dddb6cd9c36e82b0a9ab266d5f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-shell/app-shell.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { LayoutModule } from 'app/layout/layout.module';\nimport { AppShellRoutingModule } from './app-shell-routing.module';\nimport { AppShellComponent } from './app-shell.component';\n\n@NgModule({\n    imports: [CommonModule, AppShellRoutingModule, LayoutModule],\n    exports: [],\n    declarations: [AppShellComponent],\n    providers: [],\n})\nexport class AppShellModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppShellComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppShellRoutingModule"
                        },
                        {
                            "name": "LayoutModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppShellRoutingModule",
            "id": "module-AppShellRoutingModule-eba25032fcd53e2d2c129a1dda9d1b68",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-shell/app-shell-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AuthGuard } from 'app/@core/auth/guards/auth.guard';\nimport { RolesGuard } from 'app/@core/auth/guards/roles.guard';\nimport { SubscriptionGuard } from 'app/@core/auth/guards/subscription.guard';\n\nimport { AppShellComponent } from './app-shell.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: AppShellComponent,\n        children: [\n            { path: '', pathMatch: 'full', redirectTo: 'dashboard' },\n            {\n                path: 'dashboard',\n                loadChildren: () => \"import('../dashboard/dashboard.module').then((m) => m.DashboardModule)\",\n                canActivate: [SubscriptionGuard, RolesGuard],\n                data: {\n                    roles: ['teacher', 'student', 'admin'],\n                },\n            },\n            {\n                path: 'enrolled',\n                loadChildren: () => \"import('../enrolled/enrolled.module').then((m) => m.EnrolledModule)\",\n                canActivate: [SubscriptionGuard, RolesGuard],\n                data: {\n                    roles: ['student', 'admin'],\n                },\n            },\n            {\n                path: 'calendar',\n                loadChildren: () => \"import('../calendar/calendar.module').then((m) => m.CalendarModule)\",\n                canActivate: [SubscriptionGuard, RolesGuard],\n                data: {\n                    roles: ['teacher', 'admin'],\n                },\n            },\n            {\n                path: 'lms',\n                loadChildren: () => \"import('../lms/lms.module').then((m) => m.LMSModule)\",\n                canActivate: [SubscriptionGuard, RolesGuard],\n                data: {\n                    roles: ['teacher', 'admin'],\n                },\n            },\n            {\n                path: 'classroom',\n                loadChildren: () => \"import('../classroom/classroom.module').then((m) => m.ClassroomModule)\",\n                canActivate: [SubscriptionGuard, RolesGuard],\n                data: {\n                    roles: ['teacher', 'admin'],\n                },\n            },\n            {\n                path: 'profile',\n                loadChildren: () => \"import('../profile/profile.module').then((m) => m.ProfileModule)\",\n                canActivate: [AuthGuard],\n            },\n            {\n                path: 'payment',\n                loadChildren: () => \"import('../subscription/subscription.module').then((m) => m.SubscriptionModule)\",\n                canActivate: [SubscriptionGuard, RolesGuard],\n                data: {\n                    roles: ['teacher', 'student', 'admin'],\n                },\n            },\n        ],\n    },\n];\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n    providers: [],\n})\nexport class AppShellRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthenticationModule",
            "id": "module-AuthenticationModule-c75d82b691b850ef42a9003d5191f4c4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/authentication/authentication.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from 'app/@shared/shared.module';\nimport { IConfig, NgxMaskModule } from 'ngx-mask';\n\nimport { CreateAccountFormComponent } from './components/create-account-form/create-account-form.component';\nimport { ForgotPasswordFormComponent } from './components/forgot-password-form/forgot-password-form.component';\nimport { LoginFormComponent } from './components/login-form/login-form.component';\nimport { PlanCardComponent } from './components/plan-card/plan-card.component';\nimport { PlansListComponent } from './components/plans-list/plans-list.component';\nimport { RegisterFormComponent } from './components/register-form/register-form.component';\nimport { ResetPasswordFormComponent } from './components/reset-password-form/reset-password-form.component';\nimport { ConfirmEmailPageComponent } from './pages/confirm-email-page/confirm-email-page.component';\nimport { CreateAccountPageComponent } from './pages/create-account-page/create-account-page.component';\nimport { ForgotPasswordPageComponent } from './pages/forgot-password-page/forgot-password-page.component';\nimport { LoginPageComponent } from './pages/login-page/login-page.component';\nimport { RegisterPageComponent } from './pages/register-page/register-page.component';\nimport { ResetPasswordPageComponent } from './pages/reset-password-page/reset-password-page.component';\nimport { SelectPlanPageComponent } from './pages/select-plan-page/select-plan-page.component';\nimport { SubscriptionActivePageComponent } from './pages/subscription-active-page/subscription-active-page.component';\n\nconst maskConfig: Partial<IConfig> = {\n    validation: true,\n};\n\nconst routes = [\n    { path: '', pathMatch: 'full', redirectTo: 'login' },\n    {\n        path: 'register',\n        component: RegisterPageComponent,\n    },\n    {\n        path: 'create-account',\n        component: CreateAccountPageComponent,\n    },\n\n    {\n        path: 'select-plan',\n        component: SelectPlanPageComponent,\n    },\n    {\n        path: 'subscription-canceled',\n        component: SelectPlanPageComponent,\n    },\n    {\n        path: 'subscription-active',\n        component: SubscriptionActivePageComponent,\n    },\n\n    {\n        path: 'login',\n        component: LoginPageComponent,\n    },\n    {\n        path: 'forgot-password',\n        component: ForgotPasswordPageComponent,\n    },\n    {\n        path: 'reset-password/:resetPasswordToken',\n        component: ResetPasswordPageComponent,\n    },\n    {\n        path: 'confirm-email',\n        component: ConfirmEmailPageComponent,\n    },\n];\n\n@NgModule({\n    declarations: [\n        LoginPageComponent,\n        LoginFormComponent,\n\n        RegisterPageComponent,\n        RegisterFormComponent,\n\n        CreateAccountPageComponent,\n        CreateAccountFormComponent,\n\n        ForgotPasswordPageComponent,\n        ForgotPasswordFormComponent,\n\n        ResetPasswordPageComponent,\n        ResetPasswordFormComponent,\n\n        SelectPlanPageComponent,\n        PlansListComponent,\n        PlanCardComponent,\n\n        SubscriptionActivePageComponent,\n\n        ConfirmEmailPageComponent,\n    ],\n    imports: [\n        CommonModule,\n        RouterModule.forChild(routes),\n        MatCheckboxModule,\n        MatSnackBarModule,\n        MatDatepickerModule,\n        MatCardModule,\n        MatRadioModule,\n        NgxMaskModule.forRoot(maskConfig),\n        SharedModule,\n    ],\n})\nexport class AuthenticationModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ConfirmEmailPageComponent"
                        },
                        {
                            "name": "CreateAccountFormComponent"
                        },
                        {
                            "name": "CreateAccountPageComponent"
                        },
                        {
                            "name": "ForgotPasswordFormComponent"
                        },
                        {
                            "name": "ForgotPasswordPageComponent"
                        },
                        {
                            "name": "LoginFormComponent"
                        },
                        {
                            "name": "LoginPageComponent"
                        },
                        {
                            "name": "PlanCardComponent"
                        },
                        {
                            "name": "PlansListComponent"
                        },
                        {
                            "name": "RegisterFormComponent"
                        },
                        {
                            "name": "RegisterPageComponent"
                        },
                        {
                            "name": "ResetPasswordFormComponent"
                        },
                        {
                            "name": "ResetPasswordPageComponent"
                        },
                        {
                            "name": "SelectPlanPageComponent"
                        },
                        {
                            "name": "SubscriptionActivePageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "id": "module-AuthModule-4dc8ae2dc5330c0a4927d6f841f20d49",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/@core/auth/auth.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { JwtInterceptor } from './interceptors/jwt.interceptor';\nimport { AuthErrorHandler } from './interceptors/auth-error-handler.interceptor';\n\nimport { AuthRoutingModule } from './auth-routing.module';\n\n@NgModule({\n    imports: [AuthRoutingModule],\n    declarations: [],\n    providers: [\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: JwtInterceptor,\n            multi: true,\n        },\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: AuthErrorHandler,\n            multi: true,\n        },\n    ],\n})\nexport class AuthModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthErrorHandler"
                        },
                        {
                            "name": "JwtInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthRoutingModule",
            "id": "module-AuthRoutingModule-a6bc11825e341f7d318422f3bf63bec7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/@core/auth/auth-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst authRoutes: Routes = [];\n\n@NgModule({\n    imports: [RouterModule.forChild(authRoutes)],\n    exports: [RouterModule],\n    providers: [],\n})\nexport class AuthRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CalendarModule",
            "id": "module-CalendarModule-7eb71f95fd3b8b38b6f390298338fc34",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/calendar/calendar.module.ts",
            "methods": [],
            "sourceCode": "import { AvailabilityPageComponent } from './pages/availability-page/availability-page.component';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { DatePipe } from '@angular/common';\n\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { CalendarModule as AngularCalendarModule, DateAdapter } from 'angular-calendar';\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\n\nimport { SharedModule } from 'app/@shared/shared.module';\n\nimport { CalendarComponent } from './calendar/calendar.component';\nimport { EditEventInstanceComponent } from './edit-event-instance/edit-event-instance.component';\nimport { CalendarMobileComponent } from './calendar-mobile/calendar-mobile.component';\nimport { FormatEventTitlePipe } from './pipes/format-event-title.pipe';\nimport { CalendarPageComponent } from './pages/calendar-page/calendar-page.component';\nimport { MonthPageComponent } from './pages/month-page/month-page.component';\nimport { FormatEventTimePipe } from './pipes/format-event-time.pipe';\nimport { EditEventComponent } from './components/edit-event/edit-event.component';\nimport { EditEventDialogComponent } from './components/edit-event-dialog/edit-event-dialog.component';\nimport { EditEventBottomSheetComponent } from './components/edit-event-bottom-sheet/edit-event-bottom-sheet.component';\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\n\nconst routes = [\n    {\n        path: '',\n        component: CalendarPageComponent,\n        children: [\n            {\n                path: 'month',\n                component: MonthPageComponent,\n            },\n            {\n                path: 'availability',\n                component: AvailabilityPageComponent,\n            },\n        ],\n    },\n    {\n        path: '**',\n        redirectTo: '',\n    },\n];\n\n@NgModule({\n    declarations: [\n        CalendarComponent,\n        EditEventInstanceComponent,\n        CalendarMobileComponent,\n        CalendarPageComponent,\n        MonthPageComponent,\n        AvailabilityPageComponent,\n        EditEventComponent,\n        EditEventDialogComponent,\n        EditEventBottomSheetComponent,\n        // Pipes\n        FormatEventTitlePipe,\n        FormatEventTimePipe,\n    ],\n    imports: [\n        RouterModule.forChild(routes),\n\n        MatDatepickerModule,\n        MatDialogModule,\n        MatBottomSheetModule,\n        MatTooltipModule,\n        MatToolbarModule,\n        MatDividerModule,\n\n        AngularCalendarModule.forRoot({\n            provide: DateAdapter,\n            useFactory: adapterFactory,\n        }),\n\n        SharedModule,\n    ],\n    exports: [],\n    providers: [DatePipe, { provide: MatDialogRef, useValue: {} }, { provide: MAT_DIALOG_DATA, useValue: [] }],\n})\nexport class CalendarModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AvailabilityPageComponent"
                        },
                        {
                            "name": "CalendarComponent"
                        },
                        {
                            "name": "CalendarMobileComponent"
                        },
                        {
                            "name": "CalendarPageComponent"
                        },
                        {
                            "name": "EditEventBottomSheetComponent"
                        },
                        {
                            "name": "EditEventComponent"
                        },
                        {
                            "name": "EditEventDialogComponent"
                        },
                        {
                            "name": "EditEventInstanceComponent"
                        },
                        {
                            "name": "FormatEventTimePipe"
                        },
                        {
                            "name": "FormatEventTitlePipe"
                        },
                        {
                            "name": "MonthPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClassroomModule",
            "id": "module-ClassroomModule-5247a85d92737cfa53c12b252466e985",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/classroom/classroom.module.ts",
            "methods": [],
            "sourceCode": "import { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { NgModule } from '@angular/core';\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MAT_DIALOG_DATA, MatDialogModule, MatDialogRef } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from 'app/@shared/shared.module';\n\nimport { GroupEmptyMembersComponent } from './components/group-empty-members/group-empty-members.component';\nimport { GroupInfoComponent } from './components/group-info/group-info.component';\nimport { GroupProgramComponent } from './components/group-program/group-program.component';\nimport { GroupsListComponent } from './components/groups-list/groups-list.component';\nimport { CheckEventsControlsPipe } from './components/invitation-form/check-events-controls.pipe';\nimport { InvitationFormComponent } from './components/invitation-form/invitation-form.component';\nimport { SelectGroupEnrollmentComponent } from './components/select-group-enrollment/select-group-enrollment.component';\nimport { StudentInfoComponent } from './components/student-info/student-info.component';\nimport { StudentListComponent } from './components/student-list/student-list.component';\nimport { EmptyListComponent } from './components/empty-list/empty-list.component';\nimport { ClassListComponent } from './pages/class-list/class-list.component';\nimport { GroupMembersPageComponent } from './pages/group-members-page/group-members-page.component';\nimport { GroupSchedulePageComponent } from './pages/group-schedule-page/group-schedule-page.component';\nimport { GroupsPageComponent } from './pages/groups-page/groups-page.component';\nimport { EnrollmentDetailPageComponent } from './pages/enrollment-detail-page/enrollment-detail-page.component';\nimport { GroupAttendeesComponent } from './components/group-attendees/group-attendees.component';\nimport { FiltersListComponent } from './components/filters-list/filters-list.component';\nimport { FilterEnrollmentGroupPipe } from './pipes/filter-enrollment-group.pipe';\nimport { GroupMembersListComponent } from './components/group-members-list/group-members-list.component';\nimport { InvitationDialogComponent } from './components/invitation-dialog/invitation-dialog.component';\nimport { InvitationEventsComponent } from './components/invitation-events/invitation-events.component';\nimport { ScheduleInputDialogComponent } from './components/schedule-input-dialog/schedule-input-dialog.component';\nimport { SelectMembersDialogComponent } from './components/select-members-dialog/select-members-dialog.component';\n\nconst routes = [\n    { path: '', pathMatch: 'full', redirectTo: 'students' },\n    {\n        path: 'students',\n        component: ClassListComponent,\n    },\n    {\n        path: 'enrollments/:enrollmentId',\n        component: EnrollmentDetailPageComponent,\n    },\n    {\n        path: 'groups',\n        component: GroupsPageComponent,\n    },\n    {\n        path: 'groups/:groupId/schedule',\n        component: GroupSchedulePageComponent,\n    },\n    {\n        path: 'groups/:groupId/members',\n        component: GroupMembersPageComponent,\n    },\n];\n\n@NgModule({\n    declarations: [\n        ClassListComponent,\n        StudentListComponent,\n        StudentInfoComponent,\n        InvitationFormComponent,\n        GroupsPageComponent,\n        GroupInfoComponent,\n        GroupProgramComponent,\n        GroupsListComponent,\n        GroupSchedulePageComponent,\n        GroupMembersPageComponent,\n        GroupEmptyMembersComponent,\n        SelectGroupEnrollmentComponent,\n        EmptyListComponent,\n        EnrollmentDetailPageComponent,\n        GroupAttendeesComponent,\n        FiltersListComponent,\n        GroupMembersListComponent,\n        InvitationDialogComponent,\n        InvitationEventsComponent,\n        ScheduleInputDialogComponent,\n        SelectMembersDialogComponent,\n\n        CheckEventsControlsPipe,\n        FilterEnrollmentGroupPipe,\n    ],\n    imports: [\n        RouterModule.forChild(routes),\n\n        MatTableModule,\n        MatMenuModule,\n        MatToolbarModule,\n        MatSelectModule,\n        MatExpansionModule,\n        MatDialogModule,\n        MatCheckboxModule,\n        MatBottomSheetModule,\n        MatTooltipModule,\n        MatListModule,\n        MatRadioModule,\n        MatProgressBarModule,\n\n        SharedModule,\n    ],\n    providers: [\n        { provide: MatDialogRef, useValue: {} },\n        { provide: MAT_DIALOG_DATA, useValue: [] },\n    ],\n})\nexport class ClassroomModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CheckEventsControlsPipe"
                        },
                        {
                            "name": "ClassListComponent"
                        },
                        {
                            "name": "EmptyListComponent"
                        },
                        {
                            "name": "EnrollmentDetailPageComponent"
                        },
                        {
                            "name": "FilterEnrollmentGroupPipe"
                        },
                        {
                            "name": "FiltersListComponent"
                        },
                        {
                            "name": "GroupAttendeesComponent"
                        },
                        {
                            "name": "GroupEmptyMembersComponent"
                        },
                        {
                            "name": "GroupInfoComponent"
                        },
                        {
                            "name": "GroupMembersListComponent"
                        },
                        {
                            "name": "GroupMembersPageComponent"
                        },
                        {
                            "name": "GroupProgramComponent"
                        },
                        {
                            "name": "GroupSchedulePageComponent"
                        },
                        {
                            "name": "GroupsListComponent"
                        },
                        {
                            "name": "GroupsPageComponent"
                        },
                        {
                            "name": "InvitationDialogComponent"
                        },
                        {
                            "name": "InvitationEventsComponent"
                        },
                        {
                            "name": "InvitationFormComponent"
                        },
                        {
                            "name": "ScheduleInputDialogComponent"
                        },
                        {
                            "name": "SelectGroupEnrollmentComponent"
                        },
                        {
                            "name": "SelectMembersDialogComponent"
                        },
                        {
                            "name": "StudentInfoComponent"
                        },
                        {
                            "name": "StudentListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-225a11fd4fe9adca77dc7e71014bcea3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/@core/core.module.ts",
            "methods": [],
            "sourceCode": "import { APOLLO_OPTIONS } from 'apollo-angular';\nimport { setContext } from '@apollo/client/link/context';\nimport { onError } from '@apollo/client/link/error';\nimport { CommonModule } from '@angular/common';\n\nimport { NgModule, Optional, SkipSelf } from '@angular/core';\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\n\nimport { environment } from '../../environments/environment';\nimport { httpInterceptorProviders } from './interceptors';\n\nimport { ProgressBarModule } from '../@core/components/progress-bar/progress-bar.module';\n\nimport { InMemoryCache } from '@apollo/client/core';\nimport { HttpLink } from 'apollo-angular/http';\nimport { HttpClientModule } from '@angular/common/http';\n\nconst uri = `${environment.apiUrl}/graphql`; // <-- add the URL of the GraphQL server here\n\nexport const createApollo = (httpLink: HttpLink, matSnackBar: MatSnackBar) => {\n    // Get the authentication token from local storage if it exists\n    const token = localStorage.getItem('token');\n    const auth = setContext((operation, context) => ({\n        headers: {\n            Authorization: `Bearer ${token}`,\n        },\n    }));\n\n    const errorLink = onError(({ graphQLErrors, networkError }) => {\n        let errorMessage: string;\n\n        if (graphQLErrors) {\n            errorMessage = graphQLErrors.map(({ message }) => message).join(' \\n');\n        }\n\n        if (networkError) {\n            if (errorMessage) {\n                errorMessage += ` ${networkError.message}`;\n            } else {\n                errorMessage = networkError.message;\n            }\n        }\n\n        if (errorMessage) {\n            const panelClass = ['snackbar-panel'];\n            const buttonLabel = 'dismiss';\n\n            if (errorMessage.length <= 35) {\n                panelClass.push('snackbar-panel--one-line');\n            } else {\n                panelClass.push('snackbar-panel--two-line');\n            }\n\n            matSnackBar.open(errorMessage, buttonLabel, {\n                duration: 0,\n                panelClass,\n            });\n        }\n    });\n\n    return {\n        link: errorLink.concat(httpLink.create({ uri, includeExtensions: true })),\n        // https://www.apollographql.com/docs/react/data/fragments/#using-fragments-with-unions-and-interfaces\n        cache: new InMemoryCache({\n            possibleTypes: {\n                ClassRecord: ['EnrollmentClassRecord', 'StudyGroupClassRecord'],\n            },\n        }),\n    };\n};\n\n@NgModule({\n    exports: [HttpClientModule, ProgressBarModule],\n    providers: [\n        {\n            provide: APOLLO_OPTIONS,\n            useFactory: createApollo,\n            deps: [HttpLink, MatSnackBar],\n        },\n        httpInterceptorProviders,\n    ],\n    declarations: [],\n    imports: [CommonModule, MatSnackBarModule],\n})\nexport class CoreModule {\n    constructor(@Optional() @SkipSelf() parentModule: CoreModule) {\n        if (parentModule) {\n            throw new Error(\n                'CoreModule has already been loaded. You should import the core module in the main AppModule only.',\n            );\n        }\n    }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ProgressBarModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardModule",
            "id": "module-DashboardModule-30de494e4f111d803decefdf4f8587e9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/dashboard/dashboard.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { DashboardPageComponent } from './pages/dashboard-page/dashboard-page.component';\nimport { SharedModule } from 'app/@shared/shared.module';\nimport { TeacherDashboardCardComponent } from './components/teacher-dashboard-card/teacher-dashboard-card.component';\n\nconst routes = [\n    {\n        path: '',\n        component: DashboardPageComponent,\n    },\n];\n\n@NgModule({\n    imports: [CommonModule, RouterModule.forChild(routes), SharedModule],\n    declarations: [DashboardPageComponent, TeacherDashboardCardComponent],\n})\nexport class DashboardModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DashboardPageComponent"
                        },
                        {
                            "name": "TeacherDashboardCardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "EnrolledModule",
            "id": "module-EnrolledModule-149427244b16cdbe19a98a2882a575f4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/enrolled/enrolled.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { EnrolledPageComponent } from './pages/enrolled-page/enrolled-page.component';\nimport { SharedModule } from 'app/@shared/shared.module';\nimport { RouterModule } from '@angular/router';\nimport { StudentEnrollmentListComponent } from './components/student-enrollment-list/student-enrollment-list.component';\nimport { ActiveEnrollmentsPageComponent } from './pages/active-enrollments-page/active-enrollments-page.component';\nimport { ArchiveEnrollmentsPageComponent } from './pages/archive-enrollments-page/archive-enrollments-page.component';\nimport { MatCardModule } from '@angular/material/card';\nimport { StudentEnrollmentPageComponent } from './pages/student-enrollment-page/student-enrollment-page.component';\nimport { StudentBookPageComponent } from './pages/student-book-page/student-book-page.component';\nimport { StudentEmptyEnrollmentsComponent } from './components/student-empty-enrollments/student-empty-enrollments.component';\n\nconst routes = [\n    {\n        path: 'enrollment/:enrollmentId',\n        component: StudentEnrollmentPageComponent,\n    },\n    {\n        path: 'student-book/:lessonId',\n        component: StudentBookPageComponent,\n    },\n    {\n        path: '',\n        component: EnrolledPageComponent,\n        children: [\n            { path: '', pathMatch: 'full', redirectTo: 'active' },\n            {\n                path: 'active',\n                component: ActiveEnrollmentsPageComponent,\n            },\n            {\n                path: 'archive',\n                component: ArchiveEnrollmentsPageComponent,\n            },\n        ],\n    },\n];\n\n@NgModule({\n    imports: [CommonModule, RouterModule.forChild(routes), MatCardModule, SharedModule],\n    declarations: [\n        EnrolledPageComponent,\n        StudentEnrollmentListComponent,\n        ActiveEnrollmentsPageComponent,\n        ArchiveEnrollmentsPageComponent,\n        StudentEnrollmentPageComponent,\n        StudentBookPageComponent,\n        StudentEmptyEnrollmentsComponent,\n    ],\n})\nexport class EnrolledModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ActiveEnrollmentsPageComponent"
                        },
                        {
                            "name": "ArchiveEnrollmentsPageComponent"
                        },
                        {
                            "name": "EnrolledPageComponent"
                        },
                        {
                            "name": "StudentBookPageComponent"
                        },
                        {
                            "name": "StudentEmptyEnrollmentsComponent"
                        },
                        {
                            "name": "StudentEnrollmentListComponent"
                        },
                        {
                            "name": "StudentEnrollmentPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InvitationModule",
            "id": "module-InvitationModule-18663e9a8dfc4da3befc5ba6949b5379",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/main/invitation/invitation.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { WelcomeModule } from './welcome/welcome.module';\nimport { MessageModule } from './message/message.module';\nimport { TransferModule } from './transfer/transfer.module';\n\n@NgModule({\n    imports: [WelcomeModule, TransferModule, MessageModule],\n})\nexport class InvitationModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MessageModule"
                        },
                        {
                            "name": "TransferModule"
                        },
                        {
                            "name": "WelcomeModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LayoutModule",
            "id": "module-LayoutModule-35614984cd5c9df814896541563dfa5d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/layout/layout.module.ts",
            "methods": [],
            "sourceCode": "import { MatCardModule } from '@angular/material/card';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatRippleModule } from '@angular/material/core';\nimport { RouterModule } from '@angular/router';\nimport { NavigationBarComponent } from './components/navigation-bar/navigation-bar.component';\n\nimport { LayoutComponent } from './layout.component';\nimport { SharedModule } from 'app/@shared/shared.module';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { TopBarComponent } from './components/top-bar/top-bar.component';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ClickOutsideModule } from 'ng-click-outside';\n@NgModule({\n    declarations: [LayoutComponent, NavigationBarComponent, TopBarComponent],\n    imports: [\n        CommonModule,\n        RouterModule,\n        MatRippleModule,\n        MatCardModule,\n        FlexLayoutModule,\n        PortalModule,\n        ClickOutsideModule,\n        SharedModule,\n    ],\n    exports: [LayoutComponent],\n})\nexport class LayoutModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LayoutComponent"
                        },
                        {
                            "name": "NavigationBarComponent"
                        },
                        {
                            "name": "TopBarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LayoutComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LMSModule",
            "id": "module-LMSModule-8af8692be86313de90e1feb1f0e23cb3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/lms/lms.module.ts",
            "methods": [],
            "sourceCode": "import { LessonCardComponent } from './components/lesson-card/lesson-card.component';\nimport { CoursesPageComponent } from './pages/courses-page/courses-page.component';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatSliderModule } from '@angular/material/slider';\n\nimport { SharedModule } from 'app/@shared/shared.module';\nimport { LessonListComponent } from './lesson/lesson-list/lesson-list.component';\nimport { CourseDetailComponent } from './course/course-detail/course-detail.component';\nimport { LessonDetailComponent } from './lesson/lesson-detail/lesson-detail.component';\nimport { LessonLectureSlidesComponent } from './lesson/lesson-lecture-slides/lesson-lecture-slides.component';\nimport { LessonMidiaContentComponent } from './lesson/lesson-media-content/lesson-media-content.component';\nimport { LessonLectureNavStepComponent } from './lesson/lesson-lecture-nav-step/lesson-lecture-nav-step.component';\nimport { MatCardModule } from '@angular/material/card';\nimport { LessonFinishedDialogComponent } from './components/lesson-finished-dialog/lesson-finished-dialog.component';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatRippleModule } from '@angular/material/core';\nimport { CoursesListComponent } from './components/courses-list/courses-list.component';\nimport { CourseDetailPageComponent } from './pages/course-detail-page/course-detail-page.component';\n\nimport { MatListModule } from '@angular/material/list';\nimport { LessonScriptPageComponent } from './pages/lesson-script-page/lesson-script-page.component';\nimport { LessonsListComponent } from './components/lessons-list/lessons-list.component';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { ProgramLevelRangePipe } from './pipes/program-level-range.pipe';\nimport { FilterLessonsPipe } from './pipes/filter-lessons.pipe';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { LessonClassPageComponent } from './pages/lesson-class-page/lesson-class-page.component';\nimport { SlidesStepperComponent } from './components/slides-stepper/slides-stepper.component';\n\nconst routes = [\n    { path: '', pathMatch: 'full', redirectTo: 'courses' },\n    {\n        path: 'courses',\n        component: CoursesPageComponent,\n    },\n    {\n        path: 'courses/:courseId',\n        component: CourseDetailPageComponent,\n    },\n    {\n        path: 'programs/:programId',\n        component: CourseDetailComponent,\n    },\n    {\n        path: 'lessons/:lessonId',\n        component: LessonDetailComponent,\n    },\n    {\n        path: 'lessons/:lessonId/script',\n        component: LessonScriptPageComponent,\n    },\n    {\n        path: 'lessons/:lessonId/class',\n        component: LessonClassPageComponent,\n    },\n];\n\n@NgModule({\n    declarations: [\n        // Components\n        LessonListComponent,\n        CourseDetailComponent,\n        LessonCardComponent,\n        LessonDetailComponent,\n        LessonLectureSlidesComponent,\n        LessonMidiaContentComponent,\n        LessonLectureNavStepComponent,\n        LessonFinishedDialogComponent,\n        LessonScriptPageComponent,\n        CoursesPageComponent,\n        CoursesListComponent,\n        CourseDetailPageComponent,\n        LessonsListComponent,\n        LessonClassPageComponent,\n        SlidesStepperComponent,\n\n        // Pipes\n        ProgramLevelRangePipe,\n        FilterLessonsPipe,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        RouterModule.forChild(routes),\n\n        // material imports\n        MatFormFieldModule,\n        MatSelectModule,\n        MatTooltipModule,\n        MatInputModule,\n        MatTabsModule,\n        MatToolbarModule,\n        MatCardModule,\n        MatCheckboxModule,\n        MatRippleModule,\n        MatListModule,\n        MatChipsModule,\n        MatProgressBarModule,\n        MatSliderModule,\n\n        // app imports\n        SharedModule,\n    ],\n    providers: [{ provide: Window, useValue: window }],\n})\nexport class LMSModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CourseDetailComponent"
                        },
                        {
                            "name": "CourseDetailPageComponent"
                        },
                        {
                            "name": "CoursesListComponent"
                        },
                        {
                            "name": "CoursesPageComponent"
                        },
                        {
                            "name": "FilterLessonsPipe"
                        },
                        {
                            "name": "LessonCardComponent"
                        },
                        {
                            "name": "LessonClassPageComponent"
                        },
                        {
                            "name": "LessonDetailComponent"
                        },
                        {
                            "name": "LessonFinishedDialogComponent"
                        },
                        {
                            "name": "LessonLectureNavStepComponent"
                        },
                        {
                            "name": "LessonLectureSlidesComponent"
                        },
                        {
                            "name": "LessonListComponent"
                        },
                        {
                            "name": "LessonMidiaContentComponent"
                        },
                        {
                            "name": "LessonScriptPageComponent"
                        },
                        {
                            "name": "LessonsListComponent"
                        },
                        {
                            "name": "ProgramLevelRangePipe"
                        },
                        {
                            "name": "SlidesStepperComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MessageModule",
            "id": "module-MessageModule-a411bf0e1a0a638cdbb214d1eb5b7be5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/main/invitation/message/message.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { MessageComponent } from './message.component';\nimport { SharedModule } from 'app/@shared/shared.module';\n\nconst routes = [\n    {\n        path: 'message/:status',\n        component: MessageComponent,\n    },\n];\n\n@NgModule({\n    declarations: [MessageComponent],\n    imports: [RouterModule.forChild(routes), SharedModule],\n})\nexport class MessageModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MessageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProfileModule",
            "id": "module-ProfileModule-ed58e96fd58dc6c9c071beaca441070b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/profile/profile.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { DateAdapter, MAT_DATE_LOCALE } from '@angular/material/core';\nimport { MatCardModule } from '@angular/material/card';\nimport {\n    MatMomentDateModule,\n    MomentDateAdapter,\n    MAT_MOMENT_DATE_ADAPTER_OPTIONS,\n} from '@angular/material-moment-adapter';\n\nimport { NgxMaskModule, IConfig } from 'ngx-mask';\n\nimport { SharedModule } from 'app/@shared/shared.module';\n\nimport { UserProfilePageComponent } from './pages/user-profile-page/user-profile-page.component';\nimport { UserPageComponent } from './pages/user-page/user-page.component';\nimport { UserPasswordPageComponent } from './pages/user-password-page/user-password-page.component';\nimport { UserProfileFormComponent } from './components/user-profile-form/user-profile-form.component';\n\nconst maskConfig: Partial<IConfig> = {\n    validation: true,\n};\n\nexport const accountPath = 'account';\nexport const passwordPath = 'password';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: UserPageComponent,\n        children: [\n            {\n                path: accountPath,\n                component: UserProfilePageComponent,\n            },\n            {\n                path: passwordPath,\n                component: UserPasswordPageComponent,\n            },\n        ],\n    },\n];\n\n@NgModule({\n    declarations: [UserProfilePageComponent, UserPageComponent, UserPasswordPageComponent, UserProfileFormComponent],\n    imports: [\n        RouterModule.forChild(routes),\n\n        MatStepperModule,\n        MatDatepickerModule,\n        MatMomentDateModule,\n        MatCardModule,\n\n        NgxMaskModule.forRoot(maskConfig),\n\n        SharedModule,\n    ],\n    providers: [\n        { provide: MAT_DATE_LOCALE, useValue: 'en-GB' },\n        { provide: DateAdapter, useClass: MomentDateAdapter },\n        { provide: MAT_MOMENT_DATE_ADAPTER_OPTIONS, useValue: { useUtc: true } },\n    ],\n})\nexport class ProfileModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UserPageComponent"
                        },
                        {
                            "name": "UserPasswordPageComponent"
                        },
                        {
                            "name": "UserProfileFormComponent"
                        },
                        {
                            "name": "UserProfilePageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProgressBarModule",
            "id": "module-ProgressBarModule-2ff91f441ba2fdfe5691a26465256937",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/@core/components/progress-bar/progress-bar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\n\nimport { ProgressBarComponent } from './progress-bar.component';\n\n@NgModule({\n    declarations: [ProgressBarComponent],\n    imports: [CommonModule, RouterModule, MatButtonModule, MatIconModule, MatProgressBarModule],\n    exports: [ProgressBarComponent],\n})\nexport class ProgressBarModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ProgressBarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ProgressBarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ScriptStandAloneModule",
            "id": "module-ScriptStandAloneModule-7808712aa2517ea40dd96046448effeb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/script-stand-alone/script-stand-alone.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ScriptStandAlonePageComponent } from './pages/script-stand-alone-page/script-stand-alone-page.component';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from 'app/@shared/shared.module';\nimport { LayoutModule } from 'app/layout/layout.module';\n\nconst routes = [\n    {\n        path: '',\n        component: ScriptStandAlonePageComponent,\n    },\n];\n\n@NgModule({\n    imports: [CommonModule, RouterModule.forChild(routes), LayoutModule, SharedModule],\n    declarations: [ScriptStandAlonePageComponent],\n})\nexport class ScriptStandAloneModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ScriptStandAlonePageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LayoutModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-9639adc13f01c6d8148850336ac0311c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/@shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { DragDropModule } from '@angular/cdk/drag-drop';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CommonModule, DatePipe } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatMomentDateModule } from '@angular/material-moment-adapter';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MAT_DATE_LOCALE, MatRippleModule } from '@angular/material/core';\nimport { MAT_DIALOG_DATA, MatDialogModule, MatDialogRef } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { RouterModule } from '@angular/router';\nimport { IConfig, NgxMaskModule } from 'ngx-mask';\n\nimport { AudioControlCardComponent } from './components/audio-control-card/audio-control-card.component';\nimport { AuthLayoutComponent } from './components/auth-layout/auth-layout.component';\nimport { AvatarComponent } from './components/avatar/avatar.component';\nimport { BackButtonComponent } from './components/back-button/back-button.component';\nimport { ScheduleInputComponent } from './components/calendar/schedule-input/schedule-input.component';\nimport { WeeklyAvailabilityComponent } from './components/calendar/weekly-availability/weekly-availability.component';\nimport { ClassRecordListComponent } from './components/class-record-list/class-record-list.component';\nimport { ClassRecordTimerComponent } from './components/class-record-timer/class-record-timer.component';\nimport { CustomStepperComponent } from './components/custom-stepper/custom-stepper.component';\nimport { EnrollmentCardComponent } from './components/enrollment-card/enrollment-card.component';\nimport { EsloLetterLogoComponent } from './components/eslo-letter-logo/eslo-letter-logo.component';\nimport { EsloLogoComponent } from './components/eslo-logo/eslo-logo.component';\nimport { AddressInputComponent } from './components/forms/address-input/address-input.component';\nimport { ModalConfirmationComponent } from './components/modal-confirmation/modal-confirmation.component';\nimport { NavigationTabsComponent } from './components/navigation-tabs/navigation-tabs.component';\nimport { PillTabComponent } from './components/pill-tabs/pill-tab/pill-tab.component';\nimport { PillTabsComponent } from './components/pill-tabs/pill-tabs.component';\nimport { SvgIconComponent } from './components/svg-icon/svg-icon.component';\nimport { TopBarTitleComponent } from './components/top-bar-title/top-bar-title.component';\nimport { UserButtonComponent } from './components/user-button/user-button.component';\nimport { AttachDirective } from './directives/attach.directive';\nimport { DisableControlDirective } from './directives/disable-control.directive';\nimport { TargetDirective } from './directives/target.directive';\nimport { ConvertTimePipe } from './pipes/convert-time.pipe';\nimport { FormatNextClassDatePipe } from './pipes/format-next-class-date.pipe';\nimport { ConvertIntervalLabel } from './pipes/interval-to-label.pipe';\nimport { IsLastClassLessonDonePipe } from './pipes/is-last-class-lesson-done.pipe';\nimport { MinutesToHoursPipe } from './pipes/minutes-to-hours.pipe';\nimport { ParseCompletedLessonsPipe } from './pipes/parse-completed-lessons.pipe';\nimport { SafePipe } from './pipes/safe.pipe';\nimport { UTCToDatePipe } from './pipes/utc-to-date.pipe';\n\n// 3rd party\nconst maskConfig: Partial<IConfig> = {\n    validation: true,\n};\n\n@NgModule({\n    providers: [\n        { provide: MAT_DATE_LOCALE, useValue: 'en-GB' },\n        { provide: MatDialogRef, useValue: {} },\n        { provide: MAT_DIALOG_DATA, useValue: [] },\n        { provide: Window, useValue: window },\n        DatePipe,\n    ],\n    declarations: [\n        // Components\n        WeeklyAvailabilityComponent,\n        ScheduleInputComponent,\n        AddressInputComponent,\n        ModalConfirmationComponent,\n        EsloLetterLogoComponent,\n        TopBarTitleComponent,\n        UserButtonComponent,\n        NavigationTabsComponent,\n        BackButtonComponent,\n        PillTabsComponent,\n        PillTabComponent,\n        AvatarComponent,\n        ClassRecordTimerComponent,\n        CustomStepperComponent,\n        AuthLayoutComponent,\n        SvgIconComponent,\n        ClassRecordListComponent,\n        AudioControlCardComponent,\n        EnrollmentCardComponent,\n        EsloLogoComponent,\n\n        // Directives\n        DisableControlDirective,\n        TargetDirective,\n        AttachDirective,\n\n        // Pipes\n        ConvertIntervalLabel,\n        ConvertTimePipe,\n        MinutesToHoursPipe,\n        UTCToDatePipe,\n        SafePipe,\n        IsLastClassLessonDonePipe,\n        FormatNextClassDatePipe,\n        ParseCompletedLessonsPipe,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule,\n        FlexLayoutModule,\n\n        // Material moment date module\n        MatMomentDateModule,\n\n        // Material\n        MatButtonModule,\n        MatIconModule,\n        MatInputModule,\n        MatTabsModule,\n        MatFormFieldModule,\n        MatGridListModule,\n        MatDialogModule,\n        MatProgressSpinnerModule,\n        MatProgressBarModule,\n        MatMenuModule,\n        MatChipsModule,\n        MatRippleModule,\n        MatSelectModule,\n        MatSliderModule,\n        MatTooltipModule,\n        MatCardModule,\n        CdkStepperModule,\n        DragDropModule,\n\n        // 3rd party impors\n        NgxMaskModule.forRoot(maskConfig),\n    ],\n    // Exports common modules to be shared\n    exports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        // Material moment date module\n        MatMomentDateModule,\n\n        // Material\n        MatButtonModule,\n        MatIconModule,\n        MatInputModule,\n        MatTabsModule,\n        MatFormFieldModule,\n        MatProgressSpinnerModule,\n        CdkStepperModule,\n\n        FlexLayoutModule,\n\n        // Components\n        WeeklyAvailabilityComponent,\n        ScheduleInputComponent,\n        AddressInputComponent,\n        ModalConfirmationComponent,\n        EsloLetterLogoComponent,\n        TopBarTitleComponent,\n        UserButtonComponent,\n        NavigationTabsComponent,\n        BackButtonComponent,\n        PillTabsComponent,\n        PillTabComponent,\n        AvatarComponent,\n        ClassRecordTimerComponent,\n        CustomStepperComponent,\n        AuthLayoutComponent,\n        SvgIconComponent,\n        ClassRecordListComponent,\n        AudioControlCardComponent,\n        EnrollmentCardComponent,\n        EsloLogoComponent,\n\n        // Directives\n        DisableControlDirective,\n        TargetDirective,\n        AttachDirective,\n\n        // Pipes,\n        ConvertIntervalLabel,\n        ConvertTimePipe,\n        MinutesToHoursPipe,\n        UTCToDatePipe,\n        SafePipe,\n        IsLastClassLessonDonePipe,\n\n        // Modules\n        NgxMaskModule,\n    ],\n})\nexport class SharedModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddressInputComponent"
                        },
                        {
                            "name": "AttachDirective"
                        },
                        {
                            "name": "AudioControlCardComponent"
                        },
                        {
                            "name": "AuthLayoutComponent"
                        },
                        {
                            "name": "AvatarComponent"
                        },
                        {
                            "name": "BackButtonComponent"
                        },
                        {
                            "name": "ClassRecordListComponent"
                        },
                        {
                            "name": "ClassRecordTimerComponent"
                        },
                        {
                            "name": "ConvertIntervalLabel"
                        },
                        {
                            "name": "ConvertTimePipe"
                        },
                        {
                            "name": "CustomStepperComponent"
                        },
                        {
                            "name": "DisableControlDirective"
                        },
                        {
                            "name": "EnrollmentCardComponent"
                        },
                        {
                            "name": "EsloLetterLogoComponent"
                        },
                        {
                            "name": "EsloLogoComponent"
                        },
                        {
                            "name": "FormatNextClassDatePipe"
                        },
                        {
                            "name": "IsLastClassLessonDonePipe"
                        },
                        {
                            "name": "MinutesToHoursPipe"
                        },
                        {
                            "name": "ModalConfirmationComponent"
                        },
                        {
                            "name": "NavigationTabsComponent"
                        },
                        {
                            "name": "ParseCompletedLessonsPipe"
                        },
                        {
                            "name": "PillTabComponent"
                        },
                        {
                            "name": "PillTabsComponent"
                        },
                        {
                            "name": "SafePipe"
                        },
                        {
                            "name": "ScheduleInputComponent"
                        },
                        {
                            "name": "SvgIconComponent"
                        },
                        {
                            "name": "TargetDirective"
                        },
                        {
                            "name": "TopBarTitleComponent"
                        },
                        {
                            "name": "UTCToDatePipe"
                        },
                        {
                            "name": "UserButtonComponent"
                        },
                        {
                            "name": "WeeklyAvailabilityComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AddressInputComponent"
                        },
                        {
                            "name": "AttachDirective"
                        },
                        {
                            "name": "AudioControlCardComponent"
                        },
                        {
                            "name": "AuthLayoutComponent"
                        },
                        {
                            "name": "AvatarComponent"
                        },
                        {
                            "name": "BackButtonComponent"
                        },
                        {
                            "name": "ClassRecordListComponent"
                        },
                        {
                            "name": "ClassRecordTimerComponent"
                        },
                        {
                            "name": "ConvertIntervalLabel"
                        },
                        {
                            "name": "ConvertTimePipe"
                        },
                        {
                            "name": "CustomStepperComponent"
                        },
                        {
                            "name": "DisableControlDirective"
                        },
                        {
                            "name": "EnrollmentCardComponent"
                        },
                        {
                            "name": "EsloLetterLogoComponent"
                        },
                        {
                            "name": "EsloLogoComponent"
                        },
                        {
                            "name": "IsLastClassLessonDonePipe"
                        },
                        {
                            "name": "MinutesToHoursPipe"
                        },
                        {
                            "name": "ModalConfirmationComponent"
                        },
                        {
                            "name": "NavigationTabsComponent"
                        },
                        {
                            "name": "PillTabComponent"
                        },
                        {
                            "name": "PillTabsComponent"
                        },
                        {
                            "name": "SafePipe"
                        },
                        {
                            "name": "ScheduleInputComponent"
                        },
                        {
                            "name": "SvgIconComponent"
                        },
                        {
                            "name": "TargetDirective"
                        },
                        {
                            "name": "TopBarTitleComponent"
                        },
                        {
                            "name": "UTCToDatePipe"
                        },
                        {
                            "name": "UserButtonComponent"
                        },
                        {
                            "name": "WeeklyAvailabilityComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SubscriptionModule",
            "id": "module-SubscriptionModule-d0335417c8d340169563939502b7fdfc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/subscription/subscription.module.ts",
            "methods": [],
            "sourceCode": "import { InvoicesListComponent } from './components/invoices-list/invoices-list.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\n\nimport { SubscriptionPageComponent } from './pages/subscription-page/subscription-page.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { SharedModule } from 'app/@shared/shared.module';\nimport { InvoicesPageComponent } from './pages/invoices-page/invoices-page.component';\nimport { InvoiceDetailsPageComponent } from './pages/invoice-details-page/invoice-details-page.component';\nimport { InvoicePreviewComponent } from './components/invoice-preview/invoice-preview.component';\nimport { InvoiceDaysPipe } from './components/invoice-preview/invoice-days.pipe';\nimport { InvoiceDatePipe } from './components/invoice-preview/invoice-date.pipe';\n\nconst routes: Routes = [\n    // {\n    //     path: '',\n    //     component: SubscriptionPageComponent,\n    // },\n    { path: '', pathMatch: 'full', redirectTo: 'invoices' },\n    {\n        path: 'invoices',\n        component: InvoicesPageComponent,\n    },\n    {\n        path: 'invoices/:month',\n        component: InvoiceDetailsPageComponent,\n    },\n    {\n        path: 'method',\n        component: SubscriptionPageComponent,\n    },\n];\n@NgModule({\n    declarations: [\n        SubscriptionPageComponent,\n        InvoicesPageComponent,\n        InvoiceDetailsPageComponent,\n        InvoicesListComponent,\n        InvoicePreviewComponent,\n        InvoiceDaysPipe,\n        InvoiceDatePipe,\n    ],\n    imports: [CommonModule, RouterModule.forChild(routes), ScrollingModule, SharedModule],\n})\nexport class SubscriptionModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "InvoiceDatePipe"
                        },
                        {
                            "name": "InvoiceDaysPipe"
                        },
                        {
                            "name": "InvoiceDetailsPageComponent"
                        },
                        {
                            "name": "InvoicePreviewComponent"
                        },
                        {
                            "name": "InvoicesListComponent"
                        },
                        {
                            "name": "InvoicesPageComponent"
                        },
                        {
                            "name": "SubscriptionPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TransferModule",
            "id": "module-TransferModule-bd409cdde8f001e1a359490ac064ed78",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/main/invitation/transfer/transfer.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDialogModule } from '@angular/material/dialog';\n\nimport { TransferComponent } from './transfer.component';\nimport { TransferService } from './transfer.service';\n\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { SharedModule } from 'app/@shared/shared.module';\n\nconst routes = [\n    {\n        path: 'transfer/:invitationToken',\n        component: TransferComponent,\n        resolve: {\n            invitation: TransferService,\n        },\n    },\n];\n\n@NgModule({\n    declarations: [TransferComponent],\n    imports: [RouterModule.forChild(routes), MatCheckboxModule, MatDialogModule, ReactiveFormsModule, SharedModule],\n    providers: [TransferService],\n})\nexport class TransferModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TransferComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserAccountModule",
            "id": "module-UserAccountModule-e3117ea0fa603e1c514e3cd520fb6657",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/main/user-account/user-account.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ConfirmRegistrationComponent } from './confirm-registration/confirm-registration.component';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from 'app/@shared/shared.module';\n\nconst userAccountRoutes = [\n    {\n        path: 'confirm-email/:registrationToken',\n        component: ConfirmRegistrationComponent,\n    },\n];\n\n@NgModule({\n    declarations: [ConfirmRegistrationComponent],\n    imports: [RouterModule.forChild(userAccountRoutes), SharedModule],\n})\nexport class UserAccountModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ConfirmRegistrationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "WelcomeModule",
            "id": "module-WelcomeModule-5749cd39e84ac2a5603146e59322cc2f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/main/invitation/welcome/welcome.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDialogModule } from '@angular/material/dialog';\n\nimport { WelcomeComponent } from './welcome.component';\nimport { WelcomeService } from './welcome.service';\n\nimport { ModalTermsConditionsComponent } from './modal-terms-conditions/modal-terms-conditions.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { SharedModule } from 'app/@shared/shared.module';\n\nconst routes = [\n    {\n        path: 'welcome/:invitationToken',\n        component: WelcomeComponent,\n        resolve: {\n            invitation: WelcomeService,\n        },\n    },\n];\n\n@NgModule({\n    declarations: [WelcomeComponent, ModalTermsConditionsComponent],\n    imports: [RouterModule.forChild(routes), MatCheckboxModule, MatDialogModule, ReactiveFormsModule, SharedModule],\n    providers: [WelcomeService],\n})\nexport class WelcomeModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ModalTermsConditionsComponent"
                        },
                        {
                            "name": "WelcomeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "accountPath",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/profile/profile.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'account'"
            },
            {
                "name": "All",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Buttons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "bootstrap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/main.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => platformBrowserDynamic().bootstrapModule(AppModule)"
            },
            {
                "name": "CLASS_RECORD",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/@core/graphql/class-record.graphql.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    fragment classRecord on ClassRecord {\n        ... on EnrollmentClassRecord {\n            id\n            enrollmentId\n            teacherNotes\n            status\n            startedAt\n            completedAt\n            lessonStartedAt\n            lessonEndedAt\n            revertClassStatus\n            lesson {\n                id\n                code\n                title\n                levelOrder\n            }\n            enrollment {\n                id\n                student {\n                    id\n                    firstName\n                    familyName\n                    displayName\n                }\n            }\n        }\n        ... on StudyGroupClassRecord {\n            id\n            studyGroupId\n            teacherNotes\n            status\n            startedAt\n            completedAt\n            lessonStartedAt\n            lessonEndedAt\n            revertClassStatus\n            lesson {\n                id\n                code\n                title\n                levelOrder\n            }\n            studyGroup {\n                id\n                enrollments {\n                    id\n                    student {\n                        id\n                        firstName\n                        familyName\n                        displayName\n                    }\n                }\n            }\n            studyGroupClassAttendees {\n                id\n                studentId\n                student {\n                    id\n                    student {\n                        id\n                        firstName\n                        familyName\n                        displayName\n                    }\n                }\n            }\n        }\n    }\n`"
            },
            {
                "name": "CLASS_RECORD_SUMMARY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/@core/graphql/class-record.graphql.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    fragment classRecordSummary on ClassRecord {\n        ... on EnrollmentClassRecord {\n            id\n            lesson {\n                id\n            }\n            enrollment {\n                id\n            }\n        }\n        ... on StudyGroupClassRecord {\n            id\n            lesson {\n                id\n            }\n            studyGroup {\n                id\n            }\n        }\n    }\n`"
            },
            {
                "name": "CLASSROOM_STUDENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/@core/graphql/student.graphql.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    fragment classroomStudent on Student {\n        id\n        firstName\n        familyName\n        displayName\n        primaryEmail\n    }\n`"
            },
            {
                "name": "CLASSROOM_SUMMARY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/@core/graphql/classroom.graphql.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    fragment classroomSummary on Classroom {\n        id\n        students {\n            ...classroomStudent\n            enrollments {\n                ...enrollmentSummary\n            }\n        }\n        studyGroups {\n            ...studyGroupSummary\n        }\n        classInProgress {\n            ...classRecord\n        }\n        studentEnrollments {\n            ...enrollmentSummary\n        }\n    }\n    ${CLASSROOM_STUDENT}\n    ${ENROLLMENT_SUMMARY}\n    ${STUDY_GROUP_SUMMARY}\n    ${CLASS_RECORD}\n`"
            },
            {
                "name": "confirmPasswordValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/authentication/components/register-form/register-form.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ValidatorFn",
                "defaultValue": "(control: AbstractControl): ValidationErrors | null => {\n    if (!control.parent || !control) {\n        return null;\n    }\n\n    const password = control.parent.get('password');\n    const passwordConfirm = control.parent.get('passwordConfirm');\n\n    if (!password || !passwordConfirm) {\n        return null;\n    }\n\n    if (passwordConfirm.value === '') {\n        return null;\n    }\n\n    if (password.value === passwordConfirm.value) {\n        return null;\n    }\n\n    return { passwordsNotMatching: true };\n}",
                "rawdescription": "Confirm password validator",
                "description": "<p>Confirm password validator</p>\n"
            },
            {
                "name": "confirmPasswordValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/authentication/components/reset-password-form/reset-password-form.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ValidatorFn",
                "defaultValue": "(control: AbstractControl): ValidationErrors | null => {\n    if (!control.parent || !control) {\n        return null;\n    }\n\n    const password = control.parent.get('password');\n    const passwordConfirm = control.parent.get('passwordConfirm');\n\n    if (!password || !passwordConfirm) {\n        return null;\n    }\n\n    if (passwordConfirm.value === '') {\n        return null;\n    }\n\n    if (password.value === passwordConfirm.value) {\n        return null;\n    }\n\n    return { passwordsNotMatching: true };\n}",
                "rawdescription": "Confirm password validator",
                "description": "<p>Confirm password validator</p>\n"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "COUNTDOWN_SECONDS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/authentication/pages/subscription-active-page/subscription-active-page.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "5"
            },
            {
                "name": "createApollo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/@core/core.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(httpLink: HttpLink, matSnackBar: MatSnackBar) => {\n    // Get the authentication token from local storage if it exists\n    const token = localStorage.getItem('token');\n    const auth = setContext((operation, context) => ({\n        headers: {\n            Authorization: `Bearer ${token}`,\n        },\n    }));\n\n    const errorLink = onError(({ graphQLErrors, networkError }) => {\n        let errorMessage: string;\n\n        if (graphQLErrors) {\n            errorMessage = graphQLErrors.map(({ message }) => message).join(' \\n');\n        }\n\n        if (networkError) {\n            if (errorMessage) {\n                errorMessage += ` ${networkError.message}`;\n            } else {\n                errorMessage = networkError.message;\n            }\n        }\n\n        if (errorMessage) {\n            const panelClass = ['snackbar-panel'];\n            const buttonLabel = 'dismiss';\n\n            if (errorMessage.length <= 35) {\n                panelClass.push('snackbar-panel--one-line');\n            } else {\n                panelClass.push('snackbar-panel--two-line');\n            }\n\n            matSnackBar.open(errorMessage, buttonLabel, {\n                duration: 0,\n                panelClass,\n            });\n        }\n    });\n\n    return {\n        link: errorLink.concat(httpLink.create({ uri, includeExtensions: true })),\n        // https://www.apollographql.com/docs/react/data/fragments/#using-fragments-with-unions-and-interfaces\n        cache: new InMemoryCache({\n            possibleTypes: {\n                ClassRecord: ['EnrollmentClassRecord', 'StudyGroupClassRecord'],\n            },\n        }),\n    };\n}"
            },
            {
                "name": "DAYS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/@shared/components/calendar/schedule-input/schedule-input.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']"
            },
            {
                "name": "ENROLLMENT_DETAIL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/@core/graphql/enrollment.graphql.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    fragment enrollmentDetail on Enrollment {\n        id\n        sourceType\n        status\n        studyGroup {\n            ...studyGroupSummary\n        }\n        level {\n            ...levelSummary\n        }\n        student {\n            ...userContact\n        }\n        invitation {\n            ...invitationSummary\n        }\n        events {\n            ...eventSummary\n        }\n        classInProgress {\n            ...classRecord\n        }\n        lastLesson {\n            ...classRecord\n        }\n        nextLesson {\n            ...lessonSummary\n        }\n        nextEventOccurrence {\n            ...eventOccurrenceSummary\n        }\n        lessons {\n            ...lessonSummary\n        }\n        classRecords {\n            ...classRecord\n        }\n    }\n    ${CLASS_RECORD}\n    ${LESSON_SUMMARY}\n    ${INVITATION_SUMMARY}\n    ${USER_CONTACT}\n    ${EVENT_SUMMARY}\n    ${EVENT_OCCURRENCE_SUMMARY}\n    ${STUDY_GROUP_SUMMARY}\n`"
            },
            {
                "name": "ENROLLMENT_SUMMARY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/@core/graphql/enrollment.graphql.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    fragment enrollmentSummary on Enrollment {\n        id\n        sourceType\n        status\n        nextLesson {\n            id\n        }\n        teacher {\n            id\n            firstName\n            familyName\n        }\n        student {\n            ...userContact\n        }\n        invitation {\n            id\n        }\n        studyGroup {\n            ...studyGroupSummary\n        }\n        level {\n            ...levelSummary\n        }\n        events {\n            ...eventSummary\n        }\n        lessons {\n            id\n        }\n    }\n    ${LEVEL_SUMMARY}\n    ${STUDY_GROUP_SUMMARY}\n    ${USER_CONTACT}\n    ${EVENT_SUMMARY}\n`"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.hmr.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    production: false,\n    hmr: true,\n    stripePublicKey:\n        'pk_test_51InHpCC2dPDUJp1aemgah94n0t8P4DQyyli5i9vvY1STi9mG6oQ5vKPWAHTwPWw8Uob3N4cPcO7Zf0Z6a3C91Zfd00LXJoBlGw',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.non-production.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    production: true,\n    hmr: false,\n    apiUrl: 'https://eslo-backend-ihqesfbela-rj.a.run.app',\n    stripePublicKey:\n        'pk_test_51InHpCC2dPDUJp1aemgah94n0t8P4DQyyli5i9vvY1STi9mG6oQ5vKPWAHTwPWw8Uob3N4cPcO7Zf0Z6a3C91Zfd00LXJoBlGw',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.production.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    production: true,\n    hmr: false,\n    apiUrl: 'https://eslo-backend-efytsnifsq-rj.a.run.app',\n    stripePublicKey:\n        'pk_live_51InHpCC2dPDUJp1a0q59uicUEZCLqy2BhKS8JovtIAH0hMKhFJ2SazxljhyrOrWieyEdCviFbEKUzjLk5ack6HrI00BAn4u75N',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    production: false,\n    hmr: false,\n    apiUrl: 'http://localhost:3000',\n    // apiUrl: 'http://192.168.0.7:3000',\n    stripePublicKey:\n        'pk_test_51InHpCC2dPDUJp1aemgah94n0t8P4DQyyli5i9vvY1STi9mG6oQ5vKPWAHTwPWw8Uob3N4cPcO7Zf0Z6a3C91Zfd00LXJoBlGw',\n}"
            },
            {
                "name": "EVENT_OCCURRENCE_SUMMARY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/@core/graphql/events.graphql.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    fragment eventOccurrenceSummary on EventOccurrence {\n        id\n        recurringEventId\n        originalStartDateTime\n        originalStartTimeZone\n        sourceType\n        sourceId\n        status\n        title\n        description\n        availabilityType\n        startDateTime\n        startTimeZone\n        endDateTime\n        endTimeZone\n        sendNotifications\n        visibility\n    }\n`"
            },
            {
                "name": "EVENT_SUMMARY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/@core/graphql/events.graphql.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    fragment eventSummary on Event {\n        id\n        title\n        description\n        availabilityType\n        sourceType\n        sourceId\n        status\n        startDateTime\n        startTimeZone\n        endDateTime\n        endTimeZone\n        recurrence\n        visibility\n        sendNotifications\n        startedAt\n        completedAt\n        eventAttendees {\n            id\n            attendee {\n                id\n                firstName\n            }\n        }\n    }\n`"
            },
            {
                "name": "hmrBootstrap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/hmr.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(module: any, bootstrap: () => Promise<NgModuleRef<any>>) => {\n    let ngModule: NgModuleRef<any>;\n    module.hot.accept();\n    bootstrap().then((mod) => (ngModule = mod));\n    module.hot.dispose(() => {\n        const appRef: ApplicationRef = ngModule.injector.get(ApplicationRef);\n        const elements = appRef.components.map((c) => c.location.nativeElement);\n        const makeVisible = createNewHosts(elements);\n        ngModule.destroy();\n        makeVisible();\n    });\n}"
            },
            {
                "name": "httpInterceptorProviders",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/@core/interceptors/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[{ provide: HTTP_INTERCEPTORS, useClass: HttpRequestInterceptor, multi: true }]"
            },
            {
                "name": "INVITATION_SUMMARY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/@core/graphql/invitation.graphql.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    fragment invitationSummary on Invitation {\n        id\n        inviteeEmail\n        inviteeFirstName\n        inviteeSurname\n    }\n`"
            },
            {
                "name": "INVOICE_DETAILS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/@core/graphql/invoice.graphql.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    fragment invoiceDetails on InvoicePreview {\n        id\n        processedAt\n        dueDate\n        invoicePeriodFrom\n        invoicePeriodTo\n        companyDetails {\n            id\n            name\n            address\n            phone\n            email\n            webSite\n        }\n        customerDetails {\n            id\n            name\n            address\n            phone\n            email\n        }\n        balanceSummary {\n            taxAmount\n            totalAmount\n            discountAmount\n        }\n        invoiceItems {\n            id\n            invoiceLineNumber\n            productId\n            productName\n            productDescription\n            balance {\n                quantity\n                unitPrice\n                taxAmount\n                totalAmount\n                discountAmount\n            }\n        }\n    }\n`"
            },
            {
                "name": "LESSON_DETAILS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/@core/graphql/lesson.graphql.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    fragment lessonDetails on Lesson {\n        id\n        title\n        category\n        subject\n        slug\n        levelOrder\n        lessonMaterial {\n            lectureScript {\n                order\n                media {\n                    id\n                    mimeType\n                    rootUri\n                }\n            }\n            studentBook {\n                order\n                media {\n                    id\n                    mimeType\n                    rootUri\n                }\n            }\n            audio {\n                order\n                media {\n                    id\n                    mimeType\n                    rootUri\n                }\n            }\n            activities {\n                order\n                title\n                activitySlides {\n                    order\n                    media {\n                        id\n                        mimeType\n                        rootUri\n                    }\n                }\n            }\n        }\n    }\n`"
            },
            {
                "name": "LESSON_SUMMARY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/@core/graphql/lesson.graphql.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    fragment lessonSummary on Lesson {\n        id\n        code\n        title\n        category\n        subject\n        slug\n        levelOrder\n    }\n`"
            },
            {
                "name": "LEVEL_SUMMARY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/@core/graphql/level.graphql.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    fragment levelSummary on Level {\n        id\n        name\n        code\n        label\n        layoutSettings {\n            svgImageUrl\n            icon\n            primaryColour\n            secondaryColour\n        }\n        module {\n            id\n            program {\n                id\n                code\n                label\n                name\n                icon\n                label\n            }\n        }\n    }\n`"
            },
            {
                "name": "Links",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Navbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "maskConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/@shared/shared.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Partial<IConfig>",
                "defaultValue": "{\n    validation: true,\n}"
            },
            {
                "name": "maskConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/authentication/authentication.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Partial<IConfig>",
                "defaultValue": "{\n    validation: true,\n}"
            },
            {
                "name": "maskConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/profile/profile.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Partial<IConfig>",
                "defaultValue": "{\n    validation: true,\n}"
            },
            {
                "name": "ONBOARDING_DETAIL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/@core/graphql/onboarding.graphql.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    fragment onboardingDetail on Form {\n        id\n    }\n`"
            },
            {
                "name": "passwordPath",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/profile/profile.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'password'"
            },
            {
                "name": "PRODUCT_DETAILS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/@core/graphql/product.graphql.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    fragment productDetails on Product {\n        id\n        name\n        slug\n        description\n        subcategory {\n            code\n            name\n            description\n            category {\n                code\n                name\n                description\n            }\n        }\n        prices {\n            id\n            name\n            slug\n            pricePeriod {\n                interval\n                intervalCount\n            }\n            description\n            taxAmount\n            unitTotalAmount\n            currencyIsoCode\n            type\n        }\n    }\n`"
            },
            {
                "name": "PROGRAM_DETAILS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/@core/graphql/program.graphql.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    fragment programDetails on Program {\n        id\n        code\n        name\n        icon\n        label\n        description\n        modules {\n            id\n            code\n            name\n            programOrder\n            description\n            levels {\n                id\n                code\n                name\n                label\n                moduleOrder\n                description\n                lessons {\n                    id\n                    title\n                    category\n                    subject\n                    slug\n                    levelOrder\n                }\n            }\n        }\n    }\n`"
            },
            {
                "name": "PROGRAM_SUMMARY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/@core/graphql/program.graphql.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    fragment programSummary on Program {\n        id\n        code\n        name\n        icon\n        label\n        description\n        modules {\n            id\n            code\n            name\n            programOrder\n            description\n            levels {\n                id\n                code\n                name\n                label\n                moduleOrder\n                description\n            }\n        }\n    }\n`"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/calendar/calendar.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    {\n        path: '',\n        component: CalendarPageComponent,\n        children: [\n            {\n                path: 'month',\n                component: MonthPageComponent,\n            },\n            {\n                path: 'availability',\n                component: AvailabilityPageComponent,\n            },\n        ],\n    },\n    {\n        path: '**',\n        redirectTo: '',\n    },\n]"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/authentication/authentication.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    { path: '', pathMatch: 'full', redirectTo: 'login' },\n    {\n        path: 'register',\n        component: RegisterPageComponent,\n    },\n    {\n        path: 'create-account',\n        component: CreateAccountPageComponent,\n    },\n\n    {\n        path: 'select-plan',\n        component: SelectPlanPageComponent,\n    },\n    {\n        path: 'subscription-canceled',\n        component: SelectPlanPageComponent,\n    },\n    {\n        path: 'subscription-active',\n        component: SubscriptionActivePageComponent,\n    },\n\n    {\n        path: 'login',\n        component: LoginPageComponent,\n    },\n    {\n        path: 'forgot-password',\n        component: ForgotPasswordPageComponent,\n    },\n    {\n        path: 'reset-password/:resetPasswordToken',\n        component: ResetPasswordPageComponent,\n    },\n    {\n        path: 'confirm-email',\n        component: ConfirmEmailPageComponent,\n    },\n]"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/classroom/classroom.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    { path: '', pathMatch: 'full', redirectTo: 'students' },\n    {\n        path: 'students',\n        component: ClassListComponent,\n    },\n    {\n        path: 'enrollments/:enrollmentId',\n        component: EnrollmentDetailPageComponent,\n    },\n    {\n        path: 'groups',\n        component: GroupsPageComponent,\n    },\n    {\n        path: 'groups/:groupId/schedule',\n        component: GroupSchedulePageComponent,\n    },\n    {\n        path: 'groups/:groupId/members',\n        component: GroupMembersPageComponent,\n    },\n]"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/enrolled/enrolled.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    {\n        path: 'enrollment/:enrollmentId',\n        component: StudentEnrollmentPageComponent,\n    },\n    {\n        path: 'student-book/:lessonId',\n        component: StudentBookPageComponent,\n    },\n    {\n        path: '',\n        component: EnrolledPageComponent,\n        children: [\n            { path: '', pathMatch: 'full', redirectTo: 'active' },\n            {\n                path: 'active',\n                component: ActiveEnrollmentsPageComponent,\n            },\n            {\n                path: 'archive',\n                component: ArchiveEnrollmentsPageComponent,\n            },\n        ],\n    },\n]"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/dashboard.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    {\n        path: '',\n        component: DashboardPageComponent,\n    },\n]"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/lms/lms.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    { path: '', pathMatch: 'full', redirectTo: 'courses' },\n    {\n        path: 'courses',\n        component: CoursesPageComponent,\n    },\n    {\n        path: 'courses/:courseId',\n        component: CourseDetailPageComponent,\n    },\n    {\n        path: 'programs/:programId',\n        component: CourseDetailComponent,\n    },\n    {\n        path: 'lessons/:lessonId',\n        component: LessonDetailComponent,\n    },\n    {\n        path: 'lessons/:lessonId/script',\n        component: LessonScriptPageComponent,\n    },\n    {\n        path: 'lessons/:lessonId/class',\n        component: LessonClassPageComponent,\n    },\n]"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/script-stand-alone/script-stand-alone.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    {\n        path: '',\n        component: ScriptStandAlonePageComponent,\n    },\n]"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/main/invitation/message/message.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    {\n        path: 'message/:status',\n        component: MessageComponent,\n    },\n]"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/main/invitation/transfer/transfer.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    {\n        path: 'transfer/:invitationToken',\n        component: TransferComponent,\n        resolve: {\n            invitation: TransferService,\n        },\n    },\n]"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/main/invitation/welcome/welcome.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    {\n        path: 'welcome/:invitationToken',\n        component: WelcomeComponent,\n        resolve: {\n            invitation: WelcomeService,\n        },\n    },\n]"
            },
            {
                "name": "STUDY_GROUP_DETAILS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/@core/graphql/study-group.graphql.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    fragment studyGroupDetails on StudyGroup {\n        id\n        name\n        level {\n            ...levelSummary\n        }\n        studyGroupTeachers {\n            teacher {\n                firstName\n                familyName\n            }\n        }\n        lastLesson {\n            id\n            lesson {\n                id\n            }\n        }\n        nextLesson {\n            id\n            code\n            title\n            category\n            subject\n            slug\n            levelOrder\n            level {\n                id\n            }\n        }\n        lessons {\n            id\n            code\n            title\n            category\n            subject\n            slug\n            levelOrder\n        }\n        enrollments {\n            id\n            status\n            sourceType\n            studyGroup {\n                id\n            }\n            level {\n                id\n                label\n                module {\n                    program {\n                        name\n                        label\n                    }\n                }\n            }\n            nextLesson {\n                id\n            }\n            student {\n                id\n                firstName\n                familyName\n                displayName\n            }\n        }\n        studyGroupClassRecords {\n            id\n            teacherNotes\n            status\n            startedAt\n            completedAt\n            lessonStartedAt\n            lessonEndedAt\n            revertClassStatus\n            lesson {\n                id\n            }\n            studyGroupClassAttendees {\n                attended\n                student {\n                    student {\n                        firstName\n                        familyName\n                    }\n                }\n            }\n        }\n        events {\n            ...eventSummary\n        }\n    }\n    ${LEVEL_SUMMARY}\n    ${EVENT_SUMMARY}\n`"
            },
            {
                "name": "STUDY_GROUP_SUMMARY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/@core/graphql/study-group.graphql.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    fragment studyGroupSummary on StudyGroup {\n        id\n        name\n        lessons {\n            id\n        }\n        level {\n            ...levelSummary\n        }\n        events {\n            ...eventSummary\n        }\n        studyGroupClassRecords {\n            id\n            status\n            lesson {\n                id\n            }\n        }\n        studyGroupTeachers {\n            teacher {\n                firstName\n                familyName\n            }\n        }\n        nextLesson {\n            id\n            title\n            category\n            subject\n        }\n    }\n    ${LEVEL_SUMMARY}\n    ${EVENT_SUMMARY}\n`"
            },
            {
                "name": "SUBSCRIPTION_SUMMARY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/@core/graphql/subscription.graphql.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    fragment subscriptionSummary on Subscription {\n        id\n        customerId\n        paymentProviderId\n        paymentProviderCheckoutId\n        status\n    }\n`"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Buttons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<StorybookButtonsComponent>",
                "defaultValue": "(args: StorybookButtonsComponent) => ({\n    props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Navbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<NavigationBarComponent>",
                "defaultValue": "(args: NavigationBarComponent) => ({\n    component: NavigationBarComponent,\n    props: args,\n})"
            },
            {
                "name": "uri",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/@core/core.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`${environment.apiUrl}/graphql`"
            },
            {
                "name": "USER_CONTACT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/@core/graphql/user-profile.graphql.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    fragment userContact on User {\n        id\n        firstName\n        familyName\n        displayName\n        primaryEmail\n    }\n`"
            },
            {
                "name": "USER_PROFILE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/@core/graphql/user-profile.graphql.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "gql`\n    fragment userProfile on User {\n        id\n        firstName\n        familyName\n        displayName\n        primaryEmail\n        dateOfBirth\n        profileComplete\n        userIdentificationList {\n            id\n            countryISO\n            category\n            code\n            attachementUrl\n        }\n        userAddresses {\n            id\n            addressType\n            postalCode\n            street\n            streetNumber\n            streetComplement\n            district\n            city\n            state\n            countryISO\n            latitude\n            longitude\n        }\n        userPhoneNumbers {\n            id\n            countryISO\n            category\n            code\n            rawFormat\n            nationalFormat\n            internationalFormat\n        }\n    }\n`"
            },
            {
                "name": "userAccountRoutes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/main/user-account/user-account.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    {\n        path: 'confirm-email/:registrationToken',\n        component: ConfirmRegistrationComponent,\n    },\n]"
            },
            {
                "name": "ValidateEvents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/classroom/components/invitation-form/invitation-form.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ValidatorFn",
                "defaultValue": "(eventControls: FormArray): ValidationErrors | null => {\n    let validEvents = true;\n    if (!eventControls?.controls) {\n        validEvents = false;\n    } else {\n        eventControls.controls.forEach((control) => {\n            try {\n                const event: Event = control.value;\n                if (!(event && event.recurrence && event.startDateTime && event.endDateTime)) {\n                    validEvents = false;\n                } else {\n                    const eventRecurrence = RRule.fromString(event.recurrence);\n                    const eventStart = new Date(parseInt(event.startDateTime, 10));\n                    const eventEnd = new Date(parseInt(event.endDateTime, 10));\n\n                    if (\n                        !(eventRecurrence.isFullyConvertibleToText() && eventStart && eventEnd && eventEnd > eventStart)\n                    ) {\n                        validEvents = false;\n                    }\n                }\n            } catch (error) {\n                return { invalidEvent: true };\n            }\n        });\n    }\n\n    if (validEvents) {\n        return null;\n    } else {\n        return { invalidEvent: true };\n    }\n}",
                "rawdescription": "Event validation",
                "description": "<p>Event validation</p>\n"
            },
            {
                "name": "ValidateEventTimes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/calendar/edit-event-instance/edit-event-instance.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ValidatorFn",
                "defaultValue": "(eventFormGroup: FormGroup): ValidationErrors | null => {\n    let validEventTime = true;\n    if (!eventFormGroup?.controls) {\n        validEventTime = false;\n    } else {\n        const startDateControl = eventFormGroup.get('startDate');\n        const startDateValue = new Date(startDateControl.value);\n\n        const endDateControl = eventFormGroup.get('endDate');\n        const endDateValue = new Date(endDateControl.value);\n\n        if (endDateValue <= startDateValue) {\n            validEventTime = false;\n        }\n    }\n\n    if (validEventTime) {\n        return null;\n    } else {\n        return { invalidEventTime: true };\n    }\n}",
                "rawdescription": "Event validation",
                "description": "<p>Event validation</p>\n"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "ClassRecordType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "EnrollmentClassRecord | StudyGroupClassRecord",
                "file": "src/app/@core/models/class-record.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "IntervalType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"day\" | \"month\" | \"week\" | \"year\"",
                "file": "src/app/@core/models/product.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "SourceType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"ENROLLMENT\" | \"STUDY_GROUP\"",
                "file": "src/app/@core/models/enrollment.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [
            {
                "name": "ENROLLMENT_CARD_TYPES",
                "childs": [
                    {
                        "name": "ENROLLMENT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ENROLLMENT"
                    },
                    {
                        "name": "SUBSCRIPTION_RENEWAL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SUBSCRIPTION_RENEWAL"
                    },
                    {
                        "name": "NEXT_CLASS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "NEXT_CLASS"
                    },
                    {
                        "name": "CURRENT_HOMEWORK",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CURRENT_HOMEWORK"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/@shared/components/enrollment-card/enrollment-card.component.ts"
            },
            {
                "name": "ENROLLMENT_STATUS",
                "childs": [
                    {
                        "name": "ACTIVE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ACTIVE"
                    },
                    {
                        "name": "PENDING",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "PENDING"
                    },
                    {
                        "name": "CONFIRMED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CONFIRMED"
                    },
                    {
                        "name": "CANCELLED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CANCELLED"
                    },
                    {
                        "name": "DELETED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DELETED"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/@core/models/enrollment.model.ts"
            }
        ],
        "groupedVariables": {
            "src/app/profile/profile.module.ts": [
                {
                    "name": "accountPath",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/profile/profile.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'account'"
                },
                {
                    "name": "maskConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/profile/profile.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<IConfig>",
                    "defaultValue": "{\n    validation: true,\n}"
                },
                {
                    "name": "passwordPath",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/profile/profile.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'password'"
                }
            ],
            "src/stories/Buttons.stories.ts": [
                {
                    "name": "All",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Buttons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Buttons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<StorybookButtonsComponent>",
                    "defaultValue": "(args: StorybookButtonsComponent) => ({\n    props: args,\n})"
                }
            ],
            "src/main.ts": [
                {
                    "name": "bootstrap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/main.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => platformBrowserDynamic().bootstrapModule(AppModule)"
                }
            ],
            "src/app/@core/graphql/class-record.graphql.ts": [
                {
                    "name": "CLASS_RECORD",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/@core/graphql/class-record.graphql.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    fragment classRecord on ClassRecord {\n        ... on EnrollmentClassRecord {\n            id\n            enrollmentId\n            teacherNotes\n            status\n            startedAt\n            completedAt\n            lessonStartedAt\n            lessonEndedAt\n            revertClassStatus\n            lesson {\n                id\n                code\n                title\n                levelOrder\n            }\n            enrollment {\n                id\n                student {\n                    id\n                    firstName\n                    familyName\n                    displayName\n                }\n            }\n        }\n        ... on StudyGroupClassRecord {\n            id\n            studyGroupId\n            teacherNotes\n            status\n            startedAt\n            completedAt\n            lessonStartedAt\n            lessonEndedAt\n            revertClassStatus\n            lesson {\n                id\n                code\n                title\n                levelOrder\n            }\n            studyGroup {\n                id\n                enrollments {\n                    id\n                    student {\n                        id\n                        firstName\n                        familyName\n                        displayName\n                    }\n                }\n            }\n            studyGroupClassAttendees {\n                id\n                studentId\n                student {\n                    id\n                    student {\n                        id\n                        firstName\n                        familyName\n                        displayName\n                    }\n                }\n            }\n        }\n    }\n`"
                },
                {
                    "name": "CLASS_RECORD_SUMMARY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/@core/graphql/class-record.graphql.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    fragment classRecordSummary on ClassRecord {\n        ... on EnrollmentClassRecord {\n            id\n            lesson {\n                id\n            }\n            enrollment {\n                id\n            }\n        }\n        ... on StudyGroupClassRecord {\n            id\n            lesson {\n                id\n            }\n            studyGroup {\n                id\n            }\n        }\n    }\n`"
                }
            ],
            "src/app/@core/graphql/student.graphql.ts": [
                {
                    "name": "CLASSROOM_STUDENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/@core/graphql/student.graphql.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    fragment classroomStudent on Student {\n        id\n        firstName\n        familyName\n        displayName\n        primaryEmail\n    }\n`"
                }
            ],
            "src/app/@core/graphql/classroom.graphql.ts": [
                {
                    "name": "CLASSROOM_SUMMARY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/@core/graphql/classroom.graphql.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    fragment classroomSummary on Classroom {\n        id\n        students {\n            ...classroomStudent\n            enrollments {\n                ...enrollmentSummary\n            }\n        }\n        studyGroups {\n            ...studyGroupSummary\n        }\n        classInProgress {\n            ...classRecord\n        }\n        studentEnrollments {\n            ...enrollmentSummary\n        }\n    }\n    ${CLASSROOM_STUDENT}\n    ${ENROLLMENT_SUMMARY}\n    ${STUDY_GROUP_SUMMARY}\n    ${CLASS_RECORD}\n`"
                }
            ],
            "src/app/authentication/components/register-form/register-form.component.ts": [
                {
                    "name": "confirmPasswordValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/authentication/components/register-form/register-form.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn",
                    "defaultValue": "(control: AbstractControl): ValidationErrors | null => {\n    if (!control.parent || !control) {\n        return null;\n    }\n\n    const password = control.parent.get('password');\n    const passwordConfirm = control.parent.get('passwordConfirm');\n\n    if (!password || !passwordConfirm) {\n        return null;\n    }\n\n    if (passwordConfirm.value === '') {\n        return null;\n    }\n\n    if (password.value === passwordConfirm.value) {\n        return null;\n    }\n\n    return { passwordsNotMatching: true };\n}",
                    "rawdescription": "Confirm password validator",
                    "description": "<p>Confirm password validator</p>\n"
                }
            ],
            "src/app/authentication/components/reset-password-form/reset-password-form.component.ts": [
                {
                    "name": "confirmPasswordValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/authentication/components/reset-password-form/reset-password-form.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn",
                    "defaultValue": "(control: AbstractControl): ValidationErrors | null => {\n    if (!control.parent || !control) {\n        return null;\n    }\n\n    const password = control.parent.get('password');\n    const passwordConfirm = control.parent.get('passwordConfirm');\n\n    if (!password || !passwordConfirm) {\n        return null;\n    }\n\n    if (passwordConfirm.value === '') {\n        return null;\n    }\n\n    if (password.value === passwordConfirm.value) {\n        return null;\n    }\n\n    return { passwordsNotMatching: true };\n}",
                    "rawdescription": "Confirm password validator",
                    "description": "<p>Confirm password validator</p>\n"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                }
            ],
            "src/app/authentication/pages/subscription-active-page/subscription-active-page.component.ts": [
                {
                    "name": "COUNTDOWN_SECONDS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/authentication/pages/subscription-active-page/subscription-active-page.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "5"
                }
            ],
            "src/app/@core/core.module.ts": [
                {
                    "name": "createApollo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/@core/core.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(httpLink: HttpLink, matSnackBar: MatSnackBar) => {\n    // Get the authentication token from local storage if it exists\n    const token = localStorage.getItem('token');\n    const auth = setContext((operation, context) => ({\n        headers: {\n            Authorization: `Bearer ${token}`,\n        },\n    }));\n\n    const errorLink = onError(({ graphQLErrors, networkError }) => {\n        let errorMessage: string;\n\n        if (graphQLErrors) {\n            errorMessage = graphQLErrors.map(({ message }) => message).join(' \\n');\n        }\n\n        if (networkError) {\n            if (errorMessage) {\n                errorMessage += ` ${networkError.message}`;\n            } else {\n                errorMessage = networkError.message;\n            }\n        }\n\n        if (errorMessage) {\n            const panelClass = ['snackbar-panel'];\n            const buttonLabel = 'dismiss';\n\n            if (errorMessage.length <= 35) {\n                panelClass.push('snackbar-panel--one-line');\n            } else {\n                panelClass.push('snackbar-panel--two-line');\n            }\n\n            matSnackBar.open(errorMessage, buttonLabel, {\n                duration: 0,\n                panelClass,\n            });\n        }\n    });\n\n    return {\n        link: errorLink.concat(httpLink.create({ uri, includeExtensions: true })),\n        // https://www.apollographql.com/docs/react/data/fragments/#using-fragments-with-unions-and-interfaces\n        cache: new InMemoryCache({\n            possibleTypes: {\n                ClassRecord: ['EnrollmentClassRecord', 'StudyGroupClassRecord'],\n            },\n        }),\n    };\n}"
                },
                {
                    "name": "uri",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/@core/core.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`${environment.apiUrl}/graphql`"
                }
            ],
            "src/app/@shared/components/calendar/schedule-input/schedule-input.component.ts": [
                {
                    "name": "DAYS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/@shared/components/calendar/schedule-input/schedule-input.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']"
                }
            ],
            "src/app/@core/graphql/enrollment.graphql.ts": [
                {
                    "name": "ENROLLMENT_DETAIL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/@core/graphql/enrollment.graphql.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    fragment enrollmentDetail on Enrollment {\n        id\n        sourceType\n        status\n        studyGroup {\n            ...studyGroupSummary\n        }\n        level {\n            ...levelSummary\n        }\n        student {\n            ...userContact\n        }\n        invitation {\n            ...invitationSummary\n        }\n        events {\n            ...eventSummary\n        }\n        classInProgress {\n            ...classRecord\n        }\n        lastLesson {\n            ...classRecord\n        }\n        nextLesson {\n            ...lessonSummary\n        }\n        nextEventOccurrence {\n            ...eventOccurrenceSummary\n        }\n        lessons {\n            ...lessonSummary\n        }\n        classRecords {\n            ...classRecord\n        }\n    }\n    ${CLASS_RECORD}\n    ${LESSON_SUMMARY}\n    ${INVITATION_SUMMARY}\n    ${USER_CONTACT}\n    ${EVENT_SUMMARY}\n    ${EVENT_OCCURRENCE_SUMMARY}\n    ${STUDY_GROUP_SUMMARY}\n`"
                },
                {
                    "name": "ENROLLMENT_SUMMARY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/@core/graphql/enrollment.graphql.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    fragment enrollmentSummary on Enrollment {\n        id\n        sourceType\n        status\n        nextLesson {\n            id\n        }\n        teacher {\n            id\n            firstName\n            familyName\n        }\n        student {\n            ...userContact\n        }\n        invitation {\n            id\n        }\n        studyGroup {\n            ...studyGroupSummary\n        }\n        level {\n            ...levelSummary\n        }\n        events {\n            ...eventSummary\n        }\n        lessons {\n            id\n        }\n    }\n    ${LEVEL_SUMMARY}\n    ${STUDY_GROUP_SUMMARY}\n    ${USER_CONTACT}\n    ${EVENT_SUMMARY}\n`"
                }
            ],
            "src/environments/environment.hmr.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.hmr.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    production: false,\n    hmr: true,\n    stripePublicKey:\n        'pk_test_51InHpCC2dPDUJp1aemgah94n0t8P4DQyyli5i9vvY1STi9mG6oQ5vKPWAHTwPWw8Uob3N4cPcO7Zf0Z6a3C91Zfd00LXJoBlGw',\n}"
                }
            ],
            "src/environments/environment.non-production.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.non-production.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    production: true,\n    hmr: false,\n    apiUrl: 'https://eslo-backend-ihqesfbela-rj.a.run.app',\n    stripePublicKey:\n        'pk_test_51InHpCC2dPDUJp1aemgah94n0t8P4DQyyli5i9vvY1STi9mG6oQ5vKPWAHTwPWw8Uob3N4cPcO7Zf0Z6a3C91Zfd00LXJoBlGw',\n}"
                }
            ],
            "src/environments/environment.production.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.production.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    production: true,\n    hmr: false,\n    apiUrl: 'https://eslo-backend-efytsnifsq-rj.a.run.app',\n    stripePublicKey:\n        'pk_live_51InHpCC2dPDUJp1a0q59uicUEZCLqy2BhKS8JovtIAH0hMKhFJ2SazxljhyrOrWieyEdCviFbEKUzjLk5ack6HrI00BAn4u75N',\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    production: false,\n    hmr: false,\n    apiUrl: 'http://localhost:3000',\n    // apiUrl: 'http://192.168.0.7:3000',\n    stripePublicKey:\n        'pk_test_51InHpCC2dPDUJp1aemgah94n0t8P4DQyyli5i9vvY1STi9mG6oQ5vKPWAHTwPWw8Uob3N4cPcO7Zf0Z6a3C91Zfd00LXJoBlGw',\n}"
                }
            ],
            "src/app/@core/graphql/events.graphql.ts": [
                {
                    "name": "EVENT_OCCURRENCE_SUMMARY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/@core/graphql/events.graphql.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    fragment eventOccurrenceSummary on EventOccurrence {\n        id\n        recurringEventId\n        originalStartDateTime\n        originalStartTimeZone\n        sourceType\n        sourceId\n        status\n        title\n        description\n        availabilityType\n        startDateTime\n        startTimeZone\n        endDateTime\n        endTimeZone\n        sendNotifications\n        visibility\n    }\n`"
                },
                {
                    "name": "EVENT_SUMMARY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/@core/graphql/events.graphql.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    fragment eventSummary on Event {\n        id\n        title\n        description\n        availabilityType\n        sourceType\n        sourceId\n        status\n        startDateTime\n        startTimeZone\n        endDateTime\n        endTimeZone\n        recurrence\n        visibility\n        sendNotifications\n        startedAt\n        completedAt\n        eventAttendees {\n            id\n            attendee {\n                id\n                firstName\n            }\n        }\n    }\n`"
                }
            ],
            "src/hmr.ts": [
                {
                    "name": "hmrBootstrap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/hmr.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(module: any, bootstrap: () => Promise<NgModuleRef<any>>) => {\n    let ngModule: NgModuleRef<any>;\n    module.hot.accept();\n    bootstrap().then((mod) => (ngModule = mod));\n    module.hot.dispose(() => {\n        const appRef: ApplicationRef = ngModule.injector.get(ApplicationRef);\n        const elements = appRef.components.map((c) => c.location.nativeElement);\n        const makeVisible = createNewHosts(elements);\n        ngModule.destroy();\n        makeVisible();\n    });\n}"
                }
            ],
            "src/app/@core/interceptors/index.ts": [
                {
                    "name": "httpInterceptorProviders",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/@core/interceptors/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[{ provide: HTTP_INTERCEPTORS, useClass: HttpRequestInterceptor, multi: true }]"
                }
            ],
            "src/app/@core/graphql/invitation.graphql.ts": [
                {
                    "name": "INVITATION_SUMMARY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/@core/graphql/invitation.graphql.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    fragment invitationSummary on Invitation {\n        id\n        inviteeEmail\n        inviteeFirstName\n        inviteeSurname\n    }\n`"
                }
            ],
            "src/app/@core/graphql/invoice.graphql.ts": [
                {
                    "name": "INVOICE_DETAILS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/@core/graphql/invoice.graphql.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    fragment invoiceDetails on InvoicePreview {\n        id\n        processedAt\n        dueDate\n        invoicePeriodFrom\n        invoicePeriodTo\n        companyDetails {\n            id\n            name\n            address\n            phone\n            email\n            webSite\n        }\n        customerDetails {\n            id\n            name\n            address\n            phone\n            email\n        }\n        balanceSummary {\n            taxAmount\n            totalAmount\n            discountAmount\n        }\n        invoiceItems {\n            id\n            invoiceLineNumber\n            productId\n            productName\n            productDescription\n            balance {\n                quantity\n                unitPrice\n                taxAmount\n                totalAmount\n                discountAmount\n            }\n        }\n    }\n`"
                }
            ],
            "src/app/@core/graphql/lesson.graphql.ts": [
                {
                    "name": "LESSON_DETAILS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/@core/graphql/lesson.graphql.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    fragment lessonDetails on Lesson {\n        id\n        title\n        category\n        subject\n        slug\n        levelOrder\n        lessonMaterial {\n            lectureScript {\n                order\n                media {\n                    id\n                    mimeType\n                    rootUri\n                }\n            }\n            studentBook {\n                order\n                media {\n                    id\n                    mimeType\n                    rootUri\n                }\n            }\n            audio {\n                order\n                media {\n                    id\n                    mimeType\n                    rootUri\n                }\n            }\n            activities {\n                order\n                title\n                activitySlides {\n                    order\n                    media {\n                        id\n                        mimeType\n                        rootUri\n                    }\n                }\n            }\n        }\n    }\n`"
                },
                {
                    "name": "LESSON_SUMMARY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/@core/graphql/lesson.graphql.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    fragment lessonSummary on Lesson {\n        id\n        code\n        title\n        category\n        subject\n        slug\n        levelOrder\n    }\n`"
                }
            ],
            "src/app/@core/graphql/level.graphql.ts": [
                {
                    "name": "LEVEL_SUMMARY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/@core/graphql/level.graphql.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    fragment levelSummary on Level {\n        id\n        name\n        code\n        label\n        layoutSettings {\n            svgImageUrl\n            icon\n            primaryColour\n            secondaryColour\n        }\n        module {\n            id\n            program {\n                id\n                code\n                label\n                name\n                icon\n                label\n            }\n        }\n    }\n`"
                }
            ],
            "src/stories/Navbar.stories.ts": [
                {
                    "name": "Links",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Navbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Navbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<NavigationBarComponent>",
                    "defaultValue": "(args: NavigationBarComponent) => ({\n    component: NavigationBarComponent,\n    props: args,\n})"
                }
            ],
            "src/app/@shared/shared.module.ts": [
                {
                    "name": "maskConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/@shared/shared.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<IConfig>",
                    "defaultValue": "{\n    validation: true,\n}"
                }
            ],
            "src/app/authentication/authentication.module.ts": [
                {
                    "name": "maskConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/authentication/authentication.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<IConfig>",
                    "defaultValue": "{\n    validation: true,\n}"
                },
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/authentication/authentication.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    { path: '', pathMatch: 'full', redirectTo: 'login' },\n    {\n        path: 'register',\n        component: RegisterPageComponent,\n    },\n    {\n        path: 'create-account',\n        component: CreateAccountPageComponent,\n    },\n\n    {\n        path: 'select-plan',\n        component: SelectPlanPageComponent,\n    },\n    {\n        path: 'subscription-canceled',\n        component: SelectPlanPageComponent,\n    },\n    {\n        path: 'subscription-active',\n        component: SubscriptionActivePageComponent,\n    },\n\n    {\n        path: 'login',\n        component: LoginPageComponent,\n    },\n    {\n        path: 'forgot-password',\n        component: ForgotPasswordPageComponent,\n    },\n    {\n        path: 'reset-password/:resetPasswordToken',\n        component: ResetPasswordPageComponent,\n    },\n    {\n        path: 'confirm-email',\n        component: ConfirmEmailPageComponent,\n    },\n]"
                }
            ],
            "src/app/@core/graphql/onboarding.graphql.ts": [
                {
                    "name": "ONBOARDING_DETAIL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/@core/graphql/onboarding.graphql.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    fragment onboardingDetail on Form {\n        id\n    }\n`"
                }
            ],
            "src/app/@core/graphql/product.graphql.ts": [
                {
                    "name": "PRODUCT_DETAILS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/@core/graphql/product.graphql.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    fragment productDetails on Product {\n        id\n        name\n        slug\n        description\n        subcategory {\n            code\n            name\n            description\n            category {\n                code\n                name\n                description\n            }\n        }\n        prices {\n            id\n            name\n            slug\n            pricePeriod {\n                interval\n                intervalCount\n            }\n            description\n            taxAmount\n            unitTotalAmount\n            currencyIsoCode\n            type\n        }\n    }\n`"
                }
            ],
            "src/app/@core/graphql/program.graphql.ts": [
                {
                    "name": "PROGRAM_DETAILS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/@core/graphql/program.graphql.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    fragment programDetails on Program {\n        id\n        code\n        name\n        icon\n        label\n        description\n        modules {\n            id\n            code\n            name\n            programOrder\n            description\n            levels {\n                id\n                code\n                name\n                label\n                moduleOrder\n                description\n                lessons {\n                    id\n                    title\n                    category\n                    subject\n                    slug\n                    levelOrder\n                }\n            }\n        }\n    }\n`"
                },
                {
                    "name": "PROGRAM_SUMMARY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/@core/graphql/program.graphql.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    fragment programSummary on Program {\n        id\n        code\n        name\n        icon\n        label\n        description\n        modules {\n            id\n            code\n            name\n            programOrder\n            description\n            levels {\n                id\n                code\n                name\n                label\n                moduleOrder\n                description\n            }\n        }\n    }\n`"
                }
            ],
            "src/app/calendar/calendar.module.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/calendar/calendar.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    {\n        path: '',\n        component: CalendarPageComponent,\n        children: [\n            {\n                path: 'month',\n                component: MonthPageComponent,\n            },\n            {\n                path: 'availability',\n                component: AvailabilityPageComponent,\n            },\n        ],\n    },\n    {\n        path: '**',\n        redirectTo: '',\n    },\n]"
                }
            ],
            "src/app/classroom/classroom.module.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/classroom/classroom.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    { path: '', pathMatch: 'full', redirectTo: 'students' },\n    {\n        path: 'students',\n        component: ClassListComponent,\n    },\n    {\n        path: 'enrollments/:enrollmentId',\n        component: EnrollmentDetailPageComponent,\n    },\n    {\n        path: 'groups',\n        component: GroupsPageComponent,\n    },\n    {\n        path: 'groups/:groupId/schedule',\n        component: GroupSchedulePageComponent,\n    },\n    {\n        path: 'groups/:groupId/members',\n        component: GroupMembersPageComponent,\n    },\n]"
                }
            ],
            "src/app/enrolled/enrolled.module.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/enrolled/enrolled.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    {\n        path: 'enrollment/:enrollmentId',\n        component: StudentEnrollmentPageComponent,\n    },\n    {\n        path: 'student-book/:lessonId',\n        component: StudentBookPageComponent,\n    },\n    {\n        path: '',\n        component: EnrolledPageComponent,\n        children: [\n            { path: '', pathMatch: 'full', redirectTo: 'active' },\n            {\n                path: 'active',\n                component: ActiveEnrollmentsPageComponent,\n            },\n            {\n                path: 'archive',\n                component: ArchiveEnrollmentsPageComponent,\n            },\n        ],\n    },\n]"
                }
            ],
            "src/app/dashboard/dashboard.module.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/dashboard.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    {\n        path: '',\n        component: DashboardPageComponent,\n    },\n]"
                }
            ],
            "src/app/lms/lms.module.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/lms/lms.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    { path: '', pathMatch: 'full', redirectTo: 'courses' },\n    {\n        path: 'courses',\n        component: CoursesPageComponent,\n    },\n    {\n        path: 'courses/:courseId',\n        component: CourseDetailPageComponent,\n    },\n    {\n        path: 'programs/:programId',\n        component: CourseDetailComponent,\n    },\n    {\n        path: 'lessons/:lessonId',\n        component: LessonDetailComponent,\n    },\n    {\n        path: 'lessons/:lessonId/script',\n        component: LessonScriptPageComponent,\n    },\n    {\n        path: 'lessons/:lessonId/class',\n        component: LessonClassPageComponent,\n    },\n]"
                }
            ],
            "src/app/script-stand-alone/script-stand-alone.module.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/script-stand-alone/script-stand-alone.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    {\n        path: '',\n        component: ScriptStandAlonePageComponent,\n    },\n]"
                }
            ],
            "src/app/main/invitation/message/message.module.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/main/invitation/message/message.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    {\n        path: 'message/:status',\n        component: MessageComponent,\n    },\n]"
                }
            ],
            "src/app/main/invitation/transfer/transfer.module.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/main/invitation/transfer/transfer.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    {\n        path: 'transfer/:invitationToken',\n        component: TransferComponent,\n        resolve: {\n            invitation: TransferService,\n        },\n    },\n]"
                }
            ],
            "src/app/main/invitation/welcome/welcome.module.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/main/invitation/welcome/welcome.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    {\n        path: 'welcome/:invitationToken',\n        component: WelcomeComponent,\n        resolve: {\n            invitation: WelcomeService,\n        },\n    },\n]"
                }
            ],
            "src/app/@core/graphql/study-group.graphql.ts": [
                {
                    "name": "STUDY_GROUP_DETAILS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/@core/graphql/study-group.graphql.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    fragment studyGroupDetails on StudyGroup {\n        id\n        name\n        level {\n            ...levelSummary\n        }\n        studyGroupTeachers {\n            teacher {\n                firstName\n                familyName\n            }\n        }\n        lastLesson {\n            id\n            lesson {\n                id\n            }\n        }\n        nextLesson {\n            id\n            code\n            title\n            category\n            subject\n            slug\n            levelOrder\n            level {\n                id\n            }\n        }\n        lessons {\n            id\n            code\n            title\n            category\n            subject\n            slug\n            levelOrder\n        }\n        enrollments {\n            id\n            status\n            sourceType\n            studyGroup {\n                id\n            }\n            level {\n                id\n                label\n                module {\n                    program {\n                        name\n                        label\n                    }\n                }\n            }\n            nextLesson {\n                id\n            }\n            student {\n                id\n                firstName\n                familyName\n                displayName\n            }\n        }\n        studyGroupClassRecords {\n            id\n            teacherNotes\n            status\n            startedAt\n            completedAt\n            lessonStartedAt\n            lessonEndedAt\n            revertClassStatus\n            lesson {\n                id\n            }\n            studyGroupClassAttendees {\n                attended\n                student {\n                    student {\n                        firstName\n                        familyName\n                    }\n                }\n            }\n        }\n        events {\n            ...eventSummary\n        }\n    }\n    ${LEVEL_SUMMARY}\n    ${EVENT_SUMMARY}\n`"
                },
                {
                    "name": "STUDY_GROUP_SUMMARY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/@core/graphql/study-group.graphql.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    fragment studyGroupSummary on StudyGroup {\n        id\n        name\n        lessons {\n            id\n        }\n        level {\n            ...levelSummary\n        }\n        events {\n            ...eventSummary\n        }\n        studyGroupClassRecords {\n            id\n            status\n            lesson {\n                id\n            }\n        }\n        studyGroupTeachers {\n            teacher {\n                firstName\n                familyName\n            }\n        }\n        nextLesson {\n            id\n            title\n            category\n            subject\n        }\n    }\n    ${LEVEL_SUMMARY}\n    ${EVENT_SUMMARY}\n`"
                }
            ],
            "src/app/@core/graphql/subscription.graphql.ts": [
                {
                    "name": "SUBSCRIPTION_SUMMARY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/@core/graphql/subscription.graphql.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    fragment subscriptionSummary on Subscription {\n        id\n        customerId\n        paymentProviderId\n        paymentProviderCheckoutId\n        status\n    }\n`"
                }
            ],
            "src/app/@core/graphql/user-profile.graphql.ts": [
                {
                    "name": "USER_CONTACT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/@core/graphql/user-profile.graphql.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    fragment userContact on User {\n        id\n        firstName\n        familyName\n        displayName\n        primaryEmail\n    }\n`"
                },
                {
                    "name": "USER_PROFILE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/@core/graphql/user-profile.graphql.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "gql`\n    fragment userProfile on User {\n        id\n        firstName\n        familyName\n        displayName\n        primaryEmail\n        dateOfBirth\n        profileComplete\n        userIdentificationList {\n            id\n            countryISO\n            category\n            code\n            attachementUrl\n        }\n        userAddresses {\n            id\n            addressType\n            postalCode\n            street\n            streetNumber\n            streetComplement\n            district\n            city\n            state\n            countryISO\n            latitude\n            longitude\n        }\n        userPhoneNumbers {\n            id\n            countryISO\n            category\n            code\n            rawFormat\n            nationalFormat\n            internationalFormat\n        }\n    }\n`"
                }
            ],
            "src/app/main/user-account/user-account.module.ts": [
                {
                    "name": "userAccountRoutes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/main/user-account/user-account.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    {\n        path: 'confirm-email/:registrationToken',\n        component: ConfirmRegistrationComponent,\n    },\n]"
                }
            ],
            "src/app/classroom/components/invitation-form/invitation-form.component.ts": [
                {
                    "name": "ValidateEvents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/classroom/components/invitation-form/invitation-form.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn",
                    "defaultValue": "(eventControls: FormArray): ValidationErrors | null => {\n    let validEvents = true;\n    if (!eventControls?.controls) {\n        validEvents = false;\n    } else {\n        eventControls.controls.forEach((control) => {\n            try {\n                const event: Event = control.value;\n                if (!(event && event.recurrence && event.startDateTime && event.endDateTime)) {\n                    validEvents = false;\n                } else {\n                    const eventRecurrence = RRule.fromString(event.recurrence);\n                    const eventStart = new Date(parseInt(event.startDateTime, 10));\n                    const eventEnd = new Date(parseInt(event.endDateTime, 10));\n\n                    if (\n                        !(eventRecurrence.isFullyConvertibleToText() && eventStart && eventEnd && eventEnd > eventStart)\n                    ) {\n                        validEvents = false;\n                    }\n                }\n            } catch (error) {\n                return { invalidEvent: true };\n            }\n        });\n    }\n\n    if (validEvents) {\n        return null;\n    } else {\n        return { invalidEvent: true };\n    }\n}",
                    "rawdescription": "Event validation",
                    "description": "<p>Event validation</p>\n"
                }
            ],
            "src/app/calendar/edit-event-instance/edit-event-instance.component.ts": [
                {
                    "name": "ValidateEventTimes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/calendar/edit-event-instance/edit-event-instance.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn",
                    "defaultValue": "(eventFormGroup: FormGroup): ValidationErrors | null => {\n    let validEventTime = true;\n    if (!eventFormGroup?.controls) {\n        validEventTime = false;\n    } else {\n        const startDateControl = eventFormGroup.get('startDate');\n        const startDateValue = new Date(startDateControl.value);\n\n        const endDateControl = eventFormGroup.get('endDate');\n        const endDateValue = new Date(endDateControl.value);\n\n        if (endDateValue <= startDateValue) {\n            validEventTime = false;\n        }\n    }\n\n    if (validEventTime) {\n        return null;\n    } else {\n        return { invalidEventTime: true };\n    }\n}",
                    "rawdescription": "Event validation",
                    "description": "<p>Event validation</p>\n"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/@shared/components/enrollment-card/enrollment-card.component.ts": [
                {
                    "name": "ENROLLMENT_CARD_TYPES",
                    "childs": [
                        {
                            "name": "ENROLLMENT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ENROLLMENT"
                        },
                        {
                            "name": "SUBSCRIPTION_RENEWAL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SUBSCRIPTION_RENEWAL"
                        },
                        {
                            "name": "NEXT_CLASS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "NEXT_CLASS"
                        },
                        {
                            "name": "CURRENT_HOMEWORK",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CURRENT_HOMEWORK"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/@shared/components/enrollment-card/enrollment-card.component.ts"
                }
            ],
            "src/app/@core/models/enrollment.model.ts": [
                {
                    "name": "ENROLLMENT_STATUS",
                    "childs": [
                        {
                            "name": "ACTIVE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ACTIVE"
                        },
                        {
                            "name": "PENDING",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "PENDING"
                        },
                        {
                            "name": "CONFIRMED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CONFIRMED"
                        },
                        {
                            "name": "CANCELLED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CANCELLED"
                        },
                        {
                            "name": "DELETED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DELETED"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/@core/models/enrollment.model.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/@core/models/class-record.model.ts": [
                {
                    "name": "ClassRecordType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "EnrollmentClassRecord | StudyGroupClassRecord",
                    "file": "src/app/@core/models/class-record.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/@core/models/product.model.ts": [
                {
                    "name": "IntervalType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"day\" | \"month\" | \"week\" | \"year\"",
                    "file": "src/app/@core/models/product.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/@core/models/enrollment.model.ts": [
                {
                    "name": "SourceType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"ENROLLMENT\" | \"STUDY_GROUP\"",
                    "file": "src/app/@core/models/enrollment.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FusePage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/auth/guards/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/auth/guards/no-auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "NoAuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/auth/guards/profile.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "ProfileGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/auth/guards/roles.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "RolesGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/auth/guards/subscription.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "SubscriptionGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/auth/interceptors/auth-error-handler.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthErrorHandler",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/auth/interceptors/jwt.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "JwtInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/components/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressBarComponent",
                "coveragePercent": 33,
                "coverageCount": "3/9",
                "status": "medium"
            },
            {
                "filePath": "src/app/@core/components/progress-bar/progress-bar.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProgressBarService",
                "coveragePercent": 33,
                "coverageCount": "4/12",
                "status": "medium"
            },
            {
                "filePath": "src/app/@core/core.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createApollo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/core.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "uri",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/graphql/class-record.graphql.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CLASS_RECORD",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/graphql/class-record.graphql.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CLASS_RECORD_SUMMARY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/graphql/classroom.graphql.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CLASSROOM_SUMMARY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/graphql/enrollment.graphql.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ENROLLMENT_DETAIL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/graphql/enrollment.graphql.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ENROLLMENT_SUMMARY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/graphql/events.graphql.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EVENT_OCCURRENCE_SUMMARY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/graphql/events.graphql.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EVENT_SUMMARY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/graphql/invitation.graphql.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INVITATION_SUMMARY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/graphql/invoice.graphql.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INVOICE_DETAILS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/graphql/lesson.graphql.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LESSON_DETAILS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/graphql/lesson.graphql.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LESSON_SUMMARY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/graphql/level.graphql.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LEVEL_SUMMARY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/graphql/onboarding.graphql.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ONBOARDING_DETAIL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/graphql/product.graphql.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PRODUCT_DETAILS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/graphql/program.graphql.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PROGRAM_DETAILS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/graphql/program.graphql.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PROGRAM_SUMMARY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/graphql/student.graphql.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CLASSROOM_STUDENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/graphql/study-group.graphql.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STUDY_GROUP_DETAILS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/graphql/study-group.graphql.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STUDY_GROUP_SUMMARY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/graphql/subscription.graphql.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SUBSCRIPTION_SUMMARY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/graphql/user-profile.graphql.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "USER_CONTACT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/graphql/user-profile.graphql.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "USER_PROFILE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/interceptors/http-request.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "HttpRequestInterceptor",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/@core/interceptors/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "httpInterceptorProviders",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/address.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Address",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/class-record.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClassRecord",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/class-record.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClassRecordInterface",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/class-record.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClassSession",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/class-record.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClassSessionAttendee",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/class-record.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EnrollmentClassRecord",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/class-record.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LessonRecordList",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/class-record.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StudyGroupClassRecord",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/enrollment-invitation.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateEnrollmentInput",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/enrollment-invitation.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EnrollmentInvitationInput",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/enrollment.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Enrollment",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/enrollment.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StudyGroup",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/event-occurrence.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EventOccurrence",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/event-occurrence.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IEventOccurrenceInput",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/event.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Event",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/invitation.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreatePasswordStudentInfo",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/invitation.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Invitation",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/invoice.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Balance",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/invoice.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BalanceSummary",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/invoice.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Details",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/invoice.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Invoice",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/invoice.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InvoiceItem",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/lesson-material.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Activity",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/lesson-material.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LessonMaterial",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/lesson-material.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MediaAssociation",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/lesson.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Lesson",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/level.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Level",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/level.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LevelLayoutSettings",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/media.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Media",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/module.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Module",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/product.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IProductFilters",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/product.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PricePeriod",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/product.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Product",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/product.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductCategory",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/product.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductPrice",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/product.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductSubcategory",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/program.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Program",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/subscription.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Subscription",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/subscription.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SubscriptionItem",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/toolbar-settings.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ToolbarSettings",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/user-profile.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserAddress",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/user-profile.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserAuthDetails",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/user-profile.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserIdentification",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/user-profile.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserPhoneNumber",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/models/user-profile.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserProfile",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/calendar.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CalendarService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/calendar.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IChangeSpecificEventBySourceMutation",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/calendar.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IEventsOrganised",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/calendar.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMyCalendar",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/calendar.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMyEvents",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/classroom.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClassroomService",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/classroom.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IActivateEnrollmentMutation",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/classroom.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAddStudentToGroupInput",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/classroom.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAddStudentToGroupMutation",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/classroom.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICancelEnrollmentMutation",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/classroom.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IChangeEnrollmentScheduleMutation",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/classroom.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IChangeScheduleInput",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/classroom.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IClassroom",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/classroom.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IClassroomFiltersInput",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/classroom.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IClassroomQuery",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/classroom.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICreateEnrollmentMutation",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/classroom.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICreateStudyGroupMutation",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/classroom.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IEnrollment",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/classroom.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFindGroupById",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/classroom.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFinishClassInput",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/classroom.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFinishClassMutation",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/classroom.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IGetEnrollments",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/classroom.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRemoveGroupInput",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/classroom.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRemoveGroupMutation",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/classroom.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRevertFinishedClassStatusInput",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/classroom.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRevertFinishedClassStatusMutation",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/classroom.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRevertLessonStatusInput",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/classroom.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRevertLessonStatusMutation",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/classroom.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IStartClassInput",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/classroom.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IStartClassMutation",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/classroom.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITransferEnrollmentMutation",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/classroom.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUpdateStudyGroupInput",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/classroom.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUpdateStudyGroupMutation",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/classroom.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Student",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/classroom.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StudyGroupAttendeInput",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/dashboard.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DashboardService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/dashboard.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDashboardFilters",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/dashboard.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IStudent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/dashboard.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IStudentDashboard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/dashboard.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IStudentDashboardQuery",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/dashboard.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITeacherDashboard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/dashboard.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITeacherDashboardQuery",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/live-chat.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LiveChatService",
                "coveragePercent": 40,
                "coverageCount": "4/10",
                "status": "medium"
            },
            {
                "filePath": "src/app/@core/services/live-chat.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILiveChatTokenResult",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/lms.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LMSService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/lms.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILessonResult",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/lms.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IProgramResult",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/lms.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IProgramsResult",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/onboarding.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OnboardingService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/postal-code.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PostalCodeService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/subscription.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SubscriptionService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/subscription.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICheckoutItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/subscription.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICreateSubscriptionCheckoutInput",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/subscription.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICreateSubscriptionCheckoutMutation",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/subscription.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IGetInvoicePreview",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/subscription.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IGetProducts",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/theme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/user-session.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserSessionService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/user.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IChangePassword",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/user.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILoginResult",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/user.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "INewUser",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/user.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUpdateMyProfileResult",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@core/services/user.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUserResult",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/audio-control-card/audio-control-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AudioControlCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/audio-control-card/audio.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AudioService",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/audio-control-card/audio.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StreamState",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/auth-layout/auth-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/avatar/avatar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AvatarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/back-button/back-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BackButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/calendar/schedule-input/schedule-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScheduleInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/calendar/schedule-input/schedule-input.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DAYS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/calendar/schedule-input/validators/index.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EventHasNoDaySelectedValidator",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/calendar/schedule-input/validators/index.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EventHasScheduleConflictValidator",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/calendar/schedule-input/validators/index.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EventHasStartAndEndTimeConflictValidator",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/calendar/schedule-input/validators/index.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EventsWithSameDateValidator",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/calendar/weekly-availability/weekly-availability.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WeeklyAvailabilityComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/class-record-list/class-record-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClassRecordListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/class-record-timer/class-record-timer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClassRecordTimerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/custom-stepper/custom-stepper.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomStepperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/enrollment-card/enrollment-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EnrollmentCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/eslo-letter-logo/eslo-letter-logo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EsloLetterLogoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/eslo-logo/eslo-logo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EsloLogoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/forms/address-input/address-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddressInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/forms/address-input/address-input.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PostalCode",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/modal-confirmation/modal-confirmation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalConfirmationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/modal-confirmation/modal-confirmation.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ModalConfirmationDataOptions",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/navigation-tabs/navigation-tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationTabsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/navigation-tabs/navigation-tabs.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "INavigationTabsConfig",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/navigation-tabs/navigation-tabs.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "INavigationTabsPath",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/pill-tabs/pill-tab/pill-tab.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PillTabComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/pill-tabs/pill-tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PillTabsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/svg-icon/svg-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SvgIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/top-bar-title/top-bar-title.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TopBarTitleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/components/user-button/user-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/directives/attach.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AttachDirective",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/directives/disable-control.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DisableControlDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/directives/target.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TargetDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/pipes/convert-time.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ConvertTimePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/pipes/format-next-class-date.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "FormatNextClassDatePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/pipes/interval-to-label.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ConvertIntervalLabel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/pipes/is-last-class-lesson-done.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "IsLastClassLessonDonePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/pipes/minutes-to-hours.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "MinutesToHoursPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/pipes/parse-completed-lessons.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ParseCompletedLessonsPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/pipes/safe.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SafePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/pipes/utc-to-date.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "UTCToDatePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/services/portal.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PortalService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/@shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "maskConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app-shell/app-shell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppShellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/authentication/authentication.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "maskConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/authentication/authentication.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/authentication/components/create-account-form/create-account-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateAccountFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/authentication/components/forgot-password-form/forgot-password-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ForgotPasswordFormComponent",
                "coveragePercent": 33,
                "coverageCount": "2/6",
                "status": "medium"
            },
            {
                "filePath": "src/app/authentication/components/login-form/login-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginFormComponent",
                "coveragePercent": 30,
                "coverageCount": "3/10",
                "status": "medium"
            },
            {
                "filePath": "src/app/authentication/components/plan-card/plan-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlanCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/authentication/components/plans-list/plans-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlansListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/authentication/components/register-form/register-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterFormComponent",
                "coveragePercent": 11,
                "coverageCount": "2/17",
                "status": "low"
            },
            {
                "filePath": "src/app/authentication/components/register-form/register-form.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "confirmPasswordValidator",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/authentication/components/reset-password-form/reset-password-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResetPasswordFormComponent",
                "coveragePercent": 25,
                "coverageCount": "2/8",
                "status": "low"
            },
            {
                "filePath": "src/app/authentication/components/reset-password-form/reset-password-form.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "confirmPasswordValidator",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/authentication/pages/confirm-email-page/confirm-email-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmEmailPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/authentication/pages/create-account-page/create-account-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateAccountPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/authentication/pages/forgot-password-page/forgot-password-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ForgotPasswordPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/authentication/pages/login-page/login-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/authentication/pages/register-page/register-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/authentication/pages/reset-password-page/reset-password-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResetPasswordPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/authentication/pages/select-plan-page/select-plan-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectPlanPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/authentication/pages/subscription-active-page/subscription-active-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SubscriptionActivePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/authentication/pages/subscription-active-page/subscription-active-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COUNTDOWN_SECONDS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/calendar/calendar-mobile/calendar-mobile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CalendarMobileComponent",
                "coveragePercent": 17,
                "coverageCount": "3/17",
                "status": "low"
            },
            {
                "filePath": "src/app/calendar/calendar-mobile/custom-date-formatter-2.provider.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CustomDate2Formatter",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/calendar/calendar.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/calendar/calendar/calendar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CalendarComponent",
                "coveragePercent": 18,
                "coverageCount": "3/16",
                "status": "low"
            },
            {
                "filePath": "src/app/calendar/calendar/custom-date-formatter.provider.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CustomDateFormatter",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/calendar/components/edit-event-bottom-sheet/edit-event-bottom-sheet.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditEventBottomSheetComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/calendar/components/edit-event-dialog/edit-event-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditEventDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/calendar/components/edit-event/edit-event.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditEventComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/calendar/edit-event-instance/edit-event-instance.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditEventInstanceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/calendar/edit-event-instance/edit-event-instance.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ValidateEventTimes",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/calendar/pages/availability-page/availability-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AvailabilityPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/calendar/pages/calendar-page/calendar-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CalendarPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/calendar/pages/month-page/month-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MonthPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/calendar/pipes/format-event-time.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "FormatEventTimePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/calendar/pipes/format-event-title.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "FormatEventTitlePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/classroom/classroom.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/classroom/components/empty-list/empty-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EmptyListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/classroom/components/filters-list/filters-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FiltersListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/classroom/components/group-attendees/group-attendees.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GroupAttendeesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/classroom/components/group-empty-members/group-empty-members.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GroupEmptyMembersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/classroom/components/group-info/group-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GroupInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/classroom/components/group-members-list/group-members-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GroupMembersListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/classroom/components/group-program/group-program.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GroupProgramComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/classroom/components/groups-list/groups-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GroupsListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/classroom/components/invitation-dialog/invitation-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InvitationDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/34",
                "status": "low"
            },
            {
                "filePath": "src/app/classroom/components/invitation-dialog/invitation-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITab",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/classroom/components/invitation-events/invitation-events.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InvitationEventsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/classroom/components/invitation-form/check-events-controls.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "CheckEventsControlsPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/classroom/components/invitation-form/invitation-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InvitationFormComponent",
                "coveragePercent": 9,
                "coverageCount": "2/21",
                "status": "low"
            },
            {
                "filePath": "src/app/classroom/components/invitation-form/invitation-form.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ValidateEvents",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/classroom/components/schedule-input-dialog/schedule-input-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScheduleInputDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/classroom/components/select-group-enrollment/select-group-enrollment.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectGroupEnrollmentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/classroom/components/select-members-dialog/select-members-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectMembersDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/classroom/components/student-info/student-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StudentInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/classroom/components/student-list/student-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StudentListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/classroom/pages/class-list/class-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClassListComponent",
                "coveragePercent": 9,
                "coverageCount": "1/11",
                "status": "low"
            },
            {
                "filePath": "src/app/classroom/pages/enrollment-detail-page/enrollment-detail-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EnrollmentDetailPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/classroom/pages/group-members-page/group-members-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GroupMembersPageComponent",
                "coveragePercent": 9,
                "coverageCount": "1/11",
                "status": "low"
            },
            {
                "filePath": "src/app/classroom/pages/group-schedule-page/group-schedule-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GroupSchedulePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/classroom/pages/groups-page/groups-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GroupsPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/classroom/pages/groups-page/groups-page.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateStudyGroupInput",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/classroom/pipes/filter-enrollment-group.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "FilterEnrollmentGroupPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/components/teacher-dashboard-card/teacher-dashboard-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeacherDashboardCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/dashboard.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/pages/dashboard-page/dashboard-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/pages/dashboard-page/dashboard-page.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITeacherCardContent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/enrolled/components/student-empty-enrollments/student-empty-enrollments.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StudentEmptyEnrollmentsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/enrolled/components/student-enrollment-list/student-enrollment-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StudentEnrollmentListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/enrolled/enrolled.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/enrolled/pages/active-enrollments-page/active-enrollments-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActiveEnrollmentsPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/enrolled/pages/archive-enrollments-page/archive-enrollments-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ArchiveEnrollmentsPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/enrolled/pages/enrolled-page/enrolled-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EnrolledPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/enrolled/pages/student-book-page/student-book-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StudentBookPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/enrolled/pages/student-enrollment-page/student-enrollment-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StudentEnrollmentPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/components/navigation-bar/navigation-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/components/top-bar/top-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TopBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/services/layout.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LayoutService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/lms/components/courses-list/courses-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CoursesListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/lms/components/lesson-card/lesson-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LessonCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/lms/components/lesson-finished-dialog/lesson-finished-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LessonFinishedDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/lms/components/lessons-list/lessons-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LessonsListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/lms/components/slides-stepper/slides-stepper.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SlidesStepperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/lms/course/course-detail/course-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CourseDetailComponent",
                "coveragePercent": 31,
                "coverageCount": "5/16",
                "status": "medium"
            },
            {
                "filePath": "src/app/lms/lesson/audio-toolbar/audio-toolbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AudioToolbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/lms/lesson/lesson-card/lesson-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LessonCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/lms/lesson/lesson-detail/lesson-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LessonDetailComponent",
                "coveragePercent": 7,
                "coverageCount": "1/14",
                "status": "low"
            },
            {
                "filePath": "src/app/lms/lesson/lesson-lecture-nav-step/lesson-lecture-nav-step.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LessonLectureNavStepComponent",
                "coveragePercent": 23,
                "coverageCount": "3/13",
                "status": "low"
            },
            {
                "filePath": "src/app/lms/lesson/lesson-lecture-slides/lesson-lecture-slides.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LessonLectureSlidesComponent",
                "coveragePercent": 14,
                "coverageCount": "2/14",
                "status": "low"
            },
            {
                "filePath": "src/app/lms/lesson/lesson-list/lesson-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LessonListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/lms/lesson/lesson-media-content/lesson-media-content.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LessonMidiaContentComponent",
                "coveragePercent": 6,
                "coverageCount": "1/16",
                "status": "low"
            },
            {
                "filePath": "src/app/lms/lms.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/lms/pages/course-detail-page/course-detail-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CourseDetailPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/lms/pages/courses-page/courses-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CoursesPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/lms/pages/lesson-class-page/lesson-class-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LessonClassPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/lms/pages/lesson-script-page/lesson-script-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LessonScriptPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/lms/pipes/filter-lessons.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "FilterLessonsPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/lms/pipes/program-level-range.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ProgramLevelRangePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/main/invitation/message/message.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MessageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/main/invitation/message/message.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/main/invitation/transfer/transfer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TransferComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/main/invitation/transfer/transfer.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/main/invitation/transfer/transfer.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "TransferService",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/main/invitation/welcome/modal-terms-conditions/modal-terms-conditions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalTermsConditionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/main/invitation/welcome/welcome.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WelcomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/main/invitation/welcome/welcome.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/main/invitation/welcome/welcome.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "WelcomeService",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/main/user-account/confirm-registration/confirm-registration.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmRegistrationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/main/user-account/token-validation.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TokenValidation",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/main/user-account/user-account.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userAccountRoutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/main/user-account/user-account.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserAccountService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/main/user-account/user-account.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TokenPayload",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/profile/components/user-profile-form/user-profile-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserProfileFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/profile/pages/user-page/user-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/profile/pages/user-password-page/user-password-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserPasswordPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/profile/pages/user-password-page/user-password-page.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PasswordValidation",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/profile/pages/user-profile-page/user-profile-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserProfilePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/profile/profile.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "accountPath",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/profile/profile.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "maskConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/profile/profile.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "passwordPath",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/script-stand-alone/pages/script-stand-alone-page/script-stand-alone-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScriptStandAlonePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/script-stand-alone/script-stand-alone.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/subscription/components/invoice-preview/invoice-date.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "InvoiceDatePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/subscription/components/invoice-preview/invoice-days.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "InvoiceDaysPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/subscription/components/invoice-preview/invoice-preview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InvoicePreviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/subscription/components/invoices-list/invoices-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InvoicesListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/subscription/pages/invoice-details-page/invoice-details-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InvoiceDetailsPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/subscription/pages/invoices-page/invoices-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InvoicesPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/subscription/pages/subscription-page/subscription-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SubscriptionPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.hmr.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.non-production.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.production.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/hmr.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "hmrBootstrap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/main.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bootstrap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Buttons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "All",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Buttons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Navbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Links",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Navbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/storybook-buttons.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StorybookButtonsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}